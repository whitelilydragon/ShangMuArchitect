<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_platform_modifier_bell_hammer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>obj_delete_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create New Tiles

//Platform Tiles
tile_id_1 = tile_add(mnt_fof_hammer,0,0,128,40,x,y,surface_slopes)
tile_set_visible(tile_id_1,false)
tile_index = mnt_fof_6
tile_link = wd_fof_5
tile_base = mnt_fof_6
tile_validate_timer = 0
tile_validate_time = 8

//Platform Tiles' IDs
//Make them all the same as the first platform's ID, so they can steal the tile collision data
//from it, instead of wasting RAM on multiple copies of the same tile collision data &gt;:^P
tile_index_1 = wd_fof_1

//Set Angle And FOF Offsets
px_1 = x
py_1 = y
angle=90
dir=1
fof_fofset=0
fof_fall = 0
fof_direction = 1
accel=0

//Relative FOF Tile Positions
tile_ramp_pos[0]=0
tile_ramp_pos[1]=0

//Are We Allowed To Hold Items?
give_item = 0
item = 0

//Determine Facing Direction
var tile_id_left = tile_layer_find(surface_flats,x-132,y-88);
var tile_id_right = tile_layer_find(surface_flats,x+132,y-88);

if tile_exists(tile_id_left)
    fof_direction = -1;
if tile_exists(tile_id_right)
    fof_direction = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cleanup Platform Tiles
if tile_exists(tile_id_1) tile_delete(tile_id_1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Falling Logic
if obj_game_logic.pause = 0 and tile_exists(tile_id_1)
    {
        //Determine Facing Direction
        if room = rm_editor
            {
                tile_validate_timer += 1
                if tile_validate_timer &gt;= 60
                    {
                        var tile_id_left = tile_layer_find(surface_flats,x-132,y-88);
                        var tile_id_right = tile_layer_find(surface_flats,x+132,y-88);
        
                        if tile_exists(tile_id_left)
                            fof_direction = -1;
                        if tile_exists(tile_id_right)
                            fof_direction = 1;
        
                        tile_validate_timer = 0
                    }
                if obj_game_logic.user_cursor_mode = 1
                    {
                        angle = 90
                        accel = 0
                        fof_fall = 0
                    }
            }
        if point_in_rectangle(obj_game_logic.px,obj_game_logic.py,px_1,py_1,px_1+tile_get_width(tile_id_1),py_1+tile_get_height(tile_id_1))
            {
                obj_game_logic.gravity_fof_validation = 2
                if obj_game_logic.ground = 1
                    fof_fall = 1;
            }
        if fof_fall = 1
            {
                //Iterate Rotation Angles
                if fof_direction = -1 accel -= 0.10;
                if fof_direction =  1 accel += 0.10;

                if accel &gt; 4  accel =  4;
                if accel &lt; -4 accel = -4;

                //Stop Rotation After Falling Down
                if angle &lt; 0 angle = 359;
                if angle &gt; 265 and angle &lt; 275 and accel != 0
                    {
                        accel = 0
                        angle = 270
                        var temp = collision_rectangle(px_1,py_1,px_1+tile_get_width(tile_id_1),py_1+tile_get_height(tile_id_1),obj_temple_bell,false,true)
                        if instance_exists(temp)
                            {
                                temp.attacked = 1
                            }
                    }

                //Accelerate
                angle += accel
            }

        //Rotate Tiles
        px_1 = x+lengthdir_x(96,angle);
        py_1 = y+lengthdir_y(96,angle);

        //Set Tile Offsets
        px_1 -= 64
        py_1 -= 20

        //Update Tile Positions
        tile_set_position(tile_id_1,px_1,py_1)

    } //End of Pause Safety Check
if (!tile_exists(tile_id_1)) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Pendulum Platforms

//Draw Decorations
draw_background(tile_link,floor(x-10+lengthdir_x(80,angle)),floor(y-10+lengthdir_y(80,angle)))
draw_background(tile_link,floor(x-10+lengthdir_x(60,angle)),floor(y-10+lengthdir_y(60,angle)))
draw_background(tile_link,floor(x-10+lengthdir_x(40,angle)),floor(y-10+lengthdir_y(40,angle)))
draw_background(tile_link,floor(x-10+lengthdir_x(20,angle)),floor(y-10+lengthdir_y(20,angle)))

//Draw Decorative Bolt
draw_background(tile_base,x-10,y-10)

//Draw Platform
draw_sprite(spr_temple_bell_hammer,0,px_1,py_1)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Ghost Of Pendulum
if room = rm_editor
    {
        draw_set_alpha(0.25)

        //Red
        draw_sprite(spr_temple_bell_hammer,0,px_1,py_1)
        draw_background(tile_link,x-10+lengthdir_x(80,90),y-10+lengthdir_y(80,90))
        draw_background(tile_link,x-10+lengthdir_x(60,90),y-10+lengthdir_y(60,90))
        draw_background(tile_link,x-10+lengthdir_x(40,90),y-10+lengthdir_y(40,90))
        draw_background(tile_link,x-10+lengthdir_x(20,90),y-10+lengthdir_y(20,90))

        //Draw Direction Scanner Boxes
        draw_set_color(c_orange)
        draw_rectangle(x+128,y-84,x+136,y-92,false)
        draw_rectangle(x-128,y-84,x-136,y-92,false)
        draw_set_color(c_white)
        draw_rectangle(x+128,y-84,x+136,y-92,true)
        draw_rectangle(x-128,y-84,x-136,y-92,true)

        draw_set_alpha(1)

        if (obj_level_editor.use_debug_hud_mode = 1 and obj_game_logic.user_cursor_mode = 0)
        or (obj_game_logic.user_cursor_mode = 1)
            draw_sprite(sprite_index,0,x,y);
    }
else
    {
        if (obj_game_logic.debug_hud_mode &gt; 0)
            draw_sprite(sprite_index,0,x,y);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
