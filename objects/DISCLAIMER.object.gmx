<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_logic_processor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>obj_activate_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Transition Variables
transition_active = 0
transition_position = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Poll For Any Of Twelve Possible Controllers Plugged Into The User's PC

background_x[0] -= 0.02
background_x[1] -= 0.005
background_x[2] -= 0.06

//Force The Menu Mode So The Pause Menu Can't Be Invoked While On The Disclaimer Screen
obj_game_logic.use_menu = 1

if keyboard_check_pressed(vk_f1) room_goto(rm_collision_mask_editor);

if keyboard_check_pressed(vk_f5) room_goto(rm_west_district_0);

if transition_active = 0
    {
        switch(button_check_pass)
            {
                //Ignore The Rest Of The Switch Statement If We Have Not Pressed Any Buttons
                case 0:
                    {
                        //Check Controller Port 1 For A Controller
                        if gamepad_is_connected(0) scr_detect_controller(0);
                        //Check Controller Port 2 For A Controller
                        if gamepad_is_connected(1) scr_detect_controller(1);
                        //Check Controller Port 3 For A Controller
                        if gamepad_is_connected(2) scr_detect_controller(2);
                        //Check Controller Port 4 For A Controller
                        if gamepad_is_connected(3) scr_detect_controller(3);
                        //Check Controller Port 5 For A Controller
                        if gamepad_is_connected(4) scr_detect_controller(4);
                        //Check Controller Port 6 For A Controller
                        if gamepad_is_connected(5) scr_detect_controller(5);
                        //Check Controller Port 7 For A Controller
                        if gamepad_is_connected(6) scr_detect_controller(6);
                        //Check Controller Port 8 For A Controller
                        if gamepad_is_connected(7) scr_detect_controller(7);
                        //Check Controller Port 9 For A Controller
                        if gamepad_is_connected(8) scr_detect_controller(8);
                        //Check Controller Port 10 For A Controller
                        if gamepad_is_connected(9) scr_detect_controller(9);
                        //Check Controller Port 11 For A Controller
                        if gamepad_is_connected(10) scr_detect_controller(10);
                        //Check Controller Port 12 For A Controller
                        if gamepad_is_connected(11) scr_detect_controller(11);
                
                        //If We Have Detected A Keyboard Key Press Instead, Automatically Assume We Are Using
                        //The Controller On Port 1
                        if keyboard_check(vk_anykey)
                        or mouse_check_button(mb_any)
                            {
                                button_check_pass = 3
                                controller_check_id = 1
                            }
                        break;
                    }
                //If We Have Detected A Controller, Assign It As The Player's Controller
                case 1:
                    {
                        transition_active = 1
                        audio_play_sound(pause_exit,50,false)
                        break;
                    }
                //If We Have Detected A Keyboard Key Press Instead, Automatically Assume We Are Using
                //The Controller On Port 1
                case 3:
                    {
                        obj_game_logic.joy_modern_id = 0
                        transition_active = 1
                        audio_play_sound(pause_exit,50,false)
                        break;
                    }
            }
    }

//If The Player Has Pressed A Button And Assigned A Controller, Play A Skewed Slice Transition Effect
//And Warp To The Title Screen
if transition_active = 1
    {
        //Restore the frame-rate to its normal value, so the transition is nice and smooth!
        room_speed = 60
        //Slide the skewed slice across the screen
        if transition_position &lt; 530.33 transition_position += 23.67;
        //Warp to the Title Screen
        if transition_position &gt;= 530.33
            {
                obj_game_logic.skin = spr_lilac
                room_goto(rm_title_screen)
            }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reduce the number of polling checks per second, by lowering the frame-rate
//We're playing a static image anyway, who cares? :^P
room_speed = 20
background_alpha[2] = 0.4
//Create the game logic object if it does not exist
if not instance_exists(obj_game_logic) instance_create(0,0,obj_game_logic);
//Disable debug HUD
if instance_exists(obj_game_logic) obj_game_logic.debug_hud = 1;
//Return Whether Or Not An Xinput Controller Or A DirectInput Controller Was Detected
button_check_pass = 0
resolution_scale_check = 0
//nsfs_init()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Disclaimer Text and Transition Effects

draw_set_font(obj_game_logic.text_font)
draw_set_color(c_white);
draw_set_halign(fa_center);
draw_text_ext(213,16,"The following is a fan game based on GalaxyTrail's Freedom Planet, and Ziyo Ling's characters. It is not affiliated with, endorsed by, or supported by GalaxyTrail. GalaxyTrail and Ziyo Ling maintain the rights to the IP and can enforce the rights afforded to them at any time.",18,410)
draw_text_ext(213,117,"Shang Mu Architect is made for passion, not money. It is not legal to sell in any form. Any exploitative distribution of this fan game should be reported.",18,410)
draw_text(213,186,"Please support the official games!")
draw_set_font(obj_game_logic.menu_font)
draw_text(213,221,"Press     any     button     to     continue.")
draw_set_halign(fa_left);

//Draw Skewed Slice Transitions
if transition_active = 1 draw_sprite(spr_transition_skewed,0,view_xview[view_port]+transition_position,view_yview[view_port]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
