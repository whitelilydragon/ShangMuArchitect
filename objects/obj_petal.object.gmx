<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_petal_flower</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-7</depth>
  <persistent>0</persistent>
  <parentName>obj_delete_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics and Animation Variables

//Tile Surface Sensors
tile_surface_id = 0         //Flat Surface Collision Sensor
tile_surface_ce = 0         //Ceiling Surface Collision Sensor
tile_surface_lf = 0         //Left Surface Collision Sensor
tile_surface_rt = 0         //Right Surface Collision Sensor
tile_item_id    = 0         //Item Tile Sensor
item_asset_id   = 0         //Item Tile Asset

//Gravity Variables
gravity_speed   = 0         //Gravity Speed
gravity_accel   = 0.21875   //Gravity Acceleration
gravity_cap     = 8         //Gravity Maximum Speed
gravity_fof     = 0         //Gravity FOF Activation
gravity_slope   = 0         //Gravity Deactivation For Slopes
gravity_timer   = 0         //How often are we allowed to check for collisions?

//State Trigger Variables
is_collected    = 0         //Has the Player Taken the Item?
is_confirmed    = 0         //Have We Confirmed Which Item We Are?
is_floating     = 1         //Were We Told to Float By Another Object?
is_sound        = 0         //Are We Playing A Sound?
is_speed        = 0         //Do We Have A Speed?
is_hor_speed    = 0         //Do We Have A Horizontal Speed? (Orb)
is_time         = 8         //Timer For Upwards Floating
is_hor_time     = 0         //Timer For Horizontal Movement (Orb)
is_an_orb       = 0         //Are We An Elemental Orb?
is_collectable  = 0         //Are We Allowed To Be Attracted By Shields?
is_shield_part  = 0         //Are We A Shield Particle?
is_follow_speed = 6         //How Fast Are We Following The Player?
is_following    = 0         //Have We Gotten Close To The Player?
is_item         = spr_petal_flower //What Item Are We? Arguments: spr_gem

//Partical Variables
idistance       = 4         //Distance from central point
idirection      = 0         //Direction from central point
ispeed          = 1         //Direction of speed (Hearts Particles)
itimer          = 0         //Timer for changing directions (Hearts Particles)
y_offset        = 0         //Offset value (Gems Particle)
destruction     = 0         //Are We A Self-Destructing Particle?
gem_visible     = 1         //Are We Visible?
lv5_counter     = 0

//Heart Particle Variables 1
heart_frame_0   = 0       //Heart Animated Frame
heart_visible_0 = 0       //Heart Visibility
heart_x_0       = x       //Heart X Position
heart_y_0       = y       //Heart Y Position
heart_offset[0] = x       //Heart Offset X
heart_offset[1] = y       //Heart Offset Y
heart_timer_0   = 0       //Heart Timer
heart_speed_0   = 1       //Heart Speed
heart_speed_alt_0 = 0     //Heart Speed (Alt)
//Heart Particle Variables 2
heart_frame_1   = 0       //Heart Animated Frame
heart_visible_1 = 0       //Heart Visibility
heart_x_1       = x       //Heart X Position
heart_y_1       = y       //Heart Y Position
heart_offset[2] = x       //Heart Offset X
heart_offset[3] = y       //Heart Offset Y
heart_timer_1   = 0       //Heart Timer
heart_speed_1   = 1       //Heart Speed
heart_speed_alt_1 = 0     //Heart Speed (Alt)

//Particle Landing Variables
particle_landing_visible = 0
particle_landing_frame   = 0

//Are We Allowed To Hold Items?
give_item = 0
item = 0
attacked = 0
spawned_by_smart_pool = 0

//Movement Positions
start_x = x
start_y = y

//Animation Variables
frame = 0                   //Current Frame
anim_frame = 5              //Maximum Number of Frames

sheet_anim = 0
sheet_page = 0
sheet_speed = 0
sheet_anim_speed = 0.12
sheet_frame_pos_x = 1
sheet_frame_pos_y = 0
sheet_frame_width  = 16
sheet_frame_height = 20
sheet_frame_offset = 1 //1 pixel by default
sheet_row_offset   = 1 //1 pixel by default
sheet_orig_x = -8
sheet_orig_y = -20
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if object_index = obj_petal instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics and Animations

//Pause Safety Check
if obj_game_logic.pause = 0

{

//Universal animation code can be found inside player object (HUD Management)

//If We Are Within Range Of The Player, Consider Ourselves Collected
if point_distance(x,y,obj_game_logic.universal_player_x,obj_game_logic.universal_player_y) &lt;= 40 and destruction=0 and is_collectable&gt;24
and obj_game_logic.anim_current!=obj_game_logic.anim_hurt and obj_game_logic.anim_current!=obj_game_logic.anim_death
and obj_game_logic.user_cursor_mode = 0
    is_collected = 1;

//Allow petal to be collected after so long
if is_collectable &lt; 128 is_collectable += 1;

//  Flat Surface Collisions and Gravity  //
//---------------------------------------//

if (is_floating = 0)

{

gravity_timer += 1
if (gravity_timer &gt;= 5) gravity_timer = 0;
//Floor Surface Collision Sensor
if gravity_timer = 4
    tile_surface_id = tile_layer_find(surface_flats,x,y);

//If we are colliding with a flat surface, stop gravity
if tile_exists(tile_surface_id)
    {
        //Reset gravity speed
        gravity_speed=0
        //Reset horizontal speed
        is_speed=0
    }

if y &gt; obj_game_logic.water_height and depth = -7
    depth = -5;

//Apply horizontal speed if we are not interacting with flat surfaces or slopes
if (tile_surface_id=-1 and gravity_slope=0 and is_collected=0)
    x += is_speed;

//  Slope Surface Collisions  //
//----------------------------//

//Slope Surface Collision Sensor
tile_ramp_id = tile_layer_find(surface_slopes,x,y)

//If we are colliding with a slope tile, clip to its surface based on X position
if (tile_exists(tile_ramp_id) and gravity_slope = 0 and gravity_timer = 4)
    {
        //Collect Background ID of the Tile
        tile_ramp_asset=tile_get_background(tile_ramp_id)
    
        //Get Gem Coordinates Relative to the Tile's Origins
        tile_ramp_pos[0]=abs(tile_get_x(tile_ramp_id)-x)   //Get X
        tile_ramp_pos[1]=abs(tile_get_y(tile_ramp_id)-y)   //Get Y
    
        //Check If Gem Y is Greater Than Slope's Current Height
        if tile_ramp_pos[1] &gt;= obj_game_logic.orig_clip[tile_ramp_asset,tile_ramp_pos[0]]
            {
                //If Gem is Colliding with Slope, Disable Gravity
                gravity_slope=1
                gravity_speed=0
                is_floating = 1
            }
    }

//       Basic Gravity System       //
//----------------------------------//

//If we are not at the speed cap, apply acceleration.
if (gravity_fof=0 and gravity_slope=0 and !tile_exists(tile_surface_id))
    {
        gravity_speed+=gravity_accel

        if gravity_speed &gt; 4 gravity_speed = 4;

        //Apply Gravity Speed to Y Coordinates
        y+=gravity_speed

    }
//Leap slightly upwards upon spawning.
if is_time!=0 {gravity_speed=-2 is_time=0}

} //End of Float Safety Check

//       Player Follow System       //
//----------------------------------//

//Follow player based on their passive effect
if  (point_distance(x,y,obj_game_logic.universal_player_x,obj_game_logic.universal_player_y) &lt; 128) and (obj_game_logic.shield_active = 1)
and (is_collectable &gt; 32) and (obj_game_logic.shield = spr_shield_wood)
and obj_game_logic.user_cursor_mode = 0
    is_following = 1;

if is_following = 1
    {
        move_towards_point(obj_game_logic.universal_player_x,obj_game_logic.universal_player_y,is_follow_speed)
        is_follow_speed += 0.25
    }

//      Static Particle System      //
//----------------------------------//

//If we are a heart particle, produce a particle effect before disappearing
if (is_collected = 1)
    {
        if (y&gt;=view_yview[view_port]+40)
            {
                //Play Sound
                if is_sound = 0
                    {
                        audio_stop_sound(petal_grab)
                        audio_play_sound(petal_grab,50,false)
                        is_sound=1
                    }
                //Point us towards the top-left corner of the screen
                direction = point_direction(x,y,view_xview[view_port],view_yview[view_port])
                //Move towards the top-left corner of the screen
                speed = 16
                //Disable gravity
                is_floating = 1;
            }
        //Once we have reached the HUD, give the player a health petal and create a heart particle
        if (y&lt;view_yview[view_port]+40 or obj_game_logic.petals &lt;= 2)
            {
                //Give the player a health petal (2 petals if they're playing on easy mode)
                if obj_game_logic.petals &lt; 0 petals = 0;
                var petal_value = 1;
                if obj_game_logic.user_enemy_level = 0
                    petal_value = 2;
                obj_game_logic.petals += petal_value
                if obj_game_logic.petals &gt; obj_game_logic.petalsmax
                    obj_game_logic.petals = obj_game_logic.petalsmax;
                obj_game_logic.petals = ceil(obj_game_logic.petals)
                obj_game_logic.accident_forgiveness = 1
                //(Or a gem, if the player's health is already at maximum.)
                if obj_game_logic.petals &gt;= obj_game_logic.petalsmax
                    {
                        obj_game_logic.gems -= 1
                        obj_game_logic.player_best_crystals_count += 1
                        obj_game_logic.player_gems[obj_game_logic.player_current] += 1
                        obj_game_logic.hud_gem_value += 1
                        //Add Energy to the Stamina Bar
                        if obj_game_logic.stamina &lt; 100
                            {
                                obj_game_logic.stamina += 5
                                obj_game_logic.milla_flutter_stamina_bar += 4.3333333333333333333333333333334
                                //Cull Stamina Bar if Added Energy is Too Much
                                //if obj_game_logic.stamina &gt; 100 obj_game_logic.stamina = 100;
                                obj_game_logic.stamina_boosted = 0
                            }
                        //Stamina Bar Flash
                        obj_game_logic.stamina_gem = 0
                        obj_game_logic.stamina_gem_con = 1
                        //Trigger Drawing of Gem Particles
                        if obj_game_logic.performance_profile = 1 obj_game_logic.gem_particle_trigger = 1;
                        //Trigger Drawing of Certain Gem Particles Based On Offset
                        switch(obj_game_logic.gem_plus_pos)
                            {
                                //Particle 1
                                case 0:
                                    {
                                        obj_game_logic.gem_particle_alpha_0 = 1
                                        obj_game_logic.gem_waiting_0        = 0
                                        obj_game_logic.gem_ispeed_0         = 0
                                        obj_game_logic.gem_particle_frame_0 = 0
                                        obj_game_logic.gem_particle_trig_0  = 1
                                        break;
                                    }
                                //Particle 2
                                case 1:
                                    {
                                        obj_game_logic.gem_particle_alpha_1 = 1
                                        obj_game_logic.gem_waiting_1        = 0
                                        obj_game_logic.gem_ispeed_1         = 0
                                        obj_game_logic.gem_particle_frame_1 = 0
                                        obj_game_logic.gem_particle_trig_1  = 1
                                        break;
                                    }
                                //Particle 3
                                case 2:
                                    {
                                        obj_game_logic.gem_particle_alpha_2 = 1
                                        obj_game_logic.gem_waiting_2        = 0
                                        obj_game_logic.gem_ispeed_2         = 0
                                        obj_game_logic.gem_particle_frame_2 = 0
                                        obj_game_logic.gem_particle_trig_2  = 1
                                        break;
                                    }
                                //Particle 4
                                case 3:
                                    {
                                        obj_game_logic.gem_particle_alpha_3 = 1
                                        obj_game_logic.gem_waiting_3        = 0
                                        obj_game_logic.gem_ispeed_3         = 0
                                        obj_game_logic.gem_particle_frame_3 = 0
                                        obj_game_logic.gem_particle_trig_3  = 1
                                        break;
                                    }
                                //Particle 5
                                case 4:
                                    {
                                        obj_game_logic.gem_particle_alpha_4 = 1
                                        obj_game_logic.gem_waiting_4        = 0
                                        obj_game_logic.gem_ispeed_4         = 0
                                        obj_game_logic.gem_particle_frame_4 = 0
                                        obj_game_logic.gem_particle_trig_4  = 1
                                        break;
                                    }
                                //Particle 6
                                case 5:
                                    {
                                        obj_game_logic.gem_particle_alpha_5 = 1
                                        obj_game_logic.gem_waiting_5        = 0
                                        obj_game_logic.gem_ispeed_5         = 0
                                        obj_game_logic.gem_particle_frame_5 = 0
                                        obj_game_logic.gem_particle_trig_5  = 1
                                        break;
                                    }
                                //Particle 7
                                case 6:
                                    {
                                        obj_game_logic.gem_particle_alpha_6 = 1
                                        obj_game_logic.gem_waiting_6        = 0
                                        obj_game_logic.gem_ispeed_6         = 0
                                        obj_game_logic.gem_particle_frame_6 = 0
                                        obj_game_logic.gem_particle_trig_6  = 1
                                        break;
                                    }
                                //Particle 8
                                case 7:
                                    {
                                        obj_game_logic.gem_particle_alpha_7 = 1
                                        obj_game_logic.gem_waiting_7        = 0
                                        obj_game_logic.gem_ispeed_7         = 0
                                        obj_game_logic.gem_particle_frame_7 = 0
                                        obj_game_logic.gem_particle_trig_7  = 1
                                        break;
                                    }
                                //Particle 9
                                case 8:
                                    {
                                        obj_game_logic.gem_particle_alpha_8 = 1
                                        obj_game_logic.gem_waiting_8        = 0
                                        obj_game_logic.gem_ispeed_8         = 0
                                        obj_game_logic.gem_particle_frame_8 = 0
                                        obj_game_logic.gem_particle_trig_8  = 1
                                        break;
                                    }
                                //Particle 10
                                case 9:
                                    {
                                        obj_game_logic.gem_particle_alpha_9 = 1
                                        obj_game_logic.gem_waiting_9        = 0
                                        obj_game_logic.gem_ispeed_9         = 0
                                        obj_game_logic.gem_particle_frame_9 = 0
                                        obj_game_logic.gem_particle_trig_9  = 1
                                        break;
                                    }
                                //Particle 11
                                case 10:
                                    {
                                        obj_game_logic.gem_particle_alpha_10 = 1
                                        obj_game_logic.gem_waiting_10        = 0
                                        obj_game_logic.gem_ispeed_10         = 0
                                        obj_game_logic.gem_particle_frame_10 = 0
                                        obj_game_logic.gem_particle_trig_10  = 1
                                        break;
                                    }
                                //Particle 12
                                case 11:
                                    {
                                        obj_game_logic.gem_particle_alpha_11 = 1
                                        obj_game_logic.gem_waiting_11        = 0
                                        obj_game_logic.gem_ispeed_11         = 0
                                        obj_game_logic.gem_particle_frame_11 = 0
                                        obj_game_logic.gem_particle_trig_11  = 1
                                        break;
                                    }
                                //Particle 13
                                case 12:
                                    {
                                        obj_game_logic.gem_particle_alpha_12 = 1
                                        obj_game_logic.gem_waiting_12        = 0
                                        obj_game_logic.gem_ispeed_12         = 0
                                        obj_game_logic.gem_particle_frame_12 = 0
                                        obj_game_logic.gem_particle_trig_12  = 1
                                        break;
                                    }
                                //Particle 14
                                case 13:
                                    {
                                        obj_game_logic.gem_particle_alpha_13 = 1
                                        obj_game_logic.gem_waiting_13        = 0
                                        obj_game_logic.gem_ispeed_13         = 0
                                        obj_game_logic.gem_particle_frame_13 = 0
                                        obj_game_logic.gem_particle_trig_13  = 1
                                        break;
                                    }
                            }
                        //Update gem particle offset for the next gem particle
                        obj_game_logic.gem_plus_pos += 1
                        //If the gem particle offset is too high, reset its value
                        if obj_game_logic.gem_plus_pos &gt; 13 obj_game_logic.gem_plus_pos = 0;
                        //Reset Gem Counter (And Spawn 1up Faerie) If It's Below 0
                        scr_gem_reset_counter()
                        //obj_particle_gems = instance_create(x,y,obj_gem_particle)
                        //obj_particle_gems.x = view_xview[view_port]+13
                        //obj_particle_gems.y = view_yview[view_port]+53
                    }
                //Play Sound
                audio_stop_sound(petal_absorbed)
                audio_play_sound(petal_absorbed,50,false)
                //Create Heart Particle 1
                heart_visible_0 = 1
                heart_offset[0] = abs(view_xview[view_port]-x) + random_range(-16,16)
                heart_offset[1] = abs(view_yview[view_port]-y) + random_range(-16,16)
                //Create Heart Particle 2
                heart_offset[2] = abs(view_xview[view_port]-x) + random_range(-16,16)
                heart_offset[3] = abs(view_yview[view_port]-y) + random_range(-16,16)
                //Set Our Depth To Be Above The Logic Object's Priority
                depth = -7
                //Set Our Visibility To 0
                gem_visible = 0
                //Set Our Speed To 0
                speed = 0
                //Keep Ourselves Clipped Within Object Activation Range During
                //Heart Particle Animations
                x = view_xview[view_port]
                y = view_yview[view_port]
                //Initialize New Collection State
                //Refer to Hearts Logic Code Below For Secondary Phase Of Heart Particle Logic
                is_collected = 2
            }
    } //End of Collected Safety Check

//Produce a particle effect before disappearing
if is_collected = 2
    {
        //Keep Ourselves Clipped Within Object Activation Range During
        //Heart Particle Animations
        x = view_xview[view_port]
        y = view_yview[view_port]
        //Sway heart particle side-by-side
        heart_x_0 = heart_offset[0]+heart_speed_0
        heart_y_0 = heart_offset[1]-heart_speed_alt_0
        //Sway heart particle side-by-side
        heart_x_1 = heart_offset[2]+heart_speed_1
        heart_y_1 = heart_offset[3]-heart_speed_alt_1
        heart_timer_0+=0.5
        //Phase 1: Sway
        if (heart_timer_0 &lt; 12)
            {
                //Heart 1
                heart_frame_0=0;
                heart_speed_0+=1;
                heart_speed_alt_0+=1
                //Heart 2
                heart_speed_1-=1
                heart_speed_alt_1+=1
            }
        //Phase 2: Sway In The Opposite Direction
        if (heart_timer_0 &gt;= 12 and heart_timer_0&lt;=15)
            {
                //Heart 1
                heart_frame_0=0;
                heart_speed_0-=1;
                heart_speed_alt_0+=1
                //Heart 2
                heart_speed_1+=1
                heart_speed_alt_1+=1
            }
        //Phase 3: Playback Animations
        if (heart_timer_0 &gt; 15) heart_frame_0+=0.24;

        //Destroy self once heart frame animations have completed
        if room != rm_editor
            {
                if (heart_frame_0 &gt;= 3 or obj_game_logic.performance_profile = 0)
                    instance_destroy();
            }
       else
            {
                if (heart_frame_0 &gt;= 3 or obj_game_logic.performance_profile = 0)
                and (object_index = obj_petal)
                    instance_destroy();

                if (heart_frame_0 &gt;= 3 or obj_game_logic.performance_profile = 0)
                and (object_index != obj_petal)
                    event_perform(ev_other,ev_user0);
            }
    }
} //End of Pause Safety Check

else
    {
        //Freeze Movement Speed And Animations If We Are Paused
        move_towards_point(x,y,0)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Heart Particle Drawing
if heart_visible_0 != 0
    {
        //Draw Sprite (With Alpha Blending)
        draw_set_blend_mode(bm_add)
        draw_sprite_ext(spr_hearts,heart_frame_0,heart_x_0,heart_y_0,1,1,0,c_white,1)
        //Draw Sprite (With Alpha Blending)
        draw_sprite_ext(spr_hearts,heart_frame_0,heart_x_1,heart_y_1,1,1,0,c_white,1)
        draw_set_blend_mode(bm_normal)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Main Sprite
if heart_visible_0 = 0 draw_sprite_part(sprite_index,1,sheet_frame_pos_x,sheet_frame_pos_y,
     sheet_frame_width,sheet_frame_height,x+sheet_orig_x,y+sheet_orig_y);
//draw_sprite(sprite_index,obj_game_logic.petal_flower_frame,x,y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
