<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_dna_cannon_projectiles</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-7</depth>
  <persistent>0</persistent>
  <parentName>obj_activate_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>o = obj_game_logic
start_x = x
start_y = y
bak_speed = 8
collision = 0
timer = 0
power_level = 0
damage = 2
speed = 8
audio_play_sound(milla_shield_cube_deflect,50,false)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Animation and movement
if o.pause = 0 and o.pause_logic = 0
    {
        var play_sound = 1;
        timer += 1
        image_speed = 1
        if collision = 0
            {
                speed = bak_speed
                //Only check for collisions every five frames (Saves CPU requests)
                if timer = 5
                    {
                        if audio_is_playing(character_parry) play_sound = 0;
                        //Check for Tiles on Layer 0. (Flat Surface Collisions)
                        var tile_id = tile_layer_find(surface_flats,x,y)      //Bottom Collision Sensor
                        //Slope Collision Sensor
                        var slope_id = tile_layer_find(surface_slopes,x,y)

                        if tile_exists(tile_id)
                        //If we have collided with the boundaries of the room, explode
                        or x &lt; 0 or x &gt; room_width
                        or y &gt; room_height
                            {
                                collision = 1
                            }
                         //If we are colliding with a slope tile, check its surface based on X position and explode
                        if tile_exists(slope_id)
                            {    
                                //Collect Background ID of the Tile
                                var slope_id_debug = o.enemy_slopes[tile_get_background(slope_id)];
                                //Actual Slope ID Instead of Its PassThru
                                var invert_id = tile_get_background(slope_id);
                
                                //Get Coordinates Relative to the Tile's Origins
                                var slope_id_pos_x=abs(tile_get_x(slope_id)-x)   //Get X
                                var slope_id_pos_y=abs(tile_get_y(slope_id)-y)   //Get Y

                                var ignore = false;
                                //Ignore collisions with ladders and hangbars
                                if o.orig_clip[invert_id+3000,0]=o.scr_ladder_surface
                                or o.orig_clip[invert_id+3000,0]=o.scr_hang_bar_surface
                                //Also ignore collisions with certain FOFs
                                or slope_id_debug = -1
                                    ignore = true;
                                var invert = false;
                                //Invert collision checks if we're inside certain surface types
                                if o.orig_clip[invert_id+3000,0]=o.scr_top_left_inside_loop
                                or o.orig_clip[invert_id+3000,0]=o.scr_top_right_inside_loop
                                or o.orig_clip[invert_id+3000,0]=o.scr_bottom_left_outside_loop
                                or o.orig_clip[invert_id+3000,0]=o.scr_bottom_right_outside_loop
                                    invert = true;
                                //If we are clipping to the slope's Y height, explode
                                if (ignore = false)
                                    {
                                        //Check If Y is Greater Than Slope's Current Height
                                        if (slope_id_pos_y &gt;= o.orig_clip[slope_id_debug,slope_id_pos_x]
                                        and invert = false)
                                        or (slope_id_pos_y &lt;= o.orig_clip[invert_id,slope_id_pos_x]
                                        and invert = true)
                                            {
                                                collision = 1
                                            }
                                    }
                            }
                        //Also check if we're outside of the range of the camera
                        if x &gt; start_x+500
                        or x &lt; start_x-500
                            instance_destroy();
                        timer = 0
                    }
                if o.user_enemy_level &lt; 2
                    {
                        //Bomb Cube
                        var instance_ID = collision_point(x,y,obj_player_cube_alt,false,true);
                        if instance_exists(instance_ID)
                            {
                                if instance_ID.cube_jiggle_timer = 0
                                    {
                                        instance_ID.cube_jiggle_timer = 10
                                        instance_ID.cube_health += 0.50
                                    }
                            }
                        //Mega Items
                        var instance_ID = collision_point(x,y,obj_mega_item_parent,false,true);
                        if instance_exists(instance_ID)
                            {
                                timer = 0
                                instance_ID.attacked = 2
                            }
                        if room != rm_editor
                            {
                                var crate_ID = collision_point(x,y,obj_destructible,false,true);
                                if instance_exists(crate_ID)
                                    {
                                        timer = 0
                                        crate_ID.attacked = 1
                                    }
                            }
                        //Attack other enemies within range of the boxing glove
                        instance_ID = collision_point(x,y,obj_enemy_parent,false,true);
                        if instance_exists(instance_ID)
                            {
                                if instance_ID.attacked = 0 and instance_ID.alpha = 0
                                    {
                                        timer = 0
                                        instance_ID.attacked_damage = 1
                                        instance_ID.attacked = 1
                                    }
                            }
                    }
            }
        //Destroy projectile if we've collided with something
        if collision &gt; 0
            {
                if collision = 1
                    {
                        sprite_index = spr_cube_pop_large
                        scr_set_screen_shake(4,3)
                        speed = 0
                        collision = 2
                    }
                if timer &gt; 15
                    instance_destroy();

                if (timer &lt; 8)
                    {
                        //Bomb Cube
                        var instance_ID = collision_point(x,y,obj_player_cube_alt,false,true);
                        if instance_exists(instance_ID)
                            {
                                if instance_ID.cube_jiggle_timer = 0
                                    {
                                        instance_ID.cube_jiggle_timer = 10
                                        instance_ID.cube_health += 0.50
                                    }
                            }
                        //Mega Items
                        var instance_ID = collision_point(x,y,obj_mega_item_parent,false,true);
                        if instance_exists(instance_ID)
                            {
                                collision = 1
                                instance_ID.attacked = 2
                            }
                        if room != rm_editor
                            {
                                var crate_ID = collision_point(x,y,obj_destructible,false,true);
                                if instance_exists(crate_ID)
                                    {
                                        collision = 1
                                        crate_ID.attacked = 1
                                    }
                            }
                        //Attack other enemies within range of the boxing glove
                        instance_ID = collision_point(x,y,obj_enemy_parent,false,true);
                        if instance_exists(instance_ID)
                            {
                                if instance_ID.attacked = 0 and instance_ID.alpha = 0
                                    {
                                        collision = 1
                                        instance_ID.attacked_damage = 4
                                        instance_ID.attacked = 1
                                    }
                            }
                    }
            }
    }
else
    {
        speed = 0
        image_speed = 0
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(sprite_index,image_index,x,y)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
