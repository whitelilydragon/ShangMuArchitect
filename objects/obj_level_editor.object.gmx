<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_logic_processor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-7</depth>
  <persistent>0</persistent>
  <parentName>obj_activate_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shang Mu Architect Editor Variables
use_editor     = 0                 //Are we currently using the editor?
use_cursor_x   = 0                //What is our cursor's X position?
use_cursor_y   = 0                //What is our cursor's Y position?
use_cursor_prx = 0                //What is our cursor's previous X position?
use_cursor_pry = 0                //What is our cursor's previous Y position?
use_cursor_spr = 0                //What is our cursor's sprite?
use_cursor_mode = 0               //What is our current method of input?
use_grid       = 1                //What is our current grid's size?
use_move       = 0                //Are we pressing the move button?
use_delete     = 0                //Are we pressing the delete button?
use_put_here   = 0                //Are we pressing the pute here button?
use_copy       = 0                //Are we pressing the copy button?
use_layer_up   = 0                //Are we pressing the layer up button?
use_layer_down = 0                //Are we pressing the layer down button?
use_snap_up    = 0                //Are we pressing the snap up button?
use_snap_down  = 0                //Are we pressing the snap down button?
use_pause      = 0                //Are we pressing the pause button?
use_new_tile   = 0                //Are we pressing the new tile button?
use_move_left  = 0                //Are we pressing the left button?
use_move_right = 0                //Are we pressing the right button?
use_move_up    = 0                //Are we pressing the up button?
use_move_down  = 0                //Are we pressing the down button?
use_a        = 0                  //Are we pressing the A button? (Accept)
use_b        = 0                  //Are we pressing the B button? (Cancel)
use_c        = 0                  //Are we pressing the C button? (Change Character)
use_start    = 0                  //Are we pressing the Start button? (Accept)
use_left     = 0                  //Are we pressing left?
use_right    = 0                  //Are we pressing right?
use_up       = 0                  //Are we pressing up?
use_down     = 0                  //Are we pressing down?
use_exit       = 0                //Are we pressing exit?
use_mode       = 0                //Are we pressing mode?
use_undo       = 0                //Are we pressing undo?
use_redo       = 0                //Are we pressing redo?
alt_left       = 0                //Are we pressing the left button?
alt_right      = 0                //Are we pressing the right button?
alt_up         = 0                //Are we pressing the up button?
alt_down       = 0                //Are we pressing the down button?
cursor_previous_x = 0             //Are we moving the mouse horizontal?
cursor_previous_y = 0             //Are we moving the mouse vertically?
cursor_previous_timer = 0
//Tile Menu Variables
use_tile_menu = 0                 //Which menu are we currently using?
use_tile_menu_cool_down = 8       //How long before we're allowed to make more mouse inputs with the on-screen buttons?
use_tile_menu_alpha = 1           //What should the alpha transparency of menu elements be?
user_cursor_mode = 0              //Are we allowed to use the cursor?
user_place_mode  = 0              //Are we allowed to place tiles or move them? (0 = Place; 1 = Move)
user_tile_selected = mu_flat_0    //What is our currently selected tile?
user_layer_selected = 0           //What is our current layer depth?
user_layer_iteration = 0          //What is our current layer selection iteration?
user_grid_iteration = 3           //What is our current grid snap selection?
user_grid_snap      = 8           //What is our grid snapping size?
user_grid_snap_x    = 0           //What is our rounded grid snapping position?
user_grid_snap_y    = 0           //What is our rounded grid snapping position?
user_place_start_x = 0            //What is our start X position for our click-drag function?
user_place_start_y = 0            //What is our start Y position for our click-drag function?
user_cursor_display_mode = 0      //Are we displaying a sprite or a tile on the sidebar?
user_tile_boundary_alpha = 0      //What is the alpha transparency of the tile boundary box's fading effect?
user_tile_boundary_fade_direction = 0
user_editor_hud_offset = 314
u_elements = 0
user_editor_hud_state = 0
user_tile_limit_warning_frame = 0
user_tile_limit_warning_value = 16000
user_pen_mode = spr_drawing_cursor
user_pen_size = 1
user_pen_color = mu_paint_black
mouse_previous_x = 0
mouse_previous_y = 0
user_line_tool_x1 = 0
user_line_tool_x2 = 0
user_line_tool_y1 = 0
user_line_tool_y2 = 0
user_line_tool_active = 0
user_line_tool_color = c_black
user_tool_grid = 0
use_fof = 0
user_draw_path_x_1 = 0
user_draw_path_y_1 = 0
user_draw_path_x_2 = 0
user_draw_path_y_2 = 0
user_draw_path_origin_x = 0
user_draw_path_origin_y = 0
user_move_tile_ID = -1
user_move_offset_x = 0
user_move_offset_y = 0
user_move_layer_ID = 0
user_place_allow = 0
user_anim_tile_sprite = bb_flat_0_anim
user_anim_tile_object = obj_bg_anim_tile
use_debug_hud_mode = 0
added_tile = -1
move_added_tile = -1

//Tile Menu Items (Tiles)
use_tile_menu_item[0] = mu_flat_0
use_tile_menu_item[1] = mu_flat_1
use_tile_menu_item[2] = mu_flat_37
use_tile_menu_item[3] = mu_flat_3
use_tile_menu_item[4] = mu_flat_4
use_tile_menu_item[5] = mu_flat_18
use_tile_menu_item[6] = mu_flat_19
use_tile_menu_item[7] = mu_flat_22
use_tile_menu_item[8] = mu_flat_36
use_tile_menu_item[9] = mu_flat_28
use_tile_menu_item[10] = mu_flat_29
use_tile_menu_item[11] = mu_flat_20
use_tile_menu_item[12] = mu_flat_7
use_tile_menu_item[13] = mu_flat_24
use_tile_menu_item[14] = mu_flat_15
use_tile_menu_item[15] = mu_flat_6
use_tile_menu_item[16] = mu_flat_14
use_tile_menu_item[17] = mu_flat_16
use_tile_menu_item[18] = spr_dirt_0
use_tile_menu_item[19] = spr_dirt_1

//Tile Descriptions
use_tile_menu_item_description[0] = "Wood Block 1"
use_tile_menu_item_description[1] = "Floor Tile"
use_tile_menu_item_description[2] = "Support Beam 1"
use_tile_menu_item_description[3] = "Wood Block 2"
use_tile_menu_item_description[4] = "Wood Block 3"
use_tile_menu_item_description[5] = "Wood Block 4"
use_tile_menu_item_description[6] = "Wood Block 5"
use_tile_menu_item_description[7] = "Wood Block 6"
use_tile_menu_item_description[8] = "Support Beam 2"
use_tile_menu_item_description[9] = "Wood Block 7"
use_tile_menu_item_description[10] = "Wood Block 8"
use_tile_menu_item_description[11] = "Wood Block 9"
use_tile_menu_item_description[12] = "Wood Block 10"
use_tile_menu_item_description[13] = "Support Beam 2"
use_tile_menu_item_description[14] = "Corner Piece - Left"
use_tile_menu_item_description[15] = "Wooden Platform"
use_tile_menu_item_description[16] = "Corner Piece - Right"
use_tile_menu_item_description[17] = "Wood Block 11"
use_tile_menu_item_description[18] = "Grass"
use_tile_menu_item_description[19] = "Dirt"
//Tile Menu Items (Layers)
use_layer_menu_item[0] = 0
use_layer_menu_item[1] = 0
use_layer_menu_item[2] = 0
use_layer_menu_item[3] = 0
use_layer_menu_item[4] = 0
use_layer_menu_item[5] = 0
use_layer_menu_item[6] = 0
use_layer_menu_item[7] = 0
use_layer_menu_item[8] = 0
use_layer_menu_item[9] = 0
use_layer_menu_item[10] = 0
use_layer_menu_item[11] = 0
use_layer_menu_item[12] = 0
use_layer_menu_item[13] = 0
use_layer_menu_item[14] = 0
use_layer_menu_item[15] = 0
use_layer_menu_item[16] = 0
use_layer_menu_item[17] = 0
use_layer_menu_item[18] = 1
use_layer_menu_item[19] = 0
//Tile Menu Items (Selected Layers)
use_layer_selected_item[0] = 0
use_layer_selected_item[1] = 0
use_layer_selected_item[2] = 0
use_layer_selected_item[3] = 0
use_layer_selected_item[4] = 0
use_layer_selected_item[5] = 0
use_layer_selected_item[6] = 0
use_layer_selected_item[7] = 0
use_layer_selected_item[8] = 0
use_layer_selected_item[9] = 0
use_layer_selected_item[10] = 0
use_layer_selected_item[11] = 0
use_layer_selected_item[12] = 0
use_layer_selected_item[13] = 0
use_layer_selected_item[14] = 0
use_layer_selected_item[15] = 0
use_layer_selected_item[16] = 0
use_layer_selected_item[17] = 0
use_layer_selected_item[18] = 1
use_layer_selected_item[19] = 0
//Tile X Offset
use_layer_offset_x_item[0] = 0
use_layer_offset_x_item[1] = 0
use_layer_offset_x_item[2] = 0
use_layer_offset_x_item[3] = 0
use_layer_offset_x_item[4] = 0
use_layer_offset_x_item[5] = 0
use_layer_offset_x_item[6] = 0
use_layer_offset_x_item[7] = 0
use_layer_offset_x_item[8] = 0
use_layer_offset_x_item[9] = 0
use_layer_offset_x_item[10] = 0
use_layer_offset_x_item[11] = 0
use_layer_offset_x_item[12] = 0
use_layer_offset_x_item[13] = 0
use_layer_offset_x_item[14] = 0
use_layer_offset_x_item[15] = 0
use_layer_offset_x_item[16] = 0
use_layer_offset_x_item[17] = 0
use_layer_offset_x_item[18] = 0
use_layer_offset_x_item[19] = 0
//Tile Y Offset
use_layer_offset_y_item[0] = 0
use_layer_offset_y_item[1] = 0
use_layer_offset_y_item[2] = 0
use_layer_offset_y_item[3] = 0
use_layer_offset_y_item[4] = 0
use_layer_offset_y_item[5] = 0
use_layer_offset_y_item[6] = 0
use_layer_offset_y_item[7] = 0
use_layer_offset_y_item[8] = 0
use_layer_offset_y_item[9] = 0
use_layer_offset_y_item[10] = 0
use_layer_offset_y_item[11] = 0
use_layer_offset_y_item[12] = 0
use_layer_offset_y_item[13] = 0
use_layer_offset_y_item[14] = 0
use_layer_offset_y_item[15] = 0
use_layer_offset_y_item[16] = 0
use_layer_offset_y_item[17] = 0
use_layer_offset_y_item[18] = -6
use_layer_offset_y_item[19] = 0
//Tile Menu Current Page
use_tile_menu_page     = 0 //Sub-page 0
use_item_menu_page     = 0 //Sub-page 1
use_enemy_menu_page    = 0 //Sub-page 2
use_springs_menu_page  = 0 //Sub-page 3
use_gimmicks_menu_page = 0 //Sub-page 4
use_advanced_menu_page = 0 //Sub-page 5
use_actors_menu_page   = 0 //Sub-page 6

//Tile X/Y Offsets
user_grid_offset_x = 0
user_grid_offset_y = 0

//Submenu Page
use_tile_menu_subpage = 0

//Zoom Feature
use_zoom_position = 1
use_zoom_position_toggle = 0
use_zoom_boundary_x = 426
use_zoom_boundary_y = 240
use_zoom_x_view = 426
use_zoom_y_view = 240
use_zoom_scroll_edge_lock = 8
use_zoom_scroll_border = 16
use_zoom_scroll_speed = 4
use_zoom_multiplier = 1
use_zoom_scale_factor = 1
use_zoom_scale_iteration = 4
use_zoom_additive_modifier = 0          //Make the X position of drawn elements align correctly at higher zoom levels
use_zoom_additive_modifier_y = 0        //Make the Y position of drawn elements align correctly at higher zoom levels
use_zoom_additive_modifier_z = 0        //Additional modifier for larger drawn elements
use_zoom_additive_modifier_s = 0        //Additional modifier for smaller drawn elements
obj_game_logic.use_zoom_multiplier = 1  //Zoom multiplier for the player object
//Additional Modifiers For Button Prompts
use_zoom_additive_modifier_coord[0,0] = 0 //Put Here X
use_zoom_additive_modifier_coord[0,1] = 0 //Put Here Y
use_zoom_additive_modifier_coord[0,2] = 0 //Layer Down X
use_zoom_additive_modifier_coord[0,3] = 0 //Layer Down Y
use_zoom_additive_modifier_coord[0,4] = 0 //Layer Up X
use_zoom_additive_modifier_coord[0,5] = 0 //Layer Up Y
use_zoom_additive_modifier_coord[0,6] = 0 //Snap Up X
use_zoom_additive_modifier_coord[0,7] = 0 //Snap Up Y
use_zoom_additive_modifier_coord[1,0] = 0 //Delete X
use_zoom_additive_modifier_coord[1,1] = 0 //Delete Y
use_zoom_additive_modifier_coord[1,2] = 0 //Copy X
use_zoom_additive_modifier_coord[1,3] = 0 //Copy Y
use_zoom_additive_modifier_coord[1,4] = 0 //New Tile X
use_zoom_additive_modifier_coord[1,5] = 0 //New Tile Y
use_zoom_additive_modifier_coord[1,6] = 0 //Zoom X
use_zoom_additive_modifier_coord[1,7] = 0 //Zoom Y
use_zoom_additive_modifier_coord[2,0] = 0 //Put Here X
use_zoom_additive_modifier_coord[2,1] = 0 //Put Here Y
use_zoom_additive_modifier_coord[2,2] = 0 //Grid Snap X
use_zoom_additive_modifier_coord[2,3] = 0 //Grid Snap Y
use_zoom_additive_modifier_coord[2,4] = 0 //Cursor X (X)
use_zoom_additive_modifier_coord[2,5] = 0 //Cursor X (Y)
use_zoom_additive_modifier_coord[2,6] = 0 //Cursor Y (X)
use_zoom_additive_modifier_coord[2,7] = 0 //Grid Snap X
use_zoom_additive_modifier_coord[2,8] = 0 //Health Petal Modifier X

//Lerp Transitions
use_zoom_additive_modifier_lerp = 0          //Make the X position of drawn elements align correctly at higher zoom levels
use_zoom_additive_modifier_y_lerp = 0        //Make the Y position of drawn elements align correctly at higher zoom levels
use_zoom_additive_modifier_z_lerp = 0        //Additional modifier for larger drawn elements
use_zoom_additive_modifier_s_lerp = 0        //Additional modifier for smaller drawn elements
use_zoom_additive_player_scaling = 1

//Background Change
use_background = 0
use_background_page = 0
use_background_modified = 0
alarm_set(0,4)

//Move Feature
use_move_scan_tile = 0
use_move_mode = 0
use_move_left = 0
use_move_right = 0
use_move_up = 0
use_move_down = 0
use_move_notification_enabled = 0
use_move_notification_disabled = 0

//Cursor Animation
use_cursor_animation_frame = 0
use_cursor_animation_trigger = 0
use_cursor_spr_1 = ui_lilac_cursor_1
use_cursor_spr_2 = ui_lilac_cursor_2

//Highlighter Parameters
use_highlight_alpha = 0
use_highlight_alpha_x = 0
use_highlight_alpha_y = 0
use_highlight_alpha_width = 0
use_highlight_alpha_height = 0

//Player Parameter
use_player_animation_frame = 0.25
use_player_animation_direction = 1
use_player_mode = 0

//Keyboard String Manipulation (Stage Name)
use_keyboard_active = 0
use_keyboard_active_indicator = ""
use_keyboard_active_timer = 0
//Keyboard String Manipulation (Description)
use_keyboard_active_indicator_description = ""
use_keyboard_active_timer_description = 0
//Keyboard String Manipulation (Architect)
use_keyboard_active_indicator_architect = ""
use_keyboard_active_timer_architect = 0

use_write_reserve_string_stage_name = ""
use_write_reserve_string_architect  = ""
use_write_reserve_string_description = ""

//Maps Directory Storage For File Listings
use_maps_file       = 0
use_maps_page       = 0
use_maps_pages      = 0
use_maps_select     = "..."
use_maps_files[0,0] = "..."
use_maps_files[0,1] = "..."
use_maps_files[0,2] = "..."
use_maps_files[0,3] = "..."
use_maps_files[0,4] = "..."

//Currently Displayed Maps For Navigating File Listings
use_maps_map[0] = "..."
use_maps_map[1] = "..."
use_maps_map[2] = "..."
use_maps_map[3] = "..."
use_maps_map[4] = "..."

use_maps_highlight_y = -1

//Save Data
use_write_position = 0
use_write_length   = 0
use_write_start    = 0
use_write_array    = 0
use_write_delay    = 0
use_write_obj_position = 0
use_write_keyboard_string_stage_name  = ""
use_write_keyboard_string_description = ""
use_write_keyboard_string_architect   = ""
use_write_keyboard_string_active_string = -1
use_write_save_notification = 0

//Scrollbar Position
use_scrollbar_position = 60
use_scrollbar_speed = 0

//Current Song
use_current_song = ost_titlescreen_aqua_surface_woofle
use_current_song_iterations = 0
use_current_song_notification = "Aqua Surface - Woofle"
use_current_background_notification = "Dragon Lake Day - LillyDragon"
use_current_song_notification_timer = 0

//Health Petal Modifier Position
use_health_petal_mod_y = 0
use_health_petal_mod = 14
use_health_petal_mod_i = 0
use_health_petal_mod_disable_cursor = 0

//Tile Properties Popup
use_tile_properties_timer = 0
use_tile_properites_x = 0
use_tile_properties_y = 0
use_tile_properties_y_offset = 0
use_tile_properties_enable = 0
use_tile_properties_boundary_x1 = 0
use_tile_properties_boundary_x2 = 0
use_tile_properties_boundary_y1 = 0
use_tile_properties_boundary_y2 = 0
use_tile_properties_cursor_boundary_x1 = 0
use_tile_properties_cursor_boundary_x2 = 0
use_tile_properties_cursor_boundary_y1 = 0
use_tile_properties_cursor_boundary_y2 = 0
use_tile_properties_cursor_boundary_disable = 0
use_zoom_tile_menu_scaling = 41
use_zoom_tile_menu_scaling_horizontal_0 = -12
use_zoom_tile_menu_scaling_horizontal_1 = -8
use_zoom_tile_menu_scaling_vertical_0 = 60
use_zoom_tile_menu_scaling_vertical_1 = 9
use_zoom_tile_menu_scaling_vertical_2 = 30
use_zoom_tile_menu_scaling_vertical_3 = 30
use_zoom_tile_menu_scaling_vertical_4 = -6
use_zoom_tile_menu_scaling_flip_x_0 = 8
use_zoom_tile_menu_scaling_flip_x_1 = 22
use_zoom_tile_menu_scaling_flip_y_0 = 23
use_zoom_tile_menu_scaling_flip_y_1 = 37
use_zoom_tile_menu_scaling_alpha_0 = 38
use_zoom_tile_menu_scaling_alpha_1 = 52
use_zoom_counter = 0
use_tile_properties_tile_id = -1
use_tile_properties_alpha = 0
use_tile_properties_xscale = 0
use_tile_properties_yscale = 0
use_tile_properties_tile_alpha = 0

//File Menu Popup
use_file_menu = 0
use_mini_map = 0
view_visible[1] = false

//Mouse Click Particle Effect
use_particle_frame = 0
use_particle_x = 0
use_particle_y = 0
use_confirm = 0

//Grid Toggle
use_grid_toggle_mouse = 0
use_grid_toggle_size = ui_grid_8px
use_grid_toggle_iterator = 0

//Item Descriptions
use_item_description="Wood Block 1"

//Automatic Tile-Layer Switching Notification
use_tile_switching_mode_notification = 0
use_tile_switching_mode_notification_disabled = 0
use_tile_switching_mode = 0
use_surface_id = -1
use_logic_controller_timer = 0
use_item_check_timer = 0
use_item_check_verified = 0
use_item_check_index = 0

//Camera Boundaries (Top Line)
use_line_top[0] = 0
use_line_top[1] = 0
use_line_top[2] = room_width
use_line_top[3] = 0

//Camera Boundaries (Bottom Line)
use_line_bottom[0] = 0
use_line_bottom[1] = room_height
use_line_bottom[2] = room_width
use_line_bottom[3] = room_height

//Camera Boundaries (Left Line)
use_line_left[0] = 0
use_line_left[1] = 0
use_line_left[2] = 0
use_line_left[3] = room_height

//Camera Boundaries (Right Line)
use_line_right[0] = room_width
use_line_right[1] = 0
use_line_right[2] = room_width
use_line_right[3] = room_height

//Camera Boundaries (Simplified For Test Targets)
camera_boundary_top = 0
camera_boundary_bottom = room_height
camera_boundary_left = 0
camera_boundary_right = room_width
//Boss Camera Boundaries
boss_boundary_top       = -10000
boss_boundary_left      = -10000
boss_boundary_right     = -10000
boss_boundary_bottom    = -10000
lock_boundary_top       = -10000
lock_boundary_left      = -10000
lock_boundary_right     = -10000
lock_boundary_bottom    = -10000

//Loading Prompt
use_loading_screen = -1

//Flash Warning Prompt
use_optimization_warning = 0
use_optimization_limit = 64

//Resize Cursor Box
use_corner_box = 0
use_corner_box_id = -1
use_corner_width = 0
use_corner_height = 0
use_tile_width = 0
use_tile_height = 0
use_corner_width_result = 0
use_corner_height_result = 0
use_corner_box_bottom_left_x = 0
use_corner_box_bottom_left_y = 0
use_corner_box_top_right_x = 0
use_corner_box_top_right_y = 0
use_corner_box_id = -1

//Tileset Preview Box
use_tileset_preview_timer = 0
use_tileset_preview_set = -1
use_tileset_preview_set_increment = 0

//Loop Exit Controller Display Assistant
use_loop_exit_display_angle = 0
use_loop_exit_display_target_angle = 0
use_loop_exit_x = 0
use_loop_exit_y = 0
use_loop_exit_skin = spr_loop_exit_example_lilac
use_loop_exit_angle = 0
use_loop_exit_frame = 0
use_loop_exit_timer = 0
user_loop_exit_assistant_id_prev = -1

//Mega Item Selector
use_mega_item = spr_mega_crate
use_mega_item_description = "Mega Crate"
use_mega_item_iterate = 0

//Autosave
use_auto_save = 0
use_auto_save_timer = 0
use_next_previous_confirm = 0

use_player_spawner = 0
user_player_spawner_frame = 0

use_float_window = 0

use_stamp_page = 0
use_stamp_state = 1
use_stamp_list[0] = ui_stamp_0
use_stamp_list[1] = ui_stamp_1
use_stamp_list[2] = ui_stamp_2
use_stamp_list[3] = ui_stamp_3
use_stamp_list[4] = ui_stamp_4
use_stamp_list[5] = ui_stamp_5
use_stamp_list[6] = ui_stamp_6
use_stamp_list[7] = ui_stamp_7
use_stamp_list[8] = ui_stamp_8
use_stamp_list[9] = ui_stamp_9

use_npc_interaction_dialog_box_active = 0

use_delete_selection_box_x_0 = 0
use_delete_selection_box_y_0 = 0
use_delete_selection_box_x_1 = 0
use_delete_selection_box_y_1 = 0
use_delete_selection_box_active = 0
use_delete_selection_box_timer = 0

side_bar_allow = 0

//Weather Selector
use_weather_iterations = 0
use_weather_conditions = "Clear"
use_win_iterations = 0
use_win_condition = "Break the Targets"
use_help_description = ""
use_bg_name_string = "Shang Mu Lake Day"
use_bg_selector_minimize = 0
use_mouse_mode = 0

//NPC Clipboard
npc_previw_thumbnail = spr_npc_ui_talk
npc_clipboard_dialog_active = 0
npc_clipboard_lilac_string_p1 = ""
npc_clipboard_lilac_string_p2 = ""
npc_clipboard_carol_string_p1 = ""
npc_clipboard_carol_string_p2 = ""
npc_clipboard_milla_string_p1 = ""
npc_clipboard_milla_string_p2 = ""
npc_clipboard_dialog_string_p1  = ""
npc_clipboard_dialog_string_p2  = ""
npc_clipboard_dialog_spade_p1   = ""
npc_clipboard_dialog_spade_p2   = ""
npc_clipboard_dialog_emotion_p1 = 0
npc_clipboard_dialog_emotion_p2 = 0
npc_clipboard_dialog_direction  = 1

//Item Rotation
item_rotate_x = 0
item_rotate_y = 0
item_rotate_id = 0
item_rotate_angle = 0
item_rotate_allowed = 0

//Automatic Tile Scanner Mode
user_tile_scanner_timer = 0

//Undo/Redo History
user_undo_log = 0
user_undo_index = 0
user_undo_limit = 2
scr_record_set_undo_array();
scr_record_set_redo_array();

//Editor Font
editor_font       = font_add_sprite(spr_editor_font,ord(" "),false,0)
editor_menu_font  = obj_game_logic.editor_menu_font
editor_popup_font = font_add_sprite_ext(spr_editor_menu_font," ?ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzàèìòùÀÈÌÒÙáéíóúýÁÉÍÓÚÝâêîôûÂÊÎÔÛãñõÃÑÕäëïöüÿÄËÏÖÜŸåÅæÆœŒçÇðÐøØ¿¡ß.-ĄĆĘŁŃŚŹŻąćęłńśźżАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфцчшщъыьэюяЂЃІЇЈЉЊЏҌѤҐђѓіїјљњџҍѥґΔҺӨΣѰΩαβδҫɲѳꙠѴЄσхѱѠ",true,0)
editor_layer_font = font_add_sprite_ext(spr_editor_small_font," ?ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzàèìòùÀÈÌÒÙáéíóúýÁÉÍÓÚÝâêîôûÂÊÎÔÛãñõÃÑÕäëïöüÿÄËÏÖÜŸåÅæÆœŒçÇðÐøØ1234567890ĄĆĘŁŃŚŹŻąćęłńśźżАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдеёжзийклмнопрстуфцчшщъыьэюяЂЃІЇЈЉЊЏҌѤҐђѓіїјљњџҍѥґΔҺӨΣѰΩαβδҫɲѳꙠѴЄσхѱѠ",true,1)

//Show/Hide Help Captions
user_show_help_captions = 0
instance_create(0,0,obj_level_editor_startup)

scr_lang_editor_ui()
scr_lang_editor_item_descriptions()
scr_lang_editor_item_descriptions_br_pt()
scr_lang_editor_item_descriptions_pl()
scr_lang_editor_item_descriptions_es()
scr_lang_editor_item_descriptions_de()
scr_lang_editor_item_descriptions_ru()

user_built_list = 0
use_maps_check_loop = 0
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shang Mu Architect Editor Controls

//Editor Mode Input Variables

//D-Pad Movement
edit_input[0,0] = 0    //Joystick Right
edit_input[0,1] = 0    //Joystick Down
edit_input[0,2] = 0    //Joystick Left
edit_input[0,3] = 0    //Joystick Up

//Panning Movement
edit_input[2,0] = 0    //Joystick Right
edit_input[2,1] = 0    //Joystick Down
edit_input[2,2] = 0    //Joystick Left
edit_input[2,3] = 0    //Joystick Up

//Analog Stick Movement
edit_x = 0
edit_y = 0
look_x = 0
look_y = 0

//Editor Actions
edit_input[1,0] = 0    //Move
edit_input[1,2] = 0    //Delete
edit_input[1,3] = 0    //Put Here
edit_input[1,4] = 0    //Copy

//Editor Quick Actions
edit_input[1,5] = 0    //Layer Up
edit_input[1,6] = 0    //Layer Down
edit_input[1,7] = 0    //Snap Up
edit_input[1,8] = 0    //Snap Down

//Editor Menus
edit_input[1,9]  = 0    //Pause
edit_input[1,10] = 0    //New Tile
edit_input[1,11]  = 0   //Undo
edit_input[1,12] = 0    //Redo

//Analog Stick Look Axis
edit_look_x = 0         //Look X Axis
edit_look_y = 0         //Look Y Axis

//Short Hand Alias For The Player Object
parent = obj_game_logic

//=========Collect User Configuration from INI Configuration File=========//
ini_open_ns("gamedata.dat")
//Keyboard Bindings (Editor Mode)
key_move_left   = real(ini_read_string("keyboard_editor_bindings","move_left",0))
key_move_right  = real(ini_read_string("keyboard_editor_bindings","move_right",0))
key_move_up     = real(ini_read_string("keyboard_editor_bindings","move_up",0))
key_move_down   = real(ini_read_string("keyboard_editor_bindings","move_down",0))
key_alt_left    = real(ini_read_string("keyboard_editor_bindings","alt_left",0))
key_alt_right   = real(ini_read_string("keyboard_editor_bindings","alt_right",0))
key_alt_up      = real(ini_read_string("keyboard_editor_bindings","alt_up",0))
key_alt_down    = real(ini_read_string("keyboard_editor_bindings","alt_down",0))
key_mode        = real(ini_read_string("keyboard_editor_bindings","mode",0))
key_delete      = real(ini_read_string("keyboard_editor_bindings","delete",0))
key_put_here    = real(ini_read_string("keyboard_editor_bindings","put_here",0))
key_copy        = real(ini_read_string("keyboard_editor_bindings","copy",0))
key_layer_up    = real(ini_read_string("keyboard_editor_bindings","layer_up",0))
key_layer_down  = real(ini_read_string("keyboard_editor_bindings","layer_down",0))
key_snap_up     = real(ini_read_string("keyboard_editor_bindings","snap_up",0))
key_zoom        = real(ini_read_string("keyboard_editor_bindings","zoom",0))
key_pause       = real(ini_read_string("keyboard_editor_bindings","pause",0))
key_new_tile    = real(ini_read_string("keyboard_editor_bindings","new_tile",0))
key_undo        = real(ini_read_string("keyboard_editor_bindings","undo",0))
key_redo        = real(ini_read_string("keyboard_editor_bindings","redo",0))
//Joystick Modern Bindings (Editor Mode)
joy_move_left   = real(ini_read_string("joystick_modern_editor_bindings","move_left",0))
joy_move_right  = real(ini_read_string("joystick_modern_editor_bindings","move_right",0))
joy_move_up     = real(ini_read_string("joystick_modern_editor_bindings","move_up",0))
joy_move_down   = real(ini_read_string("joystick_modern_editor_bindings","move_down",0))
joy_move_x      = real(ini_read_string("joystick_modern_editor_bindings","move_x",0))
joy_move_y      = real(ini_read_string("joystick_modern_editor_bindings","move_y",0))
joy_mode        = real(ini_read_string("joystick_modern_editor_bindings","mode",0))
joy_delete      = real(ini_read_string("joystick_modern_editor_bindings","delete",0))
joy_put_here    = real(ini_read_string("joystick_modern_editor_bindings","put_here",0))
joy_copy        = real(ini_read_string("joystick_modern_editor_bindings","copy",0))
joy_layer_up    = real(ini_read_string("joystick_modern_editor_bindings","layer_up",0))
joy_layer_down  = real(ini_read_string("joystick_modern_editor_bindings","layer_down",0))
joy_snap_up     = real(ini_read_string("joystick_modern_editor_bindings","snap_up",0))
joy_zoom        = real(ini_read_string("joystick_modern_editor_bindings","zoom",0))
joy_pause       = real(ini_read_string("joystick_modern_editor_bindings","pause",0))
joy_new_tile    = real(ini_read_string("joystick_modern_editor_bindings","new_tile",0))
joy_undo        = real(ini_read_string("joystick_modern_editor_bindings","undo",0))
joy_redo        = real(ini_read_string("joystick_modern_editor_bindings","redo",0))
//Joystick Modern Deadzone
joy_deadzone    = real(ini_read_string("joystick_modern_bindings","deadzone",0))
//Grid Visibiity
grid_visible = real(ini_read_string("main_settings","disable_grid",0))
//Reverse Mouse Buttons
reverse_mouse_buttons = real(ini_read_string("main_settings","reverse_mouse_buttons",0))
//Enemy Mode
use_enemy_mode_iterations = real(ini_read_string("main_settings","enemy_mode",0))

//Do Not Reverse Mouse Buttons If The Config Has Returned False
if reverse_mouse_buttons = 0
    {
        joy_mouse_button_left = mb_left
        joy_mouse_button_right = mb_right
    }
//Reverse The Mouse Buttons If The Config Has Returned True
else
    {
        joy_mouse_button_left = mb_right
        joy_mouse_button_right = mb_left
    }

//Close INI Configuration File
ini_close_ns();

use_enemy_mode_conditions = "Inactive outside camera"
switch(use_enemy_mode_iterations)
    {
        case 0:  {use_enemy_mode_conditions = "Active Outside View"; break;}
        case 1:  {use_enemy_mode_conditions = "Always Active"; break;}
        case 2:  {use_enemy_mode_conditions = "Play Mode Only"; break;}
    }


//Set Displayed Button Prompts
if parent.joy_input_descrip = "Sony DualShock 4"
    {
        use_display_put_here    = scr_set_display_button_ps4(joy_put_here)
        use_display_delete      = scr_set_display_button_ps4(joy_delete)
        use_display_copy        = scr_set_display_button_ps4(joy_copy)
        use_display_layer_up    = scr_set_display_button_ps4(joy_layer_up)
        use_display_layer_down  = scr_set_display_button_ps4(joy_layer_down)
        use_display_snap_up     = scr_set_display_button_ps4(joy_snap_up)
        use_display_zoom        = scr_set_display_button_ps4(joy_zoom)
        use_display_new_tile    = scr_set_display_button_ps4(joy_new_tile)
    }
else
    {
        use_display_put_here    = scr_set_display_button(joy_put_here)
        use_display_delete      = scr_set_display_button(joy_delete)
        use_display_copy        = scr_set_display_button(joy_copy)
        use_display_layer_up    = scr_set_display_button(joy_layer_up)
        use_display_layer_down  = scr_set_display_button(joy_layer_down)
        use_display_snap_up     = scr_set_display_button(joy_snap_up)
        use_display_zoom        = scr_set_display_button(joy_zoom)
        use_display_new_tile    = scr_set_display_button(joy_new_tile)
    }
use_dispaly_key_prompt  = 1
use_display_input_counter = 0

//Joystick Controller IDs
joy_modern_id = parent.joy_modern_id
joy_input_id  = parent.joy_input_id

//Center cursor on our current camera position
use_cursor_x = view_xview[view_port]+parent.internal_resolution[0]/2
use_cursor_y = view_yview[view_port]+parent.internal_resolution[1]/2
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shang Mu Architect Editor Music Playback
if parent.use_maps_load = 0
    {
        music_index = ost_titlescreen_aqua_surface_woofle  //What is our currently playing song?
        alarm_set(1,30)                                    //How long before we're allowed to play music?
    }
else
    {
        music_index = parent.music_index  //What is our currently playing song?
        music_play_timer = -1             //How long before we're allowed to play music?
    }
backup_index = ost_titlescreen_aqua_surface_woofle
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shang Mu Architect Tile Definition Tables
scr_set_temple_definition_table();
if parent.user_language_mode = 1
    scr_lang_temple_br_pt();
if parent.user_language_mode = 2
    scr_lang_temple_pl_pl();
if parent.user_language_mode = 3
    scr_lang_temple_es_es();
if parent.user_language_mode = 4
    scr_lang_temple_de_de();
if parent.user_language_mode = 5
    scr_lang_temple_ru_ru();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shang Mu Architect Loading Definition Table
scr_set_loading_definition_table(self)

//Arbitrary reference IDs for all registered items/mods in the editor
use_conversion_table_item[1] = spr_target
use_conversion_table_item[2] = spr_keycard
use_conversion_table_item[3] = obj_give_item_alt_weapon
use_conversion_table_item[4] = obj_give_item_health
use_conversion_table_item[5] = obj_give_item_speed
use_conversion_table_item[6] = obj_give_item_extra_large
use_conversion_table_item[7] = obj_give_item_bomb
use_conversion_table_item[8] = obj_give_item_spring
use_conversion_table_item[9] = obj_give_item_detonator
use_conversion_item = 0

//Arbitrary reference IDs for all registered NPCs in the editor
use_conversion_npc[1] = obj_npc_lilac
use_conversion_npc[2] = obj_npc_carol
use_conversion_npc[3] = obj_npc_milla
use_conversion_npc[4] = obj_npc_stella

//Arbitrary reference IDs for all registered NPCs in the editor
use_npc_x[0] = 0
use_npc_y[0] = 0
use_npc_object[0] = 0
use_npc_emotion[0] = 0
use_npc_direction[0] = 1
use_npc_string_0[0] = ""
use_npc_string_1[0] = ""
use_npc_maximum_range = 128
use_npc_startup_timer = 0
use_npc_counter = 0

//Fill up reference IDs range for up to 128 hard-coded NPCs
/*var use_temp_count = 1;
while(use_temp_count &lt;= use_npc_maximum_range)
    {
        use_npc_x[use_temp_count] = 0
        use_npc_y[use_temp_count] = 0
        use_npc_object[use_temp_count] = 0
        use_npc_emotion[use_temp_count] = 0
        use_npc_direction[use_temp_count] = 1
        use_npc_string_0[use_temp_count] = ""
        use_npc_string_1[use_temp_count] = ""
        use_temp_count += 1
    }
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Build a list of maps for the stage select menu
var user_file_loop_limit = 4;
if file_exists_ns(program_directory + "\Maps\\_Meta.txt")
    {
        var use_file_id = file_text_open_read_ns(program_directory + "\Maps\\_Meta.txt",-1);
        user_file_loop_limit = real(file_text_read_line_ns(use_file_id))
        file_text_close_ns(use_file_id);
    }
if file_exists_ns(program_directory + "\Maps\\_Files.txt")
    {
        //Clear Maps List Array
        use_maps_files = 0
        use_maps_pages = 0
        //Call It As An Array Again
        use_maps_files[0,0] = "..."
        use_maps_files[0,1] = "..."
        use_maps_files[0,2] = "..."
        use_maps_files[0,3] = "..."
        use_maps_files[0,4] = "..."
        
        //Parse Directory Listings
        use_maps_file = file_text_open_read_ns(program_directory + "\Maps\\_Files.txt",-1)
        var use_maps_iterate = 0;
        var use_loop_count = 0;
        var use_maps_page_builder = 0;
        while(use_maps_pages &lt;= 40)
            {
                //Create a new page after writing five entries into the current page
                if use_maps_page_builder = 5
                    {
                        use_maps_iterate = 0
                        use_maps_pages += 1
                        use_maps_page_builder = 0
                    }
                //Store current map file name
                use_maps_files[use_maps_pages,use_maps_iterate] = file_text_read_line_ns(use_maps_file)
                //Iterate loop counters
                use_maps_iterate += 1
                use_maps_page_builder += 1
                //Exit the loop if we have built up enough pages
                use_loop_count += 1
                if use_loop_count &gt; user_file_loop_limit break;
            }
        file_text_close_ns(use_maps_file);
        //Create Blanks At The End Of The Last Page, In Case Not All Entries Of The Page Are Filled
        use_maps_files[use_maps_pages,use_maps_iterate-1] = "..."
        use_maps_files[use_maps_pages,use_maps_iterate]   = "..."
        use_maps_files[use_maps_pages,use_maps_iterate+1] = "..."
        use_maps_files[use_maps_pages,use_maps_iterate+2] = "..."
        use_maps_files[use_maps_pages,use_maps_iterate+3] = "..."
        use_maps_files[use_maps_pages,use_maps_iterate+4] = "..."
        user_built_list = 1
        //Scrollbar Position
        use_scrollbar_position = 95
        use_scrollbar_speed = 46/use_maps_pages
        
        //Update Currently Listed Maps
        use_maps_map[0] = use_maps_files[0,0]
        use_maps_map[1] = use_maps_files[0,1]
        use_maps_map[2] = use_maps_files[0,2]
        use_maps_map[3] = use_maps_files[0,3]
        use_maps_map[4] = use_maps_files[0,4]
        use_maps_page = 0
    }
else
    {
        use_maps_check_loop += 1
        if use_maps_check_loop &lt;= 4
            alarm_set(0,8);
        if use_maps_check_loop &gt; 4
            {
                scr_set_message("Cannot build maps list! Pleast check _Files.bat!")
            }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Redo Event
//Event-based loop for undo history with multiple items in one undo level
var user_undo_count = 0;

user_undo_timeline_level_tile_max_length[0] = user_undo_timeline_level_tile_max_length[10]

if user_undo_timeline_level_tile_max_length[0] != -1
    {
        while(user_undo_count &lt;= user_undo_timeline_level_tile_max_length[10])
            {
                show_debug_message("Redo counting to "+string(user_undo_count+1)+"!")
                //Update Current Undo Array, Before Clearing Redo Array Entry
                user_undo_timeline_level_tile_x[0,user_undo_count] = user_undo_timeline_level_tile_x[10,user_undo_count]
                user_undo_timeline_level_tile_y[0,user_undo_count] = user_undo_timeline_level_tile_y[10,user_undo_count]
                user_undo_timeline_level_tile_id[0,user_undo_count] = user_undo_timeline_level_tile_id[10,user_undo_count]
                user_undo_timeline_level_tile_asset[0,user_undo_count] = user_undo_timeline_level_tile_asset[10,user_undo_count]
                user_undo_timeline_level_tile_x_scale[0,user_undo_count] = user_undo_timeline_level_tile_x_scale[10,user_undo_count]
                user_undo_timeline_level_tile_y_scale[0,user_undo_count] = user_undo_timeline_level_tile_y_scale[10,user_undo_count]
                user_undo_timeline_level_tile_alpha[0,user_undo_count] = user_undo_timeline_level_tile_alpha[10,user_undo_count]
                user_undo_timeline_level_tile_depth[0,user_undo_count] = user_undo_timeline_level_tile_depth[10,user_undo_count]
                user_undo_timeline_level_tile_state[0,user_undo_count] = user_undo_timeline_level_tile_state[10,user_undo_count]
        
                var yes = 0;
                if (user_undo_timeline_level_tile_state[0,user_undo_count]) = 0
                    {
                        scr_replace_tile(user_undo_count)
                        user_undo_timeline_level_tile_id[0,user_undo_count] = user_undo_timeline_level_tile_id[10,user_undo_count]
                        user_undo_timeline_level_tile_state[0,user_undo_count] = 1
                        yes = 1;
                    }
        
                if (yes = 0 and user_undo_timeline_level_tile_state[0,user_undo_count] = 1
                and tile_exists(user_undo_timeline_level_tile_id[0,user_undo_count]))
                    {
                        tile_delete(user_undo_timeline_level_tile_id[0,user_undo_count])
                        user_undo_timeline_level_tile_state[0,user_undo_count] = 0
                    }
        
                //Clear Current Redo Array Entry
                user_undo_timeline_level_tile_x[10,user_undo_count] = -64
                user_undo_timeline_level_tile_y[10,user_undo_count] = -64
                user_undo_timeline_level_tile_id[10,user_undo_count] = -1
                user_undo_timeline_level_tile_asset[10,user_undo_count] = -1
                user_undo_timeline_level_tile_x_scale[10,user_undo_count] = 1
                user_undo_timeline_level_tile_y_scale[10,user_undo_count] = 1
                user_undo_timeline_level_tile_alpha[10,user_undo_count] = 1
                user_undo_timeline_level_tile_depth[10,user_undo_count] = 0
                user_undo_timeline_level_tile_state[10,user_undo_count] = -1
        
                user_undo_count += 1
            }
    }

user_undo_count = 0

/*

user_undo_timeline_level_object_max_length[0] = user_undo_timeline_level_object_max_length[10]

while(user_undo_count &lt; user_undo_timeline_level_tile_max_length[0])
    {
        //Update Current Redo Array, Before Clearing Undo Array Entry
        user_undo_timeline_level_object_x[0,user_undo_count] = user_undo_timeline_level_object_x[10,user_undo_count]
        user_undo_timeline_level_object_y[0,user_undo_count] = user_undo_timeline_level_object_y[10,user_undo_count]
        user_undo_timeline_level_object_id[0,user_undo_count] = user_undo_timeline_level_object_id[10,user_undo_count]
        user_undo_timeline_level_object_item[0,user_undo_count] = user_undo_timeline_level_object_item[10,user_undo_count]
        user_undo_timeline_level_object_asset[0,user_undo_count] = user_undo_timeline_level_object_asset[10,user_undo_count]
        user_undo_timeline_level_object_state[0,user_undo_count] = user_undo_timeline_level_object_state[10,user_undo_count]

        var yes = 0;
        if user_undo_timeline_level_object_state[0,user_undo_count] = 0
            {
                scr_replace_object(user_undo_count);
                user_undo_timeline_level_object_id[0,user_undo_count] = user_undo_timeline_level_object_id[10,user_undo_count]
                user_undo_timeline_level_object_state[0,user_undo_count] = 1
                yes = 1;
            }
        if yes = 0 and user_undo_timeline_level_object_state[0,user_undo_count] = 1
        and instance_exists(user_undo_timeline_level_object_id[0,user_undo_count])
            {
                instance_destroy(user_undo_timeline_level_object_id[0,user_undo_count]);
                user_undo_timeline_level_object_state[0,user_undo_count] = 0
            }

        //Clear Current Undo Array Entry
        user_undo_timeline_level_object_x[0,user_undo_count] = -64
        user_undo_timeline_level_object_y[0,user_undo_count] = -64
        user_undo_timeline_level_object_id[0,user_undo_count] = -1
        user_undo_timeline_level_object_item[0,user_undo_count] = 0
        user_undo_timeline_level_object_asset[0,user_undo_count] = -1
        user_undo_timeline_level_object_was_created[0,user_undo_count] = false
        user_undo_timeline_level_object_was_deleted[0,user_undo_count] = false
        
        user_undo_count += 1
    }
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Undo Event Loop
//Event-based loop for undo history with multiple items in one undo level
var user_undo_count = 0;

user_undo_timeline_level_tile_max_length[10] = user_undo_timeline_level_tile_max_length[0]

if user_undo_timeline_level_tile_max_length[0] != -1
    {
        while(user_undo_count &lt;= user_undo_timeline_level_tile_max_length[0])
            {
                show_debug_message("Counting to "+string(user_undo_count+1)+"!")
                //Update Current Redo Array, Before Clearing Undo Array Entry
                user_undo_timeline_level_tile_x[10,user_undo_count] = user_undo_timeline_level_tile_x[0,user_undo_count]
                user_undo_timeline_level_tile_y[10,user_undo_count] = user_undo_timeline_level_tile_y[0,user_undo_count]
                user_undo_timeline_level_tile_id[10,user_undo_count] = user_undo_timeline_level_tile_id[0,user_undo_count]
                user_undo_timeline_level_tile_asset[10,user_undo_count] = user_undo_timeline_level_tile_asset[0,user_undo_count]
                user_undo_timeline_level_tile_x_scale[10,user_undo_count] = user_undo_timeline_level_tile_x_scale[0,user_undo_count]
                user_undo_timeline_level_tile_y_scale[10,user_undo_count] = user_undo_timeline_level_tile_y_scale[0,user_undo_count]
                user_undo_timeline_level_tile_alpha[10,user_undo_count] = user_undo_timeline_level_tile_alpha[0,user_undo_count]
                user_undo_timeline_level_tile_depth[10,user_undo_count] = user_undo_timeline_level_tile_depth[0,user_undo_count]
                user_undo_timeline_level_tile_state[10,user_undo_count] = user_undo_timeline_level_tile_state[0,user_undo_count]
        
                var yes = 0;
                if (user_undo_timeline_level_tile_state[0,user_undo_count] = 1
                and tile_exists(user_undo_timeline_level_tile_id[0,user_undo_count]))
                    {
                        tile_delete(user_undo_timeline_level_tile_id[0,user_undo_count])
                        user_undo_timeline_level_tile_state[10,user_undo_count] = 0
                        yes = 1
                    }
                if yes = 0 and user_undo_timeline_level_tile_state[0,user_undo_count] = 0
                    {
                        scr_replace_tile(user_undo_count);
                        user_undo_timeline_level_tile_state[10,user_undo_count] = 1
                    }
        
                //Clear Current Undo Array Entry
                user_undo_timeline_level_tile_x[0,user_undo_count] = -64
                user_undo_timeline_level_tile_y[0,user_undo_count] = -64
                user_undo_timeline_level_tile_id[0,user_undo_count] = -1
                user_undo_timeline_level_tile_asset[0,user_undo_count] = -1
                user_undo_timeline_level_tile_x_scale[0,user_undo_count] = 1
                user_undo_timeline_level_tile_y_scale[0,user_undo_count] = 1
                user_undo_timeline_level_tile_alpha[0,user_undo_count] = 1
                user_undo_timeline_level_tile_depth[0,user_undo_count] = 0
                user_undo_timeline_level_tile_state[0,user_undo_count] = -1
        
                user_undo_count += 1
            }
    }

user_undo_count = 0

/*
if user_undo_timeline_level_object_max_length[0] != -1
    {
        while(user_undo_count &lt;= user_undo_timeline_level_tile_max_length[0])
            {
                //Update Current Redo Array, Before Clearing Undo Array Entry
                user_undo_timeline_level_object_x[10,user_undo_count] = user_undo_timeline_level_object_x[0,user_undo_count]
                user_undo_timeline_level_object_y[10,user_undo_count] = user_undo_timeline_level_object_y[0,user_undo_count]
                user_undo_timeline_level_object_id[10,user_undo_count] = user_undo_timeline_level_object_id[0,user_undo_count]
                user_undo_timeline_level_object_item[10,user_undo_count] = user_undo_timeline_level_object_item[0,user_undo_count]
                user_undo_timeline_level_object_asset[10,user_undo_count] = user_undo_timeline_level_object_asset[0,user_undo_count]
                user_undo_timeline_level_object_state[10,user_undo_count] = user_undo_timeline_level_object_state[0,user_undo_count]
                user_undo_timeline_level_object_max_length[10] = user_undo_timeline_level_object_max_length[0]

                var yes = 0;
                if user_undo_timeline_level_object_state[0,user_undo_count] = 1
                and instance_exists(user_undo_timeline_level_object_id[0,user_undo_count])
                    {
                        user_undo_timeline_level_object_state[10,user_undo_count] = 0
                        instance_destroy(user_undo_timeline_level_object_id[0,user_undo_count])
                        yes = 1
                    }

                if yes = 0 and user_undo_timeline_level_object_state[0,user_undo_count] = 0
                    {
                        scr_replace_object(user_undo_count)
                        user_undo_timeline_level_object_state[10,user_undo_count] = 1
                    }
        
                //Clear Current Undo Array Entry
                user_undo_timeline_level_object_x[0,user_undo_count] = -64
                user_undo_timeline_level_object_y[0,user_undo_count] = -64
                user_undo_timeline_level_object_id[0,user_undo_count] = -1
                user_undo_timeline_level_object_item[0,user_undo_count] = 0
                user_undo_timeline_level_object_asset[0,user_undo_count] = -1
                user_undo_timeline_level_object_state[0,user_undo_count] = -1
                
                user_undo_count += 1
            }
    }
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn Angle Gear Over Spawned Item
instance_create(item_rotate_x,item_rotate_y,item_rotate_id)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Play Default Stage Theme Song
var song_current = audio_play_sound(music_index,50,true);
music_play_timer=-1
//Adjust Current Song's Volume
if o.music_mute = 0 scr_adjust_music_silent(o.music_volume/100,1000);
else scr_adjust_music_silent(0,1000);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Remember Selected Background From A Loaded Stage
scr_get_background()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Input Controller

//Reset Breath Meter
parent.breath = parent.breath_max

//Reset Grid Toggle
use_grid_toggle_mouse = grid_visible;

//Disable Drawing The Grid If The Player Is Active
if user_cursor_mode = 1 use_grid_toggle_mouse = 0;

//Go back to the title screen after the transition
if parent.transition_active = 1 and parent.transition_position &gt; 530.33
    {
        parent.title_room_timer += 1
        //After the iteration timer ends, change rooms
        if parent.title_room_timer &gt; 8
            {
                room_goto(rm_title_screen)
                parent.transition_active = 0
                parent.transition_position = 0
                parent.title_room_timer = 0
                parent.transition_persistence = 12
            }
    }
if use_loading_screen &gt; -1 use_loading_screen -= 1;
if use_loading_screen = 0
    {
        room_restart();
    }

if use_zoom_multiplier != use_zoom_scale_factor
    {
        if user_cursor_mode = 0
            {
                view_wview[view_port] = lerp(view_wview[view_port],use_zoom_x_view,0.1)
                view_hview[view_port] = lerp(view_hview[view_port],use_zoom_y_view,0.1)
                use_zoom_multiplier = lerp(use_zoom_multiplier,use_zoom_scale_factor,0.1)
                obj_game_logic.use_zoom_multiplier = lerp(obj_game_logic.use_zoom_multiplier,obj_game_logic.use_zoom_scale_factor,0.1);
            }
        else
            {
                if obj_game_logic.pause = 0
                    {
                        use_zoom_counter += 0.001
                        clamp(use_zoom_counter,0.03,0.08)
                        view_wview[view_port] = lerp(view_wview[view_port],use_zoom_x_view,use_zoom_counter)
                        view_hview[view_port] = lerp(view_hview[view_port],use_zoom_y_view,use_zoom_counter)
                        use_zoom_multiplier = lerp(use_zoom_multiplier,use_zoom_scale_factor,use_zoom_counter)
                        obj_game_logic.use_zoom_multiplier = lerp(obj_game_logic.use_zoom_multiplier,obj_game_logic.use_zoom_scale_factor,use_zoom_counter)
                    }
            }
    }

parent.use_zoom_x_view = use_zoom_x_view
parent.use_zoom_y_view = use_zoom_y_view

use_logic_controller_timer += 1

if use_logic_controller_timer &gt; 8 use_logic_controller_timer = 8;

//==================Hard-Wired Hotkeys==================//

//Close any open menus if we have pressed the escape key
if keyboard_check_pressed(vk_escape) and use_tile_menu!= 0
    {
        use_tile_menu = 0
        use_tile_menu_cool_down = 8
        use_keyboard_active = 0
        use_write_keyboard_string_active_string = -1
        audio_play_sound(snd_turn_page,50,false)
    }
//Show/Hide Help Captions
if keyboard_check_pressed(vk_f1)
    {
        user_show_help_captions += 1
        if (user_show_help_captions &gt; 1)
            user_show_help_captions = 0;
        audio_play_sound(pause_select,50,false)
    }

if user_cursor_mode = 0
    {

        //==================Collect Input From the Keyboard==================//

        //If The Keyboard Is Assigned For Input, Read The Keyboard For Inputs
        if parent.joy_input[2,1] = 0 and parent.joy_input[2,6] = 0
            {
                //Panning Movement
                edit_input[0,0] = keyboard_check(key_move_right) //Joystick Right
                edit_input[0,1] = keyboard_check(key_move_down)  //Joystick Down
                edit_input[0,2] = keyboard_check(key_move_left)  //Joystick Left
                edit_input[0,3] = keyboard_check(key_move_up)    //JoyStick Up

                //Arrow Key Movement
                edit_input[2,0] = keyboard_check(key_alt_right)  //Pan Right
                edit_input[2,1] = keyboard_check(key_alt_down)   //Pan Down
                edit_input[2,2] = keyboard_check(key_alt_left)   //Pan Left
                edit_input[2,3] = keyboard_check(key_alt_up)     //Pan Up

                //Editor Actions
                edit_input[1,0] = keyboard_check(key_put_here) //Move
                edit_input[1,2] = keyboard_check(key_copy)     //Delete
                edit_input[1,3] = keyboard_check(key_delete)   //Put Here
                edit_input[1,4] = keyboard_check(key_new_tile) //Copy

                //Editor Quick Actions
                edit_input[1,5] = keyboard_check(key_layer_up)   //Layer Up
                edit_input[1,6] = keyboard_check(key_layer_down) //Layer Down
                edit_input[1,7] = keyboard_check(key_snap_up)    //Snap Up
                edit_input[1,8] = keyboard_check(key_zoom)       //Zoom

                //Editor Menus
                edit_input[1,9]  = keyboard_check(key_pause)    //Exit
                edit_input[1,10] = keyboard_check(key_mode)     //Mode
                edit_input[1,11] = keyboard_check(key_undo)     //Undo
                edit_input[1,12] = keyboard_check(key_redo)     //Redo

                //Lock the use of the enter key when invoking alt right for fullscreen mode toggle
                if keyboard_check_direct(vk_ralt) and parent.key_start = 13 edit_input[1,9] = 0;
            }
        //==================Collect Input From the Joystick==================//
        
        //If a modern joystick is not assigned for input, disable keyboard inputs
        if parent.joy_input[2,1] = 1 and not gamepad_is_connected(parent.joy_modern_id)
            {
                //D-Pad Movement
                edit_input[0,0] = 0    //Joystick Right
                edit_input[0,1] = 0    //Joystick Down
                edit_input[0,2] = 0    //Joystick Left
                edit_input[0,3] = 0    //Joystick Up
                
                //Panning Movement
                edit_input[2,0] = 0    //Joystick Right
                edit_input[2,1] = 0    //Joystick Down
                edit_input[2,2] = 0    //Joystick Left
                edit_input[2,3] = 0    //Joystick Up
                
                //Analog Stick Movement
                edit_x = 0
                edit_y = 0
                look_x = 0
                look_y = 0
                
                //Editor Actions
                edit_input[1,0] = 0    //Move
                edit_input[1,2] = 0    //Delete
                edit_input[1,3] = 0    //Put Here
                edit_input[1,4] = 0    //Copy
                
                //Editor Quick Actions
                edit_input[1,5] = 0    //Layer Up
                edit_input[1,6] = 0    //Layer Down
                edit_input[1,7] = 0    //Snap Up
                edit_input[1,8] = 0    //Snap Down
                
                //Editor Menus
                edit_input[1,9]  = 0    //Pause
                edit_input[1,10] = 0    //New Tile
                edit_input[1,11]  = 0   //Undo
                edit_input[1,12] = 0    //Redo
            }

        //If A Modern Joystick Is Assigned For Input, Read The Joystick For Inputs
        if parent.joy_input[2,1] = 1 and gamepad_is_connected(parent.joy_modern_id) and parent.joy_input[2,6] = 0
            {
                //D-Pad Movement
                edit_input[0,0] = gamepad_button_check(parent.joy_modern_id,joy_move_right) //Joystick Right
                edit_input[0,1] = gamepad_button_check(parent.joy_modern_id,joy_move_down)  //Joystick Down
                edit_input[0,2] = gamepad_button_check(parent.joy_modern_id,joy_move_left)  //Joystick Left
                edit_input[0,3] = gamepad_button_check(parent.joy_modern_id,joy_move_up)    //JoyStick Up

                //Analog Stick Movement (Left)
                edit_x = gamepad_axis_value(parent.joy_modern_id,gp_axislh)
                edit_y = gamepad_axis_value(parent.joy_modern_id,gp_axislv)

                //Analog Stick Movement (Right)
                look_x = gamepad_axis_value(parent.joy_modern_id,gp_axisrh)
                look_y = gamepad_axis_value(parent.joy_modern_id,gp_axisrv)

                //Editor Actions
                edit_input[1,0] = gamepad_button_check(parent.joy_modern_id,joy_put_here)  //Move
                edit_input[1,2] = gamepad_button_check(parent.joy_modern_id,joy_copy)      //Delete
                edit_input[1,3] = gamepad_button_check(parent.joy_modern_id,joy_delete)    //Put Here
                edit_input[1,4] = gamepad_button_check(parent.joy_modern_id,joy_new_tile)  //Copy
                
                //Editor Quick Actions
                edit_input[1,5] = gamepad_button_check(parent.joy_modern_id,joy_layer_up)   //Layer Up
                edit_input[1,6] = gamepad_button_check(parent.joy_modern_id,joy_layer_down) //Layer Down
                edit_input[1,7] = gamepad_button_check(parent.joy_modern_id,joy_snap_up)    //Snap
                edit_input[1,8] = gamepad_button_check(parent.joy_modern_id,joy_zoom)       //Zoom
                
                //Editor Menus
                edit_input[1,9]  = gamepad_button_check(parent.joy_modern_id,joy_pause)    //Exit
                edit_input[1,10] = gamepad_button_check(parent.joy_modern_id,joy_mode)     //Mode
                edit_input[1,11] = gamepad_button_check(parent.joy_modern_id,joy_undo)     //Undo
                edit_input[1,12] = gamepad_button_check(parent.joy_modern_id,joy_redo)     //Redo
            }

        //==================================================================//
        //--Check for singular button presses across all assigned bindings--//
        //==================================================================//

        //D-Pad Movement
        if edit_input[0,0] = 1 use_right += 1; else use_right = 0; //Right
        if edit_input[0,1] = 1 use_down  += 1; else use_down = 0;  //Down
        if edit_input[0,2] = 1 use_left  += 1; else use_left = 0;  //Left
        if edit_input[0,3] = 1 use_up    += 1; else use_up = 0;    //Up
        //Editor Actions
        if edit_input[1,0] = 1 use_put_here += 1; else use_put_here = 0;    //Move
        if edit_input[1,2] = 1 use_copy     += 1; else use_copy     = 0;    //Delete
        if edit_input[1,3] = 1 use_delete   += 1; else use_delete   = 0;    //Put Here
        if edit_input[1,4] = 1 use_new_tile += 1; else use_new_tile = 0;    //New Tile
        //Editor Quick Actions
        if edit_input[1,5] = 1 use_layer_up += 1;   else use_layer_up = 0;   //Layer Up
        if edit_input[1,6] = 1 use_layer_down += 1; else use_layer_down = 0; //Layer Down
        if edit_input[1,7] = 1 use_snap_up += 1;    else use_snap_up = 0;    //Snap Up
        if edit_input[1,8] = 1 use_snap_down += 1;  else use_snap_down = 0;  //Zoom
        //Editor Menus
        if edit_input[1,9] = 1  use_pause += 1; else use_pause = 0; //Exit
        if edit_input[1,10] = 1 use_mode  += 1; else use_mode = 0;  //Mode
        if edit_input[1,11] = 1 use_undo += 1;  else use_undo = 0;  //Undo
        if edit_input[1,12] = 1 use_redo += 1;  else use_redo = 0;  //Redo
    }
else
    {
        use_delete     = 0                //Are we pressing the delete button?
        use_put_here   = 0                //Are we pressing the put here button?
        use_copy       = 0                //Are we pressing the copy button?
        use_layer_up   = 0                //Are we pressing the layer up button?
        use_layer_down = 0                //Are we pressing the layer down button?
        use_snap_up    = 0                //Are we pressing the snap up button?
        use_snap_down  = 0                //Are we pressing the snap down button?
        use_pause      = 0                //Are we pressing the pause button?
        use_new_tile   = 0                //Are we pressing the new tile button?
        use_move_left  = 0                //Are we pressing the left button?
        use_move_right = 0                //Are we pressing the right button?
        use_move_up    = 0                //Are we pressing the up button?
        use_move_down  = 0                //Are we pressing the down button?
        use_a        = 0                  //Are we pressing the A button? (Accept)
        use_b        = 0                  //Are we pressing the B button? (Cancel)
        use_c        = 0                  //Are we pressing the C button? (Change Character)
        use_start    = 0                  //Are we pressing the Start button? (Accept)
        use_left     = 0                  //Are we pressing left?
        use_right    = 0                  //Are we pressing right?
        use_up       = 0                  //Are we pressing up?
        use_down     = 0                  //Are we pressing down?
        use_undo     = 0
        use_redo     = 0

        var npc_check = instance_nearest(parent.universal_player_x,parent.universal_player_y,obj_interact_parent)
        if instance_exists(npc_check)
            {
                if npc_check.state = 1
                    use_npc_interaction_dialog_box_active = 1;
                else
                    use_npc_interaction_dialog_box_active = 0;
            }
        else
            use_npc_interaction_dialog_box_active = 0;
    }

//Override Most Menu Controls While In The Open and Save Menus
if use_tile_menu != 0
    {
        use_copy       = 0                //Are we pressing the copy button?
        use_layer_up   = 0                //Are we pressing the layer up button?
        use_layer_down = 0                //Are we pressing the layer down button?
        use_snap_up    = 0                //Are we pressing the snap up button?
        use_snap_down  = 0                //Are we pressing the snap down button?
        if use_tile_menu &gt; 1 use_new_tile = 0; //Are we pressing the new tile button?
        use_move_left  = 0                //Are we pressing the left button?
        use_move_right = 0                //Are we pressing the right button?
        use_move_up    = 0                //Are we pressing the up button?
        use_move_down  = 0                //Are we pressing the down button?
        use_a        = 0                  //Are we pressing the A button? (Accept)
        use_b        = 0                  //Are we pressing the B button? (Cancel)
        use_c        = 0                  //Are we pressing the C button? (Change Character)
        use_start    = 0                  //Are we pressing the Start button? (Accept)
        use_left     = 0                  //Are we pressing left?
        use_right    = 0                  //Are we pressing right?
        use_up       = 0                  //Are we pressing up?
        use_down     = 0                  //Are we pressing down?
        use_undo     = 0
        use_redo     = 0

        //Disable Virtual Clicks If The Space Bar Is Used For Clicking Menu Elements
        if keyboard_check(vk_space) and use_write_keyboard_string_active_string != -1
        and use_cursor_mode = 0
            use_put_here = 0;
    }

        //Undo Actions
        if (use_undo = 1)
            {
                if user_undo_level = 0
                    {
                        alarm_set(3,1)
                        audio_play_sound(pause_select,50,false)
                        show_debug_message("Undo!")
                    }
                user_undo_level -= 1
                if user_undo_level &lt; -1
                    user_undo_level = -1;
            }
        //Redo Actions
        if (use_redo = 1)
            {
                if user_undo_level &lt;= -1
                    {
                        alarm_set(4,1)
                        user_undo_level = 0
                        audio_play_sound(pause_select,50,false)
                        show_debug_message("Redo!")
                    }
            }

        //==========================Cursor Movement==========================//

        //Determine Cursor Skin Based On Player's Skin
        switch(parent.skin)
            {
                case spr_lilac:
                    {
                        if parent.alt_skin = 0 {use_cursor_spr = ui_lilac_cursor_0; use_cursor_spr_1 = ui_lilac_cursor_1; use_cursor_spr_2 = ui_lilac_cursor_2;}
                        else            {use_cursor_spr = ui_lilac_cursor_old_0; use_cursor_spr_1 = ui_lilac_cursor_old_1; use_cursor_spr_2 = ui_lilac_cursor_old_2;}
                        break;
                    }
                case spr_carol:
                    {   
                        if parent.alt_skin = 0
                            {
                                use_cursor_spr = ui_carol_cursor_0; use_cursor_spr_1 = ui_carol_cursor_1; use_cursor_spr_2 = ui_carol_cursor_2;
                            }
                        if parent.alt_skin = 1
                            {
                                use_cursor_spr = ui_carrie_cursor_0; use_cursor_spr_1 = ui_carrie_cursor_1; use_cursor_spr_2 = ui_carrie_cursor_2;
                            }
                        if parent.alt_skin = 2
                            {
                                use_cursor_spr = ui_chiasa_cursor_0; use_cursor_spr_1 = ui_chiasa_cursor_1; use_cursor_spr_2 = ui_chiasa_cursor_2;
                            }
                        break;
                    }
                case spr_milla: {use_cursor_spr = ui_cursor_milla_0; use_cursor_spr_1 = ui_cursor_milla_1; use_cursor_spr_2 = ui_cursor_milla_2; break;}
                case spr_spade: {use_cursor_spr = ui_spade_cursor_0; use_cursor_spr_1 = ui_spade_cursor_1; use_cursor_spr_2 = ui_spade_cursor_2; break;}
            }
        //Determine Cursor Mode Based On Current Input Device
        if keyboard_check(vk_anykey) or mouse_check_button(mb_any)
            use_cursor_mode = 0;
        if (abs(edit_x) &gt; joy_deadzone or abs(edit_y) &gt; joy_deadzone or abs(look_x) &gt; joy_deadzone or abs(look_y) &gt; joy_deadzone)
        and not keyboard_check(vk_anykey)
            {
                use_dispaly_key_prompt = 0
                use_cursor_mode = 1
            }

        //Decrement Cool Down Timer For Mouse Inputs
        if use_tile_menu_cool_down &gt; 0 use_tile_menu_cool_down -= 1;

        //Animate Cursor
        if use_cursor_animation_trigger = 1
            {
                use_cursor_animation_frame += 0.16
                if use_cursor_animation_frame &gt; 3.9
                    {
                        use_cursor_animation_frame = 0
                        use_cursor_animation_trigger = 0
                    }
            }

        //Modify Cursor's Position Based On Current Input Device//
        //------------------------------------------------------//

        //Keyboard/Mouse
        if use_cursor_mode = 0
            {
                //Interact with the cursor when the window has focus
                if window_has_focus()
                    {
                        use_cursor_x = mouse_x
                        use_cursor_y = mouse_y
                        //Modify Cursor's Position Based on Digital Input (Panning Movement)
                        if user_cursor_mode = 0 and use_keyboard_active = 0
                            {
                                if use_right &gt; 0 view_xview[view_port] += floor(use_zoom_scroll_speed);
                                if use_left  &gt; 0 view_xview[view_port] -= floor(use_zoom_scroll_speed);
                                if use_up    &gt; 0 view_yview[view_port] -= floor(use_zoom_scroll_speed);
                                if use_down  &gt; 0 view_yview[view_port] += floor(use_zoom_scroll_speed);
                            }
                    }
                //Recenter the cursor if the window is out of focus
                else
                    {
                        use_cursor_x = view_xview[view_port]+213
                        use_cursor_y = view_yview[view_port]+120
                    }
            }
        //Controller
        else
            {
                //Modify Cursor's Position Based On Analog Input
                if use_move_mode = 0
                    {
                        if abs(edit_x) &gt; joy_deadzone and (device_mouse_x_to_gui(0) &gt;= 0 and device_mouse_x_to_gui(0) &lt;= 426) {use_cursor_x += edit_x * floor(use_zoom_scroll_speed);  use_dispaly_key_prompt = 0;}
                        if abs(edit_y) &gt; joy_deadzone {use_cursor_y += edit_y * floor(use_zoom_scroll_speed);  use_dispaly_key_prompt = 0;}
                        if abs(look_x) &gt; joy_deadzone {view_xview[view_port] += floor(look_x * use_zoom_scroll_speed*2); use_dispaly_key_prompt = 0;}
                        if abs(look_y) &gt; joy_deadzone {view_yview[view_port] += floor(look_y * use_zoom_scroll_speed*2); use_dispaly_key_prompt = 0;}
                    }
                //Otherwise, Only Move In Increments Across The Grid
                else
                    {
                        //Left Analog Stick
                        if (gamepad_axis_value(parent.joy_modern_id,gp_axislh) &lt; -parent.deadzone_mod) use_move_left += 1; else use_move_left = 0;   //Joystick Left
                        if (gamepad_axis_value(parent.joy_modern_id,gp_axislh) &gt;  parent.deadzone_mod) use_move_right += 1; else use_move_right = 0; //Joystick Right
                        if (gamepad_axis_value(parent.joy_modern_id,gp_axislv) &lt; -parent.deadzone_mod) use_move_up += 1;    else use_move_up = 0;    //Joystick Up
                        if (gamepad_axis_value(parent.joy_modern_id,gp_axislv) &gt;  parent.deadzone_mod) use_move_down += 1;  else use_move_down = 0;  //Joystick Down
                        if use_move_right = 1 use_cursor_x += floor(user_grid_snap);
                        if use_move_left  = 1 use_cursor_x -= floor(user_grid_snap);
                        if use_move_up    = 1 use_cursor_y -= floor(user_grid_snap);
                        if use_move_down  = 1 use_cursor_y += floor(user_grid_snap);
                        //Modify Cursor's Position Based on Digital Input (Panning Movement)
                        if use_move_right &gt; 8 use_cursor_x += floor(user_grid_snap);
                        if use_move_left  &gt; 8 use_cursor_x -= floor(user_grid_snap);
                        if use_move_up    &gt; 8 use_cursor_y -= floor(user_grid_snap);
                        if use_move_down  &gt; 8 use_cursor_y += floor(user_grid_snap);
                    }

                //Modify Cursor's Position Based on Digital Input (Pixel-Precise Movement)
                if use_right = 1 use_cursor_x += user_grid_snap;
                if use_left = 1  use_cursor_x -= user_grid_snap;
                if use_up = 1    use_cursor_y -= user_grid_snap;
                if use_down = 1  use_cursor_y += user_grid_snap;
                //Modify Cursor's Position Based on Digital Input (Panning Movement)
                if use_right &gt; 8 use_cursor_x += floor(user_grid_snap);
                if use_left  &gt; 8 use_cursor_x -= floor(user_grid_snap);
                if use_up    &gt; 8 use_cursor_y -= floor(user_grid_snap);
                if use_down  &gt; 8 use_cursor_y += floor(user_grid_snap);

                //Remove Subpixels From The Cursor's Movement
                use_cursor_x = floor(use_cursor_x)
                use_cursor_y = floor(use_cursor_y)

                if abs(edit_x) &gt; joy_deadzone or abs(edit_y) &gt; joy_deadzone
                    {
                        //Manipulate Real Mouse Position Based On Provided Coordinates
                        var use_cursor_mouse_x = abs(use_cursor_x-view_xview[view_port]);
                        var use_cursor_mouse_y = abs(use_cursor_y-view_yview[view_port]);
        
                        var use_window_width  = window_get_width()  / view_wview[view_port];
                        var use_window_height = window_get_height() / view_hview[view_port];
        
                        window_mouse_set(use_cursor_mouse_x*use_window_width,use_cursor_mouse_y*use_window_height);
                    }
            }

        //Disable The Screensaver While The Cursor Is Moving

        //Iterate Cursor Timer
        cursor_previous_timer += 1

        //Upon The Second Frame, Collect The Mouse's Current X/Y Positions
        if cursor_previous_timer = 2
            {
                cursor_previous_x = mouse_x
                cursor_previous_y = mouse_y
            }
        //If The Collected X/Y Positions Do Not Match the Current Frame,
        //Reset The Screensaver Timer
        if cursor_previous_timer &gt;= 3
            {
                cursor_previous_timer = 0
                if cursor_previous_x != mouse_x
                or cursor_previous_y != mouse_y
                    parent.joy_input_screen_saver = 0;
            }
        
        if abs(edit_x) &lt; joy_deadzone and abs(edit_y) &lt; joy_deadzone
        and point_distance(mouse_x,mouse_y,use_cursor_x,use_cursor_y) &gt; 8
            {
                use_dispaly_key_prompt = 1
                use_cursor_mode = 0
            }

        //Round Cursor Position Based On Grid Snap Size To Create A Grid
        user_grid_snap_x = round(use_cursor_x / user_grid_snap) * user_grid_snap
        user_grid_snap_y = round(use_cursor_y / user_grid_snap) * user_grid_snap

        //Prevent The Player From Placing Objects And Tiles Beyond The Boundaries Of The Room
        if use_cursor_x &lt; 0 user_grid_snap_x = 0;
        if use_cursor_x &gt; room_width user_grid_snap_x = room_width;
        if use_cursor_y &lt; 0 user_grid_snap_y = 0;
        if use_cursor_y &gt; room_height user_grid_snap_y = room_height;

        //Fade Effect For The Tile's Boundary Box
        if user_tile_boundary_fade_direction = 1 user_tile_boundary_alpha += 0.0075;
        if user_tile_boundary_fade_direction = 0 user_tile_boundary_alpha -= 0.0075;
        if user_tile_boundary_alpha &gt; 0.3 user_tile_boundary_fade_direction = 0;
        if user_tile_boundary_alpha &lt; 0.1 user_tile_boundary_fade_direction = 1;

        //If Item Rotation Is Activated, Scan For Flat Surface Tiles
        if (item_rotate_allowed = 1 and use_tile_switching_mode = 0)
            {
                //Check for Tiles on Layer 0. (Flat Surface Collisions)
                var tile_surface_id_up    = tile_layer_find(surface_flats,use_cursor_x,use_cursor_y-16);
                var tile_surface_id_down  = tile_layer_find(surface_flats,use_cursor_x,use_cursor_y+16);
                var tile_surface_id_left  = tile_layer_find(surface_flats,use_cursor_x-16,use_cursor_y);
                var tile_surface_id_right = tile_layer_find(surface_flats,use_cursor_x+16,use_cursor_y);

                //Set item rotation based on discovered tiles
                if tile_exists(tile_surface_id_up)    item_rotate_angle = 180;
                if tile_exists(tile_surface_id_down)  item_rotate_angle = 0;
                if tile_exists(tile_surface_id_left)  item_rotate_angle = 270;
                if tile_exists(tile_surface_id_right) item_rotate_angle = 90;
                //Reset item rotation if item is placed too deeply inside of walls or ceilings
                if (tile_exists(tile_surface_id_up) and tile_exists(tile_surface_id_down))
                or (tile_exists(tile_surface_id_left) and tile_exists(tile_surface_id_right))
                    item_rotate_angle = 0;
                //Reset item rotation if item is placed too deeply inside of walls or ceilings
                if (!tile_exists(tile_surface_id_up) and !tile_exists(tile_surface_id_down)
                and !tile_exists(tile_surface_id_left) and !tile_exists(tile_surface_id_right))
                    item_rotate_angle = 0;
            }

        //Copy Keyboard Strings For The Save Menu
        if use_write_keyboard_string_active_string != -1
            {
                switch(use_write_keyboard_string_active_string)
                    {
                        //Stage Name
                        case 0:
                            {
                                //Check against non-lettered characters
                                if keyboard_check_pressed(vk_anykey)
                                    {
                                        var check_key = string_char_at(keyboard_string,string_length(keyboard_string));
                
                                        if check_key = "!"
                                        or check_key = '"'
                                        or check_key = "#"
                                        or check_key = "$"
                                        or check_key = "%"
                                        or check_key = "^"
                                        or check_key = "&amp;"
                                        or check_key = "'"
                                        or check_key = "("
                                        or check_key = ")"
                                        or check_key = "*"
                                        or check_key = "+"
                                        or check_key = "-"
                                        or check_key = "."
                                        or check_key = "/"
                                        or check_key = ":"
                                        or check_key = ";"
                                        or check_key = "&lt;"
                                        or check_key = "="
                                        or check_key = "&gt;"
                                        or check_key = "?"
                                        or check_key = "@"
                                        or check_key = "["
                                        or check_key = "\"
                                        or check_key = "]"
                                        or check_key = "^"
                                        or check_key = "_"
                                        or check_key = "`"
                                        or check_key = "{"
                                        or check_key = "|"
                                        or check_key = "}"
                                        or check_key = "~"
                                            {
                                                scr_set_message("No special characters allowed!")
                                                use_write_keyboard_string_stage_name = string_delete(use_write_keyboard_string_stage_name,string_length(use_write_keyboard_string_stage_name),1);
                                                keyboard_string = string_delete(keyboard_string,string_length(keyboard_string),1);
                                            }
                                    }
                                use_write_keyboard_string_stage_name = keyboard_string
                                //Increment Flash Timer
                                use_keyboard_active_timer += 1
                                //Reset Flash Timer
                                if use_keyboard_active_timer &gt; 32 use_keyboard_active_timer = 0;
                                if use_keyboard_active_timer &lt; 16 use_keyboard_active_indicator = "|";
                                else                              use_keyboard_active_indicator = "";
                                use_keyboard_active_indicator_description = ""
                                use_keyboard_active_indicator_architect = ""
                                //Enforce Strict Character Limit
                                if string_length(use_write_keyboard_string_stage_name) &gt; 30
                                    {
                                        use_write_keyboard_string_stage_name = string_copy(use_write_keyboard_string_stage_name,1,30);
                                        keyboard_string = string_copy(keyboard_string,1,30);
                                    }
                                break;
                            }
                        //Description
                        case 1:
                            {
                                use_write_keyboard_string_description = keyboard_string
                                //Increment Flash Timer
                                use_keyboard_active_timer_description += 1
                                //Reset Flash Timer
                                if use_keyboard_active_timer_description &gt; 32 use_keyboard_active_timer_description = 0;
                                if use_keyboard_active_timer_description &lt; 16 use_keyboard_active_indicator_description = "|";
                                else                                          use_keyboard_active_indicator_description = "";
                                use_keyboard_active_indicator = ""
                                use_keyboard_active_indicator_architect = ""
                                //Enforce Strict Character Limit
                                if string_length(use_write_keyboard_string_description) &gt; 32
                                    {
                                        use_write_keyboard_string_description = string_copy(use_write_keyboard_string_description,1,32);
                                        keyboard_string = string_copy(keyboard_string,1,32);
                                    }
                                break;
                            }
                        //Architect
                        case 2:
                            {
                                use_write_keyboard_string_architect = keyboard_string
                                //Increment Flash Timer
                                use_keyboard_active_timer_architect += 1
                                //Reset Flash Timer
                                if use_keyboard_active_timer_architect &gt; 32 use_keyboard_active_timer_architect = 0;
                                if use_keyboard_active_timer_architect &lt; 16 use_keyboard_active_indicator_architect = "|";
                                else                                        use_keyboard_active_indicator_architect = "";
                                use_keyboard_active_indicator_description = ""
                                use_keyboard_active_indicator = ""
                                //Enforce Strict Character Limit
                                if string_length(use_write_keyboard_string_architect) &gt; 12
                                    {
                                        use_write_keyboard_string_architect = string_copy(use_write_keyboard_string_architect, 1, 12);
                                        keyboard_string = string_copy(keyboard_string,1,12);
                                    }
                                break;
                            }
                    }
            }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Saving Algorithm

//==========================Save Level Data==========================//

//Increment Delay Timer (So the game logic object has time to reactivate all instances in the room)
if use_write_delay &gt; 0 use_write_delay += 1;
if use_write_delay &gt; 8
    {
        nsfs_init()
        //Set Multi-Map Section Shift In the Map
        var map_offset = "";
        if parent.use_maps_current_map &gt; 0
            {
                map_offset = string(parent.use_maps_current_map)
            }
        //Remove Older File If It Exists, And the File Has No Multi-Map Data
        if parent.use_maps_current_map = 0 and parent.use_maps_overwrite_protection = 0
            {
                //Set editor to rebuild the maps file list, if we're adding new files to the maps folder
                if not file_exists_ns(program_directory + "Maps\" + use_write_keyboard_string_stage_name + ".map")
                    user_built_list = 0;
                //Otherwise, delete the old file if it exists
                if file_exists_ns(program_directory + "Maps\" + use_write_keyboard_string_stage_name + ".map")
                    file_delete_ns(program_directory + "Maps\" + use_write_keyboard_string_stage_name + ".map");                    
            }
        //Open Level Map
        ini_open_ns(program_directory + "Maps\" + use_write_keyboard_string_stage_name + ".map")
        //Overwrite Old Map Data Differently If We Are A Multimap stage
        if ini_section_exists("1lvl_hd")
            {
                //Flag Old Tile Data As "Ignore"
                use_write_position = 0
                use_write_length = real(ini_read_string(map_offset+"lvl_hd","lvl_tile_count","0"))
                while(use_write_position &lt;= use_write_length)
                    {
                        if ini_section_exists(map_offset+"lvl_tiles_"+string(use_write_position))
                            ini_section_delete(map_offset+"lvl_tiles_"+string(use_write_position));
                        use_write_position += 1
                    }
                use_write_position = 0
                use_write_length = 0
                //Flag Old Object Data As "Ignore"
                use_write_obj_position = 0;
                use_write_length = real(ini_read_string(map_offset+"lvl_hd","lvl_obj_count","0"));
                while(use_write_obj_position &lt;= use_write_length)
                    {
                        if ini_section_exists(map_offset+"lvl_objects_"+string(use_write_obj_position))
                            ini_section_delete(map_offset+"lvl_objects_"+string(use_write_obj_position));
                        use_write_obj_position += 1
                    }
                use_write_obj_position = 0
                use_write_length = 0
            }
        //Write Header
        ini_write_string("lvl_hd","lvl_name",use_write_keyboard_string_stage_name)
        ini_write_string("lvl_hd","lvl_author",use_write_keyboard_string_architect)
        ini_write_string("lvl_hd","lvl_description",use_write_keyboard_string_description)
        ini_write_string("lvl_hd","lvl_weather",use_weather_iterations)
        ini_write_string("lvl_hd","lvl_win_condition",use_win_iterations)
        //Check For Character Exclusivity (Default to All Characters)
        ini_write_string("lvl_hd","lvl_char","All")
        if instance_exists(obj_player_spawnpoint_lilac) ini_write_string("lvl_hd","lvl_char","Lilac");
        if instance_exists(obj_player_spawnpoint_carol) ini_write_string("lvl_hd","lvl_char","Carol");
        if instance_exists(obj_player_spawnpoint_milla) ini_write_string("lvl_hd","lvl_char","Milla");
        if instance_exists(obj_player_spawnpoint_carols_bike) ini_write_string("lvl_hd","lvl_char","Carol's Bike");
        if instance_exists(obj_player_spawnpoint_spade) ini_write_string("lvl_hd","lvl_char","Spade");
        if instance_exists(obj_player_spawnpoint_carrie) ini_write_string("lvl_hd","lvl_char","Carrie");
        if instance_exists(obj_player_spawnpoint_chiasa) ini_write_string("lvl_hd","lvl_char","Chiasa");
        //Clear Time Attack Save Data
        ini_write_string("lvl_hd","lvl_best_time","600000")
        ini_write_string("lvl_hd","version_number",string(obj_game_logic.version_number))
        //Write Tile Data
        use_write_array = tile_get_ids()
        use_write_length = array_length_1d(use_write_array)
        use_write_position = 0
        while(use_write_position &lt;= use_write_length)
            {
                //Arbitrary Asset Definition Table
                var use_conversion = 0;
                switch(tile_get_background(use_write_array[use_write_position]))
                    {
                        case mu_flat_0:   {use_conversion = 0; break;}
                        case mu_flat_1:   {use_conversion = 1; break;}
                        case mu_flat_2:   {use_conversion = 2; break;}
                        case mu_flat_3:   {use_conversion = 3; break;}
                        case mu_flat_4:   {use_conversion = 4; break;}
                        case mu_flat_5:   {use_conversion = 5; break;}
                        case mu_flat_6:   {use_conversion = 6; break;}
                        case mu_flat_7:   {use_conversion = 7; break;}
                        case mu_flat_8:   {use_conversion = 8; break;}
                        case mu_flat_9:   {use_conversion = 9; break;}
                        case mu_flat_10:  {use_conversion = 10; break;}
                        case mu_flat_11:  {use_conversion = 11; break;}
                        case mu_flat_12:  {use_conversion = 12; break;}
                        case mu_flat_13:  {use_conversion = 13; break;}
                        case mu_flat_14:  {use_conversion = 14; break;}
                        case mu_flat_15:  {use_conversion = 15; break;}
                        case mu_flat_16:  {use_conversion = 16; break;}
                        case mu_flat_17:  {use_conversion = 17; break;}
                        case mu_flat_18:  {use_conversion = 18; break;}
                        case mu_flat_19:  {use_conversion = 19; break;}
                        case mu_flat_20:  {use_conversion = 20; break;}
                        case mu_flat_21:  {use_conversion = 21; break;}
                        case mu_flat_22:  {use_conversion = 22; break;}
                        case mu_flat_23:  {use_conversion = 23; break;}
                        case mu_flat_24:  {use_conversion = 24; break;}
                        case mu_flat_25:  {use_conversion = 25; break;}
                        case mu_flat_26:  {use_conversion = 26; break;}
                        case mu_flat_27:  {use_conversion = 27; break;}
                        case mu_flat_28:  {use_conversion = 28; break;}
                        case mu_flat_29:  {use_conversion = 29; break;}
                        case mu_ramp_0:   {use_conversion = 30; break;}
                        case mu_ramp_1:   {use_conversion = 31; break;}
                        case mu_ramp_2:   {use_conversion = 32; break;}
                        case mu_ramp_3:   {use_conversion = 33; break;}
                        case mu_ramp_4:   {use_conversion = 34; break;}
                        case mu_ramp_5:   {use_conversion = 35; break;}
                        case mu_ramp_6:   {use_conversion = 36; break;}
                        case mu_ramp_7:   {use_conversion = 37; break;}
                        case mu_ramp_8:   {use_conversion = 38; break;}
                        case mu_ramp_9:   {use_conversion = 39; break;}
                        case mu_slope_0:  {use_conversion = 40; break;}
                        case mu_slope_1:  {use_conversion = 41; break;}
                        case mu_slope_6:  {use_conversion = 42; break;}
                        case mu_slope_7:  {use_conversion = 43; break;}
                        case mu_slope_8:  {use_conversion = 44; break;}
                        case mu_slope_9:  {use_conversion = 45; break;}
                        case mu_slope_10: {use_conversion = 46; break;}
                        case mu_slope_11: {use_conversion = 47; break;}
                        case mu_slope_12: {use_conversion = 48; break;}
                        case mu_slope_13: {use_conversion = 49; break;}
                        case tile_layer_changer:        {use_conversion = 50; break;}
                        case tile_layer_changer_left:   {use_conversion = 51; break;}
                        case mu_fof_0:                  {use_conversion = 52; break;}
                        case mu_fof_10:                 {use_conversion = 53; break;}
                        case mu_fof_2:                  {use_conversion = 54; break;}
                        case mu_fof_11:                 {use_conversion = 55; break;}
                        case tile_reverse_course_32:    {use_conversion = 56; break;}
                        //case tile_ramp_entry:           {use_conversion = 57; break;}
                        case mu_slope_ceiling_16:       {use_conversion = 58; break;}
                        case mu_slope_ceiling_64:       {use_conversion = 59; break;}
                        case mu_scene_0:    {use_conversion = 60; break;}
                        case mu_scene_1:    {use_conversion = 61; break;}
                        case mu_scene_2:    {use_conversion = 62; break;}
                        case mu_scene_3:    {use_conversion = 63; break;}
                        case mu_scene_4:    {use_conversion = 64; break;}
                        case mu_scene_5:    {use_conversion = 65; break;}
                        case mu_scene_6:    {use_conversion = 66; break;}
                        case mu_scene_8:    {use_conversion = 67; break;}
                        case mu_scene_9:    {use_conversion = 68; break;}
                        case mu_scene_10:   {use_conversion = 69; break;}
                        case mu_scene_11:   {use_conversion = 70; break;}
                        case mu_scene_12:   {use_conversion = 71; break;}
                        case mu_scene_13:   {use_conversion = 72; break;}
                        case mu_scene_14:   {use_conversion = 73; break;}
                        case mu_scene_15:   {use_conversion = 74; break;}
                        case mu_scene_16:   {use_conversion = 75; break;}
                        case mu_scene_17:   {use_conversion = 76; break;}
                        case mu_scene_18:   {use_conversion = 77; break;}
                        case mu_scene_19:   {use_conversion = 78; break;}
                        case mu_scene_20:   {use_conversion = 79; break;}
                        case mu_scene_21:   {use_conversion = 80; break;}
                        case mu_scene_22:   {use_conversion = 81; break;}
                        case mu_scene_23:   {use_conversion = 82; break;}
                        case mu_scene24:    {use_conversion = 83; break;}
                        case mu_scene_25:   {use_conversion = 84; break;}
                        case spr_spikes_4:  {use_conversion = 85; break;}
                        case spr_spikes_3:  {use_conversion = 86; break;}
                        case spr_spikes_5:  {use_conversion = 87; break;}
                        case spr_spikes_6:  {use_conversion = 88; break;}
                        case spr_ladder_0:  {use_conversion = 89; break;}
                        case spr_hangbar_0: {use_conversion = 90; break;}
                        case spr_hangbar_1: {use_conversion = 91; break;}
                        case spr_dirt_0:    {use_conversion = 92; break;}
                        case spr_dirt_1:    {use_conversion = 93; break;}
                        case spr_flower_0:  {use_conversion = 94; break;}
                        case spr_flower_1:  {use_conversion = 95; break;}
                        case spr_flower_2:  {use_conversion = 96; break;}
                        case spr_flower_3:  {use_conversion = 97; break;}
                        case spr_flower_4:  {use_conversion = 98; break;}
                        case spr_flower_5:  {use_conversion = 99; break;}
                        case spr_flower_6:  {use_conversion = 100; break;}
                        case spr_flower_7:  {use_conversion = 101; break;}
                        case spr_flower_8:  {use_conversion = 102; break;}
                        case spr_crate_0:   {use_conversion = 103; break;}
                        case spr_gascan_0:  {use_conversion = 104; break;}
                        case spr_switch_0:  {use_conversion = 105; break;}
                        case spr_switch_2:  {use_conversion = 106; break;}
                        case spr_switch_4:  {use_conversion = 107; break;}
                        case spr_spring_0_0: {use_conversion = 108; break;}
                        case spr_spring_1_0: {use_conversion = 109; break;}
                        case spr_spring_2_0: {use_conversion = 110; break;}
                        case spr_spring_3_0: {use_conversion = 111; break;}
                        case spr_spring_4_0: {use_conversion = 112; break;}
                        case spr_spring_5_0: {use_conversion = 113; break;}
                        case spr_spring_6_0: {use_conversion = 114; break;}
                        case spr_spring_7_0: {use_conversion = 115; break;}
                        case spr_spring_8_0: {use_conversion = 116; break;}
                        case spr_spring_9_0: {use_conversion = 117; break;}
                        case spr_spring_10_0: {use_conversion = 118; break;}
                        case spr_spring_11_0: {use_conversion = 119; break;}
                        case spr_spring_12_0: {use_conversion = 120; break;}
                        case spr_spring_13_0: {use_conversion = 121; break;}
                        case spr_spring_14_0: {use_conversion = 122; break;}
                        case spr_spring_15_0: {use_conversion = 174; break;}
                        //Also convert double-sided slope tiles into their inside variants
                        case mu_slope_2:     {use_conversion = 42; break;}
                        case mu_slope_3:     {use_conversion = 43; break;}
                        case mu_slope_4:     {use_conversion = 44; break;}   
                        case mu_slope_5:     {use_conversion = 45; break;}                     
                        case mu_slope_14:    {use_conversion = 46; break;}
                        case mu_slope_15:    {use_conversion = 47; break;}
                        case mu_slope_16:    {use_conversion = 48; break;}
                        case mu_slope_17:    {use_conversion = 49; break;}
                        case mu_slope_20:    {use_conversion = 392; break;}
                        case mu_slope_21:    {use_conversion = 393; break;}
                        case mu_slope_22:    {use_conversion = 394; break;}
                        case mu_slope_23:    {use_conversion = 395; break;}
                        case mu_slope_24:    {use_conversion = 396; break;}
                        case mu_slope_25:    {use_conversion = 397; break;}
                        case mu_slope_26:    {use_conversion = 398; break;}
                        case mu_slope_27:    {use_conversion = 399; break;}
                        //Also convert tiles not registered in the level editor's tile definitions
                        case tile_reverse_course: {use_conversion = 154; break;}
                        //case tile_ramp_1:         {use_conversion = 155; break;}
                        //case tile_ramp_2:         {use_conversion = 156; break;}
                        //case tile_ramp_3:         {use_conversion = 157; break;}
                        //case tile_ramp_4:         {use_conversion = 158; break;}
                        //case tile_ramp_auto:      {use_conversion = 160; break;}
                        //case tile_ramp_item:      {use_conversion = 161; break;}
                        case mu_ramp_10:          {use_conversion = 162; break;}
                        case mu_ramp_11:          {use_conversion = 163; break;}
                        case mu_ramp_12:          {use_conversion = 164; break;}
                        case mu_ramp_13:          {use_conversion = 165; break;}
                        case mu_ramp_14:          {use_conversion = 166; break;}
                        case mu_ramp_15:          {use_conversion = 167; break;}
                        case mu_ramp_16:          {use_conversion = 168; break;}
                        case mu_ramp_17:          {use_conversion = 169; break;}
                        case mu_ramp_18:          {use_conversion = 170; break;}
                        case mu_ramp_19:          {use_conversion = 171; break;}
                        case mu_ramp_20:          {use_conversion = 172; break;}
                        case mu_ramp_21:          {use_conversion = 173; break;}
                        case mu_scene_27:         {use_conversion = 184; break;}
                        case mu_scene_28:         {use_conversion = 185; break;}
                        case mu_scene_29:         {use_conversion = 186; break;}
                        case mu_scene_30:         {use_conversion = 187; break;}
                        case mu_scene_31:         {use_conversion = 188; break;}
                        case mu_scene_32:         {use_conversion = 189; break;}
                        case mu_flat_30:          {use_conversion = 190; break;}
                        case mu_flat_31:          {use_conversion = 191; break;}
                        case mu_flat_32:          {use_conversion = 192; break;}
                        case mu_flat_33:          {use_conversion = 193; break;}
                        case mu_flat_34:          {use_conversion = 194; break;}
                        case mu_flat_35:          {use_conversion = 195; break;}
                        case mu_fof_12:           {use_conversion = 196; break;}
                        case mu_fof_13:           {use_conversion = 197; break;}
                        case mu_scene_33:         {use_conversion = 198; break;}
                        case mu_paint_black:      {use_conversion = 199; break;}
                        case mu_paint_white:      {use_conversion = 200; break;}
                        case mu_paint_red:        {use_conversion = 201; break;}
                        case mu_paint_burgundy:   {use_conversion = 202; break;}
                        case mu_paint_yellow:     {use_conversion = 203; break;}
                        case mu_paint_dark_yellow: {use_conversion = 204; break;}
                        case mu_paint_green:       {use_conversion = 205; break;}
                        case mu_paint_dark_green:  {use_conversion = 206; break;}
                        case mu_paint_cyan:        {use_conversion = 207; break;}
                        case mu_paint_dark_cyan:   {use_conversion = 208; break;}
                        case mu_paint_blue:        {use_conversion = 209; break;}
                        case mu_paint_pink:        {use_conversion = 210; break;}
                        case mu_paint_purple:      {use_conversion = 211; break;}
                        case mu_flat_36:           {use_conversion = 219; break;}
                        case mu_flat_37:           {use_conversion = 220; break;}
                        case mu_paint_dark_blue:   {use_conversion = 233; break;}
                        case mu_paint_light_gray:  {use_conversion = 234; break;}
                        case mu_slope_18:          {use_conversion = 238; break;}
                        case mu_slope_19:          {use_conversion = 239; break;}
                        //City Tile Set
                        case wd_flat_0:            {use_conversion = 270; break;}
                        case wd_flat_1:            {use_conversion = 271; break;}
                        case wd_flat_2:            {use_conversion = 272; break;}
                        case wd_flat_3:            {use_conversion = 273; break;}
                        case wd_flat_4:            {use_conversion = 274; break;}
                        case wd_flat_5:            {use_conversion = 275; break;}
                        case wd_flat_6:            {use_conversion = 276; break;}
                        case wd_flat_7:            {use_conversion = 277; break;}
                        case wd_flat_8:            {use_conversion = 278; break;}
                        case wd_flat_9:            {use_conversion = 279; break;}
                        case wd_flat_10:           {use_conversion = 280; break;}
                        case wd_flat_11:           {use_conversion = 281; break;}
                        case wd_flat_12:           {use_conversion = 282; break;}
                        case wd_flat_13:           {use_conversion = 283; break;}
                        case wd_flat_14:           {use_conversion = 284; break;}
                        case wd_flat_15:           {use_conversion = 285; break;}
                        case wd_flat_16:           {use_conversion = 286; break;}
                        case wd_flat_17:           {use_conversion = 287; break;}
                        case wd_flat_18:           {use_conversion = 448; break;}
                        case wd_flat_19:           {use_conversion = 449; break;}
                        //Ramps
                        case wd_ramp_0:            {use_conversion = 288; break;}
                        case wd_ramp_1:            {use_conversion = 289; break;}
                        case wd_ramp_2:            {use_conversion = 290; break;}
                        case wd_ramp_3:            {use_conversion = 291; break;}
                        case wd_ramp_4:            {use_conversion = 292; break;}
                        case wd_ramp_5:            {use_conversion = 293; break;}
                        case wd_ramp_6:            {use_conversion = 294; break;}
                        case wd_ramp_7:            {use_conversion = 295; break;}
                        case wd_ramp_8:            {use_conversion = 296; break;}
                        case wd_ramp_9:            {use_conversion = 297; break;}
                        case wd_ramp_10:           {use_conversion = 298; break;}
                        case wd_ramp_11:           {use_conversion = 299; break;}
                        case wd_ramp_12:           {use_conversion = 300; break;}
                        case wd_ramp_13:           {use_conversion = 301; break;}
                        case wd_ramp_14:           {use_conversion = 302; break;}
                        case wd_ramp_15:           {use_conversion = 303; break;}
                        case wd_ramp_16:           {use_conversion = 352; break;}
                        case wd_ramp_17:           {use_conversion = 353; break;}
                        case wd_ramp_18:           {use_conversion = 354; break;}
                        case wd_ramp_19:           {use_conversion = 355; break;}
                        case wd_ramp_20:           {use_conversion = 356; break;}
                        case wd_ramp_21:           {use_conversion = 357; break;}
                        case wd_ramp_22:           {use_conversion = 358; break;}
                        case wd_ramp_23:           {use_conversion = 359; break;}
                        case wd_ramp_24:           {use_conversion = 360; break;}
                        case wd_ramp_25:           {use_conversion = 361; break;}
                        case wd_ramp_26:           {use_conversion = 362; break;}
                        case wd_ramp_27:           {use_conversion = 363; break;}
                        //Slopes
                        case wd_slope_0:           {use_conversion = 304; break;}
                        case wd_slope_1:           {use_conversion = 305; break;}
                        case wd_slope_2:           {use_conversion = 306; break;}
                        case wd_slope_3:           {use_conversion = 307; break;}
                        case wd_slope_4:           {use_conversion = 308; break;}
                        case wd_slope_5:           {use_conversion = 309; break;}
                        case wd_slope_6:           {use_conversion = 310; break;}
                        case wd_slope_7:           {use_conversion = 311; break;}
                        case wd_slope_8:           {use_conversion = 312; break;}
                        case wd_slope_9:           {use_conversion = 313; break;}
                        case wd_slope_10:          {use_conversion = 314; break;}
                        case wd_slope_11:          {use_conversion = 315; break;}
                        case wd_slope_12:          {use_conversion = 316; break;}
                        case wd_slope_13:          {use_conversion = 317; break;}
                        case wd_slope_14:          {use_conversion = 318; break;}
                        case wd_slope_15:          {use_conversion = 319; break;}
                        case wd_slope_16:          {use_conversion = 344; break;}
                        case wd_slope_17:          {use_conversion = 345; break;}
                        case wd_slope_18:          {use_conversion = 346; break;}
                        case wd_slope_19:          {use_conversion = 347; break;}
                        case wd_slope_20:          {use_conversion = 348; break;}
                        case wd_slope_21:          {use_conversion = 349; break;}
                        case wd_slope_22:          {use_conversion = 350; break;}
                        case wd_slope_23:          {use_conversion = 351; break;}
                        //FOFs
                        case wd_fof_1:             {use_conversion = 609; break;}
                        case wd_fof_2:             {use_conversion = 610; break;}
                        case wd_fof_3:             {use_conversion = 611; break;}
                        case wd_fof_4:             {use_conversion = 612; break;}
                        case wd_fof_0:             {use_conversion = 613; break;}
                        //Scenery
                        case wd_scenery_0:         {use_conversion = 320; break;}
                        case wd_scenery_1:         {use_conversion = 321; break;}
                        case wd_scenery_2:         {use_conversion = 322; break;}
                        case wd_scenery_3:         {use_conversion = 323; break;}
                        case wd_scenery_4:         {use_conversion = 324; break;}
                        case wd_scenery_5:         {use_conversion = 325; break;}
                        case wd_scenery_6:         {use_conversion = 326; break;}
                        case wd_scenery_7:         {use_conversion = 327; break;}
                        case wd_scenery_8:         {use_conversion = 328; break;}
                        case wd_scenery_9:         {use_conversion = 329; break;}
                        case wd_scenery_10:        {use_conversion = 330; break;}
                        case wd_scenery_11:        {use_conversion = 331; break;}
                        case wd_scenery_12:        {use_conversion = 332; break;}
                        case wd_scenery_13:        {use_conversion = 400; break;}
                        case wd_scenery_14:        {use_conversion = 401; break;}
                        case wd_scenery_15:        {use_conversion = 402; break;}
                        case wd_scenery_16:        {use_conversion = 403; break;}
                        case wd_scenery_17:        {use_conversion = 404; break;}
                        case wd_scenery_18:        {use_conversion = 405; break;}
                        case wd_scenery_19:        {use_conversion = 406; break;}
                        case wd_scenery_20:        {use_conversion = 407; break;}
                        case wd_scenery_21:        {use_conversion = 408; break;}
                        case wd_scenery_22:        {use_conversion = 409; break;}
                        case wd_scenery_23:        {use_conversion = 410; break;}
                        case wd_scenery_24:        {use_conversion = 411; break;}
                        case wd_scenery_25:        {use_conversion = 412; break;}
                        case wd_scenery_26:        {use_conversion = 413; break;}
                        case wd_scenery_27:        {use_conversion = 414; break;}
                        case wd_scenery_28:        {use_conversion = 415; break;}
                        case wd_scenery_29:        {use_conversion = 416; break;}
                        case wd_scenery_30:        {use_conversion = 417; break;}
                        case wd_scenery_31:        {use_conversion = 418; break;}
                        case wd_scenery_32:        {use_conversion = 419; break;}
                        case wd_scenery_33:        {use_conversion = 420; break;}
                        case wd_scenery_34:        {use_conversion = 421; break;}
                        case wd_scenery_35:        {use_conversion = 428; break;}
                        case wd_scenery_36:        {use_conversion = 429; break;}
                        case wd_scenery_37:        {use_conversion = 437; break;}
                        case wd_scenery_38:        {use_conversion = 438; break;}
                        case wd_scenery_39:        {use_conversion = 439; break;}
                        case wd_scenery_40:        {use_conversion = 440; break;}
                        case wd_scenery_41:        {use_conversion = 455; break;}
                        case wd_scenery_42:        {use_conversion = 456; break;}
                        case wd_scenery_43:        {use_conversion = 458; break;}
                        case wd_scenery_44:        {use_conversion = 459; break;}
                        case wd_scenery_45:        {use_conversion = 460; break;}
                        case wd_scenery_46:        {use_conversion = 461; break;}
                        case wd_scenery_47:        {use_conversion = 462; break;}
                        case wd_scenery_48:        {use_conversion = 483; break;}
                        case wd_scenery_49:        {use_conversion = 484; break;}
                        case wd_scenery_50:        {use_conversion = 485; break;}
                        case wd_scenery_51:        {use_conversion = 486; break;}
                        case wd_scenery_52:        {use_conversion = 487; break;}
                        case wd_scenery_53:        {use_conversion = 488; break;}
                        case wd_scenery_54:        {use_conversion = 489; break;}
                        case wd_scenery_55:        {use_conversion = 490; break;}
                        case wd_scenery_56:        {use_conversion = 491; break;}
                        case wd_scenery_57:        {use_conversion = 492; break;}
                        case wd_scenery_58:        {use_conversion = 493; break;}
                        case wd_scenery_59:        {use_conversion = 494; break;}
                        //Mountain Tile Set
                        case mnt_flat_0:           {use_conversion = 498; break;}
                        case mnt_flat_1:           {use_conversion = 499; break;}
                        case mnt_flat_2:           {use_conversion = 500; break;}
                        case mnt_flat_3:           {use_conversion = 501; break;}
                        case mnt_flat_4:           {use_conversion = 502; break;}
                        //Ramps
                        case mnt_ramp_0:           {use_conversion = 503; break;}
                        case mnt_ramp_1:           {use_conversion = 504; break;}
                        case mnt_ramp_2:           {use_conversion = 505; break;}
                        case mnt_ramp_3:           {use_conversion = 506; break;}
                        //Scenery
                        case mnt_scene_0:          {use_conversion = 507; break;}
                        case mnt_scene_1:          {use_conversion = 508; break;}
                        case mnt_scene_2:          {use_conversion = 509; break;}
                        case mnt_scene_3:          {use_conversion = 510; break;}
                        case mnt_scene_4:          {use_conversion = 511; break;}
                        case mnt_scene_5:          {use_conversion = 512; break;}
                        case mnt_scene_6:          {use_conversion = 513; break;}
                        case mnt_scene_7:          {use_conversion = 514; break;}
                        case mnt_scene_8:          {use_conversion = 515; break;}
                        case mnt_scene_9:          {use_conversion = 516; break;}
                        case mnt_scene_10:         {use_conversion = 517; break;}
                        //Slope
                        case mnt_slope_0:          {use_conversion = 518; break;}
                        case mnt_slope_1:          {use_conversion = 519; break;}
                        case mnt_slope_2:          {use_conversion = 520; break;}
                        case mnt_slope_3:          {use_conversion = 521; break;}
                        case mnt_slope_4:          {use_conversion = 522; break;}
                        case mnt_slope_5:          {use_conversion = 523; break;}
                        case mnt_slope_6:          {use_conversion = 524; break;}
                        case mnt_slope_7:          {use_conversion = 525; break;}
                        //FOFs
                        case mnt_fof_0:            {use_conversion = 526; break;}
                        case mnt_fof_1:            {use_conversion = 621; break;}
                        case mnt_fof_2:            {use_conversion = 622; break;}
                        case mnt_fof_3:            {use_conversion = 623; break;}
                        case mnt_fof_4:            {use_conversion = 624; break;}

                        //Spikes
                        case spr_spikes_0:         {use_conversion = 333; break;}
                        case spr_spikes_7:         {use_conversion = 334; break;}
                        case spr_spikes_8:         {use_conversion = 335; break;}
                        case spr_spikes_9:         {use_conversion = 336; break;}
                        //Ladders
                        case spr_ladder_1:         {use_conversion = 337; break;}
                        case spr_ladder_2:         {use_conversion = 527; break;}
                        case spr_spikes_10:        {use_conversion = 528; break;}
                        case spr_spikes_11:        {use_conversion = 529; break;}
                        case spr_spikes_12:        {use_conversion = 530; break;}
                        case spr_spikes_13:        {use_conversion = 531; break;}
                        case mnt_flat_5:           {use_conversion = 532; break;}
                        case mnt_flat_6:           {use_conversion = 533; break;}
                        case mnt_flat_7:           {use_conversion = 534; break;}
                        case spr_hangbar_2:        {use_conversion = 535; break;}
                        case mnt_flat_8:           {use_conversion = 536; break;}
                        case mnt_flat_9:           {use_conversion = 537; break;}
                        case mnt_flat_10:          {use_conversion = 538; break;}
                        case mnt_flat_11:          {use_conversion = 539; break;}
                        case mnt_flat_12:          {use_conversion = 540; break;}
                        case mnt_flat_13:          {use_conversion = 541; break;}
                        case mnt_flat_14:          {use_conversion = 542; break;}
                        case mnt_flat_15:          {use_conversion = 543; break;}
                        case mnt_flat_16:          {use_conversion = 544; break;}
                        case mnt_flat_17:          {use_conversion = 545; break;}
                        case mnt_scene_11:         {use_conversion = 546; break;}
                        case mnt_scene_12:         {use_conversion = 547; break;}
                        case mnt_scene_13:         {use_conversion = 548; break;}
                        case mnt_scene_14:         {use_conversion = 549; break;}
                        case mnt_scene_15:         {use_conversion = 550; break;}
                        case mnt_flat_18:          {use_conversion = 551; break;}
                        case mnt_flat_19:          {use_conversion = 552; break;}
                        case mnt_flat_20:          {use_conversion = 553; break;}
                        case mnt_flat_21:          {use_conversion = 554; break;}
                        case mnt_flat_22:          {use_conversion = 555; break;}
                        case mnt_flat_23:          {use_conversion = 556; break;}
                        case mnt_slope_8:          {use_conversion = 557; break;}
                        case mnt_slope_9:          {use_conversion = 558; break;}
                        case mnt_slope_10:         {use_conversion = 559; break;}
                        case mnt_slope_11:         {use_conversion = 560; break;}
                        case mnt_slope_12:         {use_conversion = 561; break;}
                        case mnt_slope_13:         {use_conversion = 562; break;}
                        case mnt_slope_14:         {use_conversion = 563; break;}
                        case mnt_slope_15:         {use_conversion = 564; break;}
                        case mnt_slope_16:         {use_conversion = 565; break;}
                        case mnt_slope_17:         {use_conversion = 566; break;}
                        case mnt_slope_18:         {use_conversion = 567; break;}
                        case mnt_slope_19:         {use_conversion = 568; break;}
                        case mnt_slope_20:         {use_conversion = 569; break;}
                        case mnt_slope_21:         {use_conversion = 570; break;}
                        case mnt_slope_22:         {use_conversion = 571; break;}
                        case mnt_slope_23:         {use_conversion = 572; break;}
                        case mnt_ramp_4:           {use_conversion = 573; break;}
                        case mnt_ramp_5:           {use_conversion = 574; break;}
                        case mnt_ramp_6:           {use_conversion = 575; break;}
                        case mnt_ramp_7:           {use_conversion = 576; break;}
                        case mnt_ramp_8:           {use_conversion = 577; break;}
                        case mnt_ramp_9:           {use_conversion = 578; break;}
                        case mnt_ramp_10:          {use_conversion = 579; break;}
                        case mnt_ramp_11:          {use_conversion = 580; break;}
                        case mnt_slope_24:         {use_conversion = 581; break;}
                        case mnt_slope_25:         {use_conversion = 582; break;}
                        case mnt_slope_26:         {use_conversion = 583; break;}
                        case mnt_slope_27:         {use_conversion = 584; break;}
                        case mnt_slope_28:         {use_conversion = 585; break;}
                        case mnt_slope_29:         {use_conversion = 586; break;}
                        case mnt_slope_30:         {use_conversion = 587; break;}
                        case mnt_slope_31:         {use_conversion = 588; break;}
                        case mnt_scene_16:         {use_conversion = 589; break;}
                        case mnt_scene_17:         {use_conversion = 590; break;}
                        case mnt_scene_18:         {use_conversion = 591; break;}
                        case mnt_flat_24:          {use_conversion = 592; break;}
                        case mnt_flat_25:          {use_conversion = 593; break;}
                        case mnt_flat_26:          {use_conversion = 594; break;}
                        case mnt_flat_27:          {use_conversion = 595; break;}
                        case mnt_flat_28:          {use_conversion = 596; break;}
                        case mnt_flat_29:          {use_conversion = 597; break;}
                        case mnt_flat_30:          {use_conversion = 598; break;}
                        case mnt_flat_31:          {use_conversion = 599; break;}
                        case mnt_flat_32:          {use_conversion = 600; break;}
                        case mnt_flat_33:          {use_conversion = 606; break;}
                        case mnt_scene_19:         {use_conversion = 614; break;}
                        case mnt_scene_20:         {use_conversion = 615; break;}
                        case mnt_scene_21:         {use_conversion = 616; break;}
                        case mnt_scene_22:         {use_conversion = 617; break;}
                        case mnt_flat_34:          {use_conversion = 618; break;}
                        case mnt_scene_23:         {use_conversion = 619; break;}
                        case mnt_scene_24:         {use_conversion = 620; break;}
                        case mnt_ramp_12:          {use_conversion = 626; break;}
                        case mnt_ramp_13:          {use_conversion = 627; break;}
                        case mnt_ramp_14:          {use_conversion = 628; break;}
                        case mnt_ramp_15:          {use_conversion = 629; break;}
                        //Lagoon Tile Set
                        case ll_flat_0:            {use_conversion = 630; break;}
                        case ll_flat_1:            {use_conversion = 631; break;}
                        case ll_scene_0:           {use_conversion = 632; break;}
                        case wd_slope_24:          {use_conversion = 633; break;}
                        case wd_slope_25:          {use_conversion = 634; break;}
                        case wd_slope_26:          {use_conversion = 635; break;}
                        case wd_slope_27:          {use_conversion = 636; break;}
                        case wd_slope_28:          {use_conversion = 637; break;}
                        case wd_slope_29:          {use_conversion = 638; break;}
                        case wd_slope_30:          {use_conversion = 639; break;}
                        case wd_slope_31:          {use_conversion = 640; break;}
                        case ll_slope_0:           {use_conversion = 641; break;}
                        case ll_slope_1:           {use_conversion = 642; break;}
                        case ll_slope_2:           {use_conversion = 643; break;}
                        case ll_slope_3:           {use_conversion = 644; break;}
                        case ll_slope_4:           {use_conversion = 645; break;}
                        case ll_slope_5:           {use_conversion = 646; break;}
                        case ll_slope_6:           {use_conversion = 647; break;}
                        case ll_slope_7:           {use_conversion = 648; break;}
                        case ll_slope_8:           {use_conversion = 649; break;}
                        case ll_slope_9:           {use_conversion = 650; break;}
                        case ll_slope_10:          {use_conversion = 651; break;}
                        case ll_slope_11:          {use_conversion = 652; break;}
                        case ll_slope_12:          {use_conversion = 653; break;}
                        case ll_slope_13:          {use_conversion = 654; break;}
                        case ll_slope_14:          {use_conversion = 655; break;}
                        case ll_slope_15:          {use_conversion = 656; break;}
                        case ll_fof_0:             {use_conversion = 657; break;}
                        case ll_scene_1:           {use_conversion = 658; break;}
                        case ll_scene_2:           {use_conversion = 659; break;}
                        case ll_scene_3:           {use_conversion = 660; break;}
                        case ll_scene_4:           {use_conversion = 661; break;}
                        case ll_scene_5:           {use_conversion = 662; break;}
                        case ll_flat_2:            {use_conversion = 663; break;}
                        case ll_flat_3:            {use_conversion = 664; break;}
                        case ll_flat_4:            {use_conversion = 665; break;}
                        case spr_spikes_14:        {use_conversion = 666; break;}
                        case spr_spikes_15:        {use_conversion = 667; break;}
                        case spr_spikes_16:        {use_conversion = 668; break;}
                        case spr_spikes_17:        {use_conversion = 669; break;}
                        case spr_ladder_3:         {use_conversion = 670; break;}
                        case spr_ladder_4:         {use_conversion = 671; break;}
                        case spr_hangbar_3:        {use_conversion = 672; break;}
                        case ll_flat_5:            {use_conversion = 673; break;}
                        case ll_flat_6:            {use_conversion = 674; break;}
                        case ll_flat_7:            {use_conversion = 675; break;}
                        case ll_flat_8:            {use_conversion = 676; break;}
                        case ll_flat_9:            {use_conversion = 677; break;}
                        case ll_flat_10:           {use_conversion = 678; break;}
                        case ll_flat_11:           {use_conversion = 679; break;}
                        case ll_flat_12:           {use_conversion = 680; break;}
                        case ll_flat_13:           {use_conversion = 681; break;}
                        case ll_flat_14:           {use_conversion = 682; break;}
                        case ll_flat_15:           {use_conversion = 683; break;}
                        case ll_fof_1:             {use_conversion = 684; break;}
                        case ll_fof_2:             {use_conversion = 685; break;}
                        case ll_slope_16:          {use_conversion = 686; break;}
                        case ll_slope_17:          {use_conversion = 687; break;}
                        case ll_slope_18:          {use_conversion = 688; break;}
                        case ll_slope_19:          {use_conversion = 689; break;}
                        case ll_slope_20:          {use_conversion = 690; break;}
                        case ll_slope_21:          {use_conversion = 691; break;}
                        case ll_slope_22:          {use_conversion = 692; break;}
                        case ll_slope_23:          {use_conversion = 693; break;}
                        case ll_slope_24:          {use_conversion = 694; break;}
                        case ll_slope_25:          {use_conversion = 695; break;}
                        case ll_fof_3:             {use_conversion = 700; break;}
                        case ll_fof_4:             {use_conversion = 701; break;}
                        case ll_slope_26:          {use_conversion = 702; break;}
                        case ll_slope_27:          {use_conversion = 703; break;}
                        case ll_slope_28:          {use_conversion = 704; break;}
                        case ll_flat_16:           {use_conversion = 706; break;}
                        case ll_scene_6:           {use_conversion = 707; break;}
                        case ll_scene_7:           {use_conversion = 708; break;}
                        case ll_scene_8:           {use_conversion = 709; break;}
                        case ll_scene_9:           {use_conversion = 710; break;}
                        case ll_scene_10:          {use_conversion = 711; break;}
                        case ll_scene_11:          {use_conversion = 712; break;}
                        case ll_scene_12:          {use_conversion = 713; break;}
                        case ll_scene_13:          {use_conversion = 714; break;}
                        case ll_scene_14:          {use_conversion = 715; break;}
                        case ll_scene_15:          {use_conversion = 716; break;}
                        case ll_scene_16:          {use_conversion = 717; break;}
                        case ll_scene_17:          {use_conversion = 718; break;}
                        case ll_scene_18:          {use_conversion = 719; break;}
                        case ll_scene_19:          {use_conversion = 720; break;}
                        case ll_scene_20:          {use_conversion = 721; break;}
                        case ll_scene_21:          {use_conversion = 722; break;}
                        case ll_scene_22:          {use_conversion = 723; break;}
                        case ll_scene_23:          {use_conversion = 724; break;}
                        case ll_scene_24:          {use_conversion = 725; break;}
                        case ll_scene_25:          {use_conversion = 726; break;}
                        case ll_scene_26:          {use_conversion = 727; break;}
                        case ll_scene_27:          {use_conversion = 728; break;}
                        case ll_scene_28:          {use_conversion = 729; break;}
                        case ll_scene_29:          {use_conversion = 730; break;}
                        case ll_scene_30:          {use_conversion = 731; break;}
                        case ll_scene_31:          {use_conversion = 732; break;}
                        case ll_scene_32:          {use_conversion = 733; break;}
                        case ll_scene_33:          {use_conversion = 734; break;}
                        case ll_scene_34:          {use_conversion = 735; break;}
                        case ll_scene_35:          {use_conversion = 736; break;}
                        case ll_scene_36:          {use_conversion = 737; break;}
                        case ll_scene_37:          {use_conversion = 738; break;}
                        case ll_scene_38:          {use_conversion = 739; break;}
                        case ll_scene_39:          {use_conversion = 740; break;}
                        case ll_scene_40:          {use_conversion = 741; break;}
                        case ll_scene_41:          {use_conversion = 742; break;}
                        case ll_scene_42:          {use_conversion = 743; break;}
                        case ll_slope_29:          {use_conversion = 744; break;}
                        case ll_slope_30:          {use_conversion = 745; break;}
                        case ll_slope_31:          {use_conversion = 746; break;}
                        case ll_slope_32:          {use_conversion = 747; break;}
                        case ll_slope_33:          {use_conversion = 748; break;}
                        case ll_slope_34:          {use_conversion = 749; break;}
                        case ll_slope_35:          {use_conversion = 750; break;}
                        case ll_slope_36:          {use_conversion = 751; break;}
                        case ll_slope_37:          {use_conversion = 755; break;}
                        case ll_slope_38:          {use_conversion = 756; break;}
                        case ll_flat_17:           {use_conversion = 757; break;}
                        case ll_flat_18:           {use_conversion = 758; break;}
                        case ll_flat_19:           {use_conversion = 759; break;}
                        case ll_flat_20:           {use_conversion = 760; break;}
                        case ll_slope_39:          {use_conversion = 761; break;}
                        case ll_slope_40:          {use_conversion = 762; break;}
                        case ll_slope_41:          {use_conversion = 763; break;}
                        case ll_slope_42:          {use_conversion = 764; break;}
                        case ll_flat_21:           {use_conversion = 765; break;}
                        case ll_flat_22:           {use_conversion = 766; break;}
                        case ll_flat_23:           {use_conversion = 767; break;}
                        case ll_scene_43:          {use_conversion = 768; break;}
                        case ll_scene_44:          {use_conversion = 769; break;}
                        case ll_scene_45:          {use_conversion = 770; break;}
                        case ll_scene_46:          {use_conversion = 771; break;}
                        case ll_scene_47:          {use_conversion = 775; break;}
                        case ll_scene_48:          {use_conversion = 776; break;}
                        case ll_scene_49:          {use_conversion = 777; break;}
                        case ll_scene_50:          {use_conversion = 778; break;}
                        case ll_scene_51:          {use_conversion = 779; break;}
                        case ll_scene_52:          {use_conversion = 780; break;}
                        case wd_scenery_60:        {use_conversion = 781; break;}
                        case wd_scenery_61:        {use_conversion = 784; break;}
                        case wd_scenery_62:        {use_conversion = 785; break;}
                        case wd_flat_20:           {use_conversion = 795; break;}
                        case wd_flat_21:           {use_conversion = 796; break;}
                        case wd_flat_22:           {use_conversion = 797; break;}
                        case wd_flat_23:           {use_conversion = 798; break;}
                        case wd_flat_24:           {use_conversion = 799; break;}
                        case wd_flat_25:           {use_conversion = 800; break;}
                        case wd_flat_26:           {use_conversion = 801; break;}
                        case wd_flat_27:           {use_conversion = 802; break;}
                        case wd_flat_28:           {use_conversion = 803; break;}
                        case wd_flat_29:           {use_conversion = 804; break;}
                        case wd_flat_30:           {use_conversion = 805; break;}
                        case wd_flat_31:           {use_conversion = 806; break;}
                        case wd_flat_32:           {use_conversion = 807; break;}
                        case wd_flat_33:           {use_conversion = 808; break;}
                        case wd_scenery_63:        {use_conversion = 809; break;}
                        case wd_scenery_64:        {use_conversion = 810; break;}
                        case wd_scenery_65:        {use_conversion = 811; break;}
                        case wd_scenery_66:        {use_conversion = 812; break;}
                        case wd_scenery_67:        {use_conversion = 813; break;}
                        case rg_rail_0:            {use_conversion = 814; break;}
                        case rg_rail_1:            {use_conversion = 815; break;}
                        case rg_rail_2:            {use_conversion = 816; break;}
                        case rg_rail_3:            {use_conversion = 817; break;}
                        case rg_rail_4:            {use_conversion = 818; break;}
                        case rg_rail_5:            {use_conversion = 819; break;}
                        case wd_flat_34:           {use_conversion = 821; break;}
                        case wd_flat_35:           {use_conversion = 822; break;}
                        case wd_flat_36:           {use_conversion = 823; break;}
                        case wd_flat_37:           {use_conversion = 824; break;}
                        case wd_flat_38:           {use_conversion = 825; break;}
                        case wd_flat_39:           {use_conversion = 826; break;}
                        case wd_flat_40:           {use_conversion = 827; break;}
                        case spr_spikes_2:         {use_conversion = 828; break;}
                        case spr_spikes_18:        {use_conversion = 829; break;}
                        case spr_spikes_19:        {use_conversion = 830; break;}
                        case spr_spikes_20:        {use_conversion = 831; break;}
                        case spr_ladder_5:         {use_conversion = 832; break;}
                        case wd_scenery_68:        {use_conversion = 834; break;}
                        case wd_scenery_69:        {use_conversion = 835; break;}
                        case wd_scenery_70:        {use_conversion = 836; break;}
                        case wd_scenery_71:        {use_conversion = 837; break;}
                        case wd_flat_41:           {use_conversion = 838; break;}
                        case wd_flat_42:           {use_conversion = 839; break;}
                        case rg_rail_6:            {use_conversion = 870; break;}
                        case rg_rail_7:            {use_conversion = 871; break;}
                        case rg_rail_12:           {use_conversion = 872; break;}
                        case rg_rail_13:           {use_conversion = 873; break;}
                        case rg_rail_14:           {use_conversion = 874; break;}
                        case rg_rail_15:           {use_conversion = 875; break;}
                        case rg_rail_16:           {use_conversion = 876; break;}
                        case rg_rail_17:           {use_conversion = 877; break;}
                        case wd_scenery_72:        {use_conversion = 889; break;}
                        case wd_scenery_73:        {use_conversion = 890; break;}
                        case mu_flat_38:           {use_conversion = 891; break;}
                        case mu_flat_39:           {use_conversion = 892; break;}
                        case mu_flat_40:           {use_conversion = 893; break;}
                        case mu_flat_41:           {use_conversion = 894; break;}
                        case mu_flat_42:           {use_conversion = 895; break;}
                        case mu_flat_43:           {use_conversion = 896; break;}
                        case mu_scene_34:          {use_conversion = 897; break;}
                        case wd_scenery_74:        {use_conversion = 898; break;}
                        case cm_camera_100:        {use_conversion = 899; break;}
                        case cm_camera_50:         {use_conversion = 900; break;}
                        case cm_camera_25:         {use_conversion = 901; break;}
                        case wd_flat_43:           {use_conversion = 905; break;}
                        case wd_flat_44:           {use_conversion = 906; break;}
                        case wd_flat_45:           {use_conversion = 907; break;}
                        case wd_flat_46:           {use_conversion = 908; break;}
                        case wd_scenery_75:        {use_conversion = 909; break;}
                        case wd_scenery_76:        {use_conversion = 910; break;}
                        case wd_scenery_77:        {use_conversion = 911; break;}
                        case wd_scenery_78:        {use_conversion = 912; break;}
                        case wd_scenery_79:        {use_conversion = 913; break;}
                        case wd_scenery_80:        {use_conversion = 914; break;}
                        case wd_scenery_81:        {use_conversion = 915; break;}
                        case wd_scenery_82:        {use_conversion = 916; break;}
                        case wd_scenery_83:        {use_conversion = 917; break;}
                        case wd_scenery_84:        {use_conversion = 918; break;}
                        case wd_scenery_85:        {use_conversion = 919; break;}
                        case wd_scenery_86:        {use_conversion = 920; break;}
                        case wd_scenery_87:        {use_conversion = 921; break;}
                        case wd_scenery_88:        {use_conversion = 922; break;}
                        case wd_scenery_89:        {use_conversion = 923; break;}
                        case wd_scenery_90:        {use_conversion = 924; break;}
                        case wd_scenery_91:        {use_conversion = 925; break;}
                        case wd_scenery_92:        {use_conversion = 926; break;}
                        case wd_scenery_93:        {use_conversion = 927; break;}
                        case wd_scenery_94:        {use_conversion = 928; break;}
                        case wd_scenery_95:        {use_conversion = 929; break;}
                        case wd_scenery_96:        {use_conversion = 930; break;}
                        case wd_scenery_97:        {use_conversion = 931; break;}
                        case wd_scenery_98:        {use_conversion = 932; break;}
                        case wd_scenery_99:        {use_conversion = 933; break;}
                        case wd_scenery_100:       {use_conversion = 938; break;}
                        case wd_scenery_101:       {use_conversion = 939; break;}
                        case wd_scenery_102:       {use_conversion = 940; break;}
                        case wd_scenery_103:       {use_conversion = 945; break;}
                        case wd_flat_47:           {use_conversion = 963; break;}
                        case wd_flat_48:           {use_conversion = 964; break;}
                        case wd_flat_49:           {use_conversion = 965; break;}
                        case wd_flat_50:           {use_conversion = 966; break;}
                        case wd_flat_51:           {use_conversion = 967; break;}
                        case wd_flat_52:           {use_conversion = 968; break;}
                        case wd_flat_53:           {use_conversion = 969; break;}
                        case wd_flat_54:           {use_conversion = 970; break;}
                        case wd_flat_55:           {use_conversion = 971; break;}
                        case wd_flat_56:           {use_conversion = 972; break;}
                        case wd_flat_57:           {use_conversion = 973; break;}
                        case wd_flat_58:           {use_conversion = 974; break;}
                        case wd_flat_59:           {use_conversion = 975; break;}
                        case wd_flat_60:           {use_conversion = 976; break;}
                        case wd_flat_61:           {use_conversion = 977; break;}
                        case wd_flat_62:           {use_conversion = 978; break;}
                        case wd_flat_63:           {use_conversion = 979; break;}
                        case wd_flat_64:           {use_conversion = 980; break;}
                        case wd_flat_65:           {use_conversion = 981; break;}
                        case wd_flat_66:           {use_conversion = 982; break;}
                        case wd_flat_67:           {use_conversion = 983; break;}
                        case wd_flat_68:           {use_conversion = 984; break;}
                        case wd_flat_69:           {use_conversion = 985; break;}
                        case wd_flat_70:           {use_conversion = 986; break;}
                        case wd_flat_71:           {use_conversion = 987; break;}
                        case wd_flat_72:           {use_conversion = 988; break;}
                        case wd_flat_73:           {use_conversion = 989; break;}
                        case wd_flat_74:           {use_conversion = 990; break;}
                        case wd_flat_75:           {use_conversion = 991; break;}
                        case wd_scenery_104:       {use_conversion = 992; break;}
                        case wd_scenery_105:       {use_conversion = 993; break;}
                        case wd_scenery_106:       {use_conversion = 994; break;}
                        case wd_scenery_107:       {use_conversion = 995; break;}
                        case wd_scenery_108:       {use_conversion = 996; break;}
                        case wd_scenery_109:       {use_conversion = 997; break;}
                        case wd_scenery_110:       {use_conversion = 998; break;}
                        case wd_scenery_111:       {use_conversion = 999; break;}
                        case wd_scenery_112:       {use_conversion = 1000; break;}
                        case wd_scenery_113:       {use_conversion = 1001; break;}
                        case wd_scenery_114:       {use_conversion = 1002; break;}
                        case wd_scenery_115:       {use_conversion = 1003; break;}
                        case wd_scenery_116:       {use_conversion = 1004; break;}
                        case wd_scenery_117:       {use_conversion = 1005; break;}
                        case wd_scenery_118:       {use_conversion = 1006; break;}
                        case wd_scenery_119:       {use_conversion = 1007; break;}
                        case wd_scenery_120:       {use_conversion = 1008; break;}
                        case wd_scenery_121:       {use_conversion = 1009; break;}
                        case wd_scenery_122:       {use_conversion = 1010; break;}
                        case wd_flat_76:           {use_conversion = 1011; break;}
                        case wd_flat_77:           {use_conversion = 1012; break;}
                        case wd_flat_78:           {use_conversion = 1013; break;}
                        case wd_flat_79:           {use_conversion = 1014; break;}
                        case wd_flat_80:           {use_conversion = 1015; break;}
                        case wd_flat_81:           {use_conversion = 1016; break;}
                        case wd_flat_82:           {use_conversion = 1017; break;}
                        case wd_flat_83:           {use_conversion = 1018; break;}
                        case wd_flat_84:           {use_conversion = 1019; break;}
                        case wd_flat_85:           {use_conversion = 1020; break;}
                        case wd_flat_86:           {use_conversion = 1021; break;}
                        case wd_flat_87:           {use_conversion = 1022; break;}
                        case wd_flat_88:           {use_conversion = 1023; break;}
                        case wd_flat_89:           {use_conversion = 1024; break;}
                        case wd_flat_90:           {use_conversion = 1025; break;}
                        case wd_flat_91:           {use_conversion = 1026; break;}
                        case wd_flat_92:           {use_conversion = 1027; break;}
                        case wd_flat_93:           {use_conversion = 1028; break;}
                        case wd_flat_94:           {use_conversion = 1029; break;}
                        case wd_flat_95:           {use_conversion = 1030; break;}
                        case wd_flat_96:           {use_conversion = 1031; break;}
                        case wd_flat_97:           {use_conversion = 1032; break;}
                        case wd_flat_98:           {use_conversion = 1033; break;}
                        case wd_flat_99:           {use_conversion = 1034; break;}
                        case wd_flat_100:          {use_conversion = 1035; break;}
                        case wd_flat_101:          {use_conversion = 1036; break;}
                        case wd_flat_102:          {use_conversion = 1037; break;}
                        case wd_flat_103:          {use_conversion = 1038; break;}
                        case wd_flat_104:          {use_conversion = 1039; break;}
                        case wd_flat_105:          {use_conversion = 1040; break;}
                        case wd_flat_106:          {use_conversion = 1041; break;}
                        case wd_flat_107:          {use_conversion = 1042; break;}
                        case wd_flat_108:          {use_conversion = 1043; break;}
                        case wd_flat_109:          {use_conversion = 1044; break;}
                        case wd_flat_110:          {use_conversion = 1045; break;}
                        case wd_flat_111:          {use_conversion = 1046; break;}
                        case wd_flat_112:          {use_conversion = 1047; break;}
                        case wd_flat_113:          {use_conversion = 1048; break;}
                        case wd_flat_114:          {use_conversion = 1049; break;}
                        case wd_flat_115:          {use_conversion = 1050; break;}
                        case wd_flat_116:          {use_conversion = 1051; break;}
                        case wd_flat_117:          {use_conversion = 1052; break;}
                        case wd_flat_118:          {use_conversion = 1053; break;}
                        case wd_flat_119:          {use_conversion = 1054; break;}
                        case wd_flat_120:          {use_conversion = 1055; break;}
                        case wd_flat_121:          {use_conversion = 1056; break;}
                        case wd_flat_122:          {use_conversion = 1057; break;}
                        case wd_flat_123:          {use_conversion = 1058; break;}
                        case wd_flat_124:          {use_conversion = 1059; break;}
                        case wd_flat_125:          {use_conversion = 1060; break;}
                        case wd_scenery_123:       {use_conversion = 1061; break;}
                        case wd_scenery_124:       {use_conversion = 1062; break;}
                        case wd_scenery_125:       {use_conversion = 1063; break;}
                        case wd_scenery_126:       {use_conversion = 1064; break;}
                        case cs_slope_0:           {use_conversion = 1065; break;}
                        case cs_slope_1:           {use_conversion = 1066; break;}
                        case cs_slope_2:           {use_conversion = 1067; break;}
                        case cs_slope_3:           {use_conversion = 1068; break;}
                        case cs_slope_alt_0:       {use_conversion = 1069; break;}
                        case cs_slope_alt_1:       {use_conversion = 1070; break;}
                        case cs_slope_alt_2:       {use_conversion = 1071; break;}
                        case cs_ramp_6:            {use_conversion = 1072; break;}
                        case cs_ramp_7:            {use_conversion = 1073; break;}
                        case cs_ramp_8:            {use_conversion = 1074; break;}
                        case cs_ramp_9:            {use_conversion = 1075; break;}
                        case cs_ramp_18:           {use_conversion = 1076; break;}
                        case cs_ramp_19:           {use_conversion = 1077; break;}
                        case cs_ramp_20:           {use_conversion = 1078; break;}
                        case cs_ramp_21:           {use_conversion = 1079; break;}
                        case wd_flat_126:          {use_conversion = 1080; break;}
                        case wd_flat_127:          {use_conversion = 1081; break;}
                        case wd_flat_128:          {use_conversion = 1082; break;}
                        case wd_flat_129:          {use_conversion = 1083; break;}
                        case wd_flat_130:          {use_conversion = 1084; break;}
                        case wd_flat_131:          {use_conversion = 1085; break;}
                        case wd_flat_132:          {use_conversion = 1086; break;}
                        case wd_flat_133:          {use_conversion = 1087; break;}
                        case wd_flat_134:          {use_conversion = 1088; break;}
                        case wd_flat_135:          {use_conversion = 1089; break;}
                        case cs_loop_0:            {use_conversion = 1090; break;}
                        case cs_loop_1:            {use_conversion = 1091; break;}
                        case cs_loop_2:            {use_conversion = 1092; break;}
                        case cs_loop_3:            {use_conversion = 1093; break;}
                        case cs_loop_8:            {use_conversion = 1094; break;}
                        case cs_loop_9:            {use_conversion = 1095; break;}
                        case cs_loop_10:           {use_conversion = 1096; break;}
                        case cs_loop_11:           {use_conversion = 1097; break;}
                        case rg_rail_sloped_1:     {use_conversion = 1098; break;}
                        case rg_rail_sloped_2:     {use_conversion = 1099; break;}
                        case rg_rail_slope_6:      {use_conversion = 1100; break;}
                        case rg_rail_slope_7:      {use_conversion = 1101; break;}
                        case rg_rail_slope_8:      {use_conversion = 1102; break;}
                        case rg_rail_slope_9:      {use_conversion = 1103; break;}
                        case rg_rail_slope_2:      {use_conversion = 1104; break;}
                        case rg_rail_slope_3:      {use_conversion = 1105; break;}
                        case rg_rail_slope_4:      {use_conversion = 1106; break;}
                        case rg_rail_slope_5:      {use_conversion = 1107; break;}
                        case cs_donut_2:           {use_conversion = 1108; break;}
                        case cs_donut_3:           {use_conversion = 1109; break;}
                        case cs_donut_4:           {use_conversion = 1110; break;}
                        case cs_donut_5:           {use_conversion = 1111; break;}
                        case cs_donut_6:           {use_conversion = 1112; break;}
                        case cs_donut_7:           {use_conversion = 1113; break;}
                        case cs_donut_8:           {use_conversion = 1114; break;}
                        case cs_donut_9:           {use_conversion = 1115; break;}
                        case wd_donut_2:           {use_conversion = 1116; break;}
                        case wd_donut_3:           {use_conversion = 1117; break;}
                        case wd_donut_4:           {use_conversion = 1118; break;}
                        case wd_donut_5:           {use_conversion = 1119; break;}
                        case wd_donut_6:           {use_conversion = 1120; break;}
                        case wd_donut_7:           {use_conversion = 1121; break;}
                        case wd_donut_8:           {use_conversion = 1122; break;}
                        case wd_donut_9:           {use_conversion = 1123; break;}
                        case rg_rail_flat_0:       {use_conversion = 1124; break;}
                        case rg_rail_flat_1:       {use_conversion = 1125; break;}
                        case rg_rail_flat_2:       {use_conversion = 1126; break;}
                        case rg_rail_flat_3:       {use_conversion = 1127; break;}
                        case rg_rail_flat_4:       {use_conversion = 1128; break;}
                        case rg_rail_flat_5:       {use_conversion = 1129; break;}
                        case rg_rail_flat_6:       {use_conversion = 1130; break;}
                        case rg_rail_flat_7:       {use_conversion = 1131; break;}
                        case rg_rail_flat_8:       {use_conversion = 1132; break;}
                        case rg_rail_flat_9:       {use_conversion = 1133; break;}
                        case rg_rail_flat_10:      {use_conversion = 1134; break;}
                        case rg_rail_flat_11:      {use_conversion = 1135; break;}
                        case rg_rail_ramp_4:       {use_conversion = 1136; break;}
                        case rg_rail_ramp_5:       {use_conversion = 1137; break;}
                        case rg_rail_ramp_16:      {use_conversion = 1138; break;}
                        case rg_rail_ramp_17:      {use_conversion = 1139; break;}
                        case wd_flat_136:          {use_conversion = 1149; break;}
                        case wd_flat_137:          {use_conversion = 1150; break;}
                        case wd_flat_138:          {use_conversion = 1151; break;}
                        case wd_flat_139:          {use_conversion = 1152; break;}
                        case wd_flat_140:          {use_conversion = 1153; break;}
                        case wd_flat_141:          {use_conversion = 1154; break;}
                        case wd_flat_142:          {use_conversion = 1155; break;}
                        case wd_flat_143:          {use_conversion = 1156; break;}
                        case wd_flat_144:          {use_conversion = 1157; break;}
                        case wd_flat_145:          {use_conversion = 1158; break;}
                        case wd_flat_146:          {use_conversion = 1159; break;}
                        case wd_flat_147:          {use_conversion = 1160; break;}
                        case wd_flat_148:          {use_conversion = 1161; break;}
                        case wd_flat_149:          {use_conversion = 1162; break;}
                        case wd_flat_150:          {use_conversion = 1163; break;}
                        case wd_flat_151:          {use_conversion = 1164; break;}
                        case wd_flat_152:          {use_conversion = 1165; break;}
                        case wd_scenery_127:       {use_conversion = 1189; break;}
                        case wd_scenery_128:       {use_conversion = 1190; break;}
                        case wd_scenery_129:       {use_conversion = 1191; break;}
                        case wd_scenery_130:       {use_conversion = 1192; break;}
                        case wd_scenery_131:       {use_conversion = 1193; break;}
                        case wd_scenery_312:       {use_conversion = 1194; break;}
                        case wd_scenery_313:       {use_conversion = 1195; break;}
                        case wd_scenery_314:       {use_conversion = 1196; break;}
                        case wd_scenery_315:       {use_conversion = 1197; break;}
                        case wd_scenery_316:       {use_conversion = 1198; break;}
                        case wd_scenery_317:       {use_conversion = 1199; break;}
                        case wd_scenery_318:       {use_conversion = 1200; break;}
                        case wd_scenery_319:       {use_conversion = 1201; break;}
                        case wd_scenery_320:       {use_conversion = 1202; break;}
                        case wd_scenery_321:       {use_conversion = 1203; break;}
                        case wd_scenery_322:       {use_conversion = 1204; break;}
                        case wd_scenery_323:       {use_conversion = 1205; break;}
                        case wd_scenery_324:       {use_conversion = 1206; break;}
                        case wd_scenery_325:       {use_conversion = 1207; break;}
                        case wd_scenery_326:       {use_conversion = 1208; break;}
                        case wd_scenery_327:       {use_conversion = 1209; break;}
                        case wd_scenery_328:       {use_conversion = 1210; break;}
                        case wd_scenery_329:       {use_conversion = 1211; break;}
                        case wd_scenery_330:       {use_conversion = 1212; break;}
                        case wd_scenery_331:       {use_conversion = 1213; break;}
                        case wd_flat_153:          {use_conversion = 1214; break;}
                        case wd_flat_154:          {use_conversion = 1216; break;}
                        case wd_flat_155:          {use_conversion = 1217; break;}
                        case wd_flat_156:          {use_conversion = 1218; break;}
                        case wd_flat_157:          {use_conversion = 1219; break;}
                        case mnt_flat_36:          {use_conversion = 1230; break;}
                        case mnt_flat_37:          {use_conversion = 1231; break;}
                        case mnt_flat_38:          {use_conversion = 1232; break;}
                        case mnt_flat_39:          {use_conversion = 1233; break;}
                        case mnt_flat_40:          {use_conversion = 1234; break;}
                        case mnt_flat_41:          {use_conversion = 1235; break;}
                        case mnt_flat_42:          {use_conversion = 1236; break;}
                        case mnt_flat_43:          {use_conversion = 1237; break;}
                        case mnt_flat_44:          {use_conversion = 1238; break;}
                        case mnt_flat_45:          {use_conversion = 1239; break;}
                        case mnt_flat_46:          {use_conversion = 1240; break;}
                        case mnt_flat_47:          {use_conversion = 1241; break;}
                        case mnt_flat_48:          {use_conversion = 1242; break;}
                        case mnt_flat_49:          {use_conversion = 1243; break;}
                        case mnt_flat_50:          {use_conversion = 1244; break;}
                        case mnt_flat_51:          {use_conversion = 1245; break;}
                        case mnt_flat_52:          {use_conversion = 1246; break;}
                        case mnt_flat_53:          {use_conversion = 1247; break;}
                        case mnt_flat_54:          {use_conversion = 1248; break;}
                        case mnt_flat_55:          {use_conversion = 1249; break;}
                        case mnt_flat_56:          {use_conversion = 1250; break;}
                        case mnt_flat_57:          {use_conversion = 1251; break;}
                        case mnt_flat_58:          {use_conversion = 1252; break;}
                        case mnt_scene_25:         {use_conversion = 1253; break;}
                        case mnt_slope_snow_0:     {use_conversion = 1254; break;}
                        case mnt_slope_snow_1:     {use_conversion = 1255; break;}
                        case mnt_slope_snow_2:     {use_conversion = 1256; break;}
                        case mnt_flat_35:          {use_conversion = 1258; break;}
                        case mnt_scene_26:          {use_conversion = 1259; break;}
                        case mnt_scene_27:          {use_conversion = 1260; break;}
                        case mnt_scene_28:          {use_conversion = 1261; break;}
                        case mnt_scene_29:          {use_conversion = 1262; break;}
                        case mnt_scene_30:          {use_conversion = 1263; break;}
                        case mnt_scene_31:          {use_conversion = 1264; break;}
                        case mnt_scene_32:          {use_conversion = 1265; break;}
                        case mnt_scene_33:          {use_conversion = 1266; break;}
                        case mnt_scene_34:          {use_conversion = 1267; break;}
                        case mnt_scene_35:          {use_conversion = 1268; break;}
                        case mnt_scene_36:          {use_conversion = 1269; break;}
                        case mnt_scene_37:          {use_conversion = 1270; break;}
                        case mnt_scene_38:          {use_conversion = 1271; break;}
                        case mnt_scene_39:          {use_conversion = 1272; break;}
                        case mnt_scene_40:          {use_conversion = 1273; break;}
                        case mnt_scene_41:          {use_conversion = 1274; break;}
                        case mnt_scene_42:          {use_conversion = 1275; break;}
                        case mnt_scene_43:          {use_conversion = 1276; break;}
                        case mnt_scene_44:          {use_conversion = 1277; break;}
                        case mnt_scene_45:          {use_conversion = 1278; break;}
                        case mnt_scene_46:          {use_conversion = 1279; break;}
                        case mnt_scene_47:          {use_conversion = 1280; break;}
                        case mnt_flat_59:           {use_conversion = 1281; break;}
                        case mnt_flat_60:           {use_conversion = 1282; break;}
                        case mnt_flat_61:           {use_conversion = 1283; break;}
                        case mnt_flat_62:           {use_conversion = 1284; break;}
                        case mnt_flat_63:           {use_conversion = 1285; break;}
                        case mnt_flat_64:           {use_conversion = 1286; break;}
                        case mnt_flat_65:           {use_conversion = 1287; break;}
                        case mnt_flat_66:           {use_conversion = 1288; break;}
                        case mnt_flat_67:           {use_conversion = 1289; break;}
                        case mnt_flat_68:           {use_conversion = 1290; break;}
                        case mnt_flat_69:           {use_conversion = 1291; break;}
                        case mnt_flat_70:           {use_conversion = 1292; break;}
                        case mnt_scene_48:          {use_conversion = 1293; break;}
                        case mnt_flat_71:           {use_conversion = 1294; break;}
                        case mnt_flat_72:           {use_conversion = 1295; break;}
                        case mnt_flat_73:           {use_conversion = 1296; break;}
                        case mnt_flat_74:           {use_conversion = 1297; break;}
                        case mnt_flat_75:           {use_conversion = 1298; break;}
                        case mnt_flat_76:           {use_conversion = 1299; break;}
                        case mnt_scene_49:          {use_conversion = 1300; break;}
                        case mnt_scene_50:          {use_conversion = 1301; break;}
                        case mnt_scene_51:          {use_conversion = 1302; break;}
                        case mnt_scene_52:          {use_conversion = 1303; break;}
                        case spr_hangbar_4:         {use_conversion = 1304; break;}
                        case mnt_scene_53:          {use_conversion = 1321; break;}
                        case mnt_scene_54:          {use_conversion = 1322; break;}
                        case mnt_scene_55:          {use_conversion = 1323; break;}
                        case mnt_scene_56:          {use_conversion = 1324; break;}
                        case mnt_scene_57:          {use_conversion = 1325; break;}
                        case mnt_scene_58:          {use_conversion = 1326; break;}
                        case mnt_scene_59:          {use_conversion = 1327; break;}
                        case mnt_scene_60:          {use_conversion = 1328; break;}
                        case mnt_scene_61:          {use_conversion = 1329; break;}
                        case mnt_scene_62:          {use_conversion = 1330; break;}
                        case mnt_scene_63:          {use_conversion = 1331; break;}
                        case mnt_scene_64:          {use_conversion = 1332; break;}
                        case mnt_scene_65:          {use_conversion = 1333; break;}
                        case mnt_scene_66:          {use_conversion = 1334; break;}
                        case mnt_scene_67:          {use_conversion = 1335; break;}
                        case mnt_scene_68:          {use_conversion = 1336; break;}
                        case mnt_scene_69:          {use_conversion = 1337; break;}
                        case mnt_scene_70:          {use_conversion = 1338; break;}
                        case mnt_scene_71:          {use_conversion = 1339; break;}
                        case mnt_scene_72:          {use_conversion = 1340; break;}
                        case mnt_scene_73:          {use_conversion = 1341; break;}
                        case mnt_scene_74:          {use_conversion = 1342; break;}
                        case mnt_scene_75:          {use_conversion = 1343; break;}
                        case mnt_scene_76:          {use_conversion = 1345; break;}
                        case wd_scenery_332:        {use_conversion = 1346; break;}
                        case wd_scenery_333:        {use_conversion = 1347; break;}
                        case wd_scenery_334:        {use_conversion = 1348; break;}
                        case mnt_scene_77:          {use_conversion = 1357; break;}
                        case mnt_scene_78:          {use_conversion = 1358; break;}
                        case mnt_flat_77:           {use_conversion = 1361; break;}
                        case mnt_flat_78:           {use_conversion = 1362; break;}
                        case mnt_flat_79:           {use_conversion = 1363; break;}
                        case mnt_flat_80:           {use_conversion = 1364; break;}
                        case mnt_flat_81:           {use_conversion = 1365; break;}
                        case mnt_flat_82:           {use_conversion = 1366; break;}
                        case mnt_flat_83:           {use_conversion = 1367; break;}
                        case mnt_flat_84:           {use_conversion = 1368; break;}
                        case mnt_flat_85:           {use_conversion = 1373; break;}
                        case mnt_flat_86:           {use_conversion = 1374; break;}
                        case mnt_flat_87:           {use_conversion = 1375; break;}
                        case mnt_flat_88:           {use_conversion = 1376; break;}
                        case mnt_flat_89:           {use_conversion = 1377; break;}
                        case mnt_flat_90:           {use_conversion = 1378; break;}
                        case mnt_ramp_22:           {use_conversion = 1379; break;}
                        case mnt_ramp_23:           {use_conversion = 1380; break;}
                        case mnt_ramp_24:           {use_conversion = 1381; break;}
                        case mnt_ramp_25:           {use_conversion = 1382; break;}
                        case mnt_scene_79:          {use_conversion = 1383; break;}
                        case mnt_scene_80:          {use_conversion = 1384; break;}
                        case mnt_scene_81:          {use_conversion = 1385; break;}
                        case mnt_slope_grass_0:     {use_conversion = 1391; break;}
                        case mnt_slope_grass_1:     {use_conversion = 1392; break;}
                        case mnt_slope_grass_2:     {use_conversion = 1393; break;}
                        case ll_flat_24:            {use_conversion = 1399; break;}
                        case ll_flat_25:            {use_conversion = 1400; break;}
                        case ll_flat_26:            {use_conversion = 1401; break;}
                        case ll_flat_27:            {use_conversion = 1402; break;}
                        case ll_flat_28:            {use_conversion = 1403; break;}
                        case ll_flat_29:            {use_conversion = 1404; break;}
                        case ll_flat_30:            {use_conversion = 1405; break;}
                        case ll_flat_31:            {use_conversion = 1406; break;}
                        case ll_flat_32:            {use_conversion = 1407; break;}
                        case ll_flat_33:            {use_conversion = 1408; break;}
                        case mnt_scene_82:          {use_conversion = 1416; break;}
                        case mnt_scene_83:          {use_conversion = 1418; break;}
                        case ll_scene_53:           {use_conversion = 1419; break;}
                        case ll_scene_54:           {use_conversion = 1420; break;}
                        case ll_scene_55:           {use_conversion = 1421; break;}
                        case ll_scene_56:           {use_conversion = 1422; break;}
                        case ll_scene_57:           {use_conversion = 1423; break;}
                        case ll_flat_34:            {use_conversion = 1424; break;}
                        case ll_flat_35:            {use_conversion = 1425; break;}
                        case ll_flat_36:            {use_conversion = 1426; break;}
                        //
                        case ll_flat_37:            {use_conversion = 1431; break;}
                        case ll_flat_38:            {use_conversion = 1432; break;}
                        case ll_flat_39:            {use_conversion = 1433; break;}
                        case ll_flat_40:            {use_conversion = 1434; break;}
                        case ll_flat_41:            {use_conversion = 1435; break;}
                        case ll_flat_42:            {use_conversion = 1436; break;}
                        case ll_flat_43:            {use_conversion = 1437; break;}
                        case ll_flat_44:            {use_conversion = 1438; break;}
                        case ll_flat_45:            {use_conversion = 1439; break;}
                        case ll_flat_46:            {use_conversion = 1440; break;}
                        case ll_flat_47:            {use_conversion = 1441; break;}
                        case ll_flat_48:            {use_conversion = 1442; break;}
                        case ll_flat_49:            {use_conversion = 1443; break;}
                        case ll_flat_50:            {use_conversion = 1444; break;}
                        case ll_flat_51:            {use_conversion = 1445; break;}
                        case ll_flat_52:            {use_conversion = 1446; break;}
                        case ll_flat_53:            {use_conversion = 1447; break;}
                        case ll_scene_58:           {use_conversion = 1448; break;}
                        case ll_scene_59:           {use_conversion = 1449; break;}
                        case ll_fof_7:              {use_conversion = 1450; break;}
                        case ll_fof_8:              {use_conversion = 1451; break;}
                        case ma_flat_0:             {use_conversion = 1452; break;}
                        case ma_flat_1:             {use_conversion = 1453; break;}
                        case ma_flat_2:             {use_conversion = 1454; break;}
                        case ma_flat_3:             {use_conversion = 1455; break;}
                        case ma_flat_4:             {use_conversion = 1456; break;}
                        case ma_flat_5:             {use_conversion = 1457; break;}
                        case ma_flat_6:             {use_conversion = 1458; break;}
                        case ma_flat_7:             {use_conversion = 1459; break;}
                        case ma_flat_8:             {use_conversion = 1460; break;}
                        case ma_flat_9:             {use_conversion = 1461; break;}
                        case ma_scene_0:            {use_conversion = 1462; break;}
                        case ma_scene_1:            {use_conversion = 1463; break;}
                        case ma_scene_2:            {use_conversion = 1464; break;}
                        case ma_scene_3:            {use_conversion = 1465; break;}
                        case ma_scene_4:            {use_conversion = 1466; break;}
                        case ma_scene_5:            {use_conversion = 1467; break;}
                        case ma_scene_6:            {use_conversion = 1468; break;}
                        case ma_scene_7:            {use_conversion = 1469; break;}
                        case ma_scene_8:            {use_conversion = 1470; break;}
                        case ma_scene_9:            {use_conversion = 1471; break;}
                        case ma_scene_10:           {use_conversion = 1472; break;}
                        case ma_scene_11:           {use_conversion = 1473; break;}
                        case ma_scene_12:           {use_conversion = 1474; break;}
                        case spr_ladder_6:          {use_conversion = 1475; break;}
                        case ll_slope_43:           {use_conversion = 1486; break;}
                        case ll_slope_44:           {use_conversion = 1487; break;}
                        case ll_loop_2:             {use_conversion = 1488; break;}
                        case ll_loop_3:             {use_conversion = 1489; break;}
                        case ll_loop_4:             {use_conversion = 1490; break;}
                        case ll_loop_5:             {use_conversion = 1491; break;}
                        case ll_loop_6:             {use_conversion = 1492; break;}
                        case ll_loop_7:             {use_conversion = 1493; break;}
                        case ll_loop_8:             {use_conversion = 1494; break;}
                        case ll_loop_9:             {use_conversion = 1495; break;}
                        case ll_scene_60:           {use_conversion = 1496; break;}
                        case ll_donut_6:            {use_conversion = 1505; break;}
                        case ll_donut_7:            {use_conversion = 1506; break;}
                        case ll_donut_8:            {use_conversion = 1507; break;}
                        case ll_donut_9:            {use_conversion = 1508; break;}
                        case ll_donut_2:            {use_conversion = 1509; break;}
                        case ll_donut_3:            {use_conversion = 1510; break;}
                        case ll_donut_4:            {use_conversion = 1511; break;}
                        case ll_donut_5:            {use_conversion = 1512; break;}
                        case ll_flat_54:            {use_conversion = 1515; break;}
                        case ll_flat_55:            {use_conversion = 1516; break;}
                        case ll_flat_56:            {use_conversion = 1517; break;}
                        case ll_flat_57:            {use_conversion = 1518; break;}
                        case ll_slope_47:           {use_conversion = 1519; break;}
                        case ll_slope_48:           {use_conversion = 1520; break;}
                        case bb_flat_0:             {use_conversion = 1523; break;}
                        case bb_flat_1:             {use_conversion = 1524; break;}
                        case bb_flat_2:             {use_conversion = 1525; break;}
                        case bb_flat_3:             {use_conversion = 1526; break;}
                        case bb_flat_4:             {use_conversion = 1527; break;}
                        case bb_flat_5:             {use_conversion = 1528; break;}
                        case bb_flat_6:             {use_conversion = 1529; break;}
                        case bb_flat_7:             {use_conversion = 1530; break;}
                        case bb_flat_8:             {use_conversion = 1531; break;}
                        case bb_flat_9:             {use_conversion = 1532; break;}
                        case bb_flat_10:            {use_conversion = 1533; break;}
                        case bb_flat_11:            {use_conversion = 1534; break;}
                        case bb_flat_12:            {use_conversion = 1535; break;}
                        case bb_flat_13:            {use_conversion = 1536; break;}
                        case bb_flat_14:            {use_conversion = 1537; break;}
                        case bb_flat_15:            {use_conversion = 1538; break;}
                        case bb_flat_16:            {use_conversion = 1539; break;}
                        case bb_flat_17:            {use_conversion = 1540; break;}
                        case bb_flat_18:            {use_conversion = 1541; break;}
                        case bb_flat_19:            {use_conversion = 1542; break;}
                        case bb_flat_20:            {use_conversion = 1543; break;}
                        case bb_flat_21:            {use_conversion = 1544; break;}
                        case bb_flat_22:            {use_conversion = 1545; break;}
                        case bb_slope_0:            {use_conversion = 1546; break;}
                        case bb_slope_1:            {use_conversion = 1547; break;}
                        case bb_slope_2:            {use_conversion = 1548; break;}
                        case bb_slope_3:            {use_conversion = 1549; break;}
                        case bb_slope_10:           {use_conversion = 1550; break;}
                        case bb_slope_11:           {use_conversion = 1551; break;}
                        case bb_slope_12:           {use_conversion = 1552; break;}
                        case bb_slope_13:           {use_conversion = 1553; break;}
                        case bb_slope_14:           {use_conversion = 1554; break;}
                        case bb_slope_15:           {use_conversion = 1555; break;}
                        case bb_slope_16:           {use_conversion = 1556; break;}
                        case bb_slope_17:           {use_conversion = 1557; break;}
                        case bb_donut_6:            {use_conversion = 1558; break;}
                        case bb_donut_7:            {use_conversion = 1559; break;}
                        case bb_donut_8:            {use_conversion = 1560; break;}
                        case bb_donut_9:            {use_conversion = 1561; break;}
                        case bb_donut_2:            {use_conversion = 1562; break;}
                        case bb_donut_3:            {use_conversion = 1563; break;}
                        case bb_donut_4:            {use_conversion = 1564; break;}
                        case bb_donut_5:            {use_conversion = 1565; break;}
                        case bb_fof_0:              {use_conversion = 1566; break;}
                        case bb_fof_1:              {use_conversion = 1567; break;}
                        case bb_fof_2:              {use_conversion = 1568; break;}
                        case bb_scene_0:            {use_conversion = 1569; break;}
                        case bb_scene_1:            {use_conversion = 1570; break;}
                        case bb_scene_2:            {use_conversion = 1571; break;}
                        case bb_scene_3:            {use_conversion = 1572; break;}
                        case bb_scene_4:            {use_conversion = 1573; break;}
                        case bb_scene_5:            {use_conversion = 1574; break;}
                        case bb_scene_6:            {use_conversion = 1575; break;}
                        case bb_scene_7:            {use_conversion = 1576; break;}
                        case bb_scene_8:            {use_conversion = 1577; break;}
                        case bb_scene_9:            {use_conversion = 1578; break;}
                        case bb_scene_10:           {use_conversion = 1579; break;}
                        case bb_scene_11:           {use_conversion = 1580; break;}
                        case bb_flat_23:            {use_conversion = 1581; break;}
                        case bb_flat_24:            {use_conversion = 1582; break;}
                        case bb_flat_25:            {use_conversion = 1583; break;}
                        case bb_flat_26:            {use_conversion = 1584; break;}
                        case bb_flat_27:            {use_conversion = 1585; break;}
                        case bb_flat_28:            {use_conversion = 1586; break;}
                        case bb_flat_29:            {use_conversion = 1587; break;}
                        case bb_flat_30:            {use_conversion = 1588; break;}
                        case bb_donut_6_alt:        {use_conversion = 1603; break;}
                        case bb_donut_7_alt:        {use_conversion = 1604; break;}
                        case bb_donut_8_alt:        {use_conversion = 1605; break;}
                        case bb_donut_9_alt:        {use_conversion = 1606; break;}
                        case bb_donut_2_alt:        {use_conversion = 1607; break;}
                        case bb_donut_3_alt:        {use_conversion = 1608; break;}
                        case bb_donut_4_alt:        {use_conversion = 1609; break;}
                        case bb_donut_5_alt:        {use_conversion = 1610; break;}
                        case bb_flat_31:            {use_conversion = 1611; break;}
                        case bb_fof_3:              {use_conversion = 1628; break;}
                        case bb_scene_12:           {use_conversion = 1629; break;}
                        case bb_scene_13:           {use_conversion = 1630; break;}
                        case spr_hangbar_5:         {use_conversion = 1631; break;}
                        case spr_ladder_7:          {use_conversion = 1632; break;}
                        //Sapphire Jungle Tile Set
                        case sj_flat_0:             {use_conversion = 1637; break;}
                        case sj_flat_1:             {use_conversion = 1638; break;}
                        case sj_flat_2:             {use_conversion = 1639; break;}
                        case sj_flat_3:             {use_conversion = 1640; break;}
                        case sj_flat_4:             {use_conversion = 1641; break;}
                        case sj_flat_5:             {use_conversion = 1642; break;}
                        case sj_flat_6:             {use_conversion = 1643; break;}
                        case sj_flat_7:             {use_conversion = 1644; break;}
                        case sj_flat_8:             {use_conversion = 1645; break;}
                        case sj_flat_9:             {use_conversion = 1646; break;}
                        case sj_flat_10:            {use_conversion = 1647; break;}
                        case sj_flat_11:            {use_conversion = 1648; break;}
                        case sj_flat_12:            {use_conversion = 1649; break;}
                        case sj_flat_13:            {use_conversion = 1650; break;}
                        case sj_flat_14:            {use_conversion = 1651; break;}
                        case sj_flat_15:            {use_conversion = 1652; break;}
                        case sj_flat_16:            {use_conversion = 1653; break;}
                        case sj_flat_17:            {use_conversion = 1654; break;}
                        case sj_flat_18:            {use_conversion = 1655; break;}
                        case sj_flat_19:            {use_conversion = 1656; break;}
                        case sj_flat_20:            {use_conversion = 1657; break;}
                        case sj_flat_21:            {use_conversion = 1658; break;}
                        case sj_flat_22:            {use_conversion = 1659; break;}
                        case sj_flat_23:            {use_conversion = 1660; break;}
                        case sj_flat_24:            {use_conversion = 1661; break;}
                        case sj_flat_25:            {use_conversion = 1662; break;}
                        case sj_flat_26:            {use_conversion = 1663; break;}
                        case sj_flat_27:            {use_conversion = 1664; break;}
                        case sj_flat_28:            {use_conversion = 1665; break;}
                        case sj_flat_29:            {use_conversion = 1666; break;}
                        case sj_flat_30:            {use_conversion = 1667; break;}
                        case sj_flat_31:            {use_conversion = 1668; break;}
                        case sj_flat_32:            {use_conversion = 1669; break;}
                        case sj_flat_33:            {use_conversion = 1670; break;}
                        case sj_flat_34:            {use_conversion = 1671; break;}
                        case sj_flat_35:            {use_conversion = 1672; break;}
                        case sj_flat_36:            {use_conversion = 1673; break;}
                        case sj_flat_37:            {use_conversion = 1674; break;}
                        case sj_flat_38:            {use_conversion = 1675; break;}
                        case sj_flat_39:            {use_conversion = 1676; break;}
                        case sj_flat_40:            {use_conversion = 1677; break;}
                        case sj_flat_41:            {use_conversion = 1678; break;}
                        case sj_flat_42:            {use_conversion = 1679; break;}
                        case sj_flat_43:            {use_conversion = 1680; break;}
                        case sj_flat_44:            {use_conversion = 1681; break;}
                        case sj_flat_45:            {use_conversion = 1682; break;}
                        case sj_flat_46:            {use_conversion = 1683; break;}
                        case sj_flat_47:            {use_conversion = 1684; break;}
                        case sj_flat_48:            {use_conversion = 1685; break;}
                        case sj_flat_49:            {use_conversion = 1686; break;}
                        case sj_flat_50:            {use_conversion = 1687; break;}
                        case sj_slope_10:           {use_conversion = 1688; break;}
                        case sj_slope_11:           {use_conversion = 1689; break;}
                        case sj_slope_12:           {use_conversion = 1690; break;}
                        case sj_slope_13:           {use_conversion = 1691; break;}
                        case sj_slope_14:           {use_conversion = 1692; break;}
                        case sj_slope_15:           {use_conversion = 1693; break;}
                        case sj_slope_16:           {use_conversion = 1694; break;}
                        case sj_slope_17:           {use_conversion = 1695; break;}
                        case sj_slope_10_alt:       {use_conversion = 1696; break;}
                        case sj_slope_11_alt:       {use_conversion = 1697; break;}
                        case sj_slope_12_alt:       {use_conversion = 1698; break;}
                        case sj_slope_13_alt:       {use_conversion = 1699; break;}
                        case sj_slope_14_alt:       {use_conversion = 1700; break;}
                        case sj_slope_15_alt:       {use_conversion = 1701; break;}
                        case sj_slope_16_alt:       {use_conversion = 1702; break;}
                        case sj_slope_17_alt:       {use_conversion = 1703; break;}
                        case sj_scene_0:            {use_conversion = 1704; break;}
                        case sj_scene_1:            {use_conversion = 1705; break;}
                        case sj_scene_2:            {use_conversion = 1706; break;}
                        case sj_scene_3:            {use_conversion = 1707; break;}
                        case sj_scene_4:            {use_conversion = 1708; break;}
                        case sj_scene_5:            {use_conversion = 1709; break;}
                        case sj_scene_6:            {use_conversion = 1710; break;}
                        case sj_scene_7:            {use_conversion = 1711; break;}
                        case sj_scene_8:            {use_conversion = 1712; break;}
                        case sj_scene_9:            {use_conversion = 1713; break;}
                        case sj_scene_10:           {use_conversion = 1714; break;}
                        case sj_scene_11:           {use_conversion = 1715; break;}
                        case sj_scene_12:           {use_conversion = 1716; break;}
                        case sj_scene_13:           {use_conversion = 1717; break;}
                        case sj_fof_0:              {use_conversion = 1720; break;}
                        case sj_slope_2:            {use_conversion = 1721; break;}
                        case sj_slope_3:            {use_conversion = 1722; break;}
                        case sj_slope_4:            {use_conversion = 1723; break;}
                        case sj_slope_5:            {use_conversion = 1724; break;}
                        case sj_slope_6:            {use_conversion = 1725; break;}
                        case sj_slope_7:            {use_conversion = 1726; break;}
                        case sj_slope_8:            {use_conversion = 1727; break;}
                        case sj_slope_9:            {use_conversion = 1728; break;}
                        case sj_donut_2:            {use_conversion = 1729; break;}
                        case sj_donut_3:            {use_conversion = 1730; break;}
                        case sj_donut_4:            {use_conversion = 1731; break;}
                        case sj_donut_5:            {use_conversion = 1732; break;}
                        case sj_donut_6:            {use_conversion = 1733; break;}
                        case sj_donut_7:            {use_conversion = 1734; break;}
                        case sj_donut_8:            {use_conversion = 1735; break;}
                        case sj_donut_9:            {use_conversion = 1736; break;}
                        case sj_ramp_4:             {use_conversion = 1737; break;}
                        case sj_ramp_5:             {use_conversion = 1738; break;}
                        case sj_ramp_16:            {use_conversion = 1739; break;}
                        case sj_ramp_17:            {use_conversion = 1740; break;}
                        case sj_scene_14:           {use_conversion = 1741; break;}
                        case sj_scene_15:           {use_conversion = 1742; break;}

                        //Ignore tile if it is not a registered tile in the definition table
                        default:                   {use_conversion = -1;  break;}
                    }
                //Skip Over Writing Tile Data For Tiles Not In Our Asset Definition Table
                if use_conversion != -1
                    {
                        ini_write_string(map_offset+"lvl_tiles_"+string(use_write_position),"tile_x",string(tile_get_x(use_write_array[use_write_position])))
                        ini_write_string(map_offset+"lvl_tiles_"+string(use_write_position),"tile_y",string(tile_get_y(use_write_array[use_write_position])))
                        ini_write_string(map_offset+"lvl_tiles_"+string(use_write_position),"tile_depth",string(tile_get_depth(use_write_array[use_write_position])))
                        ini_write_string(map_offset+"lvl_tiles_"+string(use_write_position),"tile_alpha",string(tile_get_alpha(use_write_array[use_write_position])))
                        ini_write_string(map_offset+"lvl_tiles_"+string(use_write_position),"tile_xscale",string(tile_get_xscale(use_write_array[use_write_position])))
                        ini_write_string(map_offset+"lvl_tiles_"+string(use_write_position),"tile_yscale",string(tile_get_yscale(use_write_array[use_write_position])))
                        ini_write_string(map_offset+"lvl_tiles_"+string(use_write_position),"tile_asset",string(use_conversion))
                    }
                else ini_write_string(map_offset+"lvl_tiles_"+string(use_write_position),"tile_ignore",string(-1));
                //Iterate Write Position
                use_write_position += 1
                //Exit Loop Once We Have Finished Writing
                if use_write_position = use_write_length break;
            }
        ini_write_string(map_offset+"lvl_hd","lvl_tile_count",string(use_write_position))
        //Write Object Data
        use_write_obj_position = 0
        var use_conversion_counter = 0;
        //Activate All Objects For Reading
        instance_activate_all()
        while(use_write_obj_position &lt;= instance_count)
            {
                var obj = instance_id[use_write_obj_position];
                //Arbitrary Asset Definition Table
                var use_conversion = 0;
                var use_conversion_npc = 0;
                //var use_conversion_adv = 0;
                switch(obj.object_index)
                    {
                        case obj_gem_float:                 {use_conversion = 123; break;}
                        case obj_petal_float:               {use_conversion = 124; break;}
                        case obj_1up:                       {use_conversion = 125; break;}
                        case obj_test_target:               {use_conversion = 126; break;}
                        case obj_checkpoint:                {use_conversion = 127; break;}
                        case obj_air_bubble:                {use_conversion = 128; break;}
                        case obj_player_spawnpoint:         {use_conversion = 129; break;}
                        case obj_player_spawnpoint_carol:   {use_conversion = 130; break;}
                        case obj_player_spawnpoint_milla:   {use_conversion = 131; break;}
                        case obj_camera_boundary_top:       {use_conversion = 132; break;}
                        case obj_camera_boundary_bottom:    {use_conversion = 133; break;}
                        case obj_camera_boundary_left:      {use_conversion = 134; break;}
                        case obj_camera_boundary_right:     {use_conversion = 135; break;}
                        case obj_waterheight:               {use_conversion = 136; break;}
                        case obj_water_height_switch:       {use_conversion = 137; break;}
                        case obj_platform_hor:              {use_conversion = 138; break;}
                        case obj_platform_ver:              {use_conversion = 139; break;}
                        case obj_platform_cir:              {use_conversion = 140; break;}
                        case obj_platform_half_cir:         {use_conversion = 141; break;}
                        case obj_shield_earth:              {use_conversion = 142; break;}
                        case obj_shield_fire:               {use_conversion = 143; break;}
                        case obj_shield_metal:              {use_conversion = 144; break;}
                        case obj_shield_water:              {use_conversion = 145; break;}
                        case obj_shield_wood:               {use_conversion = 146; break;}
                        case obj_mu_ball_spike:             {use_conversion = 149; break;}
                        case obj_mu_rotating_spikes:        {use_conversion = 150; break;}
                        case obj_metal_pup:                 {use_conversion = 151; break;}
                        case obj_blade_orbiter:             {use_conversion = 152; break;}
                        case obj_shock_puppet:              {use_conversion = 153; break;}
                        case obj_player_spawnpoint_carols_bike: {use_conversion = 180; break;}
                        case obj_keycard:                   {use_conversion = 181; break;}
                        case obj_keycard_terminal:          {use_conversion = 182; break;}
                        case obj_keycard_door:              {use_conversion = 183; break;}
                        case obj_camera_zoom_reset:         {use_conversion = 212; break;}
                        case obj_camera_zoom_2x:            {use_conversion = 213; break;}
                        case obj_camera_zoom_4x:            {use_conversion = 214; break;}
                        case obj_loop_exit:                 {use_conversion = 215; break;}
                        case obj_loop_logic:                {use_conversion = 216; break;}
                        case obj_bg_logic_nighttime:        {use_conversion = 217; break;}
                        case obj_bg_city:                   {use_conversion = 218; break;}
                        case obj_turretus:                  {use_conversion = 221; break;}
                        case obj_star_flounder:             {use_conversion = 222; break;}
                        case obj_shark_torpedo:             {use_conversion = 223; break;}
                        case obj_dna_cannon:                {use_conversion = 224; break;}
                        case obj_firespitter:               {use_conversion = 225; break;}
                        case obj_buoybuoy:                  {use_conversion = 226; break;}
                        case obj_ghetto_blaster:            {use_conversion = 227; break;}
                        case obj_bullfrag:                  {use_conversion = 228; break;}
                        case obj_bg_logic:                  {use_conversion = 229; break;}
                        case obj_bg_logic_alt:              {use_conversion = 230; break;}
                        case obj_bg_logic_night:            {use_conversion = 231; break;}
                        case obj_2D_tile_logic:             {use_conversion = 236; break;}
                        case obj_player_spawnpoint_lilac:   {use_conversion = 237; break;}
                        case obj_bg_logic_lagoon:           {use_conversion = 240; break;}
                        case obj_crystal_gem_flower:        {use_conversion = 241; break;}
                        case obj_health_petal_flower:       {use_conversion = 242; break;}
                        case obj_crystal_flower:            {use_conversion = 243; break;}
                        case obj_crystal_shield_water:      {use_conversion = 244; break;}
                        case obj_crystal_shield_earth:      {use_conversion = 245; break;}
                        case obj_crystal_shield_fire:       {use_conversion = 246; break;}
                        case obj_crystal_shield_metal:      {use_conversion = 247; break;}
                        case obj_crystal_invincibility:     {use_conversion = 248; break;}
                        case obj_crate:                     {use_conversion = 249; break;}
                        case obj_bomb:                      {use_conversion = 250; break;}
                        case obj_carols_gas_can:            {use_conversion = 251; break;}
                        case obj_spring_0:                  {use_conversion = 252; break;}
                        case obj_spring_1:                  {use_conversion = 253; break;}
                        case obj_spring_2:                  {use_conversion = 254; break;}
                        case obj_spring_3:                  {use_conversion = 255; break;}
                        case obj_spring_4:                  {use_conversion = 256; break;}
                        case obj_spring_5:                  {use_conversion = 257; break;}
                        case obj_spring_6:                  {use_conversion = 258; break;}
                        case obj_spring_7:                  {use_conversion = 259; break;}
                        case obj_spring_8:                  {use_conversion = 260; break;}
                        case obj_spring_9:                  {use_conversion = 261; break;}
                        case obj_spring_10:                 {use_conversion = 262; break;}
                        case obj_spring_11:                 {use_conversion = 263; break;}
                        case obj_spring_12:                 {use_conversion = 264; break;}
                        case obj_spring_13:                 {use_conversion = 265; break;}
                        case obj_spring_14:                 {use_conversion = 266; break;}
                        case obj_spring_15:                 {use_conversion = 267; break;}
                        case obj_rna_cannon:                {use_conversion = 268; break;}
                        case obj_bg_city_day:               {use_conversion = 269; break;}
                        case obj_spring_16:                 {use_conversion = 338; break;}
                        case obj_spring_17:                 {use_conversion = 339; break;}
                        case obj_spring_18:                 {use_conversion = 340; break;}
                        case obj_spring_19:                 {use_conversion = 341; break;}
                        case obj_axle_turret:               {use_conversion = 342; break;}
                        case obj_rocket_puncher:            {use_conversion = 343; break;}
                        case obj_skinny_loop:               {use_conversion = 364; break;}
                        case obj_road_loop:                 {use_conversion = 365; break;}
                        case obj_boost_pad:                 {use_conversion = 366; break;}
                        case obj_loop_changer_l:            {use_conversion = 367; break;}
                        case obj_loop_changer_r:            {use_conversion = 368; break;}
                        case obj_loop_layer_changer:        {use_conversion = 369; break;}
                        case obj_loop_layer_changer_l:      {use_conversion = 370; break;}
                        case obj_mega_crate:                {use_conversion = 371; break;}
                        case obj_mega_block:                {use_conversion = 372; break;}
                        case obj_disco_ball:                {use_conversion = 373; break;}
                        case obj_mega_bomb:                 {use_conversion = 374; break;}
                        case obj_boost_pad_90:              {use_conversion = 375; break;}
                        case obj_boost_pad_180:             {use_conversion = 376; break;}
                        case obj_boost_pad_270:             {use_conversion = 377; break;}
                        case obj_water_switch:              {use_conversion = 378; break;}
                        case obj_door_switch:               {use_conversion = 379; break;}
                        case obj_door_vertical:             {use_conversion = 380; break;}
                        case obj_bomb_switch:               {use_conversion = 381; break;}
                        case obj_door_horizontal:           {use_conversion = 382; break;}
                        case obj_metal_pup_child:           {use_conversion = 383; break;}
                        case obj_dna_cannon_child:          {use_conversion = 384; break;}
                        case obj_rna_cannon_child:          {use_conversion = 385; break;}
                        case obj_rocket_puncher_child:      {use_conversion = 386; break;}
                        case obj_fire_spitter_child:        {use_conversion = 387; break;}
                        case obj_ghetto_blaster_child:      {use_conversion = 388; break;}
                        case obj_bullfrag_child:            {use_conversion = 389; break;}
                        case obj_turretus_child:            {use_conversion = 390; break;}
                        case obj_mega_melon:                {use_conversion = 391; break;}
                        case obj_weather_clear:             {use_conversion = 422; break;}
                        case obj_weather_rain:              {use_conversion = 423; break;}
                        case obj_weather_storm:             {use_conversion = 424; break;}
                        case obj_rock_shield:               {use_conversion = 425; break;}
                        case obj_crosswalk_signal:          {use_conversion = 426; break;}
                        case obj_shield_rock:               {use_conversion = 427; break;}
                        case obj_mega_car:                  {use_conversion = 430; break;}
                        case obj_mega_dumpster:             {use_conversion = 431; break;}
                        case obj_mega_cube:                 {use_conversion = 432; break;}
                        case obj_bench:                     {use_conversion = 433; break;}
                        case obj_bench_city:                {use_conversion = 434; break;}
                        case obj_bench_zao:                 {use_conversion = 435; break;}
                        case obj_weather_tempest:           {use_conversion = 436; break;}
                        case obj_music_on:                  {use_conversion = 441; break;}
                        case obj_music_off:                 {use_conversion = 442; break;}
                        case obj_water_switch_2x:           {use_conversion = 443; break;}
                        case obj_water_switch_3x:           {use_conversion = 444; break;}
                        case obj_mega_milk_crate:           {use_conversion = 445; break;}
                        case obj_smart_pools:               {use_conversion = 446; break;}
                        case obj_waterfall:                 {use_conversion = 447; break;}
                        case obj_skyscraper:                {use_conversion = 450; break;}
                        case obj_skyscraper_1:              {use_conversion = 451; break;}
                        case obj_skyscraper_2:              {use_conversion = 452; break;}
                        case obj_bird:                      {use_conversion = 453; break;}
                        case obj_bird_ambiance:             {use_conversion = 454; break;}
                        case obj_smart_petal_pool:          {use_conversion = 457; break;}
                        case obj_speed_booster:             {use_conversion = 463; break;}
                        case obj_bench_stool:               {use_conversion = 464; break;}
                        case obj_bench_high_stool:          {use_conversion = 465; break;}
                        case obj_petalfall:                 {use_conversion = 466; break;}
                        case obj_mega_bouncy:               {use_conversion = 467; break;}
                        case obj_enemy_delete_wall:         {use_conversion = 468; break;}
                        case obj_enemy_charge_floor:        {use_conversion = 469; break;}
                        case obj_fireworks_tank:            {use_conversion = 470; break;}
                        case obj_fireworks_tank_stub:       {use_conversion = 470; break;}
                        case obj_boss_music:                {use_conversion = 471; break;}
                        case obj_checkpoint_marker:         {use_conversion = 472; break;}
                        case obj_blade_subordinate:         {use_conversion = 473; break;}
                        case obj_blade_stubordinate:        {use_conversion = 473; break;}
                        case obj_boss_boundary_top:         {use_conversion = 474; break;}
                        case obj_boss_boundary_bottom:      {use_conversion = 475; break;}
                        case obj_boss_boundary_left:        {use_conversion = 476; break;}
                        case obj_boss_boundary_right:       {use_conversion = 477; break;}
                        case obj_gold_gem_float:            {use_conversion = 478; break;}
                        case obj_mini_boss_music:           {use_conversion = 479; break;}
                        case obj_star_marine:               {use_conversion = 480; break;}
                        case obj_stub_marine:               {use_conversion = 480; break;}
                        case obj_bg_space:                  {use_conversion = 481; break;}
                        case obj_player_spawnpoint_spade:   {use_conversion = 482; break;}
                        case obj_bg_logic_mnt:              {use_conversion = 495; break;}
                        case obj_bg_city_sewers:            {use_conversion = 496; break;}
                        case obj_bg_logic_mnt_nite:         {use_conversion = 497; break;}
                        case obj_green_pot:                 {use_conversion = 601; break;}
                        case obj_yellow_pot:                {use_conversion = 602; break;}
                        case obj_mega_green_pot:            {use_conversion = 603; break;}
                        case obj_mega_yellow_pot:           {use_conversion = 604; break;}
                        case obj_rock_destructible:         {use_conversion = 605; break;}
                        case obj_bridge:                    {use_conversion = 607; break;}
                        case obj_destructible_floor:        {use_conversion = 608; break;}
                        case obj_bg_logic_mnt_nighttime:    {use_conversion = 625; break;}
                        case obj_water_cube:                {use_conversion = 696; break;}
                        case obj_wind_turbine:              {use_conversion = 697; break;}
                        case obj_wind_stopper:              {use_conversion = 698; break;}
                        case obj_soda_can:                  {use_conversion = 699; break;}
                        case obj_basket_ball:               {use_conversion = 705; break;}
                        case obj_bg_logic_lagoon_sunrise:   {use_conversion = 752; break;}
                        case obj_bg_space_night:            {use_conversion = 753; break;}
                        case obj_bg_logic_streamer:         {use_conversion = 754; break;}
                        case obj_wind_turbine_0:            {use_conversion = 772; break;}
                        case obj_wind_turbine_180:          {use_conversion = 773; break;}
                        case obj_wind_turbine_270:          {use_conversion = 774; break;}
                        case obj_bg_beihai_bay:             {use_conversion = 782; break;}
                        case obj_bg_beihai_bay_sunset:      {use_conversion = 783; break;}
                        case obj_mu_ramp_6_18:              {use_conversion = 786; break;}
                        case obj_mu_ramp_7_19:              {use_conversion = 787; break;}
                        case obj_bouncer:                   {use_conversion = 788; break;}
                        case obj_bouncer_stub:              {use_conversion = 788; break;}
                        case obj_spring_20:                 {use_conversion = 789; break;}
                        case obj_spring_21:                 {use_conversion = 790; break;}
                        case obj_spring_22:                 {use_conversion = 791; break;}
                        case obj_spring_23:                 {use_conversion = 792; break;}
                        case obj_crystal_gold_flower:       {use_conversion = 793; break;}
                        case obj_water_pool:                {use_conversion = 794; break;}
                        case obj_waterfall_small:           {use_conversion = 820; break;}
                        case obj_platform_midboss:          {use_conversion = 833; break;}
                        case obj_bg_changer_0:              {use_conversion = 840; break;}
                        case obj_bg_changer_1:              {use_conversion = 841; break;}
                        case obj_bg_changer_2:              {use_conversion = 842; break;}
                        case obj_bg_changer_3:              {use_conversion = 843; break;}
                        case obj_bg_changer_4:              {use_conversion = 844; break;}
                        case obj_bg_changer_5:              {use_conversion = 845; break;}
                        case obj_bg_changer_6:              {use_conversion = 846; break;}
                        case obj_bg_changer_7:              {use_conversion = 847; break;}
                        case obj_bg_changer_8:              {use_conversion = 848; break;}
                        case obj_bg_changer_9:              {use_conversion = 849; break;}
                        case obj_bg_changer_10:             {use_conversion = 850; break;}
                        case obj_bg_changer_11:             {use_conversion = 851; break;}
                        case obj_bg_changer_12:             {use_conversion = 852; break;}
                        case obj_bg_changer_13:             {use_conversion = 853; break;}
                        case obj_bg_changer_14:             {use_conversion = 854; break;}
                        case obj_bg_changer_15:             {use_conversion = 855; break;}
                        case obj_bg_changer_16:             {use_conversion = 856; break;}
                        case obj_player_spawnpoint_carrie:  {use_conversion = 857; break;}
                        case obj_water_platform_hor:        {use_conversion = 858; break;}
                        case obj_water_platform_ver:        {use_conversion = 859; break;}
                        case obj_crystal_green_flower:      {use_conversion = 860; break;}
                        case obj_potion_chest:              {use_conversion = 861; break;}
                        case obj_shop_milla:                {use_conversion = 862; break;}
                        case obj_mud_cube:                  {use_conversion = 863; break;}
                        case obj_mud_block:                 {use_conversion = 864; break;}
                        case obj_mud_water:                 {use_conversion = 865; break;}
                        case obj_portal_1a:                 {use_conversion = 866; break;}
                        case obj_portal_1b:                 {use_conversion = 867; break;}
                        case obj_portal_2a:                 {use_conversion = 868; break;}
                        case obj_portal_2b:                 {use_conversion = 869; break;}
                        case obj_player_spawnpoint_chiasa:  {use_conversion = 878; break;}
                        case obj_spring_24:                 {use_conversion = 879; break;}
                        case obj_spring_25:                 {use_conversion = 880; break;}
                        case obj_spring_26:                 {use_conversion = 881; break;}
                        case obj_spring_27:                 {use_conversion = 882; break;}
                        case obj_spring_28:                 {use_conversion = 883; break;}
                        case obj_spring_29:                 {use_conversion = 884; break;}
                        case obj_spring_30:                 {use_conversion = 885; break;}
                        case obj_spring_31:                 {use_conversion = 886; break;}
                        case obj_treasure_chest:            {use_conversion = 887; break;}
                        case obj_bg_train_station:          {use_conversion = 888; break;}
                        case obj_instant_water:             {use_conversion = 902; break;}
                        case obj_mega_rogue_cube:           {use_conversion = 903; break;}
                        case obj_city_ambiance:             {use_conversion = 904; break;}
                        case obj_bg_mnt_cave:               {use_conversion = 934; break;}
                        case obj_bg_city_sewers_day:        {use_conversion = 935; break;}
                        case obj_bg_changer_17:             {use_conversion = 936; break;}
                        case obj_bg_changer_18:             {use_conversion = 937; break;}
                        case obj_petal_shard_float:         {use_conversion = 941; break;}
                        case obj_spring_32:                 {use_conversion = 942; break;}
                        case obj_spring_33:                 {use_conversion = 943; break;}
                        case obj_mega_boss_music:           {use_conversion = 944; break;}
                        case obj_angle_gear_0:              {use_conversion = 946; break;}
                        case obj_angle_gear_90:             {use_conversion = 947; break;}
                        case obj_angle_gear_180:            {use_conversion = 948; break;}
                        case obj_angle_gear_270:            {use_conversion = 949; break;}
                        case obj_stop_music:                {use_conversion = 950; break;}
                        case obj_start_music:               {use_conversion = 951; break;}
                        case obj_creepy_ambiance:           {use_conversion = 952; break;}
                        case obj_creepy_caves:              {use_conversion = 953; break;}
                        case obj_portal_3a:                 {use_conversion = 954; break;}
                        case obj_portal_3b:                 {use_conversion = 955; break;}
                        case obj_portal_4a:                 {use_conversion = 956; break;}
                        case obj_portal_4b:                 {use_conversion = 957; break;}
                        case obj_bg_jungle:                 {use_conversion = 958; break;}
                        case obj_bg_changer_19:             {use_conversion = 959; break;}
                        case obj_bg_changer_20:             {use_conversion = 960; break;}
                        case obj_bg_jungle_night:           {use_conversion = 961; break;}
                        case obj_player_spawnpoint_next:    {use_conversion = 962; break;}
                        case obj_bg_rapids:                 {use_conversion = 1140; break;}
                        case obj_boost_ring_right:          {use_conversion = 1141; break;}
                        case obj_boost_ring_left:           {use_conversion = 1142; break;}
                        case obj_boost_ring_up:             {use_conversion = 1143; break;}
                        case obj_boost_ring_down:           {use_conversion = 1144; break;}
                        case obj_super_boost_ring_right:    {use_conversion = 1145; break;}
                        case obj_super_boost_ring_left:     {use_conversion = 1146; break;}
                        case obj_super_boost_ring_up:       {use_conversion = 1147; break;}
                        case obj_super_boost_ring_down:     {use_conversion = 1148; break;}
                        case obj_bg_changer_21:             {use_conversion = 1166; break;}
                        case obj_cube_mega_spring:          {use_conversion = 1167; break;}
                        case obj_cube_rogue_spring:         {use_conversion = 1168; break;}
                        case obj_respawn_plane:             {use_conversion = 1169; break;}
                        case obj_slime_water:               {use_conversion = 1170; break;}
                        case obj_slimefall:                 {use_conversion = 1171; break;}
                        case obj_water_type_slime:          {use_conversion = 1172; break;}
                        case obj_water_type_mud:            {use_conversion = 1173; break;}
                        case obj_water_type_petals:         {use_conversion = 1174; break;}
                        case obj_weather_slime:             {use_conversion = 1175; break;}
                        case obj_slime_cube:                {use_conversion = 1176; break;}
                        case obj_bg_city_sewers_slime:      {use_conversion = 1177; break;}
                        case obj_bg_changer_22:             {use_conversion = 1178; break;}
                        case obj_instant_water_specify:     {use_conversion = 1179; break;}
                        case obj_water_type_oil:            {use_conversion = 1180; break;}
                        case obj_oil_water:                 {use_conversion = 1181; break;}
                        case obj_crystal_gem_float:         {use_conversion = 1182; break;}
                        case obj_lock_boundary_top:         {use_conversion = 1183; break;}
                        case obj_lock_boundary_bottom:      {use_conversion = 1184; break;}
                        case obj_lock_boundary_left:        {use_conversion = 1185; break;}
                        case obj_lock_boundary_right:       {use_conversion = 1186; break;}
                        case obj_bouncer_flee:              {use_conversion = 1187; break;}
                        case obj_fireworks_tank_flee:       {use_conversion = 1188; break;}
                        case obj_stop_ambience:             {use_conversion = 1215; break;}
                        case obj_weather_drizzle:           {use_conversion = 1220; break;}
                        case obj_water_type_sludge:         {use_conversion = 1221; break;}
                        case obj_sludge_water:              {use_conversion = 1222; break;}
                        case obj_sludge_cube:               {use_conversion = 1223; break;}
                        case obj_ballpit_balls:             {use_conversion = 1224; break;}
                        case obj_ballpit_gems:              {use_conversion = 1225; break;}
                        case obj_potty_male:                {use_conversion = 1226; break;}
                        case obj_potty_female:              {use_conversion = 1227; break;}
                        case obj_potty_trans:               {use_conversion = 1228; break;}
                        case obj_basketball_hoop:           {use_conversion = 1229; break;}
                        case obj_malleus:                   {use_conversion = 1257; break;}
                        case obj_temple_bell:               {use_conversion = 1305; break;}
                        case obj_pinwheel:                  {use_conversion = 1306; break;}
                        case obj_hangbar_moving:            {use_conversion = 1307; break;}
                        case obj_pulley_rope_hor:           {use_conversion = 1308; break;}
                        case obj_pulley_rope_ver:           {use_conversion = 1309; break;}
                        case obj_pulley_wheel:              {use_conversion = 1310; break;}
                        case obj_temple_bell_hammer:        {use_conversion = 1311; break;}
                        case obj_moving_platform:           {use_conversion = 1312; break;}
                        case obj_cube_generator:            {use_conversion = 1313; break;}
                        case obj_sprindog:                  {use_conversion = 1314; break;}
                        case obj_wasp:                      {use_conversion = 1315; break;}
                        case obj_stinger:                   {use_conversion = 1316; break;}
                        case obj_ant_bomb:                  {use_conversion = 1317; break;}
                        case obj_ring_hammer:               {use_conversion = 1318; break;}
                        case obj_saw_flounder:              {use_conversion = 1319; break;}
                        case obj_iris:                      {use_conversion = 1320; break;}
                        case obj_campfire:                  {use_conversion = 1344; break;}
                        case obj_bg_sushi_bar:              {use_conversion = 1349; break;}
                        case obj_sushi_roller:              {use_conversion = 1350; break;}
                        case obj_guardian:                  {use_conversion = 1351; break;}
                        case obj_guardian_stub:             {use_conversion = 1351; break;}
                        case obj_pusher_up:                 {use_conversion = 1352; break;}
                        case obj_pusher_down:               {use_conversion = 1353; break;}
                        case obj_pusher_left:               {use_conversion = 1354; break;}
                        case obj_pusher_right:              {use_conversion = 1355; break;}
                        case obj_bg_mnt_cave_dark:          {use_conversion = 1356; break;}
                        case obj_stinger_nest:              {use_conversion = 1359; break;}
                        case obj_wasp_nest:                 {use_conversion = 1360; break;}
                        case obj_bench_camping:             {use_conversion = 1369; break;}
                        case obj_hangbar_up:                {use_conversion = 1370; break;}
                        case obj_hangbar_down:              {use_conversion = 1371; break;}
                        case obj_hangbar_left:              {use_conversion = 1372; break;}
                        case obj_guardian_chase:            {use_conversion = 1386; break;}
                        case obj_minecart:                  {use_conversion = 1387; break;}
                        case obj_bg_wuzhen:                 {use_conversion = 1388; break;}
                        case obj_bg_changer_23:             {use_conversion = 1389; break;}
                        case obj_bg_changer_24:             {use_conversion = 1390; break;}
                        case obj_bg_wuzhen_night:           {use_conversion = 1394; break;}
                        case obj_spikes_21:                 {use_conversion = 1395; break;}
                        case obj_bg_wuzhen_sunset:          {use_conversion = 1396; break;}
                        case obj_bg_changer_25:             {use_conversion = 1397; break;}
                        case obj_bg_changer_26:             {use_conversion = 1398; break;}
                        case obj_umbrella_pop:              {use_conversion = 1409; break;}
                        case obj_spring_34:                 {use_conversion = 1410; break;}
                        case obj_spring_35:                 {use_conversion = 1411; break;}
                        case obj_spring_36:                 {use_conversion = 1412; break;}
                        case obj_spring_37:                 {use_conversion = 1413; break;}
                        case obj_bg_jiang_cruise:           {use_conversion = 1414; break;}
                        case obj_bg_jiang_cruise_storm:     {use_conversion = 1415; break;}
                        case obj_bivalve_pop:               {use_conversion = 1417; break;}
                        case obj_bg_mall_day:               {use_conversion = 1427; break;}
                        case obj_bg_mall_night:             {use_conversion = 1428; break;}
                        case obj_bg_changer_27:             {use_conversion = 1429; break;}
                        case obj_bg_changer_28:             {use_conversion = 1430; break;}
                        case obj_chum_bucket:               {use_conversion = 1476; break;}
                        case obj_photo_poster:              {use_conversion = 1477; break;}
                        case obj_led_arrows:                {use_conversion = 1478; break;}
                        case obj_buoy:                      {use_conversion = 1479; break;}
                        case obj_escalator_top:             {use_conversion = 1480; break;}
                        case obj_escalator_middle:          {use_conversion = 1481; break;}
                        case obj_escalator_bottom:          {use_conversion = 1482; break;}
                        case obj_escalator_top_flipped:     {use_conversion = 1483; break;}
                        case obj_escalator_middle_flipped:  {use_conversion = 1484; break;}
                        case obj_escalator_bottom_flipped:  {use_conversion = 1485; break;}
                        case obj_lagoon_boat:               {use_conversion = 1497; break;}
                        case obj_camera_stop_plane:         {use_conversion = 1498; break;}
                        case obj_door_horizontal_pump:      {use_conversion = 1499; break;}
                        case obj_door_vertical_pump:        {use_conversion = 1500; break;}
                        case obj_sea_turretus:              {use_conversion = 1501; break;}
                        case obj_snappy:                    {use_conversion = 1502; break;}
                        case obj_diveboard:                 {use_conversion = 1503; break;}
                        case obj_diveboard_left:            {use_conversion = 1504; break;}
                        case obj_star_marine_runaway:       {use_conversion = 1513; break;}
                        case obj_kiwi:                      {use_conversion = 1514; break;}
                        case obj_buoy_flying:               {use_conversion = 1521; break;}
                        case obj_bubble_orbiter:            {use_conversion = 1522; break;}
                        case obj_bb_flat_0:                 {use_conversion = 1589; break;}
                        case obj_bb_flat_2:                 {use_conversion = 1590; break;}
                        case obj_bb_flat_13:                {use_conversion = 1591; break;}
                        case obj_bb_flat_17:                {use_conversion = 1592; break;}
                        case obj_bb_flat_12:                {use_conversion = 1593; break;}
                        case obj_bb_flat_15:                {use_conversion = 1594; break;}
                        case obj_bb_flat_16:                {use_conversion = 1595; break;}
                        case obj_bb_flat_14:                {use_conversion = 1596; break;}
                        case obj_bb_flat_19:                {use_conversion = 1597; break;}
                        case obj_bb_flat_18:                {use_conversion = 1598; break;}
                        case obj_bb_flat_9:                 {use_conversion = 1599; break;}
                        case obj_bb_flat_10:                {use_conversion = 1600; break;}
                        case obj_bb_slope_2:                {use_conversion = 1601; break;}
                        case obj_bb_slope_3:                {use_conversion = 1602; break;}
                        case obj_bb_flat_31:                {use_conversion = 1612; break;}
                        case obj_bb_donut_6:                {use_conversion = 1613; break;}
                        case obj_bb_donut_7:                {use_conversion = 1614; break;}
                        case obj_bb_donut_8:                {use_conversion = 1615; break;}
                        case obj_bb_donut_9:                {use_conversion = 1616; break;}
                        case obj_bb_donut_6_alt:            {use_conversion = 1617; break;}
                        case obj_bb_donut_7_alt:            {use_conversion = 1618; break;}
                        case obj_bb_donut_8_alt:            {use_conversion = 1619; break;}
                        case obj_bb_donut_9_alt:            {use_conversion = 1620; break;}
                        case obj_cracked_orb:               {use_conversion = 1621; break;}
                        case obj_floor_panel:               {use_conversion = 1622; break;}
                        case obj_monitor_0:                 {use_conversion = 1623; break;}
                        case obj_monitor_1:                 {use_conversion = 1624; break;}
                        case obj_monitor_2:                 {use_conversion = 1625; break;}
                        case obj_monitor_3:                 {use_conversion = 1626; break;}
                        case obj_monitor_4:                 {use_conversion = 1627; break;}
                        case obj_hangbar_5:                 {use_conversion = 1633; break;}
                        case obj_pushup:                    {use_conversion = 1634; break;}
                        case obj_plasma_squid:              {use_conversion = 1635; break;}
                        case obj_algae_cutter:              {use_conversion = 1636; break;}
                        case obj_bb_elevator:               {use_conversion = 1718; break;}
                        case obj_elevator_stopper:          {use_conversion = 1719; break;}
                        case obj_fountain:                  {use_conversion = 1743; break;}
                        case obj_mega_barrel:               {use_conversion = 1744; break;}

                        case obj_npc_lilac:  {use_conversion_npc = 1; use_conversion = -1; break;}
                        case obj_npc_carol:  {use_conversion_npc = 2; use_conversion = -1; break;}
                        case obj_npc_milla:  {use_conversion_npc = 3; use_conversion = -1; break;}
                        case obj_npc_stella: {use_conversion_npc = 4; use_conversion = -1; break;}
                        case obj_npc_shy:    {use_conversion_npc = 5; use_conversion = -1; break;}
                        case obj_npc_tiwi:   {use_conversion_npc = 6; use_conversion = -1; break;}
                        case obj_npc_sign:   {use_conversion_npc = 7; use_conversion = -1; break;}
                        case obj_npc_stumpy: {use_conversion_npc = 8; use_conversion = -1; break;}
                        case obj_npc_cook:   {use_conversion_npc = 9; use_conversion = -1; break;}
                        case obj_npc_wacky:  {use_conversion_npc = 10; use_conversion = -1; break;}
                        case obj_npc_harige: {use_conversion_npc = 11; use_conversion = -1; break;}
                        case obj_npc_bird_guard: {use_conversion_npc = 12; use_conversion = -1; break;}
                        case obj_npc_jamie: {use_conversion_npc = 13; use_conversion = -1; break;}
                        case obj_npc_cassandre: {use_conversion_npc = 14; use_conversion = -1; break;}
                        case obj_npc_spade: {use_conversion_npc = 15; use_conversion = -1; break;}
                        case obj_npc_azuli: {use_conversion_npc = 16; use_conversion = -1; break;}
                        case obj_npc_astum: {use_conversion_npc = 17; use_conversion = -1; break;}
                        case obj_npc_beibo: {use_conversion_npc = 18; use_conversion = -1; break;}
                        case obj_npc_trip:  {use_conversion_npc = 19; use_conversion = -1; break;}
                        case obj_npc_axl:   {use_conversion_npc = 20; use_conversion = -1; break;}
                        case obj_npc_candy: {use_conversion_npc = 21; use_conversion = -1; break;}
                        case obj_npc_umi:   {use_conversion_npc = 22; use_conversion = -1; break;}
                        case obj_npc_allister: {use_conversion_npc = 23; use_conversion = -1; break;}
                        case obj_npc_abby:   {use_conversion_npc = 24; use_conversion = -1; break;}
                        case obj_npc_alexis: {use_conversion_npc = 25; use_conversion = -1; break;}
                        case obj_npc_kyomi:  {use_conversion_npc = 26; use_conversion = -1; break;}
                        case obj_npc_xavier: {use_conversion_npc = 27; use_conversion = -1; break;}
                        case obj_npc_carrie: {use_conversion_npc = 28; use_conversion = -1; break;}
                        case obj_npc_ryusei: {use_conversion_npc = 29; use_conversion = -1; break;}
                        case obj_npc_savvy:  {use_conversion_npc = 30; use_conversion = -1; break;}
                        case obj_npc_rhyme:  {use_conversion_npc = 31; use_conversion = -1; break;}
                        case obj_npc_clyde:  {use_conversion_npc = 32; use_conversion = -1; break;}
                        case obj_npc_bucky:  {use_conversion_npc = 33; use_conversion = -1; break;}
                        case obj_npc_ness:   {use_conversion_npc = 34; use_conversion = -1; break;}
                        case obj_npc_hyper:  {use_conversion_npc = 35; use_conversion = -1; break;}
                        case obj_npc_iris:   {use_conversion_npc = 36; use_conversion = -1; break;}
                        case obj_npc_maika:  {use_conversion_npc = 37; use_conversion = -1; break;}
                        case obj_npc_leela:  {use_conversion_npc = 38; use_conversion = -1; break;}
                        case obj_npc_tsuki:  {use_conversion_npc = 39; use_conversion = -1; break;}
                        case obj_npc_libbie_dark:  {use_conversion_npc = 40; use_conversion = -1; break;}
                        case obj_npc_pumppy:       {use_conversion_npc = 41; use_conversion = -1; break;}
                        case obj_npc_libbie:       {use_conversion_npc = 42; use_conversion = -1; break;}
                        case obj_npc_serena:       {use_conversion_npc = 43; use_conversion = -1; break;}
                        case obj_npc_chiasa:       {use_conversion_npc = 44; use_conversion = -1; break;}
                        case obj_npc_dean:         {use_conversion_npc = 45; use_conversion = -1; break;}
                        case obj_npc_shan:         {use_conversion_npc = 46; use_conversion = -1; break;}
                        case obj_npc_mei:          {use_conversion_npc = 47; use_conversion = -1; break;}
                        case obj_npc_vivid:        {use_conversion_npc = 48; use_conversion = -1; break;}
                        case obj_npc_garrett:      {use_conversion_npc = 49; use_conversion = -1; break;}
                        case obj_npc_maria:        {use_conversion_npc = 50; use_conversion = -1; break;}
                        case obj_npc_elric:        {use_conversion_npc = 51; use_conversion = -1; break;}
                        case obj_npc_beldr:        {use_conversion_npc = 52; use_conversion = -1; break;}
                        case obj_npc_leo:          {use_conversion_npc = 53; use_conversion = -1; break;}
                        case obj_npc_jett:         {use_conversion_npc = 54; use_conversion = -1; break;}
                        case obj_npc_marshmallow:  {use_conversion_npc = 55; use_conversion = -1; break;}
                        case obj_npc_vela:         {use_conversion_npc = 56; use_conversion = -1; break;}
                        case obj_npc_leone:        {use_conversion_npc = 57; use_conversion = -1; break;}
                        case obj_npc_pat:          {use_conversion_npc = 58; use_conversion = -1; break;}
                        case obj_npc_uny:          {use_conversion_npc = 59; use_conversion = -1; break;}
                        case obj_npc_kii:          {use_conversion_npc = 60; use_conversion = -1; break;}
                        case obj_npc_kyoti:        {use_conversion_npc = 61; use_conversion = -1; break;}
                        case obj_npc_yuuka:        {use_conversion_npc = 62; use_conversion = -1; break;}
                        case obj_npc_kubo:         {use_conversion_npc = 63; use_conversion = -1; break;}
                        case obj_npc_zeia:         {use_conversion_npc = 64; use_conversion = -1; break;}
                        case obj_npc_gauge:        {use_conversion_npc = 65; use_conversion = -1; break;}
                        case obj_npc_tanner:       {use_conversion_npc = 66; use_conversion = -1; break;}
                        case obj_npc_amy:          {use_conversion_npc = 67; use_conversion = -1; break;}
                        case obj_npc_alan:         {use_conversion_npc = 68; use_conversion = -1; break;}
                        case obj_npc_kai:          {use_conversion_npc = 69; use_conversion = -1; break;}
                        case obj_npc_neera:        {use_conversion_npc = 70; use_conversion = -1; break;}
                        case obj_npc_lilac_run:    {use_conversion_npc = 71; use_conversion = -1; break;}
                        case obj_npc_carol_run:    {use_conversion_npc = 72; use_conversion = -1; break;}
                        case obj_npc_milla_run:    {use_conversion_npc = 73; use_conversion = -1; break;}
                        case obj_npc_spade_run:    {use_conversion_npc = 74; use_conversion = -1; break;}
                        case obj_npc_carrie_run:   {use_conversion_npc = 75; use_conversion = -1; break;}
                        case obj_npc_chiasa_run:   {use_conversion_npc = 76; use_conversion = -1; break;}
                        case obj_npc_bike_run:     {use_conversion_npc = 77; use_conversion = -1; break;}
                        case obj_npc_mirdin:       {use_conversion_npc = 78; use_conversion = -1; break;}
                        case obj_npc_boss:         {use_conversion_npc = 79; use_conversion = -1; break;}
                        case obj_npc_dexter:       {use_conversion_npc = 80; use_conversion = -1; break;}
                        case obj_npc_kusei:        {use_conversion_npc = 81; use_conversion = -1; break;}
                        case obj_npc_flavio:       {use_conversion_npc = 82; use_conversion = -1; break;}
                        case obj_npc_millie:       {use_conversion_npc = 83; use_conversion = -1; break;}
                        case obj_npc_bird_guard_male: {use_conversion_npc = 84; use_conversion = -1; break;}
                        case obj_npc_sabre:        {use_conversion_npc = 85; use_conversion = -1; break;}
                        case obj_npc_miko:         {use_conversion_npc = 86; use_conversion = -1; break;}
                        case obj_npc_vergil:       {use_conversion_npc = 87; use_conversion = -1; break;}
                        case obj_npc_tyler:        {use_conversion_npc = 88; use_conversion = -1; break;}
                        case obj_npc_nougat:       {use_conversion_npc = 89; use_conversion = -1; break;}
                        case obj_npc_luna:         {use_conversion_npc = 90; use_conversion = -1; break;}
                        case obj_npc_jonas:        {use_conversion_npc = 91; use_conversion = -1; break;}

                        //case obj_bg_anim_tile:     {use_conversion_adv = 1; break; use_conversion = -1; break;}
                        default:                   {use_conversion = -1; use_conversion_npc = 0; break;}
                    }
                //Write Collected Object Data
                if use_conversion != -1
                    {
                        switch(obj.item)
                            {
                                case spr_target:  {use_conversion_item = 1; break;}
                                case spr_keycard: {use_conversion_item = 2; break;}
                                case spr_mod_chip_alt_weapon:   {use_conversion_item = 3; break;}
                                case spr_mod_chip_health:       {use_conversion_item = 4; break;}
                                case spr_mod_chip_speed:        {use_conversion_item = 5; break;}
                                case spr_mod_chip_extra_large:  {use_conversion_item = 6; break;}
                                case spr_mod_chip_bomb:         {use_conversion_item = 7; break;}
                                case spr_mod_chip_spring:       {use_conversion_item = 8; break;}
                                case spr_mod_chip_detonate:     {use_conversion_item = 9; break;}
                                default: {use_conversion_item = 0; break;}
                            }
                        ini_write_string(map_offset+"lvl_objects_"+string(use_write_obj_position),"obj_x",string(obj.x))
                        ini_write_string(map_offset+"lvl_objects_"+string(use_write_obj_position),"obj_y",string(obj.y))
                        ini_write_string(map_offset+"lvl_objects_"+string(use_write_obj_position),"obj_asset",string(use_conversion))
                        ini_write_string(map_offset+"lvl_objects_"+string(use_write_obj_position),"obj_item",string(use_conversion_item))
                    }
                //Skip Over Writing Object Data For Objects Not In Our Asset Definition Table
                else ini_write_string(map_offset+"lvl_objects_"+string(use_write_obj_position),"obj_ignore",string(-1));
                if use_conversion_npc &gt; 0
                    {
                        ini_write_string(map_offset+"lvl_npcs_"+string(use_conversion_counter),"npc_x",string(obj.x))
                        ini_write_string(map_offset+"lvl_npcs_"+string(use_conversion_counter),"npc_y",string(obj.y))
                        ini_write_string(map_offset+"lvl_npcs_"+string(use_conversion_counter),"npc_object",string(use_conversion_npc))
                        ini_write_string(map_offset+"lvl_npcs_"+string(use_conversion_counter),"npc_emotion",string(obj.npc_emotion_index))
                        ini_write_string(map_offset+"lvl_npcs_"+string(use_conversion_counter),"npc_direction",string(obj.npc_direction))
                        ini_write_string(map_offset+"lvl_npcs_"+string(use_conversion_counter),"npc_string_0",obj.npc_dialog_string_p1)
                        ini_write_string(map_offset+"lvl_npcs_"+string(use_conversion_counter),"npc_string_1",obj.npc_dialog_string_p2)
                        ini_write_string(map_offset+"lvl_npcs_"+string(use_conversion_counter),"lilac_string_0",obj.lilac_dialog_string_p1)
                        ini_write_string(map_offset+"lvl_npcs_"+string(use_conversion_counter),"lilac_string_1",obj.lilac_dialog_string_p2)
                        ini_write_string(map_offset+"lvl_npcs_"+string(use_conversion_counter),"carol_string_0",obj.carol_dialog_string_p1)
                        ini_write_string(map_offset+"lvl_npcs_"+string(use_conversion_counter),"carol_string_1",obj.carol_dialog_string_p2)
                        ini_write_string(map_offset+"lvl_npcs_"+string(use_conversion_counter),"milla_string_0",obj.milla_dialog_string_p1)
                        ini_write_string(map_offset+"lvl_npcs_"+string(use_conversion_counter),"milla_string_1",obj.milla_dialog_string_p2)
                        ini_write_string(map_offset+"lvl_npcs_"+string(use_conversion_counter),"spade_string_0",obj.spade_dialog_string_p1)
                        ini_write_string(map_offset+"lvl_npcs_"+string(use_conversion_counter),"spade_string_1",obj.spade_dialog_string_p2)
                        ini_write_string(map_offset+"lvl_npcs_"+string(use_conversion_counter),"npc_emotion_0",obj.npc_dialog_emotion_p1)
                        ini_write_string(map_offset+"lvl_npcs_"+string(use_conversion_counter),"npc_emotion_1",obj.npc_dialog_emotion_p2)
                        use_conversion_counter += 1
                    }
                //if use_conversion_adv &gt; 0
                //    {
                //        ini_write_string(map_offset+"lvl_adv_"+string(use_conversion_counter),"adv_x",string(obj.x))
                //        ini_write_string(map_offset+"lvl_adv_"+string(use_conversion_counter),"adv_y",string(obj.y))
                //        ini_write_string(map_offset+"lvl_adv_"+string(use_conversion_counter),"adv_object",string(use_conversion_adv))
                //        ini_write_string(map_offset+"lvl_adv_"+string(use_conversion_counter),"propert_flag_0",string(obj.property_flag[0]))
                //        ini_write_string(map_offset+"lvl_adv_"+string(use_conversion_counter),"propert_flag_1",string(obj.property_flag[1]))
                //        ini_write_string(map_offset+"lvl_adv_"+string(use_conversion_counter),"propert_flag_2",string(obj.property_flag[2]))
                //        ini_write_string(map_offset+"lvl_adv_"+string(use_conversion_counter),"propert_flag_3",string(obj.property_flag[3]))
                //        ini_write_string(map_offset+"lvl_adv_"+string(use_conversion_counter),"propert_flag_4",string(obj.property_flag[4]))
                //        ini_write_string(map_offset+"lvl_adv_"+string(use_conversion_counter),"propert_flag_5",string(obj.property_flag[5]))
                //        use_conversion_counter += 1
                //   }
                //Iterate Write Position
                use_write_obj_position += 1
                //Exit Loop Once We Have Finished Writing
                if use_write_obj_position = instance_count break;
            }
        ini_write_string(map_offset+"lvl_hd","lvl_obj_count",string(use_write_obj_position))
        ini_write_string(map_offset+"lvl_hd","lvl_npc_count",string(use_conversion_counter))
        //Write Player Health
        ini_write_string("lvl_health","health",string(use_health_petal_mod))
        //Close Level Map
        ini_close_ns()
        //Empty Tile Array
        use_write_array = 0
        use_write_length = 0
        use_write_position = 0
        use_write_obj_position = 0
        use_write_delay = 0
        parent.use_write_delay = 0
        scr_set_message("Saving complete!")
        //Enter Next Stage If Next/Previous Buttons Were Clicked
        if parent.use_maps_transition &gt; 0
            {
                if parent.use_maps_transition = 1
                    parent.use_maps_current_map -= 1;
                if parent.use_maps_transition = 2
                    parent.use_maps_current_map += 1;
                parent.use_maps_transition = 0
                //Set A Stage Name, Architect Name, And Description Based On Previously Obtained Information
                use_write_keyboard_string_stage_name = use_write_reserve_string_stage_name
                use_write_keyboard_string_architect = use_write_reserve_string_architect
                use_write_keyboard_string_description = use_write_reserve_string_description
                //Clear previous map data by restarting the room
                scr_set_message("Now loading...")
                parent.use_maps_select = use_write_keyboard_string_stage_name + ".map"
                use_loading_screen = 1
            }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Graphical Interface

//=============================================================//
//------------------Shang Mu Architect Editor------------------//
//=============================================================//

//Prevent placement of tiles/objects when the cursor is hovering over the sidebar
side_bar_allow = 0

if user_editor_hud_state = 0
    {
        var user_editor_side_bar_offset = 353;
        if use_file_menu != 0
            user_editor_side_bar_offset = 314;
        
        if device_mouse_x_to_gui(0) &gt;= user_editor_side_bar_offset-6
            {
                user_place_allow = 0;
                side_bar_allow = 1;
            }
    }
else
    {
        if device_mouse_x_to_gui(0) &gt;= user_editor_hud_offset-6
            {
                user_place_allow = 0;
                side_bar_allow = 1;
            }
    }
//Or when the cursor is hovering over the next/previous map buttons
use_next_previous_confirm = 0
if (mouse_x &gt; use_line_left[0] and mouse_x &lt; use_line_left[0]+64 and parent.use_maps_current_map &gt; 0)
or (mouse_x &gt; use_line_right[2]-64 and mouse_x &lt; use_line_right[2])
    use_next_previous_confirm = 1;

if parent.pause = 1 and depth = -7
    depth = -5;
if parent.pause = 0 and depth = -5
    depth = -7;

if use_auto_save = 1
    use_auto_save_timer += 1;

if (keyboard_check_pressed(vk_f5) or use_auto_save_timer = 18000)
    {
        if tile_get_count() &gt; user_tile_limit_warning_value
            {
                scr_set_message("Tile limit reached!  Remove tiles to optimize.")
            }
        else
            {
                if use_write_reserve_string_stage_name = ""
                    {
                        use_tile_menu = 4
                        keyboard_string=""
                        //Create The Maps Directory If It Doesn't Already Exist
                        if !directory_exists_ns("Maps") directory_create_ns("Maps");
                    }
                else
                    {
                        //Trigger Write Process If A Stage Name Was Provided
                        use_tile_menu = 0
                        use_tile_menu_cool_down = 8
                        //Trigger Write Process
                        use_write_delay = 1
                        parent.use_write_delay = 1
                        use_keyboard_active = 0
                        scr_set_message("Saving... please wait!")
                        use_write_keyboard_string_active_string = -1
                        //Set A Stage Name, Architect Name, And Description Based On Previously Obtained Information
                        use_write_keyboard_string_stage_name = use_write_reserve_string_stage_name
                        use_write_keyboard_string_architect = use_write_reserve_string_architect
                        use_write_keyboard_string_description = use_write_reserve_string_description
                    }
                //Play menu sound
                audio_play_sound(pause_select,50,false)
                //Trigger Highlighter
                scr_set_highlighter(324,98,413,114)
            }
    }
if (use_auto_save_timer &gt; 18000) use_auto_save_timer = 0;

//Check for regions of the screen to interact with if we have pressed the mouse button
if use_float_window = 0
    {
if (mouse_check_button_pressed(joy_mouse_button_left) or (use_put_here = 1 and use_tile_menu_cool_down = 0))
    {
        //Change key prompts to button prompts
        if !mouse_check_button_pressed(joy_mouse_button_left) and !keyboard_check(key_put_here) use_dispaly_key_prompt = 0;
        //Change button prompts to key prompts
        if mouse_check_button_pressed(joy_mouse_button_left) or keyboard_check(key_put_here) use_dispaly_key_prompt = 1;

        if (use_next_previous_confirm = 1 and use_tile_menu = 0 and use_tile_menu_cool_down = 0
        and side_bar_allow = 0)
            {
                if use_write_reserve_string_stage_name = ""
                    {
                        scr_set_message("Stage must be saved first!")
                    }
                else
                    {
                        if tile_get_count() &gt; 0
                            {
                                //Pass Along The Submap Loading Process To the Saving Algorithm Instead
                                if (mouse_x &lt; use_line_left[0]+64 and parent.use_maps_current_map &gt; 0)
                                    parent.use_maps_transition = 1;
                                if (mouse_x &gt; use_line_right[2]-64)
                                    parent.use_maps_transition = 2;
                                //Trigger Write Process If A Stage Name Was Provided
                                use_tile_menu = 0
                                use_tile_menu_cool_down = 16
                                parent.use_maps_overwrite_protection = 1
                                use_tile_menu_cool_down = 256
                                //Trigger Write Process
                                use_write_delay = 1
                                parent.use_write_delay = 1
                                use_keyboard_active = 0
                                scr_set_message("Saving... please wait!")
                                //Set A Stage Name, Architect Name, And Description Based On Previously Obtained Information
                                use_write_keyboard_string_stage_name = use_write_reserve_string_stage_name
                                use_write_keyboard_string_architect = use_write_reserve_string_architect
                                use_write_keyboard_string_description = use_write_reserve_string_description
                                parent.use_maps_load = 1
                                //Disable Carol's Bike Sounds If They Were Still Playing
                                audio_stop_sound(carol_bike_idle)
                                audio_stop_sound(carol_bike_moving)
                                audio_stop_sound(carol_bike_skidding)
                            }
                        else
                            scr_set_message("Stage must have tiles to be saved!");
                    }
            }
        //If we are currently not using the tile menu, are not currently hovering over the sidebar, and aren't in play mode, place a tile
        if use_tile_menu = 0 and (side_bar_allow = 0) and user_cursor_mode = 0
        and use_tile_properties_cursor_boundary_disable = 0 and use_next_previous_confirm = 0
        //Disable tile placement while dragging the tile repeat box
        and use_tile_menu_cool_down != 16
            {
                if user_place_mode = 0 and use_file_menu != 2
                    {
                        var user_tile_allow = 1;
                        if tile_get_count() &gt; user_tile_limit_warning_value
                            {
                                user_tile_allow = 0
                                scr_set_message("Tile limit reached!  Remove tiles to optimize.")
                            }
                        //Place a tile
                        if user_cursor_display_mode = 0 and user_tile_allow = 1 and user_place_allow = 0
                            {
                                //Sentinel check on layer value for current tile; check to see if the tile shouldn't be
                                //placed on a specific layer
                                scr_set_layer_surface();
                                //Now, let's also check if we are placing the current tile over an existing slope tile, if we are on the slope layer;
                                //we can't have any overlapping slope tiles, it creates obvious logical issues for the player's slope sensors
                                var user_tile_valid = 1;
                                if user_layer_selected = surface_slopes
                                    {
                                        var user_tile_scan_x = user_grid_snap_x+user_grid_offset_x;
                                        var user_tile_scan_y = user_grid_snap_y+user_grid_offset_y;
                                        var user_tile_scan_distance = background_get_width(user_tile_selected)/4;

                                        while(user_tile_scan_y &lt; user_grid_snap_y+user_grid_offset_y+background_get_height(user_tile_selected))
                                            {
                                                user_tile_scan_x += user_tile_scan_distance
                                                if tile_layer_find(surface_slopes,user_tile_scan_x,user_tile_scan_y) != -1
                                                    {
                                                        user_tile_valid = 0
                                                        scr_set_message("Slope Tile Is Overlapping With Another!")
                                                        break
                                                    }
                                                if user_tile_scan_x &gt;= user_grid_snap_x+user_grid_offset_x+background_get_width(user_tile_selected)-user_tile_scan_distance
                                                    {
                                                        user_tile_scan_x = user_grid_snap_x+user_grid_offset_x
                                                        user_tile_scan_y += 4
                                                    }
                                            }
                                    }
                                if user_tile_valid = 1
                                    {
                                        //Place a tile
                                        added_tile = tile_add(user_tile_selected,0,0,background_get_width(user_tile_selected),background_get_height(user_tile_selected),user_grid_snap_x+user_grid_offset_x,user_grid_snap_y+user_grid_offset_y,user_layer_selected);
                                        //Trigger tile dragging
                                        use_corner_box = 5
                                        use_corner_box_id = added_tile;
                                        use_corner_box_bottom_left_x = tile_get_x(added_tile)
                                        use_corner_box_bottom_left_y = tile_get_y(added_tile)+tile_get_height(added_tile)
                                        use_corner_box_top_right_x = user_grid_snap_x
                                        use_corner_box_top_right_y = user_grid_snap_y
                                        user_place_start_x = user_grid_snap_x+user_grid_offset_x
                                        user_place_start_y = user_grid_snap_y+user_grid_offset_y
                                        //Place 2D tile logic controller, if it has double-sided collisions
                                        var yes = 0;
                                        var yes_ID = -1;
                                        yes = scr_set_check_slope_tiles(user_tile_selected);
                                        if yes = 1 and user_layer_iteration &lt; 5
                                            {
                                                if user_tile_selected = mu_ramp_6 or user_tile_selected = mu_ramp_18
                                                or user_tile_selected = mu_ramp_7 or user_tile_selected = mu_ramp_19
                                                or user_tile_selected = cs_ramp_6 or user_tile_selected = cs_ramp_18
                                                or user_tile_selected = cs_ramp_7 or user_tile_selected = cs_ramp_19
                                                    {
                                                        if (user_tile_selected = mu_ramp_6 or user_tile_selected = mu_ramp_18)
                                                        or (user_tile_selected = cs_ramp_6 or user_tile_selected = cs_ramp_18)
                                                            instance_create(user_grid_snap_x,user_grid_snap_y,obj_mu_ramp_6_18);
                                                        if (user_tile_selected = mu_ramp_7 or user_tile_selected = mu_ramp_19)
                                                        or (user_tile_selected = cs_ramp_7 or user_tile_selected = cs_ramp_19)
                                                            instance_create(user_grid_snap_x,user_grid_snap_y,obj_mu_ramp_7_19);
                                                    }
                                                else
                                                    yes_ID = instance_create(user_grid_snap_x,user_grid_snap_y,obj_2D_tile_logic);
                                            }
                                        use_tile_menu_cool_down = 8
                                        //Play Sound Effect
                                        audio_play_sound(snd_hammer,50,false)
                                        //Play Particle Effect
                                        use_confirm = 1
                                        //Place Animated Logic Node, If This Tile Has One
                                        var anim_id = scr_set_check_animated_tiles();
                                        if object_exists(user_anim_tile_object)
                                            {
                                                anim_tile_id = instance_create(tile_get_x(added_tile),tile_get_y(added_tile),user_anim_tile_object)
                                                anim_tile_id.tile_id = added_tile
                                                tile_set_alpha(added_tile,0)
                                                anim_tile_id.depth = tile_get_depth(added_tile)-1
                                            }
                                        //Log Undo History
                                        scr_record_tile_undo(tile_get_x(added_tile),tile_get_y(added_tile),added_tile,tile_get_background(added_tile),
                                        tile_get_xscale(added_tile),tile_get_yscale(added_tile),tile_get_alpha(added_tile),tile_get_depth(added_tile),1)
                                        if instance_exists(yes_ID)
                                            scr_record_object_undo(yes_ID.x,yes_ID.y,yes_ID,0,yes_ID.object_index,1);
                                        else
                                            {
                                                scr_record_object_undo(-64,-64,-1,0,-1,-1);
                                                user_undo_timeline_level_object_max_length[0] = -1
                                            }
                                    }
                            }
                        //Place an object
                        if user_cursor_display_mode = 1 and user_place_allow = 0
                            {
                                scr_create_object();
                                use_tile_menu_cool_down = 8
                                audio_play_sound(snd_hammer,50,false)
                                //Play Particle Effect
                                use_confirm = 1
                            }
                    }
                if user_place_mode = 2 and use_item_check_verified = 1
                and user_cursor_display_mode = 1 and user_place_allow = 0
                    {
                        scr_create_object();
                        use_tile_menu_cool_down = 8
                        audio_play_sound(snd_hammer,50,false)
                        //Play Particle Effect
                        use_confirm = 1
                    }
            }

        //Check the tile menu's inventory otherwise
        if use_tile_menu = 1 and use_tile_menu_cool_down = 0
            {
                //Check Tabs Item
                if (device_mouse_x_to_gui(0) &gt;= 8 and device_mouse_x_to_gui(0) &lt;= 49
                and device_mouse_y_to_gui(0) &gt;= 165 and device_mouse_y_to_gui(0) &lt;= 206)
                and use_tile_menu_subpage = 0
                    {
                        //Click Left Button
                        if (device_mouse_x_to_gui(0) &gt;= 8 and device_mouse_x_to_gui(0) &lt;= 17
                        and device_mouse_y_to_gui(0) &gt;= 165 and device_mouse_y_to_gui(0) &lt;= 206)
                            {
                                use_tileset_preview_set_increment -= 1
                                if use_tileset_preview_set_increment &lt; 0 use_tileset_preview_set_increment = 8;
                                //Trigger Highlighter
                                scr_set_highlighter(8,165,17,206)
                            }
                        //Click Right Button
                        if (device_mouse_x_to_gui(0) &gt;= 40 and device_mouse_x_to_gui(0) &lt;= 49
                        and device_mouse_y_to_gui(0) &gt;= 165 and device_mouse_y_to_gui(0) &lt;= 206)
                            {
                                use_tileset_preview_set_increment += 1
                                if use_tileset_preview_set_increment &gt; 8 use_tileset_preview_set_increment = 0;
                                //Trigger Highlighter
                                scr_set_highlighter(40,165,49,206)
                            }
                        scr_lang_editor_tile_sets()
                        scr_change_page()
                        scr_change_aspect_ratio_preview(user_tile_selected)
                        scr_get_tile_offsets()
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                    }
                //Check Row 1
                if device_mouse_y_to_gui(0) &gt;= 23 and device_mouse_y_to_gui(0) &lt;= 56
                    {
                        //Check Menu Item 1
                        if device_mouse_x_to_gui(0) &gt;= 31 and device_mouse_x_to_gui(0) &lt;= 64
                            scr_editor_menu_item_01();
                        //Check Menu Item 2
                        if device_mouse_x_to_gui(0) &gt;= 67 and device_mouse_x_to_gui(0) &lt;= 100
                            scr_editor_menu_item_02();
                        //Check Menu Item 3
                        if device_mouse_x_to_gui(0) &gt;= 103 and device_mouse_x_to_gui(0) &lt;= 136
                            scr_editor_menu_item_03();
                        //Check Menu Item 4
                        if device_mouse_x_to_gui(0) &gt;= 139 and device_mouse_x_to_gui(0) &lt;= 172
                            scr_editor_menu_item_04();
                        //Check Menu Item 5
                        if device_mouse_x_to_gui(0) &gt;= 175 and device_mouse_x_to_gui(0) &lt;= 208
                            scr_editor_menu_item_05();
                        //Check Menu Item 6
                        if device_mouse_x_to_gui(0) &gt;= 211 and device_mouse_x_to_gui(0) &lt;= 244
                            scr_editor_menu_item_06();
                        //Check Menu Item 7
                        if device_mouse_x_to_gui(0) &gt;= 247 and device_mouse_x_to_gui(0) &lt;= 280
                            scr_editor_menu_item_07();
                    }
                //Check Row 2
                if device_mouse_y_to_gui(0) &gt;= 59 and device_mouse_y_to_gui(0) &lt;= 92
                    {
                        //Check Menu Item 8 (Last Page)
                        if device_mouse_x_to_gui(0) &gt;= 13 and device_mouse_x_to_gui(0) &lt;= 46
                            scr_editor_menu_last_page();
                        //Check Menu Item 9
                        if device_mouse_x_to_gui(0) &gt;= 49 and device_mouse_x_to_gui(0) &lt;= 82
                            scr_editor_menu_item_09();
                        //Check Menu Item 10
                        if device_mouse_x_to_gui(0) &gt;= 85 and device_mouse_x_to_gui(0) &lt;= 118
                            scr_editor_menu_item_10();
                        //Check Menu Item 11
                        if device_mouse_x_to_gui(0) &gt;= 121 and device_mouse_x_to_gui(0) &lt;= 154
                            scr_editor_menu_item_11();
                        //Check Menu Item 12
                        if device_mouse_x_to_gui(0) &gt;= 157 and device_mouse_x_to_gui(0) &lt;= 190
                            scr_editor_menu_item_12();
                        //Check Menu Item 13
                        if device_mouse_x_to_gui(0) &gt;= 193 and device_mouse_x_to_gui(0) &lt;= 226
                            scr_editor_menu_item_13();
                        //Check Menu Item 14
                        if device_mouse_x_to_gui(0) &gt;= 229 and device_mouse_x_to_gui(0) &lt;= 262
                            scr_editor_menu_item_14();
                        //Check Menu Item 15 (Next Page)
                        if device_mouse_x_to_gui(0) &gt;= 265 and device_mouse_x_to_gui(0) &lt;= 298
                            scr_editor_menu_next_page();
                    }
                //Check Row 3
                if device_mouse_y_to_gui(0) &gt;= 95 and device_mouse_y_to_gui(0) &lt;= 128
                    {
                        //Check Menu Item 16
                        if device_mouse_x_to_gui(0) &gt;= 31 and device_mouse_x_to_gui(0) &lt;= 64
                            scr_editor_menu_item_16();
                        //Check Menu Item 17
                        if device_mouse_x_to_gui(0) &gt;= 67 and device_mouse_x_to_gui(0) &lt;= 100
                            scr_editor_menu_item_17();
                        //Check Menu Item 18
                        if device_mouse_x_to_gui(0) &gt;= 103 and device_mouse_x_to_gui(0) &lt;= 136
                            scr_editor_menu_item_18();
                        //Check Menu Item 19
                        if device_mouse_x_to_gui(0) &gt;= 139 and device_mouse_x_to_gui(0) &lt;= 172
                            scr_editor_menu_item_19();
                        //Check Menu Item 20
                        if device_mouse_x_to_gui(0) &gt;= 175 and device_mouse_x_to_gui(0) &lt;= 208
                            scr_editor_menu_item_20();
                        //Check Menu Item 21
                        if device_mouse_x_to_gui(0) &gt;= 211 and device_mouse_x_to_gui(0) &lt;= 244
                            scr_editor_menu_item_21();
                        //Check Menu Item 22
                        if device_mouse_x_to_gui(0) &gt;= 247 and device_mouse_x_to_gui(0) &lt;= 279
                            scr_editor_menu_item_22();
                    }
                //Check If We Should 
                //Check Quick Tools
                if device_mouse_x_to_gui(0) &gt;= 2 and device_mouse_x_to_gui(0) &lt;= 55
                and use_tile_menu_subpage &gt; 0
                    {
                        //Row 1
                        if device_mouse_y_to_gui(0) &gt;= 165 and device_mouse_y_to_gui(0) &lt;= 178
                            {
                                //Alt Weapon
                                if device_mouse_x_to_gui(0) &gt;= 8 and device_mouse_x_to_gui(0) &lt;= 21
                                    {
                                        if use_tile_menu_subpage = 2 scr_set_object(spr_mod_chip_detonate,lang_gui_name[parent.user_language_mode,331],lang_gui_desc[parent.user_language_mode,331]);
                                        if use_tile_menu_subpage != 0 and use_tile_menu_subpage != 2 scr_set_object(spr_gem,lang_gui_name[parent.user_language_mode,0],lang_gui_desc[parent.user_language_mode,0]);
                                        scr_set_highlighter(8,165,21,178)
                                        audio_play_sound(pause_select,50,false)
                                    }
                                //Speed
                                if device_mouse_x_to_gui(0) &gt;= 22 and device_mouse_x_to_gui(0) &lt;= 35
                                    {
                                        if use_tile_menu_subpage = 2 scr_set_object(spr_mod_chip_speed,lang_gui_name[parent.user_language_mode,332],lang_gui_desc[parent.user_language_mode,332]);
                                        if use_tile_menu_subpage != 0 and use_tile_menu_subpage != 2 scr_set_object(spr_petal_flower,lang_gui_name[parent.user_language_mode,20],lang_gui_desc[parent.user_language_mode,20]);
                                        scr_set_highlighter(22,165,35,178)
                                        audio_play_sound(pause_select,50,false)
                                    }
                                //Health
                                if device_mouse_x_to_gui(0) &gt;= 36 and device_mouse_x_to_gui(0) &lt;= 49
                                    {
                                        if use_tile_menu_subpage = 2 scr_set_object(spr_mod_chip_health,lang_gui_name[parent.user_language_mode,333],lang_gui_desc[parent.user_language_mode,333]);
                                        if use_tile_menu_subpage != 0 and use_tile_menu_subpage != 2 scr_set_object(spr_keycard,lang_gui_name[parent.user_language_mode,68],lang_gui_desc[parent.user_language_mode,68]);
                                        scr_set_highlighter(36,165,49,178)
                                        audio_play_sound(pause_select,50,false)
                                    }
                            }
                        //Row 2
                        if device_mouse_y_to_gui(0) &gt;= 179 and device_mouse_y_to_gui(0) &lt;= 192
                            {
                                if device_mouse_x_to_gui(0) &gt;= 8 and device_mouse_x_to_gui(0) &lt;= 21
                                    {
                                        if use_tile_menu_subpage = 2 scr_set_object(spr_mod_chip_extra_large,lang_gui_name[parent.user_language_mode,334],lang_gui_desc[parent.user_language_mode,334]);
                                        if use_tile_menu_subpage != 0 and use_tile_menu_subpage != 2 scr_set_object(spr_crystal_gem_flower,lang_gui_name[parent.user_language_mode,41],lang_gui_desc[parent.user_language_mode,41]);
                                        scr_set_highlighter(8,179,21,192)
                                        audio_play_sound(pause_select,50,false)
                                    }
                                
                                if device_mouse_x_to_gui(0) &gt;= 22 and device_mouse_x_to_gui(0) &lt;= 35
                                    {
                                        if use_tile_menu_subpage = 2 scr_set_object(spr_mod_chip_bomb,lang_gui_name[parent.user_language_mode,335],lang_gui_desc[parent.user_language_mode,335]);
                                        if use_tile_menu_subpage != 0 and use_tile_menu_subpage != 2 scr_set_object(spr_health_petal_flower,lang_gui_name[parent.user_language_mode,20],lang_gui_desc[parent.user_language_mode,20]);
                                        scr_set_highlighter(22,179,35,192)
                                        audio_play_sound(pause_select,50,false)
                                    }
                                if device_mouse_x_to_gui(0) &gt;= 36 and device_mouse_x_to_gui(0) &lt;= 49
                                    {
                                        if use_tile_menu_subpage = 2 scr_set_object(spr_mod_chip_spring,lang_gui_name[parent.user_language_mode,336],lang_gui_desc[parent.user_language_mode,336]);
                                        if use_tile_menu_subpage != 0 and use_tile_menu_subpage != 2 scr_set_object(spr_crate_0_copy,lang_gui_name[parent.user_language_mode,122],lang_gui_desc[parent.user_language_mode,122]);
                                        scr_set_highlighter(36,179,49,192)
                                        audio_play_sound(pause_select,50,false)
                                    }
                            }
                        //Row 3
                        if device_mouse_y_to_gui(0) &gt;= 193 and device_mouse_y_to_gui(0) &lt;= 206
                            {
                                if device_mouse_x_to_gui(0) &gt;= 8 and device_mouse_x_to_gui(0) &lt;= 21
                                    {
                                        if use_tile_menu_subpage = 2 {user_cursor_display_mode = 0; user_tile_selected = tile_layer_changer; user_layer_selected = surface_flags; user_layer_iteration = 4; user_grid_offset_x = 0; user_grid_offset_y = 0; use_item_description = "Enemy Reverse Course"; use_item_aspect_ratio = 1 use_item_offset_x = 0 use_item_offset_y = 0;
                                        scr_change_aspect_ratio_preview(user_tile_selected)}
                                        if use_tile_menu_subpage != 0 and use_tile_menu_subpage != 2 scr_set_object(spr_chibililac_cage,lang_gui_name[parent.user_language_mode,104],lang_gui_desc[parent.user_language_mode,104])
                                        scr_set_highlighter(8,193,21,206)
                                        audio_play_sound(pause_select,50,false)
                                    }
                                if device_mouse_x_to_gui(0) &gt;= 22 and device_mouse_x_to_gui(0) &lt;= 35
                                    {
                                        if use_tile_menu_subpage = 2 scr_set_object(spr_enemy_delete_wall,lang_gui_name[parent.user_language_mode,337],lang_gui_desc[parent.user_language_mode,337])
                                        if use_tile_menu_subpage != 0 and use_tile_menu_subpage != 2 scr_set_object(spr_gascan_0_copy,lang_gui_name[parent.user_language_mode,47],lang_gui_desc[parent.user_language_mode,47]);
                                        scr_set_highlighter(22,193,35,206)
                                        audio_play_sound(pause_select,50,false)
                                    }
                                if device_mouse_x_to_gui(0) &gt;= 36 and device_mouse_x_to_gui(0) &lt;= 49
                                    {
                                        if use_tile_menu_subpage = 2 scr_set_object(spr_enemy_charge_floor,lang_gui_name[parent.user_language_mode,338],lang_gui_desc[parent.user_language_mode,338])
                                        if use_tile_menu_subpage != 0 and use_tile_menu_subpage != 2 scr_set_object(spr_target,lang_gui_name[parent.user_language_mode,105],lang_gui_desc[parent.user_language_mode,105]);
                                        scr_set_highlighter(36,193,49,206)
                                        audio_play_sound(pause_select,50,false)
                                    }
                            }
                    }
                //Check Sub Menu Part 1
                if device_mouse_x_to_gui(0) &gt;= 63 and device_mouse_x_to_gui(0) &lt;= 178
                    {
                        //Check Tiles
                        if device_mouse_y_to_gui(0) &gt;= 156 and device_mouse_y_to_gui(0) &lt;= 175
                            {
                                use_tile_menu_subpage = 0
                                audio_play_sound(pause_select,50,false)
                                scr_set_highlighter(63,156,178,175)
                            }
                        //Check Items
                        if  device_mouse_y_to_gui(0) &gt;= 176 and device_mouse_y_to_gui(0) &lt;= 194
                            {
                                use_tile_menu_subpage = 1
                                audio_play_sound(pause_select,50,false)
                                scr_set_highlighter(63,176,178,194)
                            }
                        //Check Springs
                        if device_mouse_y_to_gui(0) &gt;= 195 and device_mouse_y_to_gui(0) &lt;= 213
                            {
                                use_tile_menu_subpage = 3
                                audio_play_sound(pause_select,50,false)
                                scr_set_highlighter(63,195,178,213)
                            }
                        //Check Actors
                        if  device_mouse_y_to_gui(0) &gt;= 214 and device_mouse_y_to_gui(0) &lt;= 232
                            {
                                use_tile_menu_subpage = 6
                                audio_play_sound(pause_select,50,false)
                                scr_set_highlighter(63,214,178,232)
                            }
                    }
                //Check Sub Menu Part 2
                if device_mouse_x_to_gui(0) &gt;= 189 and device_mouse_x_to_gui(0) &lt;= 304
                    {
                        //Check Gimmicks
                        if device_mouse_y_to_gui(0) &gt;= 156 and device_mouse_y_to_gui(0) &lt;= 175
                            {
                                use_tile_menu_subpage = 4
                                audio_play_sound(pause_select,50,false)
                                scr_set_highlighter(189,156,304,175)
                            }
                        //Check Enemies
                        if  device_mouse_y_to_gui(0) &gt;= 176 and device_mouse_y_to_gui(0) &lt;= 194
                            {
                                use_tile_menu_subpage = 2
                                use_enemy_menu_page = 0
                                audio_play_sound(pause_select,50,false)
                                scr_set_highlighter(189,176,304,194)
                            }
                        //Check Advanced
                        if device_mouse_y_to_gui(0) &gt;= 195 and device_mouse_y_to_gui(0) &lt;= 213
                            {
                                use_tile_menu_subpage = 5
                                audio_play_sound(pause_select,50,false)
                                scr_set_highlighter(189,195,304,213)
                            }
                        //Check Bosses
                        if  device_mouse_y_to_gui(0) &gt;= 214 and device_mouse_y_to_gui(0) &lt;= 232
                            {
                                use_tile_menu_subpage = 2
                                use_enemy_menu_page = 2
                                audio_play_sound(pause_select,50,false)
                                scr_set_highlighter(189,214,304,232)
                            }
                    }
                var background_selector_prevent_exit = 0;
                //Check Weather Selector
                if (device_mouse_y_to_gui(0) &gt;= 122 and device_mouse_y_to_gui(0) &lt;= 156)
                and use_tile_menu_cool_down = 0 and use_bg_selector_minimize = 0 and use_tile_menu_subpage = 0
                    {
                        //Check Weather Selector Icons
                        if (device_mouse_x_to_gui(0) &gt;= 324 and device_mouse_x_to_gui(0) &lt;= 412
                        and device_mouse_y_to_gui(0) &gt;= 136 and device_mouse_y_to_gui(0) &lt;= 149)
                            {
                                //Item 1
                                if device_mouse_x_to_gui(0) &gt;= 324 and device_mouse_x_to_gui(0) &lt;= 338
                                    {
                                        use_weather_conditions = "Clear"
                                        use_weather_iterations = 0
                                        scr_set_highlighter(324,136,338,149)
                                    }
                                //Item 2
                                if device_mouse_x_to_gui(0) &gt;= 339 and device_mouse_x_to_gui(0) &lt;= 353
                                    {
                                        use_weather_conditions = "Rainy"
                                        use_weather_iterations = 1
                                        scr_set_highlighter(339,136,353,149)
                                    }
                                //Item 3
                                if device_mouse_x_to_gui(0) &gt;= 354 and device_mouse_x_to_gui(0) &lt;= 368
                                    {
                                        use_weather_conditions = "Storm"
                                        use_weather_iterations = 2
                                        scr_set_highlighter(354,136,368,149)
                                    }
                                //Item 4
                                if device_mouse_x_to_gui(0) &gt;= 369 and device_mouse_x_to_gui(0) &lt;= 383
                                    {
                                        use_weather_conditions = "Tempest"
                                        use_weather_iterations = 3
                                        scr_set_highlighter(369,136,383,149)
                                    }
                                //Item 5
                                if device_mouse_x_to_gui(0) &gt;= 384 and device_mouse_x_to_gui(0) &lt;= 398
                                    {
                                        use_weather_conditions = "Slime"
                                        use_weather_iterations = 4
                                        scr_set_highlighter(384,136,398,149)
                                    }
                                //Item 6
                                if device_mouse_x_to_gui(0) &gt;= 399 and device_mouse_x_to_gui(0) &lt;= 412
                                    {
                                        use_weather_conditions = "Drizzle"
                                        use_weather_iterations = 5
                                        scr_set_highlighter(399,136,412,149)
                                    }
                                obj_game_logic.use_weather_conditions = use_weather_iterations;
                                use_tile_menu_cool_down = 8
                                audio_play_sound(pause_select,50,false)
                            }
                        background_selector_prevent_exit = 1
                    }
                //Check Stamp Selector (Maximize)
                if (device_mouse_x_to_gui(0) &gt;= 323 and device_mouse_x_to_gui(0) &lt;= 412
                and device_mouse_y_to_gui(0) &gt;= 158 and device_mouse_y_to_gui(0) &lt;= 175)
                and use_stamp_state = 1 and use_tile_menu_cool_down = 0 and use_tile_menu_subpage = 0
                    {
                        use_stamp_state = 0
                        instance_create(0,0,obj_stamps_tool)
                        use_tile_menu_cool_down = 8
                        background_selector_prevent_exit = 1
                        audio_play_sound(pause_select,50,false)
                        scr_set_highlighter(323,158,412,175)
                    }
                //Check Stamp Selector (Minimize)
                if (device_mouse_x_to_gui(0) &gt;= 323 and device_mouse_x_to_gui(0) &lt;= 412
                and device_mouse_y_to_gui(0) &gt;= 158 and device_mouse_y_to_gui(0) &lt;= 217)
                and use_stamp_state = 0 and use_tile_menu_cool_down = 0 and use_tile_menu_subpage = 0
                    {
                        if device_mouse_y_to_gui(0) &lt;= 175
                            {
                                if instance_exists(obj_stamps_tool)
                                    {
                                        instance_destroy(obj_stamps_tool)
                                    }
                                use_stamp_state = 1
                                audio_play_sound(pause_select,50,false)
                                scr_set_highlighter(323,158,412,175)
                            }
                        use_tile_menu_cool_down = 8
                        background_selector_prevent_exit = 1
                    }
                //Check Background Selector (Restored)
                if (device_mouse_x_to_gui(0) &gt;= 316 and device_mouse_x_to_gui(0) &lt;= 424
                and device_mouse_y_to_gui(0) &gt;= 52 and device_mouse_y_to_gui(0) &lt;= 118)
                and use_bg_selector_minimize = 0 and use_tile_menu_cool_down = 0
                    {
                        background_selector_prevent_exit = 1
                        //Check Previous Page Button
                        if (device_mouse_x_to_gui(0) &gt;= 316 and device_mouse_x_to_gui(0) &lt;= 320
                        and device_mouse_y_to_gui(0) &gt;= 80 and device_mouse_y_to_gui(0) &lt;= 96)
                            {
                                use_background_page -= 1
                                if use_background_page &lt; 0
                                    use_background_page = 1;
                                use_tile_menu_cool_down = 8
                                background_selector_prevent_exit = 1
                                audio_play_sound(pause_select,50,false)
                                scr_set_highlighter(316,80,320,96)
                            }
                        //Check Next Page Button
                        if (device_mouse_x_to_gui(0) &gt;= 419 and device_mouse_x_to_gui(0) &lt;= 423
                        and device_mouse_y_to_gui(0) &gt;= 80 and device_mouse_y_to_gui(0) &lt;= 96)
                            {
                                use_background_page += 1
                                if use_background_page &gt; 1
                                    use_background_page = 0;
                                use_tile_menu_cool_down = 8
                                background_selector_prevent_exit = 1
                                audio_play_sound(pause_select,50,false)
                                scr_set_highlighter(419,80,423,96)
                            }
                        var use_background_confirm = 0;
                        //Check Row 1
                        if device_mouse_y_to_gui(0) &gt;= 72 and device_mouse_y_to_gui(0) &lt;= 83
                            {
                                if device_mouse_x_to_gui(0) &gt;= 325 and device_mouse_x_to_gui(0) &lt;= 336
                                    {
                                        use_background = 0; use_background_confirm = 1; scr_set_highlighter(325,72,336,83);
                                    }
                                if device_mouse_x_to_gui(0) &gt;= 340 and device_mouse_x_to_gui(0) &lt;= 352
                                    {
                                        use_background = 1; use_background_confirm = 1; scr_set_highlighter(340,72,352,83)
                                    }
                                if device_mouse_x_to_gui(0) &gt;= 355 and device_mouse_x_to_gui(0) &lt;= 366
                                    {
                                        use_background = 2; use_background_confirm = 1; scr_set_highlighter(355,72,366,83);
                                    }
                                if device_mouse_x_to_gui(0) &gt;= 370 and device_mouse_x_to_gui(0) &lt;= 381
                                    {
                                        use_background = 3; use_background_confirm = 1; scr_set_highlighter(370,72,381,83);
                                    }
                                if device_mouse_x_to_gui(0) &gt;= 385 and device_mouse_x_to_gui(0) &lt;= 396
                                    {
                                        use_background = 4; use_background_confirm = 1; scr_set_highlighter(385,72,396,83);
                                    }
                                if device_mouse_x_to_gui(0) &gt;= 400 and device_mouse_x_to_gui(0) &lt;= 411
                                    {
                                        use_background = 5; use_background_confirm = 1; scr_set_highlighter(400,72,411,83)
                                    }
                            }
                        //Check Row 2
                        if device_mouse_y_to_gui(0) &gt;= 87 and device_mouse_y_to_gui(0) &lt;= 98
                            {
                                if device_mouse_x_to_gui(0) &gt;= 325 and device_mouse_x_to_gui(0) &lt;= 336
                                    {
                                        use_background = 6; use_background_confirm = 1; scr_set_highlighter(325,87,336,98)
                                    }
                                if device_mouse_x_to_gui(0) &gt;= 340 and device_mouse_x_to_gui(0) &lt;= 352
                                    {
                                        use_background = 7; use_background_confirm = 1; scr_set_highlighter(340,87,352,98)
                                    }
                                if device_mouse_x_to_gui(0) &gt;= 355 and device_mouse_x_to_gui(0) &lt;= 366
                                    {
                                        use_background = 8; use_background_confirm = 1; scr_set_highlighter(355,87,366,98)
                                    }
                                if device_mouse_x_to_gui(0) &gt;= 370 and device_mouse_x_to_gui(0) &lt;= 381
                                    {
                                        use_background = 9; use_background_confirm = 1; scr_set_highlighter(370,87,381,98)
                                    }
                                if device_mouse_x_to_gui(0) &gt;= 385 and device_mouse_x_to_gui(0) &lt;= 396
                                    {
                                        use_background = 10; use_background_confirm = 1; scr_set_highlighter(385,87,396,98)
                                    }
                                if device_mouse_x_to_gui(0) &gt;= 400 and device_mouse_x_to_gui(0) &lt;= 411
                                    {
                                        use_background = 11; use_background_confirm = 1; scr_set_highlighter(400,87,411,98);
                                    }
                            }
                        //Check Row 3
                        if device_mouse_y_to_gui(0) &gt;= 102 and device_mouse_y_to_gui(0) &lt;= 113
                            {
                                if device_mouse_x_to_gui(0) &gt;= 325 and device_mouse_x_to_gui(0) &lt;= 336
                                    {
                                        use_background = 12; use_background_confirm = 1; scr_set_highlighter(325,102,336,113);
                                    }
                                if device_mouse_x_to_gui(0) &gt;= 340 and device_mouse_x_to_gui(0) &lt;= 352
                                    {
                                        use_background = 13; use_background_confirm = 1; scr_set_highlighter(340,102,352,113);
                                    }
                                if device_mouse_x_to_gui(0) &gt;= 355 and device_mouse_x_to_gui(0) &lt;= 366
                                    {
                                        use_background = 14; use_background_confirm = 1; scr_set_highlighter(355,102,366,113);
                                    }
                                if device_mouse_x_to_gui(0) &gt;= 370 and device_mouse_x_to_gui(0) &lt;= 381
                                    {
                                        use_background = 15; use_background_confirm = 1; scr_set_highlighter(370,102,381,113)
                                    }
                                if device_mouse_x_to_gui(0) &gt;= 385 and device_mouse_x_to_gui(0) &lt;= 396
                                    {
                                        use_background = 16; use_background_confirm = 1; scr_set_highlighter(385,102,396,113)
                                    }
                                if device_mouse_x_to_gui(0) &gt;= 400 and device_mouse_x_to_gui(0) &lt;= 411
                                    {
                                        use_background = 17; use_background_confirm = 1; scr_set_highlighter(400,102,411,113);
                                    }
                            }
                        if use_background_confirm = 1
                            {
                                //Make selections on a different page, for other backgrounds
                                if use_background_page = 1
                                    {
                                        use_background += 18;
                                        //Keep background selections within range of the maximum background count
                                        if use_background &gt; 31
                                            use_background = 31;
                                    }
                                scr_set_background()
                                audio_play_sound(pause_select,50,false)
                            }
                    }
                //Check Exit
                if device_mouse_x_to_gui(0) &gt;= 314 and device_mouse_x_to_gui(0) &lt;= 425
                    {
                        if background_selector_prevent_exit = 0
                            {
                                use_tile_menu = 0
                                use_tile_menu_cool_down = 8
                                //Play menu sound
                                audio_play_sound(snd_turn_page,50,false)
                            }
                    }
                //Clear NPC Clipboard if a tile was selected
                if user_cursor_display_mode = 0 and npc_clipboard_dialog_active = 1
                    {
                        npc_clipboard_dialog_active = 0
                        scr_set_message("NPC clipboard cleared!");
                    }
                //Reset angle rotation for all newly-selected items
                if user_cursor_display_mode = 1
                    {
                        item_rotate_angle = 0
                        item_rotate_allowed = scr_set_check_item_rotate(user_tile_selected)
                    }
                else
                    {
                        item_rotate_angle = 0
                        item_rotate_allowed = 0
                    }
            }
        //Check the quit menu's items
        if use_tile_menu = 2 and use_tile_menu_cool_down = 0
            {
                //Return To The Titlescreen
                if (device_mouse_x_to_gui(0) &gt;= 70 and device_mouse_x_to_gui(0) &lt;= 111
                and device_mouse_y_to_gui(0) &gt;= 146 and device_mouse_y_to_gui(0) &lt;= 161)
                    {
                        audio_play_sound(pause_exit,50,false)
                        parent.transition_active = 1
                        use_tile_menu_cool_down = 256
                        depth = -5
                        parent.use_maps_load = 0
                        parent.use_maps_current_map = 0
                        parent.use_maps_overwrite_protection = 0
                        use_write_reserve_string_stage_name = ""
                        use_write_reserve_string_architect = ""
                        use_write_reserve_string_description = ""
                        //Disable Carol's Bike Sounds If They Were Still Playing
                        audio_stop_sound(carol_bike_idle)
                        audio_stop_sound(carol_bike_moving)
                        audio_stop_sound(carol_bike_skidding)
                    }
                //Check Exit
                if (device_mouse_x_to_gui(0) &gt;= 314)
                or (device_mouse_x_to_gui(0) &gt;= 211 and device_mouse_x_to_gui(0) &lt;= 241
                and device_mouse_y_to_gui(0) &gt;= 146 and device_mouse_y_to_gui(0) &lt;= 160)
                    {
                        use_tile_menu = 0
                        use_tile_menu_cool_down = 8
                        //Play menu sound
                        audio_play_sound(snd_turn_page,50,false)
                    }
            } 
        //Check the open menu's items
        if use_tile_menu = 3 and use_tile_menu_cool_down = 0
            {
                //Check Menu Items
                if device_mouse_x_to_gui(0) &gt;= 28 and device_mouse_x_to_gui(0) &lt;= 272
                    {
                        //Click Menu Item 1
                        if (device_mouse_y_to_gui(0) &gt;= 81 and device_mouse_y_to_gui(0) &lt;= 95)
                            {
                                //Set File Selection
                                use_maps_select = use_maps_files[use_maps_page,0]
                                //Set Highlight Position
                                use_maps_highlight_y = 94
                                //Play menu sound
                                audio_play_sound(pause_select,50,false)
                                //Trigger Highlighter
                                scr_set_highlighter(28,81,273,95)
                            }
                        //Click Menu Item 2
                        if (device_mouse_y_to_gui(0) &gt;= 96 and device_mouse_y_to_gui(0) &lt;= 110)
                            {
                                //Set File Selection
                                use_maps_select = use_maps_files[use_maps_page,1]
                                //Set Highlight Position
                                use_maps_highlight_y = 109
                                //Play menu sound
                                audio_play_sound(pause_select,50,false)
                                //Trigger Highlighter
                                scr_set_highlighter(28,96,273,110)
                            }
                        //Click Menu Item 3
                        if (device_mouse_y_to_gui(0) &gt;= 111 and device_mouse_y_to_gui(0) &lt;= 125)
                            {
                                //Set File Selection
                                use_maps_select = use_maps_files[use_maps_page,2]
                                //Set Highlight Position
                                use_maps_highlight_y = 124
                                //Play menu sound
                                audio_play_sound(pause_select,50,false)
                                //Trigger Highlighter
                                scr_set_highlighter(28,111,273,125)
                            }
                        //Click Menu Item 4
                        if (device_mouse_y_to_gui(0) &gt;= 126 and device_mouse_y_to_gui(0) &lt;= 140)
                            {
                                //Set Highlight Position
                                use_maps_highlight_y = 139
                                //Set File Selection
                                use_maps_select = use_maps_files[use_maps_page,3]
                                //Play menu sound
                                audio_play_sound(pause_select,50,false)
                                //Trigger Highlighter
                                scr_set_highlighter(28,126,273,140)
                            }
                        //Click Menu Item 5
                        if (device_mouse_y_to_gui(0) &gt;= 141 and device_mouse_y_to_gui(0) &lt;= 155)
                            {
                                //Set File Selection
                                use_maps_select = use_maps_files[use_maps_page,4]
                                //Set Highlight Position
                                use_maps_highlight_y = 154
                                //Play menu sound
                                audio_play_sound(pause_select,50,false)
                                //Trigger Highlighter
                                scr_set_highlighter(28,141,273,155)
                            }
                    }
                //Click Scollbar Button (Up)
                if (device_mouse_x_to_gui(0) &gt;= 281 and device_mouse_x_to_gui(0) &lt;= 290
                and device_mouse_y_to_gui(0) &gt;= 77  and device_mouse_y_to_gui(0) &lt;= 90)
                    {
                        use_maps_page -= 1
                        if use_maps_page &lt; 0 use_maps_page = 0;
                        //Update Currently Listed Maps
                        use_maps_map[0] = use_maps_files[use_maps_page,0]
                        use_maps_map[1] = use_maps_files[use_maps_page,1]
                        use_maps_map[2] = use_maps_files[use_maps_page,2]
                        use_maps_map[3] = use_maps_files[use_maps_page,3]
                        use_maps_map[4] = use_maps_files[use_maps_page,4]
                        //Move scrollbar upwards
                        use_scrollbar_position -= use_scrollbar_speed
                        //Keep the boundaries of the scrollbar in check
                        if use_scrollbar_position &lt; 95 use_scrollbar_position = 95;
                        //Disable Highlighter
                        use_maps_highlight_y = -1
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_highlighter(281,77,291,90)
                    }
                //Click Scollbar Button (Down)
                if (device_mouse_x_to_gui(0) &gt;= 281 and device_mouse_x_to_gui(0) &lt;= 290
                and device_mouse_y_to_gui(0) &gt;= 145 and device_mouse_y_to_gui(0) &lt;= 158)
                    {
                        use_maps_page += 1
                        if use_maps_page &gt; use_maps_pages use_maps_page = use_maps_pages;
                        //Update Currently Listed Maps
                        use_maps_map[0] = use_maps_files[use_maps_page,0]
                        use_maps_map[1] = use_maps_files[use_maps_page,1]
                        use_maps_map[2] = use_maps_files[use_maps_page,2]
                        use_maps_map[3] = use_maps_files[use_maps_page,3]
                        use_maps_map[4] = use_maps_files[use_maps_page,4]
                        //Move scrollbar downwards
                        use_scrollbar_position += use_scrollbar_speed
                        //Keep the boundaries of the scrollbar in check
                        if use_scrollbar_position &gt; 133 use_scrollbar_position = 133;
                        //Disable Highlighter
                        use_maps_highlight_y = -1
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_highlighter(281,145,291,158)
                    }
                //Load Stage
                if (device_mouse_x_to_gui(0) &gt;= 68  and device_mouse_x_to_gui(0) &lt;= 127
                and device_mouse_y_to_gui(0) &gt;= 165 and device_mouse_y_to_gui(0) &lt;= 180)
                and use_maps_select!="..."
                    {
                        if !file_exists_ns(program_directory + "\Maps\" + use_maps_select)
                            {
                                scr_set_message("Map file does not exist!")
                                use_tile_menu = 0
                                user_built_list = 0
                                use_tile_menu_cool_down = 8
                            }
                        else
                            {
                                //Send the main logic object map data for loading
                                parent.use_maps_x = view_xview[view_port]
                                parent.use_maps_y = view_yview[view_port]
                                parent.use_maps_select = use_maps_select
                                parent.use_maps_load = 1
                                //Reset multimap counter
                                parent.use_maps_current_map = 0
                                parent.use_maps_overwrite_protection = 0
                                //Disable Carol's Bike Sounds If They Were Still Playing
                                audio_stop_sound(carol_bike_idle)
                                audio_stop_sound(carol_bike_moving)
                                audio_stop_sound(carol_bike_skidding)
                                //Clear previous map data by restarting the room
                                scr_set_message("Now loading...")
                                use_loading_screen = 2
                                use_write_keyboard_string_stage_name = ""
                                use_write_keyboard_string_architect = ""
                                use_write_keyboard_string_description = ""
                                use_write_reserve_string_stage_name = ""
                                use_write_reserve_string_architect = ""
                                use_write_reserve_string_description = ""
                                //Play menu sound
                                audio_play_sound(pause_select,50,false)
                            }
                    }
                //Check Exit
                if (device_mouse_x_to_gui(0) &gt;= 314)
                or (device_mouse_x_to_gui(0) &gt;= 160 and device_mouse_x_to_gui(0) &lt;= 239
                and device_mouse_y_to_gui(0) &gt;= 165 and device_mouse_y_to_gui(0) &lt;= 180)
                    {
                        use_tile_menu = 0
                        use_tile_menu_cool_down = 8
                        //Play menu sound
                        audio_play_sound(snd_turn_page,50,false)
                    }
            }
        //Check the save menu's items
        if use_tile_menu = 4 and use_tile_menu_cool_down = 0
            {
                //Click Stage Name Dialogue Box
                if (device_mouse_x_to_gui(0) &gt;= 55 and device_mouse_x_to_gui(0) &lt;= 254
                and device_mouse_y_to_gui(0) &gt;= 90 and device_mouse_y_to_gui(0) &lt;= 107)
                    {
                        use_write_keyboard_string_active_string = 0
                        use_keyboard_active = 1
                        keyboard_string = ""
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_highlighter(55,90,254,107)
                    }
                //Click Description Dialogue Box
                if (device_mouse_x_to_gui(0) &gt;= 12  and device_mouse_x_to_gui(0) &lt;= 150
                and device_mouse_y_to_gui(0) &gt;= 134 and device_mouse_y_to_gui(0) &lt;= 168)
                    {
                        use_write_keyboard_string_active_string = 1
                        use_keyboard_active = 1
                        keyboard_string = ""
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_highlighter(12,134,150,168)
                    }
                //Click Architect Dialogue Box
                if (device_mouse_x_to_gui(0) &gt;= 184 and device_mouse_x_to_gui(0) &lt;= 298
                and device_mouse_y_to_gui(0) &gt;= 135 and device_mouse_y_to_gui(0) &lt;= 152)
                    {
                        use_write_keyboard_string_active_string = 2
                        use_keyboard_active = 1
                        keyboard_string = ""
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_highlighter(184,135,298,152)
                    }
                //Click Okay
                if (device_mouse_x_to_gui(0) &gt;= 70  and device_mouse_x_to_gui(0) &lt;= 129
                and device_mouse_y_to_gui(0) &gt;= 178 and device_mouse_y_to_gui(0) &lt;= 193)
                    {
                        //Trigger Write Process If A Stage Name Was Provided
                        if use_write_keyboard_string_stage_name != ""
                        //And If There Are More Tiles Than None
                        and tile_get_count() &gt; 0
                            {
                                use_tile_menu = 0
                                use_tile_menu_cool_down = 8
                                //Trigger Write Process
                                use_write_delay = 1
                                parent.use_write_delay = 1
                                use_keyboard_active = 0
                                scr_set_message("Saving... please wait!")
                                use_write_keyboard_string_active_string = -1
                                //Set A Stage Name If The Spacebar Was Pressed Accidentally
                                if use_write_keyboard_string_stage_name = ""
                                or use_write_keyboard_string_stage_name = " "
                                or use_write_keyboard_string_stage_name = "  "
                                or use_write_keyboard_string_stage_name = "   "
                                or use_write_keyboard_string_stage_name = "    "
                                or use_write_keyboard_string_stage_name = "     "
                                or use_write_keyboard_string_stage_name = "      "
                                or use_write_keyboard_string_stage_name = "       "
                                or use_write_keyboard_string_stage_name = "        "
                                or use_write_keyboard_string_stage_name = "         "
                                or use_write_keyboard_string_stage_name = "          "
                                or use_write_keyboard_string_stage_name = "           "
                                or use_write_keyboard_string_stage_name = "            "
                                or use_write_keyboard_string_stage_name = "             "
                                or use_write_keyboard_string_stage_name = "              "
                                or use_write_keyboard_string_stage_name = "               "
                                or use_write_keyboard_string_stage_name = "                "
                                   use_write_keyboard_string_stage_name = "Lilac's Treehouse";
                                //Set An Architect Name If One Wasn't Provided
                                if use_write_keyboard_string_architect = "" use_write_keyboard_string_architect = "Ms. Heropants";
                                use_write_reserve_string_stage_name = use_write_keyboard_string_stage_name
                                use_write_reserve_string_architect = use_write_keyboard_string_architect
                                use_write_reserve_string_description = use_write_keyboard_string_description
                                //Play menu sound
                                audio_play_sound(pause_select,50,false)
                            }
                        //Play Parrying Sound If A Stage Name Wasn't Provided
                        else
                            {
                                scr_set_message("No stage name was provided, or no tiles were present")
                            }
                    }

                //Check Exit
                if (device_mouse_x_to_gui(0) &gt;= 314)
                or (device_mouse_x_to_gui(0) &gt;= 162 and device_mouse_x_to_gui(0) &lt;= 241
                and device_mouse_y_to_gui(0) &gt;= 178 and device_mouse_y_to_gui(0) &lt;= 193)
                    {
                        use_tile_menu = 0
                        use_tile_menu_cool_down = 8
                        use_keyboard_active = 0
                        use_write_keyboard_string_active_string = -1
                        //Play menu sound
                        audio_play_sound(snd_turn_page,50,false)
                    }
            }
        //Check the new canvas menu's items
        if use_tile_menu = 5 and use_tile_menu_cool_down = 0
            {
                //Reset Canvas
                if (device_mouse_x_to_gui(0) &gt;= 70 and device_mouse_x_to_gui(0) &lt;= 111
                and device_mouse_y_to_gui(0) &gt;= 160 and device_mouse_y_to_gui(0) &lt;= 177)
                    {
                        use_write_reserve_string_stage_name = ""
                        use_write_reserve_string_architect = ""
                        use_write_reserve_string_description = ""
                        view_xview[view_port] = 0
                        view_yview[view_port] = 0
                        use_cursor_x = 0
                        use_cursor_y = 0
                        scr_stop_music()
                        audio_play_sound(ost_titlescreen_aqua_surface_woofle,50,true)
                        if parent.use_maps_current_map &gt; 0
                            {
                                scr_set_message("New stage started.")
                                scr_set_message("Unsaved multi-map data cleared.")
                            }
                        parent.use_maps_current_map = 0
                        parent.use_maps_overwrite_protection = 0
                        use_write_keyboard_string_stage_name = ""
                        use_write_keyboard_string_architect = ""
                        use_write_keyboard_string_description = ""
                        use_write_reserve_string_stage_name = ""
                        use_write_reserve_string_architect = ""
                        use_write_reserve_string_description = ""
                        
                        //Adjust Current Song's Volume
                        if parent.music_mute = 0 scr_adjust_music_silent(parent.music_volume/100,1000);
                        else scr_adjust_music_silent(0,1000);
                        //Clear previous map data by restarting the room
                        room_restart()
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                    }
                //Check Exit
                if (device_mouse_x_to_gui(0) &gt;= 314)
                or (device_mouse_x_to_gui(0) &gt;= 211 and device_mouse_x_to_gui(0) &lt;= 241
                and device_mouse_y_to_gui(0) &gt;= 160 and device_mouse_y_to_gui(0) &lt;= 177)
                    {
                        use_tile_menu = 0
                        use_tile_menu_cool_down = 8
                        //Play menu sound
                        audio_play_sound(snd_turn_page,50,false)
                    }
            }
        //Check the sidebar's on-screen buttons
        if use_tile_menu = 0 and use_tile_menu_cool_down = 0
            {
                //Check the file button
                if  device_mouse_x_to_gui(0) &gt;= 357+u_elements and device_mouse_x_to_gui(0) &lt;= 390+u_elements
                and device_mouse_y_to_gui(0) &gt;= 4 and device_mouse_y_to_gui(0) &lt;= 18
                and use_file_menu = 0 and use_tile_menu_cool_down = 0 and u_elements = 0 and user_cursor_mode = 0
                    {
                        use_file_menu = 1
                        use_tile_menu_cool_down = 8
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_highlighter(357,4,390,18)
                    }
                //Check the debug button
                if  device_mouse_x_to_gui(0) &gt;= 367+u_elements and device_mouse_x_to_gui(0) &lt;= 408+u_elements
                and device_mouse_y_to_gui(0) &gt;= 198 and device_mouse_y_to_gui(0) &lt;= 211
                and use_file_menu = 0 and use_tile_menu_cool_down = 0 and u_elements = 0 and user_cursor_mode = 0
                    {
                        use_debug_hud_mode += 1
                        if use_debug_hud_mode &gt; 1 use_debug_hud_mode = 0;
                        switch(use_debug_hud_mode)
                            {
                                case 0: {scr_set_message("Debug Elements Disabled!"); break;}
                                case 1: {scr_set_message("Debug Elements Enabled!"); break;}
                            }
                        use_tile_menu_cool_down = 8
                        //Play menu sound
                        audio_play_sound(character_parry,50,false)
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_highlighter(367,198,408,211)
                    }
                //Check the back button
                if  device_mouse_x_to_gui(0) &gt;= 315 and device_mouse_x_to_gui(0) &lt;= 333
                and device_mouse_y_to_gui(0) &gt;= 4   and device_mouse_y_to_gui(0) &lt;= 20
                and use_file_menu != 0 and use_tile_menu_cool_down = 0
                    {
                        use_file_menu = 0
                        use_tile_menu_cool_down = 8
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_highlighter(319,4,333,19)
                    }
                //Check the scroll button (Up)
                if (device_mouse_x_to_gui(0) &gt;= 353 and device_mouse_x_to_gui(0) &lt;= 386
                and device_mouse_y_to_gui(0) &gt;= 224 and device_mouse_y_to_gui(0) &lt;= 237)
                and (use_file_menu = 3 and use_tile_menu_cool_down = 0)
                    {
                        use_file_menu = 1
                        use_tile_menu_cool_down = 8
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        if device_mouse_y_to_gui(0) &gt;= 224 and device_mouse_y_to_gui(0) &lt;= 237
                            scr_set_highlighter(353,224,386,237);
                    }
                //Check the scroll button (Down)
                if (device_mouse_x_to_gui(0) &gt;= 353 and device_mouse_x_to_gui(0) &lt;= 386
                and device_mouse_y_to_gui(0) &gt;= 224 and device_mouse_y_to_gui(0) &lt;= 237)
                and (use_file_menu = 1 and use_tile_menu_cool_down = 0)
                    {
                        use_file_menu = 3
                        use_tile_menu_cool_down = 8
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        if device_mouse_y_to_gui(0) &gt;= 224 and device_mouse_y_to_gui(0) &lt;= 237
                            scr_set_highlighter(353,224,386,237);
                    }
                //Check the exit button
                if  device_mouse_x_to_gui(0) &gt;= 401+u_elements and device_mouse_x_to_gui(0) &lt;= 421+u_elements
                and device_mouse_y_to_gui(0) &gt;= 4   and device_mouse_y_to_gui(0) &lt;= 18
                and use_file_menu = 0 and use_file_menu = 0
                    {
                        use_tile_menu = 2
                        use_tile_menu_cool_down = 8
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_highlighter(401,4,421,18)
                    }
                //Check the play test debug buttons
                if user_cursor_mode = 1
                    {
                        //Change controller slot -
                        if  device_mouse_x_to_gui(0) &gt;= 358+u_elements and device_mouse_x_to_gui(0) &lt;= 376+u_elements
                        and device_mouse_y_to_gui(0) &gt;= 105 and device_mouse_y_to_gui(0) &lt;= 123
                        and use_tile_menu_cool_down = 0 and u_elements = 0
                            {
                                scr_set_controller_slot_f3();
                                use_tile_menu_cool_down = 8
                                //Play menu sound
                                audio_play_sound(pause_select,50,false)
                                //Trigger Highlighter
                                scr_set_highlighter(358,105,376,123)
                            }
                        //Change controller slot +
                        if  device_mouse_x_to_gui(0) &gt;= 379+u_elements and device_mouse_x_to_gui(0) &lt;= 397+u_elements
                        and device_mouse_y_to_gui(0) &gt;= 105 and device_mouse_y_to_gui(0) &lt;= 123
                        and use_tile_menu_cool_down = 0 and u_elements = 0
                            {
                                scr_set_controller_slot_f4();
                                use_tile_menu_cool_down = 8
                                //Play menu sound
                                audio_play_sound(pause_select,50,false)
                                //Trigger Highlighter
                                scr_set_highlighter(379,105,397,123)
                            }
                        //Change controller type
                        if  device_mouse_x_to_gui(0) &gt;= 400+u_elements and device_mouse_x_to_gui(0) &lt;= 418+u_elements
                        and device_mouse_y_to_gui(0) &gt;= 105 and device_mouse_y_to_gui(0) &lt;= 123
                        and use_tile_menu_cool_down = 0 and u_elements = 0
                            {
                                scr_set_controller_type_f6();
                                use_tile_menu_cool_down = 8
                                //Play menu sound
                                audio_play_sound(pause_select,50,false)
                                //Trigger Highlighter
                                scr_set_highlighter(400,105,418,123)
                            }

                        //Change window size
                        if  device_mouse_x_to_gui(0) &gt;= 358+u_elements and device_mouse_x_to_gui(0) &lt;= 376+u_elements
                        and device_mouse_y_to_gui(0) &gt;= 126 and device_mouse_y_to_gui(0) &lt;= 144
                        and use_file_menu = 0 and use_tile_menu_cool_down = 0 and u_elements = 0 and user_cursor_mode = 1
                            {
                                scr_set_resize_game_window_f7();
                                use_tile_menu_cool_down = 8
                                //Play menu sound
                                audio_play_sound(pause_select,50,false)
                                //Trigger Highlighter
                                scr_set_highlighter(358,126,376,144)
                            }
                        //Set button overlay
                        if  device_mouse_x_to_gui(0) &gt;= 379+u_elements and device_mouse_x_to_gui(0) &lt;= 397+u_elements
                        and device_mouse_y_to_gui(0) &gt;= 126 and device_mouse_y_to_gui(0) &lt;= 144
                        and use_tile_menu_cool_down = 0 and u_elements = 0
                            {
                                scr_set_controller_overlay_f9();
                                use_tile_menu_cool_down = 8
                                //Play menu sound
                                audio_play_sound(pause_select,50,false)
                                //Trigger Highlighter
                                scr_set_highlighter(379,126,397,144)
                            }
                        //Change zoom level
                        if  device_mouse_x_to_gui(0) &gt;= 400+u_elements and device_mouse_x_to_gui(0) &lt;= 418+u_elements
                        and device_mouse_y_to_gui(0) &gt;= 126 and device_mouse_y_to_gui(0) &lt;= 144
                        and use_tile_menu_cool_down = 0 and u_elements = 0 and parent.pause = 0 
                            {
                                use_zoom_position_toggle -= 1
                                scr_clear_zoom_level()
                                if use_zoom_position_toggle &lt; 0 use_zoom_position_toggle = 8;
                                switch(use_zoom_position_toggle)
                                    {
                                        case 0: {use_zoom_position = 8; break;}
                                        case 1: {use_zoom_position = 7; break;}
                                        case 2: {use_zoom_position = 3; break;}
                                        case 3: {use_zoom_position = 2; break;}
                                        case 4: {use_zoom_position = 1; break;}
                                        case 5: {use_zoom_position = 0; break;}
                                        case 6: {use_zoom_position = 4; break;}
                                        case 7: {use_zoom_position = 5; break;}
                                        case 8: {use_zoom_position = 6; break;}
                                    }
                                scr_change_zoom_level()
                                use_tile_menu_cool_down = 8
                                //Play menu sound
                                audio_play_sound(pause_select,50,false)
                                //Trigger Highlighter
                                scr_set_highlighter(400,126,418,144)
                            }

                        //Mute/unmute music
                        if  device_mouse_x_to_gui(0) &gt;= 358+u_elements and device_mouse_x_to_gui(0) &lt;= 376+u_elements
                        and device_mouse_y_to_gui(0) &gt;= 147 and device_mouse_y_to_gui(0) &lt;= 166
                        and use_tile_menu_cool_down = 0 and u_elements = 0
                            {
                                scr_set_mute_or_unmute_music_f11();
                                use_tile_menu_cool_down = 8
                                //Play menu sound
                                audio_play_sound(pause_select,50,false)
                                //Trigger Highlighter
                                scr_set_highlighter(358,147,376,376)
                            }
                        //Change mouse mode
                        if  device_mouse_x_to_gui(0) &gt;= 379+u_elements and device_mouse_x_to_gui(0) &lt;= 397+u_elements
                        and device_mouse_y_to_gui(0) &gt;= 147 and device_mouse_y_to_gui(0) &lt;= 166
                        and use_tile_menu_cool_down = 0 and u_elements = 0
                            {
                                use_mouse_mode += 1
                                if use_mouse_mode &gt; 1
                                    use_mouse_mode = 0;
                                switch(use_mouse_mode)
                                    {
                                        case 0:
                                            {
                                                parent.joy_mouse_button_switch = 0
                                                parent.joy_mouse_button_timer = 0
                                                parent.joy_mouse_button_flash = 0
                                                parent.joy_mouse_button_alpha = 0
                                                parent.joy_mouse_button_counter = 0
                                                break;
                                            }
                                        case 1:
                                            {
                                                parent.joy_mouse_button_switch = 1
                                                parent.joy_mouse_button_timer = 0
                                                parent.joy_mouse_button_flash = 1
                                                parent.joy_mouse_button_alpha = 1
                                                parent.joy_mouse_button_counter = 0
                                                break;
                                            }
                                    }
                                use_tile_menu_cool_down = 8
                                //Play menu sound
                                audio_play_sound(pause_select,50,false)
                                //Trigger Highlighter
                                scr_set_highlighter(379,147,397,166)
                            }
                        //Take Screenshot
                        if  device_mouse_x_to_gui(0) &gt;= 400+u_elements and device_mouse_x_to_gui(0) &lt;= 418+u_elements
                        and device_mouse_y_to_gui(0) &gt;= 147 and device_mouse_y_to_gui(0) &lt;= 166
                        and use_tile_menu_cool_down = 0 and u_elements = 0
                            {
                                scr_set_screenshot();
                                //Play menu sound
                                audio_play_sound(pause_select,50,false)
                                //Trigger Highlighter
                                scr_set_highlighter(400,147,418,166)
                            }
                    }
                //Check the tile button
                if  device_mouse_x_to_gui(0) &gt;= 370+u_elements and device_mouse_x_to_gui(0) &lt;= 405+u_elements
                and device_mouse_y_to_gui(0) &gt;= 25  and device_mouse_y_to_gui(0) &lt;= 60
                and user_cursor_mode = 0 and use_file_menu = 0
                    {
                        use_tile_menu = 1
                        if !instance_exists(obj_tile_menu_transition)
                            instance_create(0,0,obj_tile_menu_transition);
                        use_tile_menu_cool_down = 8
                        scr_change_page()
                        //Play menu sound
                        audio_play_sound(snd_turn_page,50,false)
                        //Trigger Highlighter
                        scr_set_highlighter(370,25,405,60)
                    }
                //Check the layer button
                if  device_mouse_x_to_gui(0) &gt;= 367+u_elements and device_mouse_y_to_gui(0) &gt;= 121
                and device_mouse_x_to_gui(0) &lt;= 408+u_elements and device_mouse_y_to_gui(0) &lt;= 134
                and user_cursor_mode = 0 and use_file_menu = 0
                    {
                        if user_cursor_display_mode = 0
                            instance_create(0,0,obj_select_layer_tool);
                        else
                            instance_create(0,0,obj_select_layer_mode_tool);
                    }
                //Check the snap button
                if  device_mouse_x_to_gui(0) &gt;= 380+u_elements and device_mouse_y_to_gui(0) &gt;= 149
                and device_mouse_x_to_gui(0) &lt;= 408+u_elements and device_mouse_y_to_gui(0) &lt;= 162
                and user_cursor_mode = 0 and use_file_menu = 0
                    {
                        //Increment Current Grid Snap Size
                        user_grid_iteration += 1
                        if user_grid_iteration &gt; 3 user_grid_iteration = 0;
                        if user_grid_iteration &lt; 0 user_grid_iteration = 3;
                        //Increment Current Grid Snap Size Based On Iteration Position
                        switch(user_grid_iteration)
                            {
                                case 0: {user_grid_snap = 1; use_grid_toggle_size = ui_grid_2px; break;}
                                case 1: {user_grid_snap = 2; use_grid_toggle_size = ui_grid_2px; break;}
                                case 2: {user_grid_snap = 4; use_grid_toggle_size = ui_grid_4px; break;}
                                case 3: {user_grid_snap = 8; use_grid_toggle_size = ui_grid_8px; break;}
                            }
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_highlighter(380,149,408,162)
                    }
                //Check the grid visibility button
                if  (device_mouse_x_to_gui(0) &gt;= 367+u_elements and device_mouse_y_to_gui(0) &gt;= 149
                and  device_mouse_x_to_gui(0) &lt;= 379+u_elements and device_mouse_y_to_gui(0) &lt;= 162)
                and user_cursor_mode = 0 and use_file_menu = 0
                    {
                        if use_grid_toggle_iterator = 0
                            {
                                audio_play_sound(character_parry,50,false)
                                scr_set_message("Visual grid enabled")
                                grid_visible = 1
                            }
                        if use_grid_toggle_iterator = 1
                            {
                                audio_play_sound(character_parry,50,false)
                                scr_set_message("Visual grid disabled")
                                grid_visible = 0
                            }
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_highlighter(367,149,379,162)
                        //Iterate Toggle
                        use_grid_toggle_iterator += 1
                        if use_grid_toggle_iterator &gt; 1 use_grid_toggle_iterator = 0;
                    }
                //Check the new canvas button
                if  device_mouse_x_to_gui(0) &gt;= 319 and device_mouse_y_to_gui(0) &gt;= 55
                and device_mouse_x_to_gui(0) &lt;= 418 and device_mouse_y_to_gui(0) &lt;= 70
                and user_cursor_mode = 0 and use_file_menu = 1
                    {
                        use_tile_menu = 5
                        use_tile_menu_cool_down = 8
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_highlighter(319,55,418,70)
                        if parent.use_maps_current_map &gt; 0
                            {
                                scr_set_message("Multi-map stage detected!")
                                scr_set_message("Please save your data.")
                            }
                    }
                //Check the file button
                if  device_mouse_x_to_gui(0) &gt;= 319 and device_mouse_y_to_gui(0) &gt;= 71
                and device_mouse_x_to_gui(0) &lt;= 418 and device_mouse_y_to_gui(0) &lt;= 85
                and user_cursor_mode = 0 and use_file_menu = 1
                    {
                        use_tile_menu = 3
                        use_tile_menu_cool_down = 8

                        if user_built_list = 0
                            {
                                //Create The Maps Directory If It Doesn't Already Exist
                                if !directory_exists_ns(program_directory + "Maps") directory_create_ns(program_directory + "Maps");
                                //Clear Map Listings Array So Junk Entries Don't Bleed Into Refreshed Listings
                                use_maps_check_loop = 0
                                use_maps_files = 0
                                use_maps_files[0] = "..."
                                use_maps_files[1] = "..."
                                use_maps_files[2] = "..."
                                use_maps_files[3] = "..."
                                use_maps_files[4] = "..."

                                //Create A List Of Every Map File In The Folder
                                use_maps_file = file_find_first_sma(program_directory + "\Maps\*.map")
                                var use_maps_iterate = 0
                                var use_maps_page_builder = 0
                                use_maps_pages = 0
                                while(use_maps_file != "")
                                    {
                                        if use_maps_page_builder = 5
                                            {
                                                use_maps_iterate = 0
                                                use_maps_pages += 1
                                                use_maps_page_builder = 0
                                            }
                                        use_maps_files[use_maps_pages,use_maps_iterate] = use_maps_file
                                        //show_debug_message(string(use_maps_file))
                                        use_maps_file = file_find_next_sma()
                                        use_maps_iterate += 1
                                        use_maps_page_builder += 1
                                        //Exit the loop if we can't find another map file, or have built up enough pages
                                        if use_maps_pages &gt;= 40 break;
                                    }
                                file_find_close_sma()
                                //Update Currently Listed Maps
                                use_maps_map[0] = use_maps_files[0,0]
                                use_maps_map[1] = use_maps_files[0,1]
                                use_maps_map[2] = use_maps_files[0,2]
                                use_maps_map[3] = use_maps_files[0,3]
                                use_maps_map[4] = use_maps_files[0,4]
                                //Create Blanks At The End Of The Last Page, In Case Not All Entries Of The Page Are Filled
                                use_maps_files[use_maps_pages,use_maps_iterate]   = "..."
                                use_maps_files[use_maps_pages,use_maps_iterate+1] = "..."
                                use_maps_files[use_maps_pages,use_maps_iterate+2] = "..."
                                use_maps_files[use_maps_pages,use_maps_iterate+3] = "..."
                                use_maps_files[use_maps_pages,use_maps_iterate+4] = "..."
                                user_built_list = 1
                                use_maps_page = 0
                                //Scrollbar Position
                                use_scrollbar_position = 95
                                use_scrollbar_speed = 46/use_maps_pages
                            }

                        //Disable Highlighter
                        use_maps_highlight_y = -1
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_highlighter(319,71,418,85)
                        if parent.use_maps_current_map &gt; 0
                            {
                                scr_set_message("Multi-map stage detected!")
                                scr_set_message("Please save your data.")
                            }
                    }
                //Check the save button
                if  device_mouse_x_to_gui(0) &gt;= 319 and device_mouse_y_to_gui(0) &gt;= 86
                and device_mouse_x_to_gui(0) &lt;= 418 and device_mouse_y_to_gui(0) &lt;= 101
                and user_cursor_mode = 0 and use_file_menu = 1
                    {
                        if tile_get_count() &gt; user_tile_limit_warning_value
                            {
                                scr_set_message("Tile limit reached!  Remove tiles to optimize.")
                            }
                        else
                            {
                                if use_write_reserve_string_stage_name = ""
                                    {
                                        use_tile_menu = 4
                                        keyboard_string=""
                                        //Create The Maps Directory If It Doesn't Already Exist
                                        if !directory_exists_ns("Maps") directory_create_ns("Maps");
                                    }
                                else
                                    {
                                        //Trigger Write Process If A Stage Name Was Provided
                                        use_tile_menu = 0
                                        use_tile_menu_cool_down = 8
                                        //Trigger Write Process
                                        use_write_delay = 1
                                        parent.use_write_delay = 1
                                        use_keyboard_active = 0
                                        scr_set_message("Saving... please wait!")
                                        use_write_keyboard_string_active_string = -1
                                        //Set A Stage Name, Architect Name, And Description Based On Previously Obtained Information
                                        use_write_keyboard_string_stage_name = use_write_reserve_string_stage_name
                                        use_write_keyboard_string_architect = use_write_reserve_string_architect
                                        use_write_keyboard_string_description = use_write_reserve_string_description
                                    }
                                //Play menu sound
                                audio_play_sound(pause_select,50,false)
                                //Trigger Highlighter
                                scr_set_highlighter(319,86,418,101)
                            }
                    }

                //Check the save as button
                if  device_mouse_x_to_gui(0) &gt;= 319 and device_mouse_y_to_gui(0) &gt;= 102
                and device_mouse_x_to_gui(0) &lt;= 418 and device_mouse_y_to_gui(0) &lt;= 117
                and user_cursor_mode = 0 and use_file_menu = 1
                    {
                        if parent.use_maps_current_map = 0
                            {
                                if tile_get_count() &gt; user_tile_limit_warning_value
                                    {
                                        scr_set_message("Tile limit reached!  Remove tiles to optimize.")
                                    }
                                else
                                    {
                                        use_tile_menu = 4
                                        keyboard_string=""
                                        //Create The Maps Directory If It Doesn't Already Exist
                                        if !directory_exists_ns("Maps") directory_create_ns("Maps");
                                        //Play menu sound
                                        audio_play_sound(pause_select,50,false)
                                        //Trigger Highlighter
                                        scr_set_highlighter(319,102,418,117)
                                    }
                            }
                        else
                            scr_set_message("Sub-map names cannot be modified.");
                    }
                //Prevent play/edit buttons from conflicting with each other
                var user_play_edit_allow = 0;
                //Check the play button
                if  device_mouse_x_to_gui(0) &gt;= 367+u_elements and device_mouse_y_to_gui(0) &gt;= 167
                and device_mouse_x_to_gui(0) &lt;= 408+u_elements and device_mouse_y_to_gui(0) &lt;= 192
                and parent.use_editor = 1 and (use_file_menu = 0  or use_file_menu = 2)
                and user_play_edit_allow = 0
                    {
                        instance_create(parent.px,parent.py,obj_player_sparkles)
                        parent.use_editor = 0
                        parent.use_menu = 0
                        parent.debug_hud = 0
                        parent.user_cursor_mode = 0
                        user_cursor_mode = 1
                        parent.gravity_ladder = 0
                        user_play_edit_allow = 1
                        parent.tile_surface_asset = 0
                        parent.tile_surface_id[5]=-1
                        parent.stamina = 100
                        parent.hurt[0] = 0
                        parent.hurt[1] = 0
                        parent.hurt[2] = 0
                        parent.hurt[3] = 0
                        parent.timer_stop = 0
                        parent.view_top_lock = 0
                        //user_editor_hud_state = 1
                        parent.hud_timer_mil = 0
                        parent.hud_timer_sec = 0
                        parent.hud_timer_min = 0
                        parent.hurt_invuln = 39
                        parent.HUD_offset = -56
                        parent.speed_boosted_timer = 0
                        parent.hud_bar_asset = spr_hud_bar
                        parent.hud_bar_asset_alt = spr_hud_bar_alt
                        if instance_exists(obj_bg_parent)
                            obj_bg_parent.depth = 100;
                        if instance_exists(obj_bg_train_station)
                            obj_bg_train_station.depth = 96;
                        scr_set_rail_grinding_stop()
                        if use_player_spawner = 0
                            {
                                parent.px = view_xview[view_port]+(view_wview[view_port]/2)
                                parent.py = view_yview[view_port]+(view_hview[view_port]/2)+24
                            }
                        if instance_exists(obj_player_spawner) and use_player_spawner = 1
                            {
                                parent.px = obj_player_spawner.x
                                parent.py = obj_player_spawner.y
                            }
                        if use_player_spawner = 2
                            {
                                parent.px = parent.start_x
                                parent.py = parent.start_y
                            }
                        parent.anim_current = parent.anim_standing
                        //Reset Collision Sensors
                        scr_set_reset_collision_sensors();
                        //Set player health to the health petal modifier's parameter
                        parent.petals = use_health_petal_mod
                        //Prevent Milla from gaining more than five health petals
                        if parent.skin = spr_milla and parent.petals &gt; 10 parent.petals = 10;
                        if use_debug_hud_mode = 1
                            {
                                parent.debug_hud_sensors = 1
                                parent.joy_overlay = 1
                            }
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_highlighter(367,167,408,192)
                    }
                //Check the edit button
                if  device_mouse_x_to_gui(0) &gt;= 367+u_elements and device_mouse_y_to_gui(0) &gt;= 167
                and device_mouse_x_to_gui(0) &lt;= 408+u_elements and device_mouse_y_to_gui(0) &lt;= 192
                and parent.use_editor = 0
                and (use_file_menu = 0 or use_file_menu = 2)
                and user_play_edit_allow = 0
                    {
                        scr_set_play_mode();
                    }
                //Set Spawnable Characters
                if  device_mouse_x_to_gui(0) &gt;= 406 and device_mouse_y_to_gui(0) &gt;= 35
                and device_mouse_x_to_gui(0) &lt;= 420 and device_mouse_y_to_gui(0) &lt;= 49
                and use_file_menu = 0 and parent.user_cursor_mode = 1 and use_player_spawner = 1
                    {
                        scr_set_object(parent.skin,"Player Spawner","Simply place this where you would like to spawn when play testing your stage!")
                        instance_destroy(obj_player_spawner,true)
                        scr_set_highlighter(406,35,420,49)
                        audio_play_sound(pause_select,50,false)
                    }
                //Set Lilac
                if  device_mouse_x_to_gui(0) &gt;= 154 and device_mouse_y_to_gui(0) &gt;= 203
                and device_mouse_x_to_gui(0) &lt;= 170 and device_mouse_y_to_gui(0) &lt;= 219
                and use_file_menu = 0 and user_cursor_mode = 1
                    {
                        parent.alt_skin += 1
                        if parent.alt_skin &gt; 2
                            {
                                parent.alt_skin = 0
                                parent.lives_spr = 0
                            }
                        if parent.skin != spr_lilac
                            parent.alt_skin = 0;
                        scr_set_lilac();
                        if parent.alt_skin = 1 parent.lives_spr = 6;
                        if parent.alt_skin = 2 parent.lives_spr = 11;
                        audio_play_sound(pause_select,50,false)
                    }
                //Set Carol
                if  device_mouse_x_to_gui(0) &gt;= 174 and device_mouse_y_to_gui(0) &gt;= 203
                and device_mouse_x_to_gui(0) &lt;= 189 and device_mouse_y_to_gui(0) &lt;= 219
                and use_file_menu = 0 and user_cursor_mode = 1
                    {
                        scr_set_carol();
                        audio_play_sound(pause_select,50,false)
                    }
                //Set Milla
                if  device_mouse_x_to_gui(0) &gt;= 194 and device_mouse_y_to_gui(0) &gt;= 203
                and device_mouse_x_to_gui(0) &lt;= 209 and device_mouse_y_to_gui(0) &lt;= 219
                and use_file_menu = 0 and user_cursor_mode = 1
                    {
                        parent.alt_skin += 1
                        if parent.skin != spr_milla
                            parent.alt_skin = 0;
                        scr_set_milla();
                        if parent.alt_skin &gt; 1
                            parent.alt_skin = 0;
                        audio_play_sound(pause_select,50,false)
                    }
                //Set Spade
                if  device_mouse_x_to_gui(0) &gt;= 214 and device_mouse_y_to_gui(0) &gt;= 203
                and device_mouse_x_to_gui(0) &lt;= 229 and device_mouse_y_to_gui(0) &lt;= 219
                and use_file_menu = 0 and user_cursor_mode = 1
                    {
                        scr_set_spade()
                        parent.alt_skin = 0
                        audio_play_sound(pause_select,50,false)
                    }
                //Set Carrie
                if  device_mouse_x_to_gui(0) &gt;= 234 and device_mouse_y_to_gui(0) &gt;= 203
                and device_mouse_x_to_gui(0) &lt;= 249 and device_mouse_y_to_gui(0) &lt;= 219
                and use_file_menu = 0 and user_cursor_mode = 1
                    {
                        parent.alt_skin = 1
                        scr_set_carol();
                        scr_set_carrie();
                        audio_play_sound(pause_select,50,false)
                    }
                //Set Chiasa
                if  device_mouse_x_to_gui(0) &gt;= 254 and device_mouse_y_to_gui(0) &gt;= 203
                and device_mouse_x_to_gui(0) &lt;= 269 and device_mouse_y_to_gui(0) &lt;= 219
                and use_file_menu = 0 and user_cursor_mode = 1
                    {
                        parent.alt_skin = 2
                        scr_set_carol();
                        scr_set_chiasa();
                        audio_play_sound(pause_select,50,false)
                    }
                //Prevent play/edit buttons from conflicting with each other
                //Check the draw button
                if  device_mouse_x_to_gui(0) &gt;= 314 and device_mouse_x_to_gui(0) &lt;= 418
                and device_mouse_y_to_gui(0) &gt;= 101 and device_mouse_y_to_gui(0) &lt;= 112
                and use_file_menu = 3 and use_tile_menu_cool_down = 0 and user_cursor_mode = 0
                    {
                        use_file_menu = 2
                        use_tile_menu_cool_down = 8
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Disable Carol's Bike Sounds If They Were Still Playing
                        audio_stop_sound(carol_bike_idle)
                        audio_stop_sound(carol_bike_moving)
                        audio_stop_sound(carol_bike_skidding)
                        //Trigger Highlighter
                        scr_set_highlighter(371,101,413,112)
                    }
                //Check the draw/exit button
                if  device_mouse_x_to_gui(0) &gt;= 371+u_elements and device_mouse_y_to_gui(0) &gt;= 123
                and device_mouse_x_to_gui(0) &lt;= 412+u_elements and device_mouse_y_to_gui(0) &lt;= 136
                and use_file_menu = 2 and use_tile_menu_cool_down = 0 and user_cursor_mode = 0
                    {
                        use_file_menu = 0
                        use_tile_menu_cool_down = 8
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Disable Carol's Bike Sounds If They Were Still Playing
                        audio_stop_sound(carol_bike_idle)
                        audio_stop_sound(carol_bike_moving)
                        audio_stop_sound(carol_bike_skidding)
                        //Trigger Highlighter
                        scr_set_highlighter(371,123,412,136)
                    }
                //Check the undo button
                if  device_mouse_x_to_gui(0) &gt;= 319 and device_mouse_y_to_gui(0) &gt;= 141
                and device_mouse_x_to_gui(0) &lt;= 418 and device_mouse_y_to_gui(0) &lt;= 154
                and parent.use_editor = 1 and use_file_menu = 1
                    {
                        if user_undo_level = 0
                            {
                                alarm_set(3,1)
                                show_debug_message("Undo!")
                            }
                        user_undo_level -= 1
                        if user_undo_level &lt; -1
                            user_undo_level = -1;
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_highlighter(319,141,418,154)
                    }
                //Check the redo button
                if  device_mouse_x_to_gui(0) &gt;= 319 and device_mouse_y_to_gui(0) &gt;= 155
                and device_mouse_x_to_gui(0) &lt;= 418 and device_mouse_y_to_gui(0) &lt;= 168
                and parent.use_editor = 1 and use_file_menu = 1
                    {
                        if user_undo_level &lt;= -1
                            {
                                alarm_set(4,1)
                                user_undo_level = 0
                                show_debug_message("Redo!")
                            }
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_highlighter(319,155,418,168)
                    }

                //Check the win conditions button
                if  device_mouse_x_to_gui(0) &gt;= 321 and device_mouse_y_to_gui(0) &gt;= 170
                and device_mouse_x_to_gui(0) &lt;= 417 and device_mouse_y_to_gui(0) &lt;= 182
                and parent.use_editor = 1 and use_file_menu = 1
                    {
                        instance_create(0,0,obj_objective_tool)
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_highlighter(321,170,417,182)
                    }
                //Check the move tool button
                if  device_mouse_x_to_gui(0) &gt;= 321 and device_mouse_y_to_gui(0) &gt;= 183
                and device_mouse_x_to_gui(0) &lt;= 417 and device_mouse_y_to_gui(0) &lt;= 196
                and parent.use_editor = 1 and use_file_menu = 1
                    {
                        instance_create(0,0,obj_move_canvas)
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_highlighter(321,183,417,196)
                    }

                //Check the auto-save button
                if  device_mouse_x_to_gui(0) &gt;= 321 and device_mouse_y_to_gui(0) &gt;= 59
                and device_mouse_x_to_gui(0) &lt;= 417 and device_mouse_y_to_gui(0) &lt;= 71
                and parent.use_editor = 1 and use_file_menu = 3
                    {
                        instance_create(0,0,obj_auto_save_tool)
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_highlighter(321,59,417,71)
                    }
                //Check the Test Mode button
                if  device_mouse_x_to_gui(0) &gt;= 319 and device_mouse_y_to_gui(0) &gt;= 72
                and device_mouse_x_to_gui(0) &lt;= 418 and device_mouse_y_to_gui(0) &lt;= 85
                and parent.use_editor = 1 and use_file_menu = 3
                    {
                        instance_create(0,0,obj_play_mode_tool)
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_highlighter(319,72,418,85)
                    }
                //Check the enemy mode button
                if  device_mouse_x_to_gui(0) &gt;= 319 and device_mouse_y_to_gui(0) &gt;= 86
                and device_mouse_x_to_gui(0) &lt;= 418 and device_mouse_y_to_gui(0) &lt;= 99
                and parent.use_editor = 1 and use_file_menu = 3
                    {
                        instance_create(0,0,obj_enemy_mode_tool)
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_highlighter(319,86,418,99)
                    }
                //Check the show tips button
                if  device_mouse_x_to_gui(0) &gt;= 319 and device_mouse_y_to_gui(0) &gt;= 115
                and device_mouse_x_to_gui(0) &lt;= 418 and device_mouse_y_to_gui(0) &lt;= 127
                and parent.use_editor = 1 and use_file_menu = 3
                    {
                        user_show_help_captions += 1
                        if (user_show_help_captions &gt; 1)
                            user_show_help_captions = 0;
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_highlighter(319,115,418,127)
                    }
                //Check the cursor scale modifier button
                if  device_mouse_x_to_gui(0) &gt;= 319 and device_mouse_x_to_gui(0) &lt;= 418
                and device_mouse_y_to_gui(0) &gt;= 128 and device_mouse_y_to_gui(0) &lt;= 141
                and parent.use_editor = 1 and use_file_menu = 3
                    {
                        instance_create(0,0,obj_cursor_scale_tool)
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_highlighter(319,128,418,141)
                    }
                //Check the difficulty button
                if  device_mouse_x_to_gui(0) &gt;= 321 and device_mouse_y_to_gui(0) &gt;= 142
                and device_mouse_x_to_gui(0) &lt;= 417 and device_mouse_y_to_gui(0) &lt;= 155
                and parent.use_editor = 1 and use_file_menu = 3
                    {
                        instance_create(0,0,obj_difficulty_tool)
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_highlighter(321,142,417,155)
                    }
                //Check the health petal modifier button
                if  device_mouse_x_to_gui(0) &gt;= 319 and device_mouse_x_to_gui(0) &lt;= 418
                and device_mouse_y_to_gui(0) &gt;= 197 and device_mouse_y_to_gui(0) &lt;= 209
                and parent.use_editor = 1 and use_file_menu = 1
                    {
                        instance_create(0,0,obj_start_hp_tool)
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_highlighter(319,197,418,209)
                    }
                //Check the collapsable button
                if  device_mouse_x_to_gui(0) &gt;= 349 and device_mouse_x_to_gui(0) &lt;= 362
                and device_mouse_y_to_gui(0) &gt;= 112 and device_mouse_y_to_gui(0) &lt;= 128
                and user_editor_hud_state = 0 and use_tile_menu_cool_down = 0
                and use_file_menu = 0
                    {
                        user_editor_hud_state = 1
                        use_tile_menu_cool_down = 8
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_highlighter(349,112,362,128)
                    }
                //Check the collapsable button
                if  device_mouse_x_to_gui(0) &gt;= 410 and device_mouse_x_to_gui(0) &lt;= 423
                and device_mouse_y_to_gui(0) &gt;= 112 and device_mouse_y_to_gui(0) &lt;= 128
                and user_editor_hud_state = 2 and use_tile_menu_cool_down = 0
                and use_file_menu = 0
                    {
                        user_editor_hud_state = 3
                        use_tile_menu_cool_down = 8
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_highlighter(410,112,423,128)
                    }
                //---------------------------------//
                //---Check painting mode buttons---//
                //---------------------------------//
                if use_file_menu = 2
                    {
                        //Warn the player that the color wheel isn't usable yet
                        if  device_mouse_x_to_gui(0) &gt;= 353+u_elements and device_mouse_y_to_gui(0) &gt;= 17
                        and device_mouse_x_to_gui(0) &lt;= 384+u_elements and device_mouse_y_to_gui(0) &lt;= 48
                            {
                                audio_play_sound(character_parry,50,false)
                                scr_set_message("Color wheel not available yet!")
                                //Trigger Highlighter
                                scr_set_highlighter(353,17,384,48)
                            }

                        //Warn the player that layers aren't usable yet
                        if  device_mouse_x_to_gui(0) &gt;= 323+u_elements and device_mouse_y_to_gui(0) &gt;= 123
                        and device_mouse_x_to_gui(0) &lt;= 364+u_elements and device_mouse_y_to_gui(0) &lt;= 136
                            {
                                audio_play_sound(character_parry,50,false)
                                scr_set_message("Layer controls not available yet!")
                                //Trigger Highlighter
                                scr_set_highlighter(323,123,364,136)
                            }

                        //-------------------------//
                        //---Click Drawing Tools---//
                        //-------------------------//

                        //Click/invoke painting pen
                        if  device_mouse_x_to_gui(0) &gt;= 323+u_elements and device_mouse_y_to_gui(0) &gt;= 62
                        and device_mouse_x_to_gui(0) &lt;= 335+u_elements and device_mouse_y_to_gui(0) &lt;= 75
                            {
                                user_pen_mode = spr_drawing_cursor
                                user_pen_size = 1
                                //Play menu sound
                                audio_play_sound(pause_select,50,false)
                                //Trigger Highlighter
                                scr_set_highlighter(323,62,335,75)
                            }
                        //Click/invoke eraser
                        if  device_mouse_x_to_gui(0) &gt;= 323+u_elements and device_mouse_y_to_gui(0) &gt;= 77
                        and device_mouse_x_to_gui(0) &lt;= 335+u_elements and device_mouse_y_to_gui(0) &lt;= 90
                            {
                                user_pen_mode = spr_erasing_cursor
                                user_pen_size = -1
                                //Play menu sound
                                audio_play_sound(pause_select,50,false)
                                //Trigger Highlighter
                                scr_set_highlighter(323,77,335,90)
                            }
                        //Click/invoke pixel grid
                        if  device_mouse_x_to_gui(0) &gt;= 399+u_elements and device_mouse_y_to_gui(0) &gt;= 62
                        and device_mouse_x_to_gui(0) &lt;= 408+u_elements and device_mouse_y_to_gui(0) &lt;= 75
                        and user_tool_grid = 0 and use_tile_menu_cool_down = 0
                            {
                                user_tool_grid = 1
                                use_tile_menu_cool_down = 8
                                //Play menu sound
                                audio_play_sound(pause_select,50,false)
                                //Trigger Highlighter
                                scr_set_highlighter(399,62,408,75)
                            }
                        //Click/invoke pixel grid
                        if  device_mouse_x_to_gui(0) &gt;= 399+u_elements and device_mouse_y_to_gui(0) &gt;= 62
                        and device_mouse_x_to_gui(0) &lt;= 408+u_elements and device_mouse_y_to_gui(0) &lt;= 75
                        and user_tool_grid = 1 and use_tile_menu_cool_down = 0
                            {
                                user_tool_grid = 0
                                use_tile_menu_cool_down = 8
                                //Play menu sound
                                audio_play_sound(pause_select,50,false)
                                //Trigger Highlighter
                                scr_set_highlighter(399,62,408,75)
                            }

                        //------------------------//
                        //---Click Tool Options---//
                        //------------------------//

                        //Click/invoke line tool
                        if  device_mouse_x_to_gui(0) &gt;= 339+u_elements and device_mouse_y_to_gui(0) &gt;= 62
                        and device_mouse_x_to_gui(0) &lt;= 348+u_elements and device_mouse_y_to_gui(0) &lt;= 75
                            {
                                user_pen_mode = spr_line_tool
                                user_pen_size = 1
                                //Play menu sound
                                audio_play_sound(pause_select,50,false)
                                //Trigger Highlighter
                                scr_set_highlighter(339,62,348,75)
                            }
                        //Click/invoke rectangle tool
                        if  device_mouse_x_to_gui(0) &gt;= 354+u_elements and device_mouse_y_to_gui(0) &gt;= 62
                        and device_mouse_x_to_gui(0) &lt;= 363+u_elements and device_mouse_y_to_gui(0) &lt;= 75
                            {
                                user_pen_mode = spr_rectangle_tool
                                //Play menu sound
                                audio_play_sound(pause_select,50,false)
                                //Trigger Highlighter
                                scr_set_highlighter(354,62,363,75)
                            }
                        //Click/invoke circle tool
                        if  device_mouse_x_to_gui(0) &gt;= 369+u_elements and device_mouse_y_to_gui(0) &gt;= 62
                        and device_mouse_x_to_gui(0) &lt;= 378+u_elements and device_mouse_y_to_gui(0) &lt;= 75
                            {
                                user_pen_mode = spr_circle_tool
                                //Play menu sound
                                audio_play_sound(pause_select,50,false)
                                //Trigger Highlighter
                                scr_set_highlighter(369,62,378,75)
                            }

                        //Click/invoke eraser brush size 1x
                        if  device_mouse_x_to_gui(0) &gt;= 339+u_elements and device_mouse_y_to_gui(0) &gt;= 77
                        and device_mouse_x_to_gui(0) &lt;= 348+u_elements and device_mouse_y_to_gui(0) &lt;= 90
                            {
                                user_pen_mode = spr_erasing_cursor
                                user_pen_size = -1
                                //Play menu sound
                                audio_play_sound(pause_select,50,false)
                                //Trigger Highlighter
                                scr_set_highlighter(339,77,348,90)
                            }
                        //Click/invoke eraser brush size 2x
                        if  device_mouse_x_to_gui(0) &gt;= 354+u_elements and device_mouse_y_to_gui(0) &gt;= 77
                        and device_mouse_x_to_gui(0) &lt;= 363+u_elements and device_mouse_y_to_gui(0) &lt;= 90
                            {
                                user_pen_mode = spr_erasing_cursor
                                user_pen_size = -2
                                //Play menu sound
                                audio_play_sound(pause_select,50,false)
                                //Trigger Highlighter
                                scr_set_highlighter(354,77,363,90)
                            }
                        //Click/invoke eraser brush size 3x
                        if  device_mouse_x_to_gui(0) &gt;= 369+u_elements and device_mouse_y_to_gui(0) &gt;= 77
                        and device_mouse_x_to_gui(0) &lt;= 378+u_elements and device_mouse_y_to_gui(0) &lt;= 90
                            {
                                user_pen_mode = spr_erasing_cursor
                                user_pen_size = -3
                                //Play menu sound
                                audio_play_sound(pause_select,50,false)
                                //Trigger Highlighter
                                scr_set_highlighter(369,77,378,90)
                            }

                        //-------------------------//
                        //---Click Color Options---//
                        //-------------------------//

                        //Row 1
                        if device_mouse_y_to_gui(0) &gt;= 92 and device_mouse_y_to_gui(0) &lt;= 98
                            {
                                //Click color (black)
                                if  device_mouse_x_to_gui(0) &gt;= 338+u_elements
                                and device_mouse_x_to_gui(0) &lt;= 343+u_elements 
                                    {
                                        if user_pen_mode = spr_erasing_cursor user_pen_mode = spr_drawing_cursor;
                                        user_pen_color = mu_paint_black
                                        user_line_tool_color = c_black
                                        //Play menu sound
                                        audio_play_sound(pause_select,50,false)
                                        //Trigger Highlighter
                                        scr_set_highlighter(338,92,343,98)
                                    }
                                //Click color (light gray)
                                if  device_mouse_x_to_gui(0) &gt;= 346+u_elements
                                and device_mouse_x_to_gui(0) &lt;= 352+u_elements 
                                    {
                                        if user_pen_mode = spr_erasing_cursor user_pen_mode = spr_drawing_cursor;
                                        user_pen_color = mu_paint_light_gray
                                        user_line_tool_color = make_colour_rgb(192,196,200)
                                        //Play menu sound
                                        audio_play_sound(pause_select,50,false)
                                        //Trigger Highlighter
                                        scr_set_highlighter(346,92,352,98)
                                    }
                                //Click color (red)
                                if  device_mouse_x_to_gui(0) &gt;= 354+u_elements
                                and device_mouse_x_to_gui(0) &lt;= 360+u_elements 
                                    {
                                        if user_pen_mode = spr_erasing_cursor user_pen_mode = spr_drawing_cursor;
                                        user_pen_color = mu_paint_red
                                        user_line_tool_color = make_colour_rgb(252,0,0)
                                        //Play menu sound
                                        audio_play_sound(pause_select,50,false)
                                        //Trigger Highlighter
                                        scr_set_highlighter(354,92,360,98)
                                    }
                                //Click color (yellow)
                                if  device_mouse_x_to_gui(0) &gt;= 362+u_elements
                                and device_mouse_x_to_gui(0) &lt;= 368+u_elements 
                                    {
                                        if user_pen_mode = spr_erasing_cursor user_pen_mode = spr_drawing_cursor;
                                        user_pen_color = mu_paint_yellow
                                        user_line_tool_color = make_colour_rgb(252,252,0)
                                        //Play menu sound
                                        audio_play_sound(pause_select,50,false)
                                        //Trigger Highlighter
                                        scr_set_highlighter(362,92,368,98)
                                    }
                                //Click color (green)
                                if  device_mouse_x_to_gui(0) &gt;= 370+u_elements
                                and device_mouse_x_to_gui(0) &lt;= 376+u_elements 
                                    {
                                        if user_pen_mode = spr_erasing_cursor user_pen_mode = spr_drawing_cursor;
                                        user_pen_color = mu_paint_green
                                        user_line_tool_color = make_colour_rgb(0,252,0)
                                        //Play menu sound
                                        audio_play_sound(pause_select,50,false)
                                        //Trigger Highlighter
                                        scr_set_highlighter(370,92,376,98)
                                    }
                                //Click color (cyan)
                                if  device_mouse_x_to_gui(0) &gt;= 378+u_elements
                                and device_mouse_x_to_gui(0) &lt;= 384+u_elements 
                                    {
                                        if user_pen_mode = spr_erasing_cursor user_pen_mode = spr_drawing_cursor;
                                        user_pen_color = mu_paint_cyan
                                        user_line_tool_color = make_colour_rgb(0,252,252)
                                        //Play menu sound
                                        audio_play_sound(pause_select,50,false)
                                        //Trigger Highlighter
                                        scr_set_highlighter(378,92,384,98)
                                    }
                                //Click color (blue)
                                if  device_mouse_x_to_gui(0) &gt;= 386+u_elements
                                and device_mouse_x_to_gui(0) &lt;= 392+u_elements 
                                    {
                                        if user_pen_mode = spr_erasing_cursor user_pen_mode = spr_drawing_cursor;
                                        user_pen_color = mu_paint_blue
                                        user_line_tool_color = make_colour_rgb(0,0,252)
                                        //Play menu sound
                                        audio_play_sound(pause_select,50,false)
                                        //Trigger Highlighter
                                        scr_set_highlighter(386,92,392,98)
                                    }
                                //Click color (pink)
                                if  device_mouse_x_to_gui(0) &gt;= 394+u_elements
                                and device_mouse_x_to_gui(0) &lt;= 400+u_elements 
                                    {
                                        if user_pen_mode = spr_erasing_cursor user_pen_mode = spr_drawing_cursor;
                                        user_pen_color = mu_paint_pink
                                        user_line_tool_color = make_colour_rgb(252,0,252)
                                        //Play menu sound
                                        audio_play_sound(pause_select,50,false)
                                        //Trigger Highlighter
                                        scr_set_highlighter(394,92,400,98)
                                    }
                            }
                        //Row 2
                        if device_mouse_y_to_gui(0) &gt;= 100 and device_mouse_y_to_gui(0) &lt;= 106
                            {
                                //Click color (white)
                                if  device_mouse_x_to_gui(0) &gt;= 342+u_elements
                                and device_mouse_x_to_gui(0) &lt;= 348+u_elements
                                    {
                                        if user_pen_mode = spr_erasing_cursor user_pen_mode = spr_drawing_cursor;
                                        user_pen_color = mu_paint_white
                                        user_line_tool_color = make_colour_rgb(252,252,252)
                                        //Play menu sound
                                        audio_play_sound(pause_select,50,false)
                                        //Trigger Highlighter
                                        scr_set_highlighter(342,100,348,106)
                                    }
                                //Click color (dark gray)
                                if  device_mouse_x_to_gui(0) &gt;= 350+u_elements
                                and device_mouse_x_to_gui(0) &lt;= 356+u_elements
                                    {
                                        if user_pen_mode = spr_erasing_cursor user_pen_mode = spr_drawing_cursor;
                                        user_pen_color = mu_paint_dark_gray
                                        user_line_tool_color = make_colour_rgb(132,136,140)
                                        //Play menu sound
                                        audio_play_sound(pause_select,50,false)
                                        //Trigger Highlighter
                                        scr_set_highlighter(350,100,356,106)
                                    }
                                //Click color (burgundy)
                                if  device_mouse_x_to_gui(0) &gt;= 358+u_elements
                                and device_mouse_x_to_gui(0) &lt;= 364+u_elements
                                    {
                                        if user_pen_mode = spr_erasing_cursor user_pen_mode = spr_drawing_cursor;
                                        user_pen_color = mu_paint_burgundy
                                        user_line_tool_color = make_colour_rgb(168,0,84)
                                        //Play menu sound
                                        audio_play_sound(pause_select,50,false)
                                        //Trigger Highlighter
                                        scr_set_highlighter(358,100,364,106)
                                    }
                                //Click color (dark yellow)
                                if  device_mouse_x_to_gui(0) &gt;= 366+u_elements
                                and device_mouse_x_to_gui(0) &lt;= 372+u_elements
                                    {
                                        if user_pen_mode = spr_erasing_cursor user_pen_mode = spr_drawing_cursor;
                                        user_pen_color = mu_paint_dark_yellow
                                        user_line_tool_color = make_colour_rgb(168,168,84)                                        
                                        //Play menu sound
                                        audio_play_sound(pause_select,50,false)
                                        //Trigger Highlighter
                                        scr_set_highlighter(366,100,372,106)
                                    }
                                //Click color (dark green)
                                if  device_mouse_x_to_gui(0) &gt;= 374+u_elements
                                and device_mouse_x_to_gui(0) &lt;= 380+u_elements
                                    {
                                        if user_pen_mode = spr_erasing_cursor user_pen_mode = spr_drawing_cursor;
                                        user_pen_color = mu_paint_dark_green
                                        user_line_tool_color = make_colour_rgb(0,168,84)
                                        //Play menu sound
                                        audio_play_sound(pause_select,50,false)
                                        //Trigger Highlighter
                                        scr_set_highlighter(374,100,380,106)
                                    }
                                //Click color (dark cyan)
                                if  device_mouse_x_to_gui(0) &gt;= 382+u_elements
                                and device_mouse_x_to_gui(0) &lt;= 388+u_elements
                                    {
                                        if user_pen_mode = spr_erasing_cursor user_pen_mode = spr_drawing_cursor;
                                        user_pen_color = mu_paint_dark_cyan
                                        user_line_tool_color = make_colour_rgb(84,168,168)
                                        //Play menu sound
                                        audio_play_sound(pause_select,50,false)
                                        //Trigger Highlighter
                                        scr_set_highlighter(382,100,388,106)
                                    }
                                //Click color (dark blue)
                                if  device_mouse_x_to_gui(0) &gt;= 390+u_elements
                                and device_mouse_x_to_gui(0) &lt;= 396+u_elements
                                    {
                                        if user_pen_mode = spr_erasing_cursor user_pen_mode = spr_drawing_cursor;
                                        user_pen_color = mu_paint_dark_blue
                                        user_line_tool_color = make_colour_rgb(84,84,168)
                                        //Play menu sound
                                        audio_play_sound(pause_select,50,false)
                                        //Trigger Highlighter
                                        scr_set_highlighter(390,100,396,106)
                                    }
                                //Click color (purple)
                                if  device_mouse_x_to_gui(0) &gt;= 398+u_elements
                                and device_mouse_x_to_gui(0) &lt;= 404+u_elements
                                    {
                                        if user_pen_mode = spr_erasing_cursor user_pen_mode = spr_drawing_cursor;
                                        user_pen_color = mu_paint_purple
                                        user_line_tool_color = make_colour_rgb(168,84,168)
                                        //Play menu sound
                                        audio_play_sound(pause_select,50,false)
                                        //Trigger Highlighter
                                        scr_set_highlighter(398,100,404,106)
                                    }
                            }
                    }
            }
    }
    } //End of Floating Window Check

//Shift Editor HUD towards the right
var user_editor_side_bar_offset_0 = 414;
var user_editor_side_bar_offset_1 = 314;
var user_editor_side_bar_offset_2 = 100;
if use_file_menu = 0
    {
        user_editor_side_bar_offset_0 = 375;
        user_editor_side_bar_offset_1 = 275;
        user_editor_side_bar_offset_2 = 61;
    }

if user_editor_hud_state = 1
    {
        user_editor_hud_offset += 5
        u_elements += 5
        if user_editor_hud_offset &gt; user_editor_side_bar_offset_0
            {
                user_editor_hud_offset = user_editor_side_bar_offset_0
                u_elements = user_editor_side_bar_offset_2
                user_editor_hud_state = 2
            }
    }

if user_editor_hud_state = 3
    {
        user_editor_hud_offset -= 5
        u_elements -=5
        if user_editor_hud_offset &lt; 314
            {
                user_editor_hud_offset = 314
                u_elements = 0
                user_editor_hud_state = 0
            }
    }

//Set scroll wheel lock
var scroll_wheel_lock = 0;

if device_mouse_x_to_gui(0) &gt;= 353
    {
        if use_tile_menu = 0 and use_file_menu = 3
        and mouse_wheel_up()
            {
                use_file_menu = 1
                scroll_wheel_lock = 1;
                audio_play_sound(pause_select,50,false)
                //Trigger Highlighter
                scr_set_highlighter(419,35,424,174)
            }
        if use_tile_menu = 0 and use_file_menu = 1
        and mouse_wheel_down()
            {
                use_file_menu = 3
                scroll_wheel_lock = 1;
                audio_play_sound(pause_select,50,false)
                //Trigger Highlighter
                scr_set_highlighter(419,63,424,202)
            }
    }

//Zoom If We Are Using The Mousewheel Outside Of The Tile Menu
if use_tile_menu = 0 and parent.pause = 0
    {
        //Zoom In
        if mouse_wheel_up() and scroll_wheel_lock = 0
            {
                use_zoom_scale_iteration -= 1;
                if use_zoom_scale_iteration &lt; 0
                    use_zoom_scale_iteration = 0;

                switch(use_zoom_scale_iteration)
                    {
                        case 0: {use_zoom_position = 8; break;}
                        case 1: {use_zoom_position = 7; break;}
                        case 2: {use_zoom_position = 3; break;}
                        case 3: {use_zoom_position = 2; break;}
                        case 4: {use_zoom_position = 1; break;}
                        case 5: {use_zoom_position = 0; break;}
                        case 6: {use_zoom_position = 4; break;}
                        case 7: {use_zoom_position = 5; break;}
                        case 8: {use_zoom_position = 6; break;}
                    }
                scr_clear_zoom_level()
                scr_change_zoom_level()
                use_dispaly_key_prompt = 1
                use_tile_properties_enable = 0
                use_zoom_counter = 0.3
            }
        //Zoom Out
        if mouse_wheel_down() and scroll_wheel_lock = 0
            {
                use_zoom_scale_iteration += 1;
                if use_zoom_scale_iteration &gt; 8
                    use_zoom_scale_iteration = 8;

                switch(use_zoom_scale_iteration)
                    {
                        case 0: {use_zoom_position = 8; break;}
                        case 1: {use_zoom_position = 7; break;}
                        case 2: {use_zoom_position = 3; break;}
                        case 3: {use_zoom_position = 2; break;}
                        case 4: {use_zoom_position = 1; break;}
                        case 5: {use_zoom_position = 0; break;}
                        case 6: {use_zoom_position = 4; break;}
                        case 7: {use_zoom_position = 5; break;}
                        case 8: {use_zoom_position = 6; break;}
                    }
                scr_clear_zoom_level()
                scr_change_zoom_level()
                use_dispaly_key_prompt = 1
                use_zoom_counter = 0.3
            }
        //Zoom Toggle
        if use_snap_down = 1 and use_tile_menu_cool_down = 0
            {
                use_zoom_position_toggle -= 1
                scr_clear_zoom_level()
                if use_zoom_position_toggle &lt; 0 use_zoom_position_toggle = 8;
                switch(use_zoom_position_toggle)
                    {
                        case 0: {use_zoom_position = 8; break;}
                        case 1: {use_zoom_position = 7; break;}
                        case 2: {use_zoom_position = 3; break;}
                        case 3: {use_zoom_position = 2; break;}
                        case 4: {use_zoom_position = 1; break;}
                        case 5: {use_zoom_position = 0; break;}
                        case 6: {use_zoom_position = 4; break;}
                        case 7: {use_zoom_position = 5; break;}
                        case 8: {use_zoom_position = 6; break;}
                    }
                scr_change_zoom_level()
                //Play menu sound
                audio_play_sound(pause_select,50,false)
            }
        //Exit Toggle
        if use_pause = 1 and user_cursor_mode = 0 and use_tile_menu_cool_down = 0
            {
                use_tile_menu = 2
                use_tile_menu_cool_down = 8
                //Play menu sound
                audio_play_sound(pause_select,50,false)
            }
        //Movement Mode Toggle
        if use_mode = 1 and user_cursor_mode = 0 and use_tile_menu_cool_down = 0
            {
                use_move_mode += 1
                audio_play_sound(character_parry,50,false)
                scr_set_message("Grid movement enabled!")
                //Play menu sound
                audio_play_sound(pause_select,50,false)
            }
        //Disable Grid Movement
        if use_move_mode &gt; 1 and use_tile_menu_cool_down = 0
            {
                use_move_mode = 0
                audio_play_sound(character_parry,50,false)
                scr_set_message("Grid movement disabled!")
                //Play menu sound
                audio_play_sound(pause_select,50,false)
            }

        //Do not perform alternate actions while painting mode is active
        if use_file_menu != 2 and use_float_window = 0
            {
                //Do not perform alternate actions while the health petal modifier is active
                if use_tile_properties_cursor_boundary_disable = 0 and user_cursor_mode = 0
                    {
                        //If we are currently not using the tile menu, are not currently hovering over the sidebar, and aren't in play mode, place a tile
                        if ((mouse_check_button(joy_mouse_button_left) or use_put_here &gt; 0) and use_tile_menu_cool_down = 0 and use_confirm = 0)
                            {
                                var o1 = tile_layer_find(user_layer_selected,use_cursor_x,use_cursor_y); //Top-Left
                                var o2 = tile_layer_find(user_layer_selected,use_cursor_x+background_get_width(user_tile_selected),use_cursor_y); //Top-Right
                                var o3 = tile_layer_find(user_layer_selected,use_cursor_x,use_cursor_y+background_get_height(user_tile_selected)); //Bottom-Left
                                var o4 = tile_layer_find(user_layer_selected,use_cursor_x+background_get_width(user_tile_selected),use_cursor_y+background_get_height(user_tile_selected)); //Bottom-Right
                                
                                //Place a tile
                                if user_cursor_display_mode = 0 and use_tile_menu = 0 and user_place_mode = 0 and (user_place_allow = 0)
                                and user_cursor_mode = 0 and use_tile_properties_cursor_boundary_disable = 0
                                and !tile_exists(o1) and !tile_exists(o2) and !tile_exists(o3) and !tile_exists(o4)
                                and array_length_1d(tile_get_ids()) &lt;= user_tile_limit_warning_value
                                and not (user_layer_selected = surface_slopes or user_layer_selected = surface_modifiers
                                or user_layer_selected = surface_enemy_flags or user_layer_selected = surface_flags)
                                and user_move_layer_ID = -1
                                    {
                                        //Sentinel check on layer value for current tile; check to see if the tile shouldn't be
                                        //placed on a specific layer
                                        scr_set_layer_surface();
                                        /*
                                        //Place a tile
                                        move_added_tile = tile_add(user_tile_selected,0,0,background_get_width(user_tile_selected),background_get_height(user_tile_selected),user_grid_snap_x+user_grid_offset_x,user_grid_snap_y+user_grid_offset_y,user_layer_selected);
                                        //Play Sound Effect
                                        audio_play_sound(snd_hammer,50,false)
                                        */
                                        //Play Particle Effect
                                        //use_confirm = 1
                                        use_tile_menu_cool_down = 8
                                        //Trigger tile dragging
                                        use_corner_box = 5
                                        use_corner_box_id = -1;
                                        use_corner_box_bottom_left_x = user_grid_snap_x+user_grid_offset_x
                                        use_corner_box_bottom_left_y = user_grid_snap_y+user_grid_offset_y+background_get_height(user_tile_selected)
                                        use_corner_box_top_right_x = user_grid_snap_x
                                        use_corner_box_top_right_y = user_grid_snap_y
                                    }
                                if (tile_get_count() &gt; user_tile_limit_warning_value and !audio_is_playing(character_parry))
                                    scr_set_message("Tile limit reached!  Remove tiles to optimize.");
                            }
        
                        //Delete Tiles Underneath The Cursor
                        if ((mouse_check_button(joy_mouse_button_right) or use_delete &gt; 0)
                        and use_tile_menu_cool_down = 0 and side_bar_allow = 0 and use_confirm = 0
                        and use_delete_selection_box_timer &lt; 8)
                            {
                                //Scan for tiles to delete
                                var tile_scanner = tile_layer_find(user_layer_selected,use_cursor_x,use_cursor_y)
        
                                //Collect ID of the tile
                                if tile_exists(tile_scanner)
                                    {
                                        //Collect background ID of the tile
                                        var tile_scanner_ID = tile_get_background(tile_scanner);
        
                                        //Check for exceptional tiles the editor should be ignoring (Such as object-specific flag tiles)
                                        var tile_scanner_IDs_exceptional_tiles = scr_check_layer_surface(tile_scanner_ID)

                                        //If the exceptional tile scan returned positive, delete any tiles found underneath the player's cursor
                                        if tile_scanner_IDs_exceptional_tiles = 1
                                            {
                                                tile_delete(tile_scanner)
                                                scr_clear_zoom_level()
                                            }
                                    }
        
                                //Check the cursor's positions for objects to delete
                                var instance_delete = instance_position(use_cursor_x,use_cursor_y,obj_delete_parent);
        
                                //Scan for objects to delete
                                if (use_tile_switching_mode = 0 and instance_exists(instance_delete))
                                or (use_tile_switching_mode = 1 and instance_exists(instance_delete) and user_layer_selected = -100000)
                                    {
                                        if scr_get_node_exceptions(instance_delete) = 0
                                            {
                                                instance_destroy(instance_delete,true)
                                                user_place_allow = 0
                                            }
                                        else
                                            {
                                                if use_tile_switching_mode = 1
                                                    scr_set_message("Logic nodes cannot be deleted!")
                                            }
                                    }
        
                                //Display error message if objects were underneath the cursor while in automatic layer switching mode
                                if (use_tile_switching_mode = 1 and user_cursor_display_mode = 0 and instance_exists(instance_delete))
                                    {
                                        if mouse_check_button_pressed(joy_mouse_button_right)
                                        or use_delete = 1
                                            {
                                                audio_play_sound(character_parry,50,false)
                                                //Display Error Message
                                                scr_set_message("Cannot delete objects while holding a tile!")
                                            }
                                    }
                            }
        
                        //Copy The Tile Underneath The Cursor
                        if (mouse_check_button_pressed(mb_middle) and side_bar_allow = 0)
                        or (use_copy = 1 and side_bar_allow = 0)
                            {
                                //Scan for tiles to copy
                                var tile_scanner = tile_layer_find(user_layer_selected,use_cursor_x,use_cursor_y)
        
                                //Collect ID of the tile
                                if tile_exists(tile_scanner)
                                    {
                                        //Collect background ID of the tile
                                        var tile_scanner_ID = tile_get_background(tile_scanner);
        
                                        //Check for exceptional tiles the editor should be ignoring (Such as object-specific flag tiles)
                                        var tile_scanner_IDs_exceptional_tiles = scr_check_layer_surface(tile_scanner_ID)
        
                                        //If the exceptional tile scan returned positive, copy any tiles found underneath the player's cursor
                                        if tile_scanner_IDs_exceptional_tiles = 1
                                            {
                                                user_cursor_display_mode = 0
                                                user_tile_selected = tile_get_background(tile_scanner)
                                                scr_clear_zoom_level()
                                                var user_tile_get_asset_name = background_get_name(user_tile_selected);
                                                //Swap to temple tile set before checking a tile's X/Y offsets
                                                if string_pos("mu",user_tile_get_asset_name) != 0
                                                and use_tileset_preview_set_increment != 0
                                                    {
                                                        scr_set_temple_definition_table();
                                                        use_tileset_preview_set_increment = 0
                                                        scr_lang_editor_tile_sets();
                                                        //use_tileset_preview_set = ui_tileset_temple
                                                        scr_change_page()
                                                    }
                                                //Swap to city tile set before checking a tile's X/Y offsets
                                                if string_char_at(user_tile_get_asset_name,0) = "w"
                                                and use_tileset_preview_set_increment != 1
                                                    {
                                                        scr_set_city_definition_table();
                                                        use_tileset_preview_set_increment = 1
                                                        scr_lang_editor_tile_sets();
                                                        //use_tileset_preview_set = ui_tileset_city
                                                        scr_change_page()
                                                    }
                                                //Swap to mountain tile set before checking a tile's X/Y offsets
                                                if string_pos("mnt",user_tile_get_asset_name) != 0
                                                and use_tileset_preview_set_increment != 3
                                                    {
                                                        scr_set_mountain_definition_table();
                                                        use_tileset_preview_set_increment = 3
                                                        scr_lang_editor_tile_sets();
                                                        //use_tileset_preview_set = ui_tileset_ravine
                                                        scr_change_page()
                                                    }
                                                //Swap to lagoon tile set before checking a tile's X/Y offsets
                                                if string_char_at(user_tile_get_asset_name,0) = "l"
                                                and use_tileset_preview_set_increment != 4
                                                    {
                                                        scr_set_lagoon_definition_table();
                                                        use_tileset_preview_set_increment = 4
                                                        scr_lang_editor_tile_sets();
                                                        //use_tileset_preview_set = ui_tileset_lagoon
                                                        scr_change_page()
                                                    }
                                                //Swap to mountain tile set before checking a tile's X/Y offsets
                                                if string_pos("rg",user_tile_get_asset_name) != 0
                                                and use_tileset_preview_set_increment != 5
                                                    {
                                                        scr_set_platforms_definition_table();
                                                        use_tileset_preview_set_increment = 5
                                                        scr_lang_editor_tile_sets();
                                                        //use_tileset_preview_set = ui_tileset_platform
                                                        scr_change_page()
                                                    }
                                                //Swap to mountain tile set before checking a tile's X/Y offsets
                                                if string_pos("ma",user_tile_get_asset_name) != 0
                                                and use_tileset_preview_set_increment != 6
                                                    {
                                                        scr_set_platforms_definition_table();
                                                        use_tileset_preview_set_increment = 6
                                                        scr_lang_editor_tile_sets();
                                                        //use_tileset_preview_set = ui_tileset_platform
                                                        scr_change_page()
                                                    }
                                                //Swap to mountain tile set before checking a tile's X/Y offsets
                                                if string_pos("bb",user_tile_get_asset_name) != 0
                                                and use_tileset_preview_set_increment != 7
                                                    {
                                                        scr_set_beihai_definition_table();
                                                        use_tileset_preview_set_increment = 7
                                                        scr_lang_editor_tile_sets();
                                                        //use_tileset_preview_set = ui_tileset_platform
                                                        scr_change_page()
                                                    }
                                                scr_change_aspect_ratio_preview(tile_scanner_ID)
                                                scr_get_slope_offsets(user_tile_selected)
                                                scr_get_tile_offsets()
                                                item_rotate_angle = 0
                                                item_rotate_allowed = 0
                                            }
                                    }
        
                                //Scan for objects to copy
                                var instance_duplicate = instance_position(use_cursor_x,use_cursor_y,obj_delete_parent);
        
                                if (use_tile_switching_mode = 0 and instance_exists(instance_duplicate))
                                or (use_tile_switching_mode = 1 and instance_exists(instance_duplicate) and user_layer_selected = -100000)
                                    {
                                        if scr_get_node_exceptions(instance_duplicate) = 0
                                            {
                                                user_cursor_display_mode = 1
                                                scr_get_copy_exceptions(instance_duplicate)
                                                //Copy Milla's spawn icon instead of her current sprite/icon
                                                //Copy an NPC's object data into our NPC clipboard
                                                if variable_instance_exists(instance_duplicate,"npc_direction")
                                                    {
                                                        npc_clipboard_dialog_string_p1 = instance_duplicate.girls_dialog_string_p1
                                                        npc_clipboard_dialog_string_p2 = instance_duplicate.girls_dialog_string_p2
                                                        npc_clipboard_lilac_string_p1  = instance_duplicate.lilac_dialog_string_p1
                                                        npc_clipboard_lilac_string_p2  = instance_duplicate.lilac_dialog_string_p2
                                                        npc_clipboard_carol_string_p1  = instance_duplicate.carol_dialog_string_p1
                                                        npc_clipboard_carol_string_p2  = instance_duplicate.carol_dialog_string_p2
                                                        npc_clipboard_milla_string_p1  = instance_duplicate.milla_dialog_string_p1
                                                        npc_clipboard_milla_string_p2  = instance_duplicate.milla_dialog_string_p2
                                                        npc_clipboard_dialog_spade_p1  = instance_duplicate.spade_dialog_string_p1
                                                        npc_clipboard_dialog_spade_p2  = instance_duplicate.spade_dialog_string_p2
                                                        npc_clipboard_dialog_emotion_p1 = instance_duplicate.npc_dialog_emotion_p1
                                                        npc_clipboard_dialog_emotion_p2 = instance_duplicate.npc_dialog_emotion_p2
                                                        npc_clipboard_dialog_direction = instance_duplicate.npc_direction
                                                        scr_set_message("NPC copied! Clipboard updated!")
                                                        npc_clipboard_dialog_active = 1
                                                    }
                                                if instance_duplicate.object_index = obj_shop_milla
                                                    user_tile_selected = spr_potion_shop_spawn_point;
                                                //Reset angle rotation for freshly-copied objects
                                                item_rotate_angle = 0
                                                item_rotate_allowed = scr_set_check_item_rotate(user_tile_selected)
                                            }
                                        else
                                            {
                                                if use_tile_switching_mode = 1
                                                    scr_set_message("Logic nodes cannot be copied!")
                                            }
                                        //Don't let the player get access to the 2D logic controller
                                        if (user_tile_selected = spr_loop_tile_logic) user_tile_selected = spr_loop_logic;
                                        if (use_tile_switching_mode = 1 and user_cursor_display_mode = 0 and instance_duplicate != noone)
                                            {
                                                audio_play_sound(character_parry,50,false)
                                                scr_set_message("Cannot copy objects while holding a tile!");
                                            }
                                    }
                            }

                        //Scan For Tiles That The Player Can Move
                        var o = tile_layer_find(user_layer_selected,use_cursor_x,use_cursor_y);

                        //Scan for objects to move
                        var instance_move = instance_position(use_cursor_x,use_cursor_y,obj_delete_parent);

                        if use_tile_switching_mode = 0
                            {
                                //Change Placement Mode If There Is A Tile Underneath The Cursor
                                if (tile_exists(o) or instance_exists(instance_move)) user_place_mode = 1;
                
                                if (!instance_exists(instance_move) and !tile_exists(o)) or (user_cursor_mode = 1)
                                    user_place_mode = 0;
                            }
        
                        //Force Placement Mode To Ignore Objects While In Manual Placement Mode
                        if use_tile_switching_mode = 1
                            {
                                if user_cursor_display_mode = 0 and tile_exists(o) user_place_mode = 1;
                                if user_cursor_display_mode = 1 and instance_exists(instance_move) user_place_mode = 2;
                                if !instance_exists(instance_move) and !tile_exists(o) user_place_mode = 0;
                            }

                        //Move The Tile If The Player Has Clicked On It In "Move" Mode
                        if (mouse_check_button_pressed(joy_mouse_button_left) or use_put_here = 1)
                        and use_tile_menu_cool_down = 0 and use_delete = 0 and side_bar_allow = 0
                        and ((tile_exists(o) and !instance_exists(instance_move)) or (use_tile_switching_mode = 1 and user_place_mode = 1 and tile_exists(o)))
                            {
                                //Collect background ID of the tile
                                var tile_scanner_ID = tile_get_background(o);

                                //Check for exceptional tiles the editor should be ignoring (Such as object-specific flag tiles)
                                var tile_scanner_IDs_exceptional_tiles = scr_check_layer_surface(tile_scanner_ID)

                                //Create exceptions for specific slope tiles
                                var tile_scanner_IDs_exceptional_slope_tiles = 0;
                                var tile_scanner_result = scr_set_check_exceptional_slope_tiles(tile_scanner_ID);
                                if tile_scanner_result = 1
                                    {
                                        tile_scanner_IDs_exceptional_tiles = 1
                                        tile_scanner_IDs_exceptional_slope_tiles = 1
                                    }

                                //Perform rotation validation check for the item we picked up
                                item_rotate_angle = 0
                                item_rotate_allowed = 0

                                //Check for if we've clicked inside the corners of the tile or not
                                var tile_scanner_IDs_corners = 0;

                                //Override tile detection if it is a tile that shouldn't be tiled
                                if not (user_layer_selected = surface_slopes or user_layer_selected = surface_modifiers
                                or user_layer_selected = surface_enemy_flags or user_layer_selected = surface_flags)
                                or tile_scanner_IDs_exceptional_slope_tiles = 1
                                    {
                                        //Top-right corner
                                        if  use_cursor_x &gt;= tile_get_x(o)+tile_get_width(o)-12
                                        and use_cursor_y &lt;= tile_get_y(o)+12
                                            {
                                                use_corner_box = 1;
                                                use_corner_box_id = o;
                                                use_corner_box_bottom_left_x = tile_get_x(o)
                                                use_corner_box_bottom_left_y = tile_get_y(o)+tile_get_height(o)
                                                use_corner_box_top_right_x = user_grid_snap_x
                                                use_corner_box_top_right_y = user_grid_snap_y
                                                tile_scanner_IDs_corners = 1
                                            }
                                        //Bottom-right corner
                                        if  use_cursor_x &gt;= tile_get_x(o)+tile_get_width(o)-12
                                        and use_cursor_y &gt;= tile_get_y(o)+tile_get_height(o)-12
                                            {
                                                use_corner_box = 2;
                                                use_corner_box_id = o;
                                                use_corner_box_bottom_left_x = tile_get_x(o)
                                                use_corner_box_bottom_left_y = tile_get_y(o)
                                                use_corner_box_top_right_x = user_grid_snap_x
                                                use_corner_box_top_right_y = user_grid_snap_y
                                                tile_scanner_IDs_corners = 1
                                            }
                                        //Bottom-left corner
                                        if  use_cursor_x &lt;= tile_get_x(o)+12
                                        and use_cursor_y &gt;= tile_get_y(o)+tile_get_height(o)-12
                                            {
                                                use_corner_box = 3;
                                                use_corner_box_id = o;
                                                use_corner_box_bottom_left_x = tile_get_x(o)+tile_get_width(o)
                                                use_corner_box_bottom_left_y = tile_get_y(o)
                                                use_corner_box_top_right_x = user_grid_snap_x
                                                use_corner_box_top_right_y = user_grid_snap_y
                                                tile_scanner_IDs_corners = 1
                                            }
                                        //Top-left corner
                                        if  use_cursor_x &lt;= tile_get_x(o)+12
                                        and use_cursor_y &lt;= tile_get_y(o)+12
                                            {
                                                use_corner_box = 4;
                                                use_corner_box_id = o;
                                                use_corner_box_bottom_left_x = tile_get_x(o)+tile_get_width(o)
                                                use_corner_box_bottom_left_y = tile_get_y(o)+tile_get_height(o)
                                                use_corner_box_top_right_x = user_grid_snap_x
                                                use_corner_box_top_right_y = user_grid_snap_y
                                                tile_scanner_IDs_corners = 1
                                            }
                                    }
        
                                //If the exceptional tile scan returned positive, move any tiles found underneath the player's cursor
                                if tile_scanner_IDs_exceptional_tiles = 1 and tile_scanner_IDs_corners = 0
                                    {
                                        //user_tile_selected = tile_get_background(o)
                                        user_move_tile_ID = tile_get_background(o)
                                        tile_delete(o)
                                        user_place_mode = 0
                                        use_tile_menu_cool_down = 8
                                        user_cursor_display_mode = 0
                                        user_move_layer_ID = user_layer_selected
                                        scr_get_slope_offsets(user_move_tile_ID)
                                        scr_clear_zoom_level();
                                    }
                            }
                        //Move The Object If The Player Has Clicked On It In "Move" Mode
                        if (mouse_check_button_pressed(joy_mouse_button_left) or use_put_here = 1) and use_tile_menu_cool_down = 0
                        and ((use_tile_switching_mode = 0 and user_place_mode = 1 and use_tile_menu_cool_down = 0)
                        or (use_tile_switching_mode = 1 and user_place_mode = 2 and use_item_check_verified = 0)
                        or (use_tile_switching_mode = 1 and user_place_mode != 2 and user_layer_selected = -100000))
                        and use_delete = 0 and instance_exists(instance_move) and (side_bar_allow = 0)
                            {
                                var anim_id = scr_set_check_animated_tiles();
                                if scr_get_node_exceptions(instance_move) = 0
                                and anim_id != -1
                                    {
                                        var yes = 0;
                                        //Give enemies/items "mods", if we are holding a mod
                                        switch(user_tile_selected)
                                            {
                                                case spr_target:  {yes = 1; break;}
                                                case spr_keycard: {yes = 1; break;}
                                                case spr_mod_chip_alt_weapon:   {yes = 1; break;}
                                                case spr_mod_chip_speed:        {yes = 1; break;}
                                                case spr_mod_chip_health:       {yes = 1; break;}
                                                case spr_mod_chip_extra_large:  {yes = 1; break;}
                                                case spr_mod_chip_bomb:         {yes = 1; break;}
                                                case spr_mod_chip_spring:       {yes = 1; break;}
                                                case spr_mod_chip_detonate:     {yes = 1; break;}
                                            }
                                        if yes = 1
                                            {
                                                if instance_move.give_item = 1 and instance_move.item = 0
                                                    {
                                                        instance_move.item = user_tile_selected;
                                                        audio_play_sound(snd_switch,50,false);
                                                        use_confirm = 1;
                                                        if user_tile_selected = spr_mod_chip_health
                                                            {
                                                                var calculate_hearts_max = instance_move.heartmax*2;
                                                                var calculate_hearts = instance_move.hp_mod/2;
                                                                instance_move.heartmax = calculate_hearts_max
                                                                instance_move.heart = calculate_hearts_max
                                                                instance_move.hp_mod = calculate_hearts
                                                            }
                                                    }
                                            }
                                        //If enemies/items do not want "mods", move them instead
                                        if instance_move.give_item = 0
                                            {
                                                //Override Object Indexes with their appropriate spawn sprites, if their sprite indexes don't match
                                                //their sprites at-spawn
                                                user_cursor_display_mode = 1
                                                scr_get_copy_exceptions(instance_move)
                                                //Copy Milla's spawn icon instead of her current sprite/icon
                                                if instance_move.object_index = obj_shop_milla
                                                    user_tile_selected = spr_potion_shop_spawn_point;
                                                //Don't let the player get access to the 2D logic controller
                                                if (user_tile_selected = spr_loop_tile_logic) user_tile_selected = spr_loop_logic;
                                                //Set Grid Offsets For Certain Enemies
                                                if user_tile_selected = spr_fire_spitter {use_item_offset_y = -8; user_grid_offset_y = -8;}
                                                user_place_mode = 0
                                                use_tile_menu_cool_down = 8
                                                //Perform rotation validation check for the item we picked up
                                                item_rotate_angle = 0
                                                item_rotate_allowed = scr_set_check_item_rotate(user_tile_selected)
                                                instance_destroy(instance_move,true)
                                            }
                                    }
                                else
                                    {
                                        if use_tile_switching_mode = 1
                                            scr_set_message("Logic nodes cannot be moved!")
                                    }
                                //Display error message if objects were underneath the cursor while holding a tile
                                if  (mouse_check_button_pressed(joy_mouse_button_left) or use_put_here = 1)
                                and (use_tile_switching_mode = 1 and user_cursor_display_mode = 0 and instance_move != noone)
                                and (side_bar_allow = 0)
                                    {
                                        audio_play_sound(character_parry,50,false)
                                        scr_set_message("Cannot move objects while holding a tile!");
                                    }
                            }
                    }
            }
    }

if side_bar_allow = 1 and use_tile_menu_cool_down = 0 and use_file_menu = 0
    {
        if use_tile_menu = 0
            {
                //Check the sidebar's on-screen buttons
                if (mouse_check_button_pressed(joy_mouse_button_right) or use_delete = 1)
                    {
                        //Check the snap button
                        if  (device_mouse_x_to_gui(0) &gt;= 380 and device_mouse_y_to_gui(0) &gt;= 149
                        and  device_mouse_x_to_gui(0) &lt;= 408 and device_mouse_y_to_gui(0) &lt;= 162)
                            {
                                //Increment Current Grid Snap Size
                                user_grid_iteration -= 1
                                if user_grid_iteration &gt; 3 user_grid_iteration = 0;
                                if user_grid_iteration &lt; 0 user_grid_iteration = 3;
                                //Increment Current Grid Snap Size Based On Iteration Position
                                switch(user_grid_iteration)
                                    {
                                        case 0: {user_grid_snap = 1; use_grid_toggle_size = ui_grid_2px; break;}
                                        case 1: {user_grid_snap = 2; use_grid_toggle_size = ui_grid_2px; break;}
                                        case 2: {user_grid_snap = 4; use_grid_toggle_size = ui_grid_4px; break;}
                                        case 3: {user_grid_snap = 8; use_grid_toggle_size = ui_grid_8px; break;}
                                    }
                                //Play menu sound
                                audio_play_sound(pause_select,50,false)
                                //Trigger Highlighter
                                scr_set_highlighter(380,149,408,162)
                            }
                    }
                
                //Check the sidebar's on-screen buttons
                if (mouse_check_button_pressed(mb_middle) or use_copy = 1)
                    {
                        //Check the snap button
                        if  (device_mouse_x_to_gui(0) &gt;= 367 and device_mouse_y_to_gui(0) &gt;= 149
                        and  device_mouse_x_to_gui(0) &lt;= 408 and device_mouse_y_to_gui(0) &lt;= 162)
                            {
                                if use_grid_toggle_iterator = 0
                                    {
                                        audio_play_sound(character_parry,50,false)
                                        scr_set_message("Visual grid enabled")
                                        grid_visible = 1
                                    }
                                if use_grid_toggle_iterator = 1
                                    {
                                        audio_play_sound(character_parry,50,false)
                                        scr_set_message("Visual grid disabled")
                                        grid_visible = 0
                                    }
                                //Play menu sound
                                audio_play_sound(pause_select,50,false)
                                //Trigger Highlighter
                                scr_set_highlighter(367,149,408,162)
                                //Iterate Toggle
                                use_grid_toggle_iterator += 1
                                if use_grid_toggle_iterator &gt; 1 use_grid_toggle_iterator = 0;
                            }
                    }
            }
    }

//Close The Tile Menu With The Controller Or A Keyboard Hotkey
if use_new_tile = 1 and use_tile_menu_cool_down = 0 and use_tile_menu &gt; 0 and use_file_menu = 0
    {
        use_tile_menu = 0
        use_tile_menu_cool_down = 8
        //Play menu sound
        audio_play_sound(snd_turn_page,50,false)
    }

//Open The Tile Menu With The Controller Or A Keyboard Hotkey
if use_new_tile = 1 and use_tile_menu_cool_down = 0 and use_tile_menu = 0 and use_file_menu = 0
    {
        use_tile_menu = 1
        if !instance_exists(obj_tile_menu_transition)
            instance_create(0,0,obj_tile_menu_transition);
        use_tile_menu_cool_down = 8
        scr_change_page()
        //Play menu sound
        audio_play_sound(snd_turn_page,50,false)
    }

//Check the layer button
if ((use_layer_up = 1 and use_layer_down = 0) or (use_layer_down = 1 and use_layer_up = 0) and use_tile_menu_cool_down = 0)
    {
        if user_cursor_display_mode = 0
            {
                if use_tile_switching_mode = 1
                    {
                        //Increment Current Layer Depth Interation
                        if use_layer_up = 1 user_layer_iteration += 1;
                        if use_layer_down = 1 user_layer_iteration -= 1;
                        //Reset Current Layer Depth Iteration If We Are Beyond Its Boundaries
                        if user_layer_iteration &gt; 15 user_layer_iteration = 0;
                        if user_layer_iteration &lt; 0  user_layer_iteration = 15;
                        //Increment Current Layer Depth Based On Iteration Position
                        switch(user_layer_iteration)
                            {
                                case 0:  {user_layer_selected = 0; break;}
                                case 1:  {user_layer_selected = 1; break;}
                                case 2:
                                    {
                                        if use_layer_down = 1
                                            {
                                                user_layer_selected = 1; user_layer_iteration = 1;
                                            }
                                        if use_layer_up = 1
                                            {
                                                user_layer_selected = 100000; user_layer_iteration = 4; 
                                            }
                                        break;
                                    }
                                case 3: 
                                    {
                                        if use_layer_down = 1
                                            {
                                                user_layer_selected = 1; user_layer_iteration = 1;
                                            }
                                        if use_layer_up = 1
                                            {
                                                user_layer_selected = 100000; user_layer_iteration = 4; 
                                            }
                                        break;
                                    }
                                case 4:  {user_layer_selected = 100000; break;}
                                case 5:  {user_layer_selected = 4; break;}
                                case 6:  {user_layer_selected = 5; break;}
                                case 7:  {user_layer_selected = 6; break;}
                                case 8:  {user_layer_selected = 7; break;}
                                case 9:  {user_layer_selected = 8; break;}
                                case 10: {user_layer_selected = 9; break;}
                                case 11: {user_layer_selected = -5; break;}
                                case 12: {user_layer_selected = -4; break;}
                                case 13: {user_layer_selected = -3; break;}
                                case 14: {user_layer_selected = -2; break;}
                                case 15: {user_layer_selected = -1; break;}
                            }
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                    }
                else
                    {
                        //Display Error Message
                        scr_set_message("Cannot adjust layers while in auto-layer mode!")
                    }
            }
        else
            {
                //Display Error Message
                scr_set_message("Cannot adjust layer depth for objects!")
            }
    }

//Check the snap button
if use_snap_up = 1 and use_tile_menu_cool_down = 0
    {
        //Increment Current Grid Snap Size
        if use_snap_up = 1 user_grid_iteration += 1;
        if use_snap_down = 1 user_grid_iteration -= 1;
        if user_grid_iteration &gt; 3 user_grid_iteration = 0;
        if user_grid_iteration &lt; 0 user_grid_iteration = 3;
        //Increment Current Grid Snap Size Based On Iteration Position
        switch(user_grid_iteration)
            {
                case 0: {user_grid_snap = 1; break;}
                case 1: {user_grid_snap = 2; break;}
                case 2: {user_grid_snap = 4; break;}
                case 3: {user_grid_snap = 8; break;}
            }
        //Play menu sound
        audio_play_sound(pause_select,50,false)
    }

if user_cursor_mode = 0 and use_tile_menu = 0
    {
        //Prevent The Camera From Scrolling When The Cursor Is Over The Quit Button
        if not (device_mouse_x_to_gui(0) &gt; 357 and device_mouse_x_to_gui(0) &lt; 418
        and     device_mouse_y_to_gui(0) &gt; 4   and device_mouse_y_to_gui(0) &lt; 232)
            {
                if use_cursor_mode = 0
                    {
                        //Modify Camera's Position Based On Cursor's Current Position
                        if device_mouse_x_to_gui(0) &gt; 416 view_xview[view_port] += floor(use_zoom_scroll_speed); //Pan Right
                        if device_mouse_x_to_gui(0) &lt; 16  view_xview[view_port] -= floor(use_zoom_scroll_speed); //Pan Left
                        if device_mouse_y_to_gui(0) &gt; 224 view_yview[view_port] += floor(use_zoom_scroll_speed); //Pan Down
                        if device_mouse_y_to_gui(0) &lt; 16  view_yview[view_port] -= floor(use_zoom_scroll_speed); //Pan Up
        
                        //Do Not Allow The Cursor's X Position Beyond The Boundaries Of The Camera
                        if use_cursor_x &lt; view_xview[view_port] use_cursor_x = view_xview[view_port];
                        if use_cursor_x &gt; view_xview[view_port]+use_zoom_boundary_x-use_zoom_scroll_edge_lock use_cursor_x = view_xview[view_port]+use_zoom_boundary_x-use_zoom_scroll_edge_lock;
                        //Do Not Allow The Cursor's Y Position Beyond The Boundaries Of The Camera
                        if use_cursor_y &lt; view_yview[view_port] use_cursor_y = view_yview[view_port];
                        if use_cursor_y &gt; view_yview[view_port]+use_zoom_boundary_y-use_zoom_scroll_edge_lock use_cursor_y = view_yview[view_port]+use_zoom_boundary_y-use_zoom_scroll_edge_lock;
                    }
                else
                    {
                        //Modify Camera's Position Based On Cursor's Current Position
                        if use_cursor_x &gt; view_xview[view_port]+use_zoom_boundary_x-use_zoom_scroll_border {view_xview[view_port] += floor(use_zoom_scroll_speed); use_cursor_x += floor(use_zoom_scroll_speed);}           //Pan Right
                        if use_cursor_x &lt; view_xview[view_port]+use_zoom_scroll_border                               {view_xview[view_port] -= floor(use_zoom_scroll_speed); use_cursor_x -= floor(use_zoom_scroll_speed);} //Pan Left
                        if use_cursor_y &gt; view_yview[view_port]+use_zoom_boundary_y-use_zoom_scroll_border {view_yview[view_port] += floor(use_zoom_scroll_speed); use_cursor_y += floor(use_zoom_scroll_speed);}           //Pan Down
                        if use_cursor_y &lt; view_yview[view_port]+use_zoom_scroll_border                               {view_yview[view_port] -= floor(use_zoom_scroll_speed); use_cursor_y -= floor(use_zoom_scroll_speed);} //Pan Up

                        //Do Not Allow The Cursor's X Position Beyond The Boundaries Of The Camera
                        if use_cursor_x &lt; view_xview[view_port] use_cursor_x = view_xview[view_port];
                        if use_cursor_x &gt; view_xview[view_port]+use_zoom_boundary_x-use_zoom_scroll_edge_lock use_cursor_x = view_xview[view_port]+use_zoom_boundary_x-use_zoom_scroll_edge_lock;
                        //Do Not Allow The Cursor's Y Position Beyond The Boundaries Of The Camera
                        if use_cursor_y &lt; view_yview[view_port] use_cursor_y = view_yview[view_port];
                        if use_cursor_y &gt; view_yview[view_port]+use_zoom_boundary_y-use_zoom_scroll_edge_lock use_cursor_y = view_yview[view_port]+use_zoom_boundary_y-use_zoom_scroll_edge_lock;
                    }
            }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mouse Hold Events 

//--------------------------------------Mouse Hold Events--------------------------------------//

//Check for events that demand mouse/key/button hold inputs
if (mouse_check_button(joy_mouse_button_left) or use_put_here &gt; 0) and use_delete = 0
    {

        //Create exceptions for specific slope tiles
        var tile_scanner_IDs_exceptional_slope_tiles = 0;
        if tile_exists(use_corner_box_id)
            {
                var tile_scanner_bg_ID = tile_get_background(use_corner_box_id);
                var tile_scanner_result = scr_set_check_exceptional_slope_tiles(tile_scanner_bg_ID);
                if tile_scanner_result = 1
                    {
                        tile_scanner_IDs_exceptional_slope_tiles = 1
                    }
            }
        if ((user_layer_selected = surface_slopes and tile_scanner_IDs_exceptional_slope_tiles = 0)
        or user_layer_selected = surface_enemy_flags or user_layer_selected = surface_flags)
            use_corner_box = 0;
        //Repeat tile based on defined mouse boundary box
        if use_corner_box &gt; 0
            {
                use_tile_width  = background_get_width(user_tile_selected)
                use_tile_height = background_get_height(user_tile_selected)

                use_corner_box_top_right_x = user_grid_snap_x
                use_corner_box_top_right_y = user_grid_snap_y
                use_tile_menu_cool_down = 16

                //Invoke dragging of tiles earlier if inputs are held
                if use_corner_box &gt;= 5 use_corner_box += 1;
                if use_corner_box = 13 use_corner_box = 1;

                //Calculate if we should change our tile repeating orientation
                //Top-right
                if  use_corner_box_top_right_x &gt; use_corner_box_bottom_left_x
                and use_corner_box_top_right_y &lt; use_corner_box_bottom_left_y
                    {
                        use_corner_box = 1;
                        use_corner_box_bottom_left_x = user_place_start_x
                        use_corner_box_bottom_left_y = user_place_start_y+use_tile_height
                        use_corner_box_top_right_x = user_grid_snap_x
                        use_corner_box_top_right_y = user_grid_snap_y
                    }
                //Bottom-right
                if  use_corner_box_top_right_x &gt; use_corner_box_bottom_left_x
                and use_corner_box_top_right_y &gt; use_corner_box_bottom_left_y
                    {
                        use_corner_box = 2;
                        use_corner_box_bottom_left_x = user_place_start_x
                        use_corner_box_bottom_left_y = user_place_start_y
                        use_corner_box_top_right_x = user_grid_snap_x
                        use_corner_box_top_right_y = user_grid_snap_y
                    }
                //Bottom-left
                if  use_corner_box_top_right_x &lt; use_corner_box_bottom_left_x
                and use_corner_box_top_right_y &gt; use_corner_box_bottom_left_y
                    {
                        use_corner_box = 3;
                        use_corner_box_bottom_left_x = user_place_start_x+use_tile_width
                        use_corner_box_bottom_left_y = user_place_start_y
                        use_corner_box_top_right_x = user_grid_snap_x
                        use_corner_box_top_right_y = user_grid_snap_y
                    }
                //Top-left
                if  use_corner_box_top_right_x &lt; use_corner_box_bottom_left_x
                and use_corner_box_top_right_y &lt; use_corner_box_bottom_left_y
                    {
                        use_corner_box = 4;
                        use_corner_box_bottom_left_x = user_place_start_x+use_tile_width
                        use_corner_box_bottom_left_y = user_place_start_y+use_tile_height
                        use_corner_box_top_right_x = user_grid_snap_x
                        use_corner_box_top_right_y = user_grid_snap_y
                    }
            }

        //Drawing Tools
        if use_file_menu = 2 and device_mouse_x_to_gui(0) &lt; 314+u_elements
            {
                if user_pen_mode = spr_drawing_cursor
                    {
                        //If the pen size is at defaults, (1px) then simply place a tile
                        if mouse_check_button_pressed(joy_mouse_button_left) or use_put_here = 1
                            {
                                mouse_previous_x = use_cursor_x;
                                mouse_previous_y = use_cursor_y;
                            }

                        scr_draw_scootles(mouse_previous_x,mouse_previous_y,use_cursor_x,use_cursor_y,0)

                        mouse_previous_x = use_cursor_x;
                        mouse_previous_y = use_cursor_y;
                    }
                if user_pen_mode = spr_erasing_cursor
                    {
                        if mouse_check_button_pressed(joy_mouse_button_left) or use_put_here = 1
                            {
                                mouse_previous_x = use_cursor_x;
                                mouse_previous_y = use_cursor_y;
                            }

                        scr_draw_scootles(mouse_previous_x,mouse_previous_y,use_cursor_x,use_cursor_y,user_pen_size)

                        mouse_previous_x = use_cursor_x;
                        mouse_previous_y = use_cursor_y;
                    }
                if user_pen_mode = spr_line_tool
                or user_pen_mode = spr_rectangle_tool
                or user_pen_mode = spr_circle_tool
                    {
                        user_line_tool_active += 1
                        if user_line_tool_active = 1
                            {
                                user_line_tool_x1 = use_cursor_x
                                user_line_tool_y1 = use_cursor_y
                            }
                    }
            }

        //Moving Platform Placer
        if use_fof = 1
            {
                if user_tile_selected = spr_platform_modifier_horizontal
                or user_tile_selected = spr_platform_water_horizontal
                    {
                        user_draw_path_x_1 = use_cursor_x
                        user_draw_path_y_1 = user_draw_path_origin_y
        
                        user_draw_path_x_2 = user_draw_path_origin_x
                        user_draw_path_y_2 = user_draw_path_origin_y
                    }
                if user_tile_selected = spr_platform_modifier_vertical
                or user_tile_selected = spr_platform_water_vertical
                    {
                        user_draw_path_x_1 = user_draw_path_origin_x
                        user_draw_path_y_1 = use_cursor_y
        
                        user_draw_path_x_2 = user_draw_path_origin_x
                        user_draw_path_y_2 = user_draw_path_origin_y
                    }
            }
    }

//Disable mouse/key/button hold events, when inputs are no longer provided
if mouse_check_button_released(joy_mouse_button_left) or (gamepad_button_check_released(parent.joy_modern_id,parent.joy_put_here))
or (keyboard_check_released(key_put_here))
    {
        //Check for animated tiles first, then return their animator object indexes
        //if our selected tile is animated
        scr_set_check_animated_tiles()
        if use_corner_box &gt;= 5 use_corner_box = 0;
        if use_corner_box &gt; 0 and use_corner_box &lt; 5
            {
                var use_corner_counter_x = 0;
                var use_corner_counter_y = 0;
                use_corner_width  = abs(use_corner_box_bottom_left_x - use_corner_box_top_right_x)
                use_corner_height = abs(use_corner_box_bottom_left_y - use_corner_box_top_right_y)
                use_tile_width  = background_get_width(user_tile_selected)
                use_tile_height = background_get_height(user_tile_selected)

                //How many tiles can we create?
                use_corner_width_result  = floor(use_corner_width / use_tile_width);
                use_corner_height_result = floor(use_corner_height / use_tile_height);

                //Top-right corner
                if use_corner_box = 1
                    {
                        while(use_corner_counter_y &lt; use_corner_height_result)
                            {
                                if array_length_1d(tile_get_ids()) &gt; user_tile_limit_warning_value break;
                                var corner_tile_id = tile_add(user_tile_selected,0,0,use_tile_width,use_tile_height,
                                use_corner_box_bottom_left_x+(use_tile_width*use_corner_counter_x),
                                use_corner_box_bottom_left_y-use_tile_height-(use_tile_height*use_corner_counter_y),
                                user_layer_selected);
                                if object_exists(user_anim_tile_object)
                                    {
                                        var anim_tile_id = instance_create(use_corner_box_bottom_left_x+(use_tile_width*use_corner_counter_x),
                                        use_corner_box_bottom_left_y-use_tile_height-(use_tile_height*use_corner_counter_y),
                                        user_anim_tile_object);

                                        anim_tile_id.tile_id = corner_tile_id
                                        tile_set_alpha(corner_tile_id,0)
                                        anim_tile_id.depth = user_layer_selected-1
                                    }
                                use_corner_counter_x += 1;
                                if (use_corner_counter_x &gt; use_corner_width_result)
                                    {
                                        use_corner_counter_x = 0;
                                        use_corner_counter_y += 1;
                                    }
                                //Log Undo History
                                //scr_record_tile_undo(tile_get_x(added_tile),tile_get_y(added_tile),added_tile,tile_get_background(added_tile),
                                //tile_get_xscale(added_tile),tile_get_yscale(added_tile),tile_get_alpha(added_tile),tile_get_depth(added_tile),1)
                            }
                    }
                //Bottom-right corner
                if use_corner_box = 2
                    {
                        while(use_corner_counter_y &lt; use_corner_height_result)
                            {
                                if array_length_1d(tile_get_ids()) &gt; user_tile_limit_warning_value break;
                                var corner_tile_id = tile_add(user_tile_selected,0,0,use_tile_width,use_tile_height,
                                use_corner_box_bottom_left_x+(use_tile_width*use_corner_counter_x),
                                use_corner_box_bottom_left_y+(use_tile_height*use_corner_counter_y),
                                user_layer_selected)
                                if object_exists(user_anim_tile_object)
                                    {
                                        var anim_tile_id = instance_create(use_corner_box_bottom_left_x+(use_tile_width*use_corner_counter_x),
                                        use_corner_box_bottom_left_y+(use_tile_height*use_corner_counter_y),
                                        user_anim_tile_object);

                                        anim_tile_id.tile_id = corner_tile_id
                                        tile_set_alpha(corner_tile_id,0)
                                        anim_tile_id.depth = user_layer_selected-1
                                    }
                                use_corner_counter_x += 1;
                                if (use_corner_counter_x &gt; use_corner_width_result)
                                    {
                                        use_corner_counter_x = 0;
                                        use_corner_counter_y += 1;
                                    }
                            }
                    }
                //Bottom-left corner
                if use_corner_box = 3
                    {
                        while(use_corner_counter_y &lt; use_corner_height_result)
                            {
                                if array_length_1d(tile_get_ids()) &gt; user_tile_limit_warning_value break;
                                var corner_tile_id = tile_add(user_tile_selected,0,0,use_tile_width,use_tile_height,
                                use_corner_box_bottom_left_x-use_tile_width-(use_tile_width*use_corner_counter_x),
                                use_corner_box_bottom_left_y+(use_tile_height*use_corner_counter_y),
                                user_layer_selected)
                                if object_exists(user_anim_tile_object)
                                    {
                                        var anim_tile_id = instance_create(use_corner_box_bottom_left_x-use_tile_width-(use_tile_width*use_corner_counter_x),
                                        use_corner_box_bottom_left_y+(use_tile_height*use_corner_counter_y),
                                        user_anim_tile_object);

                                        anim_tile_id.tile_id = corner_tile_id
                                        tile_set_alpha(corner_tile_id,0)
                                        anim_tile_id.depth = user_layer_selected-1
                                    }
                                use_corner_counter_x += 1;
                                if (use_corner_counter_x &gt; use_corner_width_result)
                                    {
                                        use_corner_counter_x = 0;
                                        use_corner_counter_y += 1;
                                    }
                            }
                    }
                //Top-left corner
                if use_corner_box = 4
                    {
                        while(use_corner_counter_y &lt; use_corner_height_result)
                            {
                                if array_length_1d(tile_get_ids()) &gt; user_tile_limit_warning_value break;
                                var corner_tile_id = tile_add(user_tile_selected,0,0,use_tile_width,use_tile_height,
                                use_corner_box_bottom_left_x-use_tile_width-(use_tile_width*use_corner_counter_x),
                                use_corner_box_bottom_left_y-use_tile_height-(use_tile_height*use_corner_counter_y),
                                user_layer_selected)
                                if object_exists(user_anim_tile_object)
                                    {
                                        var anim_tile_id = instance_create(use_corner_box_bottom_left_x-use_tile_width-(use_tile_width*use_corner_counter_x),
                                        use_corner_box_bottom_left_y-use_tile_height-(use_tile_height*use_corner_counter_y),
                                        user_anim_tile_object);

                                        anim_tile_id.tile_id = corner_tile_id
                                        tile_set_alpha(corner_tile_id,0)
                                        anim_tile_id.depth = user_layer_selected-1
                                    }
                                use_corner_counter_x += 1;
                                if (use_corner_counter_x &gt; use_corner_width_result)
                                    {
                                        use_corner_counter_x = 0;
                                        use_corner_counter_y += 1;
                                    }
                            }
                    }
                //Delete duplicate tile originally spawned by the place tool
                if tile_exists(added_tile)
                    {
                        tile_delete(added_tile)
                        added_tile = -1
                    }

                if array_length_1d(tile_get_ids()) &gt; user_tile_limit_warning_value
                    scr_set_message("Tile limit reached!  Remove tiles to optimize.");
                else
                    audio_play_sound(snd_switch,50,false);
                //Disable defined boundary box
                use_corner_box = 0
            }

        //Drawing Tools
        if user_line_tool_active &gt;= 1
            {
                if user_pen_mode = spr_line_tool
                    scr_draw_scootles(user_line_tool_x1,user_line_tool_y1,use_cursor_x,use_cursor_y,0);

                var pen_distance = point_distance(user_line_tool_x1,user_line_tool_y1,use_cursor_x,use_cursor_y);
                if user_pen_mode = spr_circle_tool and pen_distance &lt; 64
                    {
                        //Set Rotation Axis
                        var pen_angle = 0;
                        var pen_x = user_line_tool_x1 + lengthdir_x(pen_distance,pen_angle);
                        var pen_y = user_line_tool_y1 + lengthdir_y(pen_distance,pen_angle);
                        while(pen_angle &lt;= 360)
                            {
                                pen_angle += 1
                                pen_x = user_line_tool_x1 + lengthdir_x(pen_distance,pen_angle)
                                pen_y = user_line_tool_y1 + lengthdir_y(pen_distance,pen_angle)
                                //var pen_tile_id = tile_layer_find(surface_paint,pen_x,pen_y);
                                //if pen_tile_id != -1 tile_delete(pen_tile_id);
                                if array_length_1d(tile_get_ids()) &gt; user_tile_limit_warning_value break;
                                tile_add(user_pen_color,0,0,1,1,pen_x,pen_y,surface_paint);
                            }
                        if array_length_1d(tile_get_ids()) &gt;= user_tile_limit_warning_value scr_set_message("Tile limit reached!  Remove tiles to optimize.");
                    }
                if user_pen_mode = spr_rectangle_tool and pen_distance &lt; 64
                    {
                        var pen_x = user_line_tool_x1;
                        var pen_y = user_line_tool_y1;
                        var pen_direction = 0;
                        var pen_compass = 0;
                        var pen_x_1 = user_line_tool_x1;
                        var pen_y_1 = user_line_tool_y1;
                        var pen_x_2 = use_cursor_x;
                        var pen_y_2 = use_cursor_y;
                        //Determine direction of drawing
                        if use_cursor_x &lt; user_line_tool_x1
                            {
                                pen_x = use_cursor_x;
                                pen_x_1 = use_cursor_x;
                                pen_x_2 = user_line_tool_x1;
                            }
                        if use_cursor_y &lt; user_line_tool_y1
                            {
                                pen_y = use_cursor_y;
                                pen_y_1 = use_cursor_y;
                                pen_y_2 = user_line_tool_y1;
                            }
                        while(pen_x)
                            {
                                if array_length_1d(tile_get_ids()) &gt; user_tile_limit_warning_value break;
                                tile_add(user_pen_color,0,0,1,1,pen_x,pen_y,surface_paint);
                                switch(pen_direction)
                                    {
                                        case 0: {pen_x += 1; break;}
                                        case 1: {pen_y += 1; break;}
                                        case 2: {pen_x -= 1; break;}
                                        case 3: {pen_y -= 1; break;}
                                    }
                                if pen_x &gt;= pen_x_2 and pen_direction = 0 pen_direction = 1;
                                if pen_y &gt;= pen_y_2 and pen_direction = 1 pen_direction = 2;
                                if pen_x &lt;= pen_x_1 and pen_direction = 2 pen_direction = 3;
                                if pen_y &lt;= pen_y_1 and pen_direction = 3 break;
                            }
                        if array_length_1d(tile_get_ids()) &gt;= user_tile_limit_warning_value scr_set_message("Tile limit reached!  Remove tiles to optimize.");
                    }
                user_line_tool_active = 0
            }

        //Moving Platform Placer
        if use_fof = 1
            {
                if user_tile_selected = spr_platform_modifier_horizontal
                    {
                        var temp_diff = abs(abs(user_draw_path_x_1)-abs(user_draw_path_x_2));
                        if temp_diff &gt; 48
                            {
                                if user_draw_path_x_1 &lt; user_draw_path_x_2
                                    {
                                        tile_add(tile_reverse_course_32,0,0,background_get_width(tile_reverse_course_32),background_get_height(tile_reverse_course_32),user_draw_path_x_1-32,user_draw_path_y_1-16,surface_flags)
                                        tile_add(tile_reverse_course_32,0,0,background_get_width(tile_reverse_course_32),background_get_height(tile_reverse_course_32),user_draw_path_x_2-32,user_draw_path_y_1-16,surface_flags)
        
                                        tile_add(mu_fof_11,0,0,background_get_width(mu_fof_3),background_get_height(mu_fof_3),
                                        user_draw_path_x_1+(abs(user_draw_path_x_1 - user_draw_path_x_2)/2)-24,
                                        user_draw_path_y_1-20,surface_slopes)
                                        instance_create(user_draw_path_x_1+(abs(user_draw_path_x_1 - user_draw_path_x_2)/2)-24,user_draw_path_y_1-16,obj_platform_hor)
                                        audio_play_sound(snd_switch,50,false)
                                    }
                                if user_draw_path_x_1 &gt; user_draw_path_x_2
                                    {
                                        tile_add(tile_reverse_course_32,0,0,background_get_width(tile_reverse_course_32),background_get_height(tile_reverse_course_32),user_draw_path_x_1+32,user_draw_path_y_1-16,surface_flags)
                                        tile_add(tile_reverse_course_32,0,0,background_get_width(tile_reverse_course_32),background_get_height(tile_reverse_course_32),user_draw_path_x_2-32,user_draw_path_y_1-16,surface_flags)
            
                                        tile_add(mu_fof_11,0,0,background_get_width(mu_fof_3),background_get_height(mu_fof_3),
                                        user_draw_path_x_1-(abs(user_draw_path_x_1 - user_draw_path_x_2)/2)-24,
                                        user_draw_path_y_1-20,surface_slopes)
                                        instance_create(user_draw_path_x_1-(abs(user_draw_path_x_1 - user_draw_path_x_2)/2)-24,user_draw_path_y_1-16,obj_platform_hor)
                                        audio_play_sound(snd_switch,50,false)
                                    }
                            }
                        else
                            scr_set_message("Defined path must be greater than 48 pixels");
                    }
                if user_tile_selected = spr_platform_modifier_vertical
                    {
                        var temp_diff = abs(abs(user_draw_path_y_1)-abs(user_draw_path_y_2));
                        if temp_diff &gt; 48
                            {
                                if user_draw_path_y_1 &lt; user_draw_path_y_2
                                    {
                                        tile_add(tile_reverse_course_32,0,0,background_get_width(tile_reverse_course_32),background_get_height(tile_reverse_course_32),user_draw_path_x_1-16,user_draw_path_y_1-16,surface_flags)
                                        tile_add(tile_reverse_course_32,0,0,background_get_width(tile_reverse_course_32),background_get_height(tile_reverse_course_32),user_draw_path_x_2-16,user_draw_path_y_2-16,surface_flags)
        
                                        tile_add(mu_fof_11,0,0,background_get_width(mu_fof_3),background_get_height(mu_fof_3),
                                        user_draw_path_x_1-24,
                                        user_draw_path_y_1+(abs(user_draw_path_y_1 - user_draw_path_y_2)/2)-20,surface_slopes)
                                        instance_create(user_draw_path_x_1-16,user_draw_path_y_1+(abs(user_draw_path_y_1 - user_draw_path_y_2)/2)-16,obj_platform_ver)
                                        audio_play_sound(snd_switch,50,false)
                                    }
                                if user_draw_path_y_1 &gt; user_draw_path_y_2
                                    {
                                        tile_add(tile_reverse_course_32,0,0,background_get_width(tile_reverse_course_32),background_get_height(tile_reverse_course_32),user_draw_path_x_1-16,user_draw_path_y_1-16,surface_flags)
                                        tile_add(tile_reverse_course_32,0,0,background_get_width(tile_reverse_course_32),background_get_height(tile_reverse_course_32),user_draw_path_x_2-16,user_draw_path_y_2-16,surface_flags)
        
                                        tile_add(mu_fof_11,0,0,background_get_width(mu_fof_3),background_get_height(mu_fof_3),
                                        user_draw_path_x_1-24,
                                        user_draw_path_y_1-(abs(user_draw_path_y_1 - user_draw_path_y_2)/2)-20,surface_slopes)
                                        instance_create(user_draw_path_x_1-16,user_draw_path_y_1-(abs(user_draw_path_y_1 - user_draw_path_y_2)/2)-16,obj_platform_ver)
                                        audio_play_sound(snd_switch,50,false)
                                    }
                            }
                        else
                            scr_set_message("Defined path must be greater than 48 pixels");
                    }
                if user_tile_selected = spr_platform_water_horizontal
                    {
                        var temp_diff = abs(abs(user_draw_path_x_1)-abs(user_draw_path_x_2));
                        if temp_diff &gt; 48
                            {
                                if user_draw_path_x_1 &lt; user_draw_path_x_2
                                    {
                                        tile_add(tile_reverse_course_32,0,0,background_get_width(tile_reverse_course_32),background_get_height(tile_reverse_course_32),user_draw_path_x_1-32,user_draw_path_y_1-16,surface_flags)
                                        tile_add(tile_reverse_course_32,0,0,background_get_width(tile_reverse_course_32),background_get_height(tile_reverse_course_32),user_draw_path_x_2-32,user_draw_path_y_1-16,surface_flags)
        
                                        var water_cube_instance_id = instance_create(user_draw_path_x_1+(abs(user_draw_path_x_1 - user_draw_path_x_2)/2)-24,user_draw_path_y_1-20,obj_water_cube);
                                        var water_cube_platform_id = instance_create(user_draw_path_x_1+(abs(user_draw_path_x_1 - user_draw_path_x_2)/2)-24,user_draw_path_y_1-16,obj_water_platform_hor);
                                        water_cube_platform_id.instance_ID = water_cube_instance_id;
                                        audio_play_sound(snd_switch,50,false)
                                    }
                                if user_draw_path_x_1 &gt; user_draw_path_x_2
                                    {
                                        tile_add(tile_reverse_course_32,0,0,background_get_width(tile_reverse_course_32),background_get_height(tile_reverse_course_32),user_draw_path_x_1+32,user_draw_path_y_1-16,surface_flags)
                                        tile_add(tile_reverse_course_32,0,0,background_get_width(tile_reverse_course_32),background_get_height(tile_reverse_course_32),user_draw_path_x_2-32,user_draw_path_y_1-16,surface_flags)
            
                                        var water_cube_instance_id = instance_create(user_draw_path_x_1-(abs(user_draw_path_x_1 - user_draw_path_x_2)/2)-24,user_draw_path_y_1-20,obj_water_cube);
                                        var water_cube_platform_id = instance_create(user_draw_path_x_1-(abs(user_draw_path_x_1 - user_draw_path_x_2)/2)-24,user_draw_path_y_1-16,obj_water_platform_hor);
                                        water_cube_platform_id.instance_ID = water_cube_instance_id;
                                        audio_play_sound(snd_switch,50,false)
                                    }
                            }
                        else
                            scr_set_message("Defined path must be greater than 48 pixels");
                    }
                if user_tile_selected = spr_platform_water_vertical
                    {
                        var temp_diff = abs(abs(user_draw_path_y_1)-abs(user_draw_path_y_2));
                        if temp_diff &gt; 48
                            {
                                if user_draw_path_y_1 &lt; user_draw_path_y_2
                                    {
                                        tile_add(tile_reverse_course_32,0,0,background_get_width(tile_reverse_course_32),background_get_height(tile_reverse_course_32),user_draw_path_x_1-16,user_draw_path_y_1-16,surface_flags)
                                        tile_add(tile_reverse_course_32,0,0,background_get_width(tile_reverse_course_32),background_get_height(tile_reverse_course_32),user_draw_path_x_2-16,user_draw_path_y_2-16,surface_flags)
        
                                        instance_create(user_draw_path_x_1-24,user_draw_path_y_1+(abs(user_draw_path_y_1 - user_draw_path_y_2)/2)-20,obj_water_cube)
                                        instance_create(user_draw_path_x_1-16,user_draw_path_y_1+(abs(user_draw_path_y_1 - user_draw_path_y_2)/2)-16,obj_water_platform_ver)
                                        audio_play_sound(snd_switch,50,false)
                                    }
                                if user_draw_path_y_1 &gt; user_draw_path_y_2
                                    {
                                        tile_add(tile_reverse_course_32,0,0,background_get_width(tile_reverse_course_32),background_get_height(tile_reverse_course_32),user_draw_path_x_1-16,user_draw_path_y_1-16,surface_flags)
                                        tile_add(tile_reverse_course_32,0,0,background_get_width(tile_reverse_course_32),background_get_height(tile_reverse_course_32),user_draw_path_x_2-16,user_draw_path_y_2-16,surface_flags)
        
                                        instance_create(user_draw_path_x_1-24,user_draw_path_y_1-(abs(user_draw_path_y_1 - user_draw_path_y_2)/2)-20,obj_water_cube)
                                        instance_create(user_draw_path_x_1-16,user_draw_path_y_1-(abs(user_draw_path_y_1 - user_draw_path_y_2)/2)-16,obj_water_platform_ver)
                                        audio_play_sound(snd_switch,50,false)
                                    }
                            }
                        else
                            scr_set_message("Defined path must be greater than 48 pixels");
                    }
                use_fof = 0
            }
        if background_exists(user_move_tile_ID)
                {
                    scr_get_slope_offsets(user_move_tile_ID)
                    tile_add(user_move_tile_ID,0,0,background_get_width(user_move_tile_ID),background_get_height(user_move_tile_ID),
                    user_grid_snap_x+user_move_offset_x,user_grid_snap_y+user_move_offset_y,user_move_layer_ID)
                    //Place 2D tile logic controller, if it has double-sided collisions
                    var yes = 0;
                    yes = scr_set_check_slope_tiles(user_tile_selected);
                    if yes = 1 instance_create(user_grid_snap_x,user_grid_snap_y,obj_2D_tile_logic);
                    user_move_tile_ID = -1
                    audio_play_sound(snd_switch,50,false)
                }
    }

//Clear held tile's ID after letting go of the mouse button
if mouse_check_button_released(joy_mouse_button_left) or (gamepad_button_check_released(parent.joy_modern_id,parent.joy_put_here))
or (keyboard_check_released(key_put_here))
    user_move_tile_ID = -1;

//--------------------------------------Mouse Hold Right--------------------------------------//

//Click-Drag delete tiles by holding right mouse button
if mouse_check_button(joy_mouse_button_right) or (gamepad_button_check(parent.joy_modern_id,parent.joy_delete))
or (keyboard_check(key_delete))
    {
        use_delete_selection_box_timer += 1
        if use_tile_menu_cool_down = 0 and use_file_menu = 0 and use_tile_menu = 0
        and use_delete_selection_box_timer &gt;= 7 and parent.user_cursor_mode = 1 and user_place_allow = 0
            {
                if use_delete_selection_box_timer = 8 and device_mouse_x_to_gui(0) &lt; user_editor_hud_offset-6
                    {
                        use_delete_selection_box_x_0 = user_grid_snap_x
                        use_delete_selection_box_y_0 = user_grid_snap_y
                        use_delete_selection_box_active = 1
                    }
                use_delete_selection_box_x_1 = user_grid_snap_x
                use_delete_selection_box_y_1 = user_grid_snap_y
                //Set some boundaries on how far out selections can go
                if use_delete_selection_box_x_1 &gt; use_delete_selection_box_x_0+512
                    use_delete_selection_box_x_1 = use_delete_selection_box_x_0+512;

                if use_delete_selection_box_y_1 &gt; use_delete_selection_box_y_0+512
                    use_delete_selection_box_y_1 = use_delete_selection_box_y_0+512;

                if use_delete_selection_box_x_1 &lt; use_delete_selection_box_x_0-512
                    use_delete_selection_box_x_1 = use_delete_selection_box_x_0-512;

                if use_delete_selection_box_y_1 &lt; use_delete_selection_box_y_0-512
                    use_delete_selection_box_y_1 = use_delete_selection_box_y_0-512;
            }
        if use_file_menu = 2
            use_delete_selection_box_active = 0;
    }
//Perform Deletion Function
if mouse_check_button_released(joy_mouse_button_right) or (gamepad_button_check_released(parent.joy_modern_id,parent.joy_delete))
or (keyboard_check_released(key_delete))
    {
        use_delete_selection_box_timer = 0
        if use_delete_selection_box_active = 1 and parent.user_cursor_mode = 1
            {
                //Initialize Variables
                var tile_scanner_x = use_delete_selection_box_x_0;
                var tile_scanner_y = use_delete_selection_box_y_0;
                var tile_scanner_start_x = use_delete_selection_box_x_0;
                var tile_scanner_count_x = 0;
                var tile_scanner_count_y = 0;
                //Get the difference in pixels between each point, *no matter which direction the mouse was dragged*
                var tile_scanner_width  = abs(abs(use_delete_selection_box_x_0)-abs(use_delete_selection_box_x_1))
                var tile_scanner_height = abs(abs(use_delete_selection_box_y_0)-abs(use_delete_selection_box_y_1))
                //Change starting point if the mouse was dragged in the opposite direction
                if use_delete_selection_box_x_1 &lt; use_delete_selection_box_x_0
                    {
                        tile_scanner_x = use_delete_selection_box_x_1;
                        tile_scanner_start_x = use_delete_selection_box_x_1;
                    }
                if use_delete_selection_box_y_1 &lt; use_delete_selection_box_y_0
                    {
                        tile_scanner_y = use_delete_selection_box_y_1;
                    }
                //Delete on all layers
                if use_tile_switching_mode = 0
                    {
                        while(tile_scanner_count_y &lt; tile_scanner_height)
                            {
                                var instance_delete = collision_point(tile_scanner_x,tile_scanner_y,obj_delete_parent,false,true);

                                if instance_exists(instance_delete)
                                    instance_destroy(instance_delete,true);

                                //Layer 0
                                var tile_scanner = tile_layer_find(0,tile_scanner_x,tile_scanner_y);
                                if tile_exists(tile_scanner)
                                    {
                                        //Collect background ID of the tile
                                        var tile_scanner_ID = tile_get_background(tile_scanner);
        
                                        //Check for exceptional tiles the editor should be ignoring (Such as object-specific flag tiles)
                                        var tile_scanner_IDs_exceptional_tiles = scr_check_layer_surface(tile_scanner_ID)

                                        //If the exceptional tile scan returned positive, delete any tiles found underneath the player's cursor
                                        if tile_scanner_IDs_exceptional_tiles = 1
                                            {
                                                tile_delete(tile_scanner)
                                            }
                                    }
                                //Layer 1
                                var tile_scanner = tile_layer_find(1,tile_scanner_x,tile_scanner_y);
                                if tile_exists(tile_scanner)
                                    {
                                        //Collect background ID of the tile
                                        var tile_scanner_ID = tile_get_background(tile_scanner);
        
                                        //Check for exceptional tiles the editor should be ignoring (Such as object-specific flag tiles)
                                        var tile_scanner_IDs_exceptional_tiles = scr_check_layer_surface(tile_scanner_ID)

                                        //If the exceptional tile scan returned positive, delete any tiles found underneath the player's cursor
                                        if tile_scanner_IDs_exceptional_tiles = 1
                                            {
                                                tile_delete(tile_scanner)
                                            }
                                    }
                                //Layer 4
                                var tile_scanner = tile_layer_find(4,tile_scanner_x,tile_scanner_y);
                                if tile_exists(tile_scanner) tile_delete(tile_scanner);
                                //Layer 5
                                var tile_scanner = tile_layer_find(5,tile_scanner_x,tile_scanner_y);
                                if tile_exists(tile_scanner) tile_delete(tile_scanner);
                                //Layer 6
                                var tile_scanner = tile_layer_find(6,tile_scanner_x,tile_scanner_y);
                                if tile_exists(tile_scanner) tile_delete(tile_scanner);
                                //Layer 7
                                var tile_scanner = tile_layer_find(7,tile_scanner_x,tile_scanner_y);
                                if tile_exists(tile_scanner) tile_delete(tile_scanner);
                                //Layer 8
                                var tile_scanner = tile_layer_find(8,tile_scanner_x,tile_scanner_y);
                                if tile_exists(tile_scanner) tile_delete(tile_scanner);
                                //Layer 9
                                var tile_scanner = tile_layer_find(9,tile_scanner_x,tile_scanner_y);
                                if tile_exists(tile_scanner) tile_delete(tile_scanner);
                                //Layer -1
                                var tile_scanner = tile_layer_find(-1,tile_scanner_x,tile_scanner_y);
                                if tile_exists(tile_scanner) tile_delete(tile_scanner);
                                //Layer -2
                                var tile_scanner = tile_layer_find(-2,tile_scanner_x,tile_scanner_y);
                                if tile_exists(tile_scanner) tile_delete(tile_scanner);
                                //Layer -3
                                var tile_scanner = tile_layer_find(-3,tile_scanner_x,tile_scanner_y);
                                if tile_exists(tile_scanner) tile_delete(tile_scanner);
                                //Layer -4
                                var tile_scanner = tile_layer_find(-4,tile_scanner_x,tile_scanner_y);
                                if tile_exists(tile_scanner) tile_delete(tile_scanner);
                                //Layer -5
                                var tile_scanner = tile_layer_find(-5,tile_scanner_x,tile_scanner_y);
                                if tile_exists(tile_scanner) tile_delete(tile_scanner);
                                //Layer Flags
                                var tile_scanner = tile_layer_find(100000,tile_scanner_x,tile_scanner_y);
                                if tile_exists(tile_scanner) tile_delete(tile_scanner);

                                tile_scanner_x += 8
                                tile_scanner_count_x += 8
                                if tile_scanner_count_x &gt; tile_scanner_width
                                    {
                                        tile_scanner_x = tile_scanner_start_x
                                        tile_scanner_y += 8
                                        tile_scanner_count_x = 0
                                        tile_scanner_count_y += 8
                                    }
                            }
                    }
                //Delete on Specific Layers Only
                if use_tile_switching_mode = 1
                    {
                        //Delete Tiles
                        if user_cursor_display_mode = 0
                            {
                                while(tile_scanner_count_y &lt; tile_scanner_height)
                                    {
                                        var tile_scanner = tile_layer_find(user_layer_selected,tile_scanner_x,tile_scanner_y);

                                        if tile_exists(tile_scanner)
                                            {
                                                //Collect background ID of the tile
                                                var tile_scanner_ID = tile_get_background(tile_scanner);
                
                                                //Check for exceptional tiles the editor should be ignoring (Such as object-specific flag tiles)
                                                var tile_scanner_IDs_exceptional_tiles = scr_check_layer_surface(tile_scanner_ID)
        
                                                //If the exceptional tile scan returned positive, delete any tiles found underneath the player's cursor
                                                if tile_scanner_IDs_exceptional_tiles = 1
                                                    {
                                                        tile_delete(tile_scanner)
                                                    }
                                            }
                                        tile_scanner_x += 4
                                        tile_scanner_count_x += 4
                                        if tile_scanner_count_x &gt; tile_scanner_width
                                            {
                                                tile_scanner_x = tile_scanner_start_x
                                                tile_scanner_y += 4
                                                tile_scanner_count_x = 0
                                                tile_scanner_count_y += 4
                                            }
                                    }
                            }
                        //Delete Objects
                        if user_cursor_display_mode = 1
                            {
                                while(tile_scanner_count_y &lt; tile_scanner_height)
                                    {
                                        var instance_delete = collision_point(tile_scanner_x,tile_scanner_y,obj_delete_parent,false,true);
        
                                        if instance_exists(instance_delete)
                                            instance_destroy(instance_delete,true);
        
                                        tile_scanner_x += 4
                                        tile_scanner_count_x += 4
                                        if tile_scanner_count_x &gt; tile_scanner_width
                                            {
                                                tile_scanner_x = tile_scanner_start_x
                                                tile_scanner_y += 2
                                                tile_scanner_count_x = 0
                                                tile_scanner_count_y += 2
                                            }
                                    }
                            }
                    }
                use_delete_selection_box_active = 0
            }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tile Depth Override System

//     Tile Depth Override Systems     //
//-------------------------------------//

user_tile_scanner_timer += 1

if user_tile_scanner_timer &gt;= 8 and use_tile_menu = 0
    {
        if use_tile_switching_mode = 0 and use_tile_properties_enable = 0 and user_cursor_display_mode = 0 and side_bar_allow = 0
            {
                //Tile Layer 0 (Flats)
                var use_tile_scanner_0 = tile_layer_find(0,use_cursor_x,use_cursor_y); if tile_exists(use_tile_scanner_0) {user_layer_iteration = 0; user_layer_selected = 0;}
                //Tile Layer 1 (Slopes)
                var use_tile_scanner_1 = tile_layer_find(1,use_cursor_x,use_cursor_y); if tile_exists(use_tile_scanner_1) {user_layer_iteration = 1; user_layer_selected = 1;}
                //Tile Layer 2 (FOFs)
                //var use_tile_scanner_2 = tile_layer_find(2,use_cursor_x,use_cursor_y); if tile_exists(use_tile_scanner_2) {user_layer_iteration = 2; user_layer_selected = 2;}
                //Tile Layer 3 (Items)
                //var use_tile_scanner_3 = tile_layer_find(3,use_cursor_x,use_cursor_y); if tile_exists(use_tile_scanner_3) {user_layer_iteration = 3; user_layer_selected = 3;}
                //Tile Layer 100000 (Flags)
                var use_tile_scanner_4 = tile_layer_find(100000,use_cursor_x,use_cursor_y); if tile_exists(use_tile_scanner_4) {user_layer_iteration = 4; user_layer_selected = 100000;}
                //Tile Layer 4 (Scenery)
                var use_tile_scanner_5 = tile_layer_find(4,use_cursor_x,use_cursor_y); if tile_exists(use_tile_scanner_5) {user_layer_iteration = 5; user_layer_selected = 4;}
                //Tile Layer 5 (Scenery)
                var use_tile_scanner_6 = tile_layer_find(5,use_cursor_x,use_cursor_y); if tile_exists(use_tile_scanner_6) {user_layer_iteration = 6; user_layer_selected = 5;}
                //Tile Layer 6 (Scenery)
                var use_tile_scanner_7 = tile_layer_find(6,use_cursor_x,use_cursor_y); if tile_exists(use_tile_scanner_7) {user_layer_iteration = 7; user_layer_selected = 6;}
                //Tile Layer 7 (Scenery)
                var use_tile_scanner_8 = tile_layer_find(7,use_cursor_x,use_cursor_y); if tile_exists(use_tile_scanner_8) {user_layer_iteration = 8; user_layer_selected = 7;}
                //Tile Layer 8 (Scenery)
                var use_tile_scanner_9 = tile_layer_find(8,use_cursor_x,use_cursor_y); if tile_exists(use_tile_scanner_9) {user_layer_iteration = 9; user_layer_selected = 8;}
                //Tile Layer 9 (Scenery)
                var use_tile_scanner_10 = tile_layer_find(9,use_cursor_x,use_cursor_y); if tile_exists(use_tile_scanner_10) {user_layer_iteration = 10; user_layer_selected = 9;}
                //Tile Layer -1 (Scenery)
                var use_tile_scanner_15 = tile_layer_find(-1,use_cursor_x,use_cursor_y); if tile_exists(use_tile_scanner_15) {user_layer_iteration = 15; user_layer_selected = -1;}
                //Tile Layer -2 (Scenery)
                var use_tile_scanner_14 = tile_layer_find(-2,use_cursor_x,use_cursor_y); if tile_exists(use_tile_scanner_14) {user_layer_iteration = 14; user_layer_selected = -2;}
                //Tile Layer -3 (Scenery)
                var use_tile_scanner_13 = tile_layer_find(-3,use_cursor_x,use_cursor_y); if tile_exists(use_tile_scanner_13) {user_layer_iteration = 13; user_layer_selected = -3;}
                //Tile Layer -4 (Scenery)
                var use_tile_scanner_12 = tile_layer_find(-4,use_cursor_x,use_cursor_y); if tile_exists(use_tile_scanner_12) {user_layer_iteration = 12; user_layer_selected = -4;}
                //Tile Layer -5 (Scenery)
                var use_tile_scanner_11 = tile_layer_find(-5,use_cursor_x,use_cursor_y); if tile_exists(use_tile_scanner_11) {user_layer_iteration = 11; user_layer_selected = -5;}
            }
        user_tile_scanner_timer = 0
    }

//While in object layer mode, disable all tile interactions
if user_cursor_display_mode = 1 user_layer_selected = -100000;

//Return to the default tile layer mode, after selecting a tile from the tile menu
if user_cursor_display_mode = 0 and user_layer_selected = -100000
    {
        user_layer_iteration = 0
        user_layer_selected = 0
    }

//Play Particle Effect
if use_confirm &gt; 0
    {
        if use_confirm = 1
            {
                use_particle_frame = 0
                use_particle_x = use_cursor_x
                use_particle_y = use_cursor_y
                use_confirm = 2
            }
        if use_confirm = 2
            {
                use_particle_frame += 1.25
                if use_particle_frame &gt; 13.8
                    {
                        use_particle_frame = 0
                        use_particle_x = 0
                        use_particle_y = 0
                        use_confirm = 0
                    }
            }
    }

//     Camera Snapping Systems     //
//---------------------------------//

//Override any previous decisions made by the camera, if the camera is touching the borders of the room

//Prevent camera from panning beyond the beginning of the room
if view_xview[view_port] &lt; 0 view_xview[view_port] = 0;
//As well as the end of the room
if view_xview[view_port] &gt; room_width-parent.internal_resolution[0] view_xview[view_port] = room_width-parent.internal_resolution[0];
//Prevent camera from panning above the room
if view_yview[view_port] &lt;= 0 view_yview[view_port] = 0; 
//As well as below the room
if view_yview[view_port] &gt;= room_height-parent.internal_resolution[1] view_yview[view_port] = room_height-parent.internal_resolution[1];

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delete Editor Fonts From Memory
font_delete(editor_font)
font_delete(editor_popup_font)
font_delete(editor_layer_font)
//Reset Temporarily Modified Player Parameters
parent.start_x = 0
parent.start_y = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Shang Mu Architect Menu And Notifications

//Draw Shang Mu Architect Menu
switch(use_tile_menu)
    {
        //Draw the Editor HUD
        case 0:
            {
                //Draw Menus
                scr_draw_file_menu()
                //Editor HUD
                if use_file_menu = 0
                    {
                        if use_player_spawner = 1
                            {
                                draw_background_ext(ui_hud_spawner,user_editor_hud_offset,0,1,1,0,c_white,use_tile_menu_alpha)
                                var frame_max = 11;
                                switch(parent.skin)
                                    {
                                        case spr_lilac: {frame_max = 11; break;}
                                        case spr_carol: {frame_max = 11; break;}
                                        case spr_milla: {frame_max = 7;  break;}
                                        case spr_spade: {frame_max = 10; break;}
                                    }
                                
                                user_player_spawner_frame += 0.125
                                
                                if user_player_spawner_frame &gt; frame_max + 0.8
                                    user_player_spawner_frame = 0;
                                draw_sprite_ext(parent.skin,user_player_spawner_frame,413+u_elements,48,0.20,0.20,0,c_white,use_tile_menu_alpha)
                            }
                    }
                //Drawing Mode HUD
                if use_file_menu = 2
                    {
                        draw_background_ext(ui_hud_drawing_mode,user_editor_hud_offset,0,1,1,0,c_white,use_tile_menu_alpha)
                        draw_background_ext(user_pen_color,324+u_elements,93,10,10,0,c_white,use_tile_menu_alpha)
                        draw_background_ext(ui_collapse_editor_HUD,314+(u_elements-2),113,1,1,0,c_white,1)
                        //Draw Cursor's X/Y Positions
                        if use_bg_selector_minimize = 0
                            {
                                draw_set_font(editor_font)
                                draw_set_color(c_white)
                                draw_text_transformed(340+u_elements,160,string(use_cursor_x),1,1,0)
                                draw_text_transformed(340+u_elements,175,string(use_cursor_y),1,1,0)
                            }
                    }

                use_tile_menu_alpha = 1
                //Modify Alpha Transparency When Player Mode Is Active
                if user_cursor_mode = 1
                    {
                        use_tile_menu_alpha = 0.5
                    }
                if (user_cursor_mode = -1) and (use_file_menu = 0 or use_file_menu = 2)
                    {
                        //Draw Play Menu Item
                        draw_background_ext(ui_play,367+u_elements,167,1,1,0,c_white,use_tile_menu_alpha)
                    }
                if  user_cursor_mode = 0 and use_file_menu = 0 and user_editor_hud_state = 0 and use_player_spawner = 0
                and device_mouse_x_to_gui(0) &gt;= 367 and device_mouse_y_to_gui(0) &gt;= 167
                and device_mouse_x_to_gui(0) &lt;= 408 and device_mouse_y_to_gui(0) &lt;= 192
                    {
                        //Fade Effect For The Player's Sprite
                        if use_player_animation_direction = 1 use_player_animation_frame += 0.01;
                        if use_player_animation_direction = 0 use_player_animation_frame -= 0.01;
                        if use_player_animation_frame &gt; 0.75 use_player_animation_direction = 0;
                        if use_player_animation_frame &lt; 0.25 use_player_animation_direction = 1;
                        if use_background != 0 draw_set_blend_mode(bm_add);
                        var use_draw_skin = parent.skin;
                        if (parent.alt_skin = 1 and parent.skin = spr_carol)
                            use_draw_skin = spr_carol_old;
                        if (parent.alt_skin = 2 and parent.skin = spr_carol)
                            use_draw_skin = spr_carol_new;
                        draw_sprite_ext(use_draw_skin,0,213,120+24,use_zoom_additive_player_scaling,use_zoom_additive_player_scaling,0,c_white,use_player_animation_frame)
                        draw_set_blend_mode(bm_normal)
                    }
                //Draw Warning Meter
                if (use_file_menu != 1 and use_file_menu != 3)
                    {
                        draw_background_ext(ui_tile_limit_meter,365+u_elements,228,1,1,0,c_white,use_tile_menu_alpha)
                        if tile_get_count() &gt; user_tile_limit_warning_value
                            {
                                user_tile_limit_warning_frame += 0.15
                                if user_tile_limit_warning_frame &gt; 1.8 user_tile_limit_warning_frame = 0;
                                draw_sprite_stretched_ext(spr_tile_limit_meter,user_tile_limit_warning_frame,366+u_elements,228,47,5,c_white,use_tile_menu_alpha)
                                if !audio_is_playing(character_parry)
                                    {
                                        audio_play_sound(character_parry,50,false)
                                        scr_set_message("Tile limit reached!  Remove tiles to optimize.")
                                    }
                            }
                        else
                            draw_sprite_stretched_ext(spr_tile_limit_meter,0,366+u_elements,228,array_length_1d(tile_get_ids())*0.0029375,5,c_white,use_tile_menu_alpha);
                        draw_background_ext(ui_tile_limit_meter_frame,365+u_elements,228,1,1,0,c_white,use_tile_menu_alpha)
                    }

                //Align Drawn Zoom Scaling Factor Notifications To The Right
                if  parent.debug_hud = 1
                and user_show_help_captions = 0
                and use_move_notification_enabled = 0
                and use_move_notification_disabled = 0
                and use_current_song_notification_timer = 0
                and use_tile_switching_mode_notification = 0
                and use_tile_switching_mode_notification_disabled = 0
                and parent.general_notifications[2] = 0
                and parent.general_notifications[1] = 0
                and parent.general_notifications[0] = 0
                    {
                        var use_scale_string = "";
                        switch(use_zoom_position)
                            {
                                //Draw Zoom Scaling Factor At 0.5x Scales
                                case 0: {use_scale_string = "50%" break;}
                                //Ignore Drawing Notification At 1x Scales
                                case 1: {use_scale_string = "" break;}
                                //Draw Zoom Scaling Factor At 1.5x Scales
                                case 2: {use_scale_string = "150%" break;}
                                //Draw Zoom Scaling Factor At 2x Scales
                                case 3: {use_scale_string = "200%" break;}
                                //Draw Zoom Scaling Factor At 0.25x Scales
                                case 4: {use_scale_string = "25%" break;}
                                //Draw Zoom Scaling Factor At 0.0x Scales
                                case 5: {use_scale_string = "10%" break;}
                                //Draw Zoom Scaling Factor At -0.25x Scales
                                case 6: {use_scale_string = "0%" break;}
                                //Draw Zoom Scaling Factor At 4x Scales
                                case 7: {use_scale_string = "400%" break;}
                                //Draw Zoom Scaling Factor At 4x Scales
                                case 8: {use_scale_string = "800%" break;}
                            }
                        draw_set_font(parent.menu_font)
                        draw_text(2,222,use_scale_string)
                    }
                
                if  parent.general_notifications[2] = 0
                and parent.general_notifications[1] = 0
                and parent.general_notifications[0] = 0
                    {        
                        //Music Notifications
                        if use_current_song_notification_timer &gt; 0
                            {
                                use_current_song_notification_timer-=1
                                draw_set_halign(fa_left)
                                draw_set_font(parent.text_font_academy)
                                draw_background(ui_sound_volume,2,parent.internal_resolution[1]-19)
                                draw_text(21,parent.internal_resolution[1]-18,use_current_song_notification)
                                draw_background(ui_bg_notification,2,parent.internal_resolution[1]-39)
                                draw_text(21,parent.internal_resolution[1]-38,use_current_background_notification)
                            }
                    }
                break;
            }
        //Draw the Editor HUD and Tile Menu
        case 1:
            {
                if instance_exists(obj_bg_logic_alt) draw_background(ui_tile_menu_shadow,0,0);
                //Draw Tile Menu
                draw_background(ui_tile_menu_advanced,0,0)
                //Draw Text
                draw_set_font(parent.menu_font)
                draw_set_color(c_white)
                draw_text_ext(66 ,159,lang_gui[parent.user_language_mode,8],19,240)
                draw_text_ext(190,159,lang_gui[parent.user_language_mode,9],19,240)
                if use_tile_menu_subpage = 0
                    {
                        draw_background(ui_tile_set_menu,2,154)
                        draw_set_font(parent.text_font_academy)
                        draw_set_color(c_white)
                        draw_set_halign(fa_center)
                        draw_text_transformed(28,157,lang_gui[parent.user_language_mode,100],0.5,0.5,0)
                        var tile_set_preview_string = lang_gui[parent.user_language_mode,103];
                        switch(use_tileset_preview_set_increment)
                            {
                                case 0: {tile_set_preview_string = lang_gui[parent.user_language_mode,103]; draw_background(ui_tileset_preview_temple,18,167); break;}
                                case 1: {tile_set_preview_string = lang_gui[parent.user_language_mode,104]; draw_background(ui_tileset_preview_city,18,167); break;}
                                case 2: {tile_set_preview_string = lang_gui[parent.user_language_mode,105]; draw_background(ui_tileset_preview_city_extended,18,167); break;}
                                case 3: {tile_set_preview_string = lang_gui[parent.user_language_mode,106]; draw_background(ui_tileset_preview_mountain,18,167); break;}
                                case 4: {tile_set_preview_string = lang_gui[parent.user_language_mode,107]; draw_background(ui_tileset_preview_lagoon,18,167);break;}
                                case 5: {tile_set_preview_string = lang_gui[parent.user_language_mode,108]; draw_background(ui_tileset_preview_platforms,18,167);break;}
                                case 6: {tile_set_preview_string = lang_gui[parent.user_language_mode,123]; draw_background(ui_tileset_preview_mall,18,167);break;}
                                case 7: {tile_set_preview_string = lang_gui[parent.user_language_mode,124]; draw_background(ui_tileset_preview_beihai,18,167);break;}
                                case 8: {tile_set_preview_string = lang_gui[parent.user_language_mode,125]; draw_background(ui_tileset_preview_sapphire,18,167);break;}
                            }
                        draw_text_transformed(28,210,tile_set_preview_string,0.5,0.5,0)
                        draw_set_halign(fa_left)
                    }
                if use_tile_menu_subpage = 2
                    {
                        draw_background(ui_modules_menu,2,154)
                        draw_set_font(parent.text_font_academy)
                        draw_set_color(c_white)
                        draw_set_halign(fa_center)
                        draw_text_transformed(28,157,lang_gui[parent.user_language_mode,102],0.5,0.5,0)
                        draw_set_halign(fa_left)
                  draw_background_stretched(ui_hud_quick_tools,2,154,54,67)
                    }
                if use_tile_menu_subpage != 0 and use_tile_menu_subpage != 2
                    {
                        draw_background(ui_pickups_menu,2,154)
                        draw_set_font(parent.text_font_academy)
                        draw_set_color(c_white)
                        draw_set_halign(fa_center)
                        draw_text_transformed(28,157,lang_gui[parent.user_language_mode,101],0.5,0.5,0)
                        draw_set_halign(fa_left)
                  draw_background_stretched(ui_hud_pickups,2,154,54,67)
                    }
                draw_sprite(ui_tile_preview,0,321,2)
                use_tile_menu_alpha = 0.5
                //Display Button Prompt
                if use_dispaly_key_prompt = 0 draw_background(use_display_new_tile,2,221);
                if use_dispaly_key_prompt = 1 draw_sprite(spr_keyboard_font,key_new_tile,2,222)
                
                //Draw Tile Menu Items
                if use_tile_menu_subpage = 0
                    {
                        //Draw Tile Menu Items (Row 1)
                        draw_background_ext(use_tile_menu_item[0],32+offset_tile_menu_icons_x[0],24+offset_tile_menu_icons_y[0],display_tile_menu_ratio[0],display_tile_menu_ratio[0],0,c_white,1)
                        draw_background_ext(use_tile_menu_item[1],68+offset_tile_menu_icons_x[1],24+offset_tile_menu_icons_y[1],display_tile_menu_ratio[1],display_tile_menu_ratio[1],0,c_white,1)
                        draw_background_ext(use_tile_menu_item[2],104+offset_tile_menu_icons_x[2],24+offset_tile_menu_icons_y[2],display_tile_menu_ratio[2],display_tile_menu_ratio[2],0,c_white,1)
                        draw_background_ext(use_tile_menu_item[3],140+offset_tile_menu_icons_x[3],24+offset_tile_menu_icons_y[3],display_tile_menu_ratio[3],display_tile_menu_ratio[3],0,c_white,1)
                        draw_background_ext(use_tile_menu_item[4],176+offset_tile_menu_icons_x[4],24+offset_tile_menu_icons_y[4],display_tile_menu_ratio[4],display_tile_menu_ratio[4],0,c_white,1)
                        draw_background_ext(use_tile_menu_item[5],212+offset_tile_menu_icons_x[5],24+offset_tile_menu_icons_y[5],display_tile_menu_ratio[5],display_tile_menu_ratio[5],0,c_white,1)
                        draw_background_ext(use_tile_menu_item[6],248+offset_tile_menu_icons_x[6],24+offset_tile_menu_icons_y[6],display_tile_menu_ratio[6],display_tile_menu_ratio[6],0,c_white,1)
                        //Draw Tile Menu Items (Row 2)
                        draw_background_ext(use_tile_menu_item[7],50+offset_tile_menu_icons_x[7],60+offset_tile_menu_icons_y[7],display_tile_menu_ratio[7],display_tile_menu_ratio[7],0,c_white,1)
                        draw_background_ext(use_tile_menu_item[8],86+offset_tile_menu_icons_x[8],60+offset_tile_menu_icons_y[8],display_tile_menu_ratio[8],display_tile_menu_ratio[8],0,c_white,1)
                        draw_background_ext(use_tile_menu_item[9],122+offset_tile_menu_icons_x[9],60+offset_tile_menu_icons_y[9],display_tile_menu_ratio[9],display_tile_menu_ratio[9],0,c_white,1)
                        draw_background_ext(use_tile_menu_item[10],158+offset_tile_menu_icons_x[10],60+offset_tile_menu_icons_y[10],display_tile_menu_ratio[10],display_tile_menu_ratio[10],0,c_white,1)
                        draw_background_ext(use_tile_menu_item[11],194+offset_tile_menu_icons_x[11],60+offset_tile_menu_icons_y[11],display_tile_menu_ratio[11],display_tile_menu_ratio[11],0,c_white,1)
                        draw_background_ext(use_tile_menu_item[12],230+offset_tile_menu_icons_x[12],60+offset_tile_menu_icons_y[12],display_tile_menu_ratio[12],display_tile_menu_ratio[12],0,c_white,1)
                        //Draw Tile Menu Items (Row 3)
                        draw_background_ext(use_tile_menu_item[13],32+offset_tile_menu_icons_x[13],96+offset_tile_menu_icons_y[13],display_tile_menu_ratio[13],display_tile_menu_ratio[13],0,c_white,1)
                        draw_background_ext(use_tile_menu_item[14],68+offset_tile_menu_icons_x[14],96+offset_tile_menu_icons_y[14],display_tile_menu_ratio[14],display_tile_menu_ratio[14],0,c_white,1)
                        draw_background_ext(use_tile_menu_item[15],104+offset_tile_menu_icons_x[15],96+offset_tile_menu_icons_y[15],display_tile_menu_ratio[15],display_tile_menu_ratio[15],0,c_white,1)
                        draw_background_ext(use_tile_menu_item[16],140+offset_tile_menu_icons_x[16],96+offset_tile_menu_icons_y[16],display_tile_menu_ratio[16],display_tile_menu_ratio[16],0,c_white,1)
                        draw_background_ext(use_tile_menu_item[17],176+offset_tile_menu_icons_x[17],96+offset_tile_menu_icons_y[17],display_tile_menu_ratio[17],display_tile_menu_ratio[17],0,c_white,1)
                        draw_background_ext(use_tile_menu_item[18],212+offset_tile_menu_icons_x[18],96+offset_tile_menu_icons_y[18],display_tile_menu_ratio[18],display_tile_menu_ratio[18],0,c_white,1)
                        draw_background_ext(use_tile_menu_item[19],248+offset_tile_menu_icons_x[19],96+offset_tile_menu_icons_y[19],display_tile_menu_ratio[19],display_tile_menu_ratio[19],0,c_white,1)
                        //Draw Shading Tiles Icons
                        if use_tile_menu_page = 5 and (use_tileset_preview_set_increment = 0 or use_tileset_preview_set_increment = 2) draw_background(ui_shading_tiles,31,23)
                        //Draw Page Number
                        draw_set_halign(fa_middle)
                        draw_set_font(parent.text_font_academy)
                        draw_text(156,130,lang_gui[parent.user_language_mode,56]+string(use_tile_menu_page+1)+lang_gui[parent.user_language_mode,57]+string(display_page_max+1))
                        //Draw Page Description
                        draw_set_halign(fa_right)
                        draw_text(280,130,display_page_description[use_tile_menu_page])
                        draw_set_halign(fa_left)
                        //Set Alpha Transparency Of Other Editor HUD Elements To Half Alpha Transparency
                        use_tile_menu_alpha = 0.5; 
                    }
                //Draw Item Menu Items
                if use_tile_menu_subpage = 1
                    {
                        switch(use_item_menu_page)
                            {
                                //Page 1
                                case 0:
                                    {
                                        //Draw Item Menu Items (Row 1)
                                        draw_sprite(spr_gem,0,47,50)
                                        draw_sprite(spr_petal_flower,0,84,50)
                                        draw_background_stretched(spr_flower_0,104,24,32,32)
                                        draw_background_stretched(spr_flower_1,140,24,32,32)
                                        draw_background_stretched(spr_flower_8,176,24,32,32)
                                        draw_sprite(spr_chibililac_cage,0,228,55)
                                        draw_background_stretched(spr_crate_0,248,24,32,32) 
                                        //Draw Item Menu Items (Row 2)
                                        draw_sprite_stretched(spr_treasure_chest,0,50,60,32,32)
                                        draw_sprite_stretched(spr_potion_chest,0,86,60,32,32)
                                        draw_sprite_part(spr_crystal_gem_float,0,4,0,32,32,122,60)
                                        draw_sprite_stretched(spr_crystal_gold_flower,0,158,60,32,32)
                                        draw_sprite_stretched(spr_crystal_green_flower,0,194,60,32,32)
                                        draw_sprite_stretched(spr_speed_booster,0,230,60,32,32)
                                        //Draw Item Menu Items (Row 3)
                                        draw_background_stretched(spr_flower_2,32,96,32,32)
                                        draw_background_stretched(spr_flower_3,68,96,32,32)
                                        draw_background_stretched(spr_flower_4,104,96,32,32)
                                        draw_background_stretched(spr_flower_5,140,96,32,32)
                                        draw_background_stretched(spr_flower_6,176,96,32,32)
                                        draw_sprite_ext(spr_flower_10_copy,0,228,128,1,0.9,0,c_white,1)
                                        draw_background_stretched(spr_flower_7,248,96,32,32)
                                        break;
                                    }
                                //Page 2
                                case 1:
                                    {
                                        //Row 1
                                        draw_sprite(spr_gold_gem,0,47,50)
                                        draw_sprite(spr_petal_shard,0,84,47)
                                        draw_sprite_stretched(spr_green_pot_destructible,0,105,24,32,32)
                                        draw_sprite_stretched(spr_yellow_pot_destructible,0,140,24,32,32)
                                        draw_sprite_stretched(spr_rock_destructible,0,176,24,32,32)
                                        draw_sprite(spr_target,0,228,40)
                                        draw_sprite(spr_checkpoint,0,264,40)
                                        //Row 2
                                        draw_sprite_stretched(spr_mega_green_pot,0,50,60,32,32)
                                        draw_sprite_stretched(spr_mega_yellow_pot,0,86,60,32,32)
                                        draw_sprite_stretched(spr_mega_crate,0,122,60,32,32)
                                        draw_sprite_stretched(spr_mega_milk,0,158,60,32,32)
                                        draw_sprite_stretched(spr_mega_bomb,0,194,60,32,32)
                                        draw_sprite_stretched(spr_mega_block,0,230,60,32,32)
                                        //Row 3
                                        draw_sprite_stretched(spr_mega_melon,0,32,96,32,32)
                                        draw_sprite_stretched(spr_mega_car,0,68,96,32,32)
                                        draw_sprite_stretched(spr_mega_dumpster,0,104,96,32,32)
                                        draw_sprite_stretched(spr_cube_mega_item,0,140,96,32,32)
                                        break;
                                    }
                            }
                        //Draw Page Number
                        draw_set_halign(fa_middle)
                        draw_set_font(parent.text_font_academy)
                        draw_text(156,130,lang_gui[parent.user_language_mode,56]+string(use_item_menu_page+1)+lang_gui[parent.user_language_mode,57]+"2")
                        draw_set_halign(fa_left)
                    }
                //Draw Springs Menu Items
                if use_tile_menu_subpage = 3
                    {
                        switch(use_springs_menu_page)
                            {
                                //Page 1
                                case 0:
                                    {
                                        //Draw Item Menu Items (Row 1)
                                        draw_background(spr_spring_0_0,32,32)
                                        draw_background(spr_spring_1_0,68,24)
                                        draw_background(spr_spring_2_0,104,24)
                                        draw_background(spr_spring_3_0,140,24)
                                        draw_background(spr_spring_4_0,176,24)
                                        draw_background(spr_spring_5_0,212,32)
                                        draw_background(spr_spring_6_0,248,24)
                                        //Draw Item Menu Items (Row 2)
                                        draw_background(spr_spring_7_0,50,60)
                                        draw_background(spr_spring_8_0,86,60)
                                        draw_background(spr_spring_9_0,122,60)
                                        draw_background(spr_spring_10_0,166,60)
                                        draw_background(spr_spring_11_0,202,60)
                                        draw_background(spr_spring_12_0,230,68)
                                        //Draw Item Menu Items (Row 3)
                                        draw_background(spr_spring_13_0,32,104)
                                        draw_background(spr_spring_14_0,76,96)
                                        draw_background(spr_spring_15_0,112,96)
                                        draw_sprite(spr_spring_16,0,140,104)
                                        draw_sprite(spr_spring_17,0,176,96)
                                        draw_sprite(spr_spring_18,0,216,96)
                                        draw_sprite(spr_spring_19,0,248,96)
                                        break;
                                    }
                                case 1:
                                    {
                                        //Draw Item Menu Items (Row 1)
                                        draw_sprite_part(spr_spring_20,0,0,0,32,32,32,24)
                                        draw_sprite_part(spr_spring_21,0,0,0,32,32,68,24)
                                        draw_sprite_part(spr_spring_22,0,0,0,32,32,104,24)
                                        draw_sprite_part(spr_spring_23,0,0,0,32,32,140,24)
                                        draw_sprite_part(spr_spring_24,0,0,14,32,32,176,24)
                                        draw_sprite_part(spr_spring_25,0,0,0,32,32,212,24)
                                        draw_sprite_part(spr_spring_26,0,10,0,32,32,248,24)
                                        //Draw Item Menu Items (Row 2)
                                        draw_sprite_part(spr_spring_27,0,0,0,32,32,50,60)
                                        draw_sprite_part(spr_spring_28,0,0,15,32,32,86,60)
                                        draw_sprite_part(spr_spring_29,0,0,0,32,32,122,60)
                                        draw_sprite_part(spr_spring_30,0,15,0,32,32,158,60)
                                        draw_sprite_part(spr_spring_31,0,0,0,32,32,194,60)
                                        draw_sprite_part(spr_spring_32,0,0,0,32,32,230,60)
                                        //Draw Item Menu Items (Row 3)
                                        draw_sprite_part(spr_spring_33,0,0,0,32,32,32,96)
                                        draw_sprite_part(spr_spring_34,0,0,0,32,32,68,96)
                                        draw_sprite_part(spr_spring_35,0,0,0,32,32,104,96)
                                        draw_sprite_part(spr_spring_36,0,0,0,32,32,140,96)
                                        draw_sprite_part(spr_spring_37,0,0,0,32,32,176,96)
                                        break;
                                    }
                            }
                        //Draw Page Number
                        draw_set_halign(fa_middle)
                        draw_set_font(parent.text_font_academy)
                        draw_text(156,130,lang_gui[parent.user_language_mode,56]+string(use_springs_menu_page+1)+lang_gui[parent.user_language_mode,57]+"2")
                        draw_set_halign(fa_left)
                    }
                //Draw Gimmicks Menu Items
                if use_tile_menu_subpage = 4
                    {
                        switch(use_gimmicks_menu_page)
                            {
                                //Page 1
                                case 0:
                                    {
                                        //Draw Item Menu Items (Row 1)
                                        draw_sprite_part(spr_player_spawnpoint_generic,0,0,0,32,32,32,24)
                                        draw_sprite_part(spr_player_spawnpoint,0,0,0,16,16,68,24)
                                        draw_sprite_part(spr_player_spawnpoint_carol,0,0,0,16,16,84,24)
                                        draw_sprite_part(spr_player_spawnpoint_milla,0,0,0,16,16,68,40)
                                        draw_sprite_part(spr_player_spawnpoint_spade,0,0,0,16,16,84,40)
                                        draw_sprite_part(spr_player_spawnpoint_carols_bike,0,0,0,16,16,119,24)
                                        draw_background_ext(spr_gascan_0,105,24,0.5,0.5,0,c_white,1)
                                        draw_sprite_part(spr_player_spawnpoint_carrie,0,0,0,16,16,104,40)
                                        draw_sprite_part(spr_player_spawnpoint_chiasa,0,0,0,16,16,119,40)
                                        draw_background(ui_key_keycardterminal,140,24)
                                        draw_sprite(spr_switch_door_GUI,0,176,24)
                                        draw_sprite_ext(spr_switch_bomb_and_water,0,212,24,0.5,0.5,0,c_white,1)
                                        draw_sprite_part(spr_platform_midboss_gate,0,0,0,32,32,252,24)
                                        //Draw Item Menu Items (Row 2)
                                        draw_sprite_part(spr_platform_water_horizontal,0,0,0,32,32,50,60)
                                        draw_sprite_part(spr_platform_water_vertical,0,0,0,32,32,86,60)
                                        draw_sprite(spr_platform_modifier_horizontal,0,122,60)
                                        draw_sprite(spr_platform_modifier_vertical,0,158,60)
                                        draw_sprite(spr_platform_modifier_circular,0,194,60)
                                        draw_sprite(spr_platform_modifier_halfcircle,0,230,60)
                                        //Draw Item Menu Items (Row 3)
                                        draw_sprite_part(spr_boost_pad,0,0,0,32,32,32,96)
                                        draw_background_stretched(tile_boost_ring_right,74,96,20,32)
                                        draw_background_stretched(tile_boost_ring_left,110,96,20,32)
                                        draw_background_stretched(tile_boost_ring_up,140,102,32,20)
                                        draw_background_stretched(tile_boost_ring_down,176,102,32,20)
                                        draw_sprite_part(spr_wind_turbine,0,48,0,32,32,212,112)
                                        draw_sprite_part(spr_rock_floor_distructible,0,0,4,32,32,248,96)
                                        break;
                                    }
                                //Page 2
                                case 1:
                                    {
                                        //Row 1
                                        draw_sprite_part(spr_smart_pool,0,0,0,32,32,32,24)
                                        draw_sprite_part(spr_waterfall_node,0,0,0,32,32,68,24)
                                        draw_sprite_part(spr_smart_pool_water,0,0,0,32,32,104,24)
                                        draw_sprite_part(spr_petalfall_node,0,0,0,32,32,140,24)
                                        draw_sprite_part(spr_smart_petal_pool,0,0,0,32,32,176,24)
                                        draw_sprite_part(spr_waterfall_small,0,0,0,32,32,212,24)
                                        draw_sprite_part(spr_smart_pool_mud,0,0,0,32,32,248,24)
                                        //Row 2
                                        draw_sprite_stretched(spr_bench_0,0,50,60,32,32)
                                        draw_sprite_stretched(spr_bench_1,0,86,60,32,32)
                                        draw_sprite_stretched(spr_bench_2,0,122,60,32,32)
                                        draw_sprite_stretched(spr_bench_3,0,158,60,32,32)
                                        draw_sprite_stretched(spr_bench_4,0,194,60,32,32)
                                        draw_sprite_ext(spr_crosswalk_signal,0,238,60,0.5,0.5,0,c_white,1)
                                        //Row 3
                                        draw_sprite_part(spr_cube_mega_bouncy,0,0,0,32,32,32,96)
                                        draw_sprite_stretched(spr_rogue_cube_3x,0,68,96,32,32)
                                        draw_sprite_part(spr_bridge_post,0,0,0,16,32,112,96)
                                        draw_sprite_part(spr_bubbles_air,0,21,22,32,32,141,102)
                                        draw_sprite(spr_bird,0,192,126)
                                        draw_sprite_part(spr_basket_ball,0,0,0,32,32,216,100)
                                        draw_sprite_part(spr_soda_can,0,0,0,32,32,260,104)
                                        break;
                                    }
                                //Page 3
                                case 2:
                                    {
                                        //Row 1
                                        draw_sprite_part(spr_sliding_door_a,0,0,0,32,32,32,24)
                                        draw_sprite_part(spr_sliding_door_b,0,0,0,32,32,68,24)
                                        draw_sprite_part(spr_skyscraper_day_0,0,0,32,32,32,104,24)
                                        draw_sprite_part(spr_skyscraper_day_2,0,0,0,32,32,140,24)
                                        draw_sprite_part(spr_skyscraper_day_4,0,0,0,32,32,176,24)
                                        draw_sprite_stretched(spr_train_station_spawner,0,212,24,32,32)
                                        draw_sprite_part(spr_potion_shop_spawn_point,0,0,0,32,32,248,24)
                                        //Row 2
                                        draw_sprite_part(spr_mud_block,0,0,0,32,32,50,60)
                                        draw_sprite_part(spr_mud_cube,0,0,0,32,32,86,60)
                                        draw_sprite_part(spr_water_cube,0,0,0,32,32,122,60)
                                        draw_sprite_part(spr_smart_pool_slime,0,0,0,32,32,158,60)
                                        draw_sprite_part(spr_slimefall_node,0,0,0,32,32,194,60)
                                        draw_sprite_part(spr_slime_cube,0,0,0,32,32,230,60)
                                        //Row 3
                                        draw_sprite_part(spr_shield_earth,0,11,12,32,32,32,96)
                                        draw_sprite_part(spr_shield_fire_front,0,11,12,32,32,68,96)
                                        draw_sprite_part(spr_shield_metal,0,11,12,32,32,104,96)
                                        draw_sprite_part(spr_shield_water,0,11,12,32,32,140,96)
                                        draw_sprite_part(spr_shield_wood,0,11,12,32,32,176,96)
                                        draw_sprite_part(spr_shield_rock,0,0,0,32,32,212,96)
                                        draw_sprite_stretched(spr_disc_ball,0,248,96,32,32)
                                        break;
                                    }
                                //Page 4
                                case 3:
                                    {
                                        //Row 1
                                        draw_background_stretched(tile_boost_ring_right,38,24,20,32)
                                        draw_background_stretched(tile_boost_ring_left,74,24,20,32)
                                        draw_background_stretched(tile_boost_ring_up,104,30,32,20)
                                        draw_background_stretched(tile_boost_ring_down,140,30,32,20)
                                        //Back layers for super boost rings
                                        draw_sprite_stretched(spr_super_boost_ring_right,0,38,24,20,32)
                                        draw_sprite_stretched(spr_super_boost_ring_left,0,74,24,20,32)
                                        draw_sprite_stretched(spr_super_boost_ring_up,0,104,30,32,20)
                                        draw_sprite_stretched(spr_super_boost_ring_down,0,140,30,32,20)
                                        draw_sprite_part(spr_cube_mega_spring,0,0,0,32,32,176,24)
                                        draw_sprite_part(spr_cube_rogue_spring,0,0,0,32,32,212,24)
                                        draw_sprite_part(spr_smart_pool_oil,0,0,0,32,32,248,24)
                                        //Row 2
                                        draw_sprite_part(spr_smart_pool_sludge,0,0,0,32,32,50,60)
                                        draw_sprite_part(spr_sludge_cube,0,0,0,32,32,86,60)
                                        draw_sprite_part(spr_ballpit_balls,0,0,0,32,32,122,60)
                                        draw_sprite_part(spr_ballbit_gems,0,0,0,32,32,158,60)
                                        draw_sprite_stretched(spr_umbrella_pop,0,194,60,32,32)
                                        draw_sprite_stretched(spr_bivalve_pop,0,230,60,32,32)
                                        //Row 3
                                        draw_sprite_part(spr_male_potty,0,0,0,32,32,32,96)
                                        draw_sprite_part(spr_female_potty,0,0,0,32,32,68,96)
                                        draw_sprite_part(spr_trans_potty,0,0,0,32,32,104,96)
                                        draw_sprite_part(spr_basketball_hoop,0,0,0,32,32,140,96)
                                        draw_sprite_part(spr_temple_bell,0,32,12,32,32,176,96)
                                        draw_sprite_part(spr_pinwheel_pulley,0,32,32,32,32,212,96)
                                        break;
                                    }
                                //Page 5
                                case 4:
                                    {
                                        //Row 1
                                        draw_sprite_part(spr_hangbar_sprite,0,0,0,32,32,32,24)
                                        draw_sprite_part(spr_pulley_rope_hor,0,0,0,32,8,68,36)
                                        draw_sprite_part(spr_pulley_rope_ver,0,0,0,8,32,116,24)
                                        draw_sprite_part(spr_pulley,0,0,0,32,32,140,24)
                                        draw_sprite_part(spr_platform_modifier_bell_hammer,0,0,0,32,32,176,24)
                                        draw_sprite_part(spr_moving_platform,0,0,0,32,32,212,24)
                                        draw_sprite_part(spr_cube_generator,0,0,0,32,32,248,24)
                                        //Row 2
                                        draw_sprite_part(spr_mu_ball_spike,0,0,0,32,32,50,60)
                                        draw_sprite_part(spr_mu_rotating_spikes,0,0,0,32,32,86,60)
                                        draw_sprite_part(spr_campfire,0,0,0,32,32,122,60)
                                        draw_sprite_part(spr_bench_5,0,0,0,32,32,158,60)
                                        draw_sprite_part(spr_minecart,0,0,0,32,32,194,60)
                                        draw_sprite_part(spr_spikes_21,0,0,0,32,32,230,60)
                                        //Row 3
                                        draw_sprite_part(spr_npc_run_lilac,0,0,0,32,32,32,96)
                                        draw_sprite_part(spr_npc_run_carol,0,0,0,32,32,68,96)
                                        draw_sprite_part(spr_npc_run_milla,0,0,0,32,32,104,96)
                                        draw_sprite_part(spr_npc_run_spade,0,0,0,32,32,140,96)
                                        draw_sprite_part(spr_npc_run_carrie,0,0,0,32,32,176,96)
                                        draw_sprite_part(spr_npc_run_chiasa,0,0,0,32,32,212,96)
                                        draw_sprite_part(spr_npc_run_bike,0,0,0,32,32,248,96)
                                        break;
                                    }
                                //Page 6
                                case 5:
                                    {
                                        //Row 1
                                        draw_sprite_part(spr_chum_bucket,0,0,0,32,32,32,24)
                                        draw_sprite_part(spr_photo_poster,0,16,19,32,32,68,24)
                                        draw_sprite_part(spr_led_arrows,0,0,0,32,32,104,24)
                                        draw_sprite_stretched(spr_buoy_thumbnail,0,140,24,32,32)
                                        draw_sprite_stretched(spr_lagoon_boat_thumbnail,0,176,24,32,32)
                                        draw_sprite_stretched(spr_buoy_flying_thumbnail,0,212,24,32,32)
                                        //Row 2
                                        draw_sprite_part(spr_escalator_top,0,0,0,32,32,50,60)
                                        draw_sprite_part(spr_escalator_middle,0,0,0,32,32,86,60)
                                        draw_sprite_part(spr_escalator_bottom,0,0,0,32,32,122,60)
                                        draw_sprite_part(spr_escalator_top_flipped,0,0,0,32,32,158,60)
                                        draw_sprite_part(spr_escalator_middle_flipped,0,0,0,32,32,194,60)
                                        draw_sprite_part(spr_escalator_bottom_flipped,0,0,0,32,32,230,60)
                                        //Row 3
                                        draw_sprite_part(spr_door_3,0,0,0,32,32,32,96)
                                        draw_sprite_part(spr_door_2,0,0,0,32,32,68,96)
                                        draw_sprite_part(spr_diveboard,0,0,0,32,32,104,96)
                                        draw_sprite_part(spr_diveboard_left,0,0,0,32,32,140,96)
                                        break;
                                    }
                                //Page 7
                                case 6:
                                    {
                                        //Row 1
                                        draw_sprite_part(spr_monitor_0,0,0,0,32,32,32,24)
                                        draw_sprite_part(spr_monitor_1,0,16,19,32,32,68,24)
                                        draw_sprite_part(spr_monitor_2,0,0,0,32,32,104,24)
                                        draw_sprite_part(spr_monitor_3,0,0,0,32,32,140,24)
                                        draw_sprite_part(spr_monitor_4,0,0,0,32,32,176,24)
                                        draw_sprite_part(spr_floor_panel,0,0,0,32,32,212,24)
                                        //Row 2
                                        draw_sprite_part(spr_bb_elevator,0,0,0,32,32,50,60)
                                        draw_sprite_part(spr_elevator_stopper,0,0,0,32,32,86,60)
                                        draw_sprite_part(spr_sj_fountain,0,0,0,32,32,122,60)
                                        draw_sprite_part(spr_barrel,0,0,0,32,32,158,60)
                                        break;
                                    }
                            }
                        //Draw Page Number
                        draw_set_halign(fa_middle)
                        draw_set_font(parent.text_font_academy)
                        draw_text(156,130,lang_gui[parent.user_language_mode,56]+string(use_gimmicks_menu_page+1)+lang_gui[parent.user_language_mode,57]+"7")
                        draw_set_halign(fa_left)
                    }
                //Draw Advanced Menu Items
                if use_tile_menu_subpage = 5
                    {
                        switch(use_advanced_menu_page)
                            {
                                //Page 1
                                case 0:
                                    {
                                        //Draw Item Menu Items (Row 1)
                                        draw_sprite_part(spr_camera_zoom_reset,0,0,55,32,32,32,24)
                                        draw_sprite_part(spr_camera_zoom_out_2x,0,0,55,32,32,68,24)
                                        draw_sprite_part(spr_camera_zoom_out_4x,0,0,55,32,32,104,24)
                                        draw_sprite(spr_camera_boundary_top,0,140,24)
                                        draw_sprite(spr_camera_boundary_bottom,0,176,24)
                                        draw_sprite(spr_camera_boundary_left,0,212,24)
                                        draw_sprite(spr_camera_boundary_right,0,248,24)
                                        //Draw Item Menu Items (Row 2)
                                        draw_sprite(spr_water_height,0,50,60)
                                        draw_sprite(spr_loop_exit_road,0,86,60)
                                        draw_sprite_part(spr_loop_layer_changer,0,0,16,32,32,122,60)
                                        draw_sprite_part(spr_loop_layer_changer_l,0,0,16,32,32,158,60)
                                        draw_sprite_part(spr_loop_changer_l,0,0,0,32,32,194,60)
                                        draw_sprite_part(spr_loop_changer_r,0,0,0,32,32,230,60)
                                        //Draw Item Menu Items (Row 3)
                                        draw_sprite_part(spr_weather_clear,0,0,20,32,32,32,96)
                                        draw_sprite_part(spr_weather_rain,0,0,20,32,32,68,96)
                                        draw_sprite_part(spr_weather_storm,0,0,20,32,32,104,96)
                                        draw_sprite_part(spr_weather_tempest,0,0,20,32,32,140,96)
                                        draw_sprite_part(spr_weather_slime,0,0,20,32,32,176,96)
                                        draw_sprite_part(spr_weather_drizzle,0,0,20,32,32,212,96)
                                        draw_sprite(spr_loop_logic,0,248,96)
                                        //draw_sprite(spr_road_loop,0,248,96)
                                        break;
                                    }
                                //Page 2
                                case 1:
                                    {
                                        //Row 1
                                        draw_sprite(spr_loop_exit,0,32,24)
                                        draw_sprite_part(spr_music_on,0,0,50,32,32,68,24)
                                        draw_sprite_part(spr_music_off,0,0,50,32,32,104,24)
                                        draw_sprite_part(spr_birds_ambiance,0,0,50,32,32,140,24)
                                        draw_sprite_part(spr_boss_music,0,0,50,32,32,176,24)
                                        draw_sprite_part(spr_mini_boss_music,0,0,50,32,32,212,24)
                                        draw_sprite_part(spr_mega_boss_music,0,0,50,32,32,248,24)
                                        //Row 2
                                        draw_sprite(spr_boss_boundary_top,0,50,60)
                                        draw_sprite(spr_boss_boundary_bottom,0,86,60)
                                        draw_sprite(spr_boss_boundary_left,0,122,60)
                                        draw_sprite(spr_boss_boundary_right,0,158,60)
                                        draw_sprite_part(spr_wind_turbine_stopper,0,50,0,32,32,194,60)
                                        draw_sprite_part(spr_bg_change_0,0,0,0,32,32,230,60)
                                        //Row 3
                                        draw_sprite_part(spr_portal_1A,0,0,20,32,32,32,96)
                                        draw_sprite_part(spr_portal_1B,0,0,20,32,32,68,96)
                                        draw_sprite_part(spr_portal_2A,0,0,20,32,32,104,96)
                                        draw_sprite_part(spr_portal_2B,0,0,20,32,32,140,96)
                                        draw_sprite_part(spr_portal_3A,0,0,20,32,32,176,96)
                                        draw_sprite_part(spr_portal_3B,0,0,20,32,32,212,96)
                                        draw_sprite_part(spr_checkpoint_marker,0,0,13,32,32,248,96)
                                        break;
                                    }
                                //Page 3
                                case 2:
                                    {
                                        //Row 1
                                        draw_sprite_part(spr_angle_gear,0,0,0,32,32,32,24)
                                        draw_sprite_part(spr_angle_gear_90,0,0,0,32,32,68,24)
                                        draw_sprite_part(spr_angle_gear_180,0,0,0,32,32,104,24)
                                        draw_sprite_part(spr_angle_gear_270,0,0,0,32,32,140,24)
                                        draw_sprite_part(spr_stop_music,0,0,80,32,32,176,24)
                                        draw_sprite_part(spr_start_music,0,0,80,32,32,212,24)
                                        draw_sprite_part(spr_creepy_ambiance,0,0,0,32,32,248,24)
                                        //Row 2
                                        draw_sprite_part(spr_creepy_caves,0,0,0,32,32,50,60)
                                        draw_sprite_part(spr_instant_water,0,0,0,32,32,86,60)
                                        draw_sprite_part(spr_city_ambiance,0,0,21,32,32,122,60)
                                        draw_sprite_part(spr_multi_map_spawner,0,0,0,32,32,158,60)
                                        draw_sprite_part(spr_respawn_plane,0,50,0,32,32,194,60)
                                        draw_sprite_part(spr_water_type_slime,0,0,0,32,32,230,60)
                                        //Row 3
                                        draw_sprite_part(spr_water_type_mud,0,0,0,32,32,32,96)
                                        draw_sprite_part(spr_water_type_petal,0,0,0,32,32,68,96)
                                        draw_sprite_part(spr_water_type_oil,0,0,0,32,32,104,96)
                                        draw_sprite_part(spr_water_type_sludge,0,0,0,32,32,140,96)
                                        draw_sprite_part(spr_instant_water_specify,0,0,0,32,32,176,96)
                                        draw_sprite_part(spr_stop_ambient_sounds,0,0,0,32,32,212,96)
                                        break;
                                    }
                                //Page 4
                                case 3:
                                    {
                                        //Row 1
                                        draw_sprite_part(spr_lock_boundary_top,0,0,0,32,32,32,24)
                                        draw_sprite_part(spr_lock_boundary_bottom,0,0,0,32,32,68,24)
                                        draw_sprite_part(spr_lock_boundary_left,0,0,0,32,32,104,24)
                                        draw_sprite_part(spr_lock_boundary_right,0,0,0,32,32,140,24)
                                        draw_sprite_part(spr_camera_stop_plane,0,0,0,32,32,176,24)
                                        //Row 2
                                        draw_sprite_part(spr_pusher_up,0,0,0,32,32,50,60)
                                        draw_sprite_part(spr_pusher_down,0,0,0,32,32,86,60)
                                        draw_sprite_part(spr_pusher_left,0,0,21,32,32,122,60)
                                        draw_sprite_part(spr_pusher_right,0,0,0,32,32,158,60)
                                        break;
                                    }
                            }
                        //Draw Page Number
                        draw_set_halign(fa_middle)
                        draw_set_font(parent.text_font_academy)
                        draw_text(156,130,lang_gui[parent.user_language_mode,56]+string(use_advanced_menu_page+1)+lang_gui[parent.user_language_mode,57]+"4")
                        draw_set_halign(fa_left)
                    }
                //Draw Enemy Menu Items
                if use_tile_menu_subpage = 2
                    {
                        //Draw Page Number
                        draw_set_halign(fa_middle)
                        draw_set_font(parent.text_font_academy)
                        draw_text(156,130,lang_gui[parent.user_language_mode,56]+string(use_enemy_menu_page+1)+lang_gui[parent.user_language_mode,57]+"3")
                        switch(use_enemy_menu_page)
                            {
                                //Page 1
                                case 0:
                                    {
                                        //Row 1
                                        draw_sprite_stretched(spr_malleus_thumbnail,0,32,24,32,32)
                                        draw_sprite_stretched(spr_turretus_thumbnail,0,68,24,32,32)
                                        draw_sprite_stretched(spr_shock_puppet_thumbnail,0,104,24,32,32)
                                        draw_sprite_stretched(spr_blade_orbiter_thumbnail,0,140,24,32,32)
                                        draw_sprite_stretched(spr_rocket_launcher_thumbnail,0,176,24,32,32)
                                        draw_sprite_stretched(spr_fire_spitter_thumbnail,0,212,24,32,32)
                                        draw_sprite_stretched(spr_metal_pup_thumbnail,0,248,24,32,32)
                                        //Row 2
                                        draw_sprite_stretched(star_flounder,0,50,60,32,32)
                                        draw_sprite_stretched(spr_saw_flounder_thumbnail,0,86,60,32,32)
                                        draw_sprite_stretched(spr_shark_torpedo_thumbnail,0,122,60,32,32)
                                        draw_sprite_stretched(spr_buoybuoy_thumbnail,0,158,60,32,32)
                                        draw_sprite_stretched(spr_ghetto_blaster_thumbnail,0,194,60,32,32)
                                        draw_sprite_stretched(spr_bullfrag,0,230,60,32,32)
                                        //Row 3
                                        draw_sprite_stretched(spr_ant_bomb_thumbnail,0,32,96,32,32)
                                        draw_sprite_stretched(spr_stinger_thumbnail,0,68,96,32,32)
                                        draw_sprite_stretched(spr_wasp_thumbnail,0,104,96,32,32)
                                        draw_sprite_stretched(spr_axle_turret_thumbnail,0,140,96,32,32)
                                        draw_sprite_stretched(spr_ring_hammer_thumbnail,0,176,96,32,32)
                                        draw_sprite_stretched(spr_rna_cannon_thumbnail,0,212,96,32,32)
                                        draw_sprite_stretched(spr_dna_cannon_thumbnail,0,248,96,32,32)
                                        break;
                                    }
                                //Page 2
                                case 1:
                                    {
                                        //Row 1
                                        draw_sprite_stretched(spr_sprindog_thumbnail,0,32,24,32,32)
                                        draw_sprite_stretched(spr_iris_thumbnail,0,68,24,32,32)
                                        draw_sprite_stretched(spr_sushi_roller_thumbnail,0,104,24,32,32)
                                        draw_sprite_stretched(spr_stinger_nest,0,140,24,32,32)
                                        draw_sprite_stretched(spr_wasp_nest,0,176,24,32,32)
                                        draw_sprite_stretched(spr_sea_turretus_thumbnail,0,212,24,32,32)
                                        draw_sprite_stretched(spr_snappy_thumbnail,0,248,24,32,32)
                                        //Row 2
                                        draw_sprite_stretched(spr_kiwi_thumbnail,0,50,60,32,32)
                                        draw_sprite_stretched(spr_bubble_orbiter_thumbnail,0,86,60,32,32)
                                        draw_sprite_stretched(spr_pushup_thumbnail,0,122,60,32,32)
                                        draw_sprite_stretched(spr_plasma_squid_thumbnail,0,158,60,32,32)
                                        draw_sprite_stretched(spr_algae_cutter_thumbnail,0,194,60,32,32)
                                        break;
                                    }
                                //Page 3
                                case 2:
                                    {
                                        //Row 1
                                        draw_sprite_stretched(spr_fireworks_tank_thumbnail,0,32,24,32,32)
                                        draw_sprite_stretched(spr_blade_subordinate,0,68,24,32,32)
                                        draw_sprite_stretched(spr_star_marine_thumbnail,0,104,24,32,32)
                                        draw_sprite_stretched(spr_bouncer_thumbnail,0,140,24,32,32)
                                        draw_sprite_stretched(spr_guardian_thumbnail,0,176,24,32,32)
                                        //Row 3
                                        draw_sprite_part(spr_boss_runaway_bouncer,0,0,0,32,32,32,96)
                                        draw_sprite_part(spr_boss_runaway_fireworks_tank,0,0,0,32,32,68,96)
                                        draw_sprite_part(spr_boss_runaway_guardian,0,0,0,32,32,104,96)
                                        draw_sprite_stretched(spr_boss_runaway_star_marine,0,140,96,32,32)
                                        draw_set_halign(fa_left)
                                        draw_text(31,130,"Extras")
                                        draw_set_halign(fa_middle)
                                        break;
                                    }
                            }
                    }
                //Draw Actors Menu Items
                if use_tile_menu_subpage = 6
                    {
                        //Draw Page Number
                        draw_set_halign(fa_middle)
                        draw_set_font(parent.text_font_academy)
                        switch(use_actors_menu_page)
                            {
                                //Page 1
                                case 0:
                                    {
                                        //Row 1
                                        draw_sprite_stretched(spr_lilac_thumbnail,0,32,24,32,32)
                                        draw_sprite_stretched(spr_carol_thumbnail,0,68,24,32,32)
                                        draw_sprite_stretched(spr_milla_thumbnail,0,104,24,32,32)
                                        draw_sprite_stretched(spr_stella_thumbnail,0,140,24,32,32)
                                        draw_sprite_stretched(spr_shy_thumbnail,0,176,24,32,32)
                                        draw_sprite_stretched(spr_tiwi_thumbnail,0,212,24,32,32)
                                        draw_sprite_stretched(spr_sign_thumbnail,0,248,24,32,32)
                                        //Row 2
                                        draw_sprite_stretched(spr_stumpy_thumbnail,0,50,60,32,32)
                                        draw_sprite_stretched(spr_cook_thumbnail,0,86,60,32,32)
                                        draw_sprite_stretched(spr_wacky_thumbnail,0,122,60,32,32)
                                        draw_sprite_stretched(spr_npc_harige_thumbnail,0,158,60,32,32)
                                        draw_sprite_stretched(spr_bird_guard_thumbnail,0,194,60,32,32)
                                        draw_sprite_stretched(spr_jamie_thumbnail,0,230,60,32,32)
                                        //Row 3
                                        draw_sprite_stretched(spr_cassandre_thumbnail,0,32,96,32,32)
                                        draw_sprite_stretched(spr_spade_thumbnail,0,68,96,32,32)
                                        draw_sprite_stretched(spr_azuli_thumbnail,0,104,96,32,32)
                                        draw_sprite_stretched(spr_astum_thumbnail,0,140,96,32,32)
                                        draw_sprite_stretched(spr_beibo_thumbnail,0,176,96,32,32)
                                        draw_sprite_stretched(spr_trip_thumbnail,0,212,96,32,32)
                                        draw_sprite_stretched(spr_axl_thumbnail,0,248,96,32,32)
                                        break;
                                    }
                                //Page 2
                                case 1:
                                    {
                                        //Row 1
                                        draw_sprite_stretched(spr_candy_thumbnail,0,32,24,32,32)
                                        draw_sprite_stretched(spr_umi_thumbnail,0,68,24,32,32)
                                        draw_sprite_stretched(spr_allister_thumbnail,0,104,24,32,32)
                                        draw_sprite_stretched(spr_abby_thumbnail,0,140,24,32,32)
                                        draw_sprite_stretched(spr_alexis_thumbnail,0,176,24,32,32)
                                        draw_sprite_stretched(spr_kyomi_thumbnail,0,212,24,32,32)
                                        draw_sprite_stretched(spr_xavier_thumbnail,0,248,24,32,32)
                                        //Row 2
                                        draw_sprite_stretched(spr_carrie_thumbnail,0,50,60,32,32)
                                        draw_sprite_stretched(spr_ryusei_thumbnail,0,86,60,32,32)
                                        draw_sprite_stretched(spr_savvy_thumbnail,0,122,60,32,32)
                                        draw_sprite_stretched(spr_rhyme_thumbnail,0,158,60,32,32)
                                        draw_sprite_stretched(spr_clyde_thumbnail,0,194,60,32,32)
                                        draw_sprite_stretched(spr_bucky_thumbnail,0,230,60,32,32)
                                        //Row 3
                                        draw_sprite_stretched(spr_ness_thumbnail,0,32,96,32,32)
                                        draw_sprite_stretched(spr_hyper_thumbnail,0,68,96,32,32)
                                        draw_sprite_stretched(spr_iris_panda_thumbnail,0,104,96,32,32)
                                        draw_sprite_stretched(spr_maika_thumbnail,0,140,96,32,32)
                                        draw_sprite_stretched(spr_leela_thumbnail,0,176,96,32,32)
                                        draw_sprite_stretched(spr_tsuki_thumbnail,0,212,96,32,32)
                                        draw_sprite_stretched(spr_libbie_dark_thumbnail,0,248,96,32,32)
                                        break;
                                    }
                                //Page 3
                                case 2:
                                    {
                                        //Row 1
                                        draw_sprite_stretched(spr_pumppy_thumbnail,0,32,24,32,32)
                                        draw_sprite_stretched(spr_libbie_thumbnail,0,68,24,32,32)
                                        draw_sprite_stretched(spr_serena_thumbnail,0,104,24,32,32)
                                        draw_sprite_stretched(spr_chiasa_thumbnail,0,140,24,32,32)
                                        draw_sprite_stretched(spr_dean_thumbnail,0,176,24,32,32)
                                        draw_sprite_stretched(spr_shan_thumbnail,0,212,24,32,32)
                                        draw_sprite_stretched(spr_mei_thumbnail,0,248,24,32,32)
                                        //Row 2
                                        draw_sprite_stretched(spr_vivid_thumbnail,0,50,60,32,32)
                                        draw_sprite_stretched(spr_garrett_thumbnail,0,86,60,32,32)
                                        draw_sprite_stretched(spr_maria_thumbnail,0,122,60,32,32)
                                        draw_sprite_stretched(spr_elric_thumbnail,0,158,60,32,32)
                                        draw_sprite_stretched(spr_beldr_thumbnail,0,194,60,32,32)
                                        draw_sprite_stretched(spr_leo_thumbnail,0,230,60,32,32)
                                        //Row 3
                                        draw_sprite_stretched(spr_jett_thumbnail,0,32,96,32,32)
                                        draw_sprite_stretched(spr_marshmallow_thumbnail,0,68,96,32,32)
                                        draw_sprite_stretched(spr_vela_thumbnail,0,104,96,32,32)
                                        draw_sprite_stretched(spr_leone_thumbnail,0,140,96,32,32)
                                        draw_sprite_stretched(spr_pat_thumbnail,0,176,96,32,32)
                                        draw_sprite_stretched(spr_uny_thumbnail,0,212,96,32,32)
                                        draw_sprite_stretched(spr_kii_thumbnail,0,248,96,32,32)
                                        break;
                                    }
                                //Page 4
                                case 3:
                                    {
                                        //Row 1
                                        draw_sprite_stretched(spr_kyoti_thumbnail,0,32,24,32,32)
                                        draw_sprite_stretched(spr_yuuka_thumbnail,0,68,24,32,32)
                                        draw_sprite_stretched(spr_kubo_thumbnail,0,104,24,32,32)
                                        draw_sprite_stretched(spr_zeia_thumbnail,0,140,24,32,32)
                                        draw_sprite_stretched(spr_gage_thumbnail,0,176,24,32,32)
                                        draw_sprite_stretched(spr_tanner_thumbnail,0,212,24,32,32)
                                        draw_sprite_stretched(spr_amy_thumbnail,0,248,24,32,32)
                                        //Row 2
                                        draw_sprite_stretched(spr_alan_thumbnail,0,50,60,32,32)
                                        draw_sprite_stretched(spr_kai_thumbnail,0,86,60,32,32)
                                        draw_sprite_stretched(spr_neera_thumbnail,0,122,60,32,32)
                                        draw_sprite_stretched(spr_npc_mirdin_thumbnail,0,158,60,32,32)
                                        draw_sprite_stretched(spr_npc_boss_thumbnail,0,194,60,32,32)
                                        draw_sprite_stretched(spr_npc_dexter_thumbnail,0,230,60,32,32)
                                        //Row 3
                                        draw_sprite_stretched(spr_npc_kusei_thumbnail,0,32,96,32,32)
                                        draw_sprite_stretched(spr_npc_flavio_thumbnail,0,68,96,32,32)
                                        draw_sprite_stretched(spr_npc_millie_thumbnail,0,104,96,32,32)
                                        draw_sprite_stretched(spr_npc_bird_guard_male_thumbnail,0,140,96,32,32)
                                        draw_sprite_stretched(spr_npc_sabre_thumbnail,0,176,96,32,32)
                                        draw_sprite_stretched(spr_npc_miko_thumbnail,0,212,96,32,32)
                                        draw_sprite_stretched(spr_npc_vergil_thumbnail,0,248,96,32,32)
                                        break;
                                    }
                                //Page 5
                                case 4:
                                    {
                                        //Row 1
                                        draw_sprite_stretched(spr_npc_tyler_thumbnail,0,32,24,32,32)
                                        draw_sprite_stretched(spr_nougat_thumbnail,0,68,24,32,32)
                                        draw_sprite_stretched(spr_luna_thumbnail,0,104,24,32,32)
                                        draw_sprite_stretched(spr_npc_jonas_thumbnail,0,140,24,32,32)
                                        break;
                                    }
                            }
                        draw_text(156,130,lang_gui[parent.user_language_mode,56]+string(use_actors_menu_page+1)+lang_gui[parent.user_language_mode,57]+"4")
                    }
                draw_set_halign(fa_middle)
                draw_set_font(parent.text_font_academy)
                draw_text(156,6,use_item_description)
                draw_set_halign(fa_left)
                draw_text(20,224,lang_gui[parent.user_language_mode,58])
                break;
            }
        //Draw the Quit Menu
        case 2:
            {
                //Draw Editor HUD At Half Alpha Transparency
                scr_draw_file_menu()

                //Draw Quit Menu
                draw_background(ui_hud_quit,2,60)
                //Draw Text
                draw_set_font(parent.menu_font)
                draw_set_color(c_white)
                draw_set_halign(fa_middle)
                draw_text_ext(151,78,lang_gui[parent.user_language_mode,13],16,266)
                draw_text_ext(92,146,lang_gui[parent.user_language_mode,11],16,116)
                draw_text_ext(227,146,lang_gui[parent.user_language_mode,12],16,116)
                draw_set_halign(fa_left)
                //Set Alpha Transparency Of Other Editor HUD Elements To Half Alpha Transparency
                use_tile_menu_alpha = 0.5;
                break;
            }
        //Draw the Open Menu
        case 3:
            {
                //Draw Editor HUD At Half Alpha Transparency
                scr_draw_file_menu()

                //Draw Open Menu
                draw_background(ui_hud_open,2,47)
                //Draw Text
                draw_set_font(parent.menu_font)
                draw_set_color(c_white)
                draw_set_halign(fa_middle)
                draw_text_ext(155,57,lang_gui[parent.user_language_mode,19],16,266)
                draw_text_ext(99,166,lang_gui[parent.user_language_mode,14],16,116)
                draw_text_ext(201,166,lang_gui[parent.user_language_mode,15],16,116)
                draw_text_ext(155,199,lang_gui[parent.user_language_mode,20],16,266)
                draw_set_halign(fa_left)
                //Define Font
                draw_set_font(parent.text_font_academy)
                //Draw Item Listings
                draw_text(28,82,use_maps_map[0])
                draw_text(28,97,use_maps_map[1])
                draw_text(28,112,use_maps_map[2])
                draw_text(28,127,use_maps_map[3])
                draw_text(28,142,use_maps_map[4])
                draw_set_alpha(user_tile_boundary_alpha)
                draw_set_color(c_white)
                draw_line(28,floor(use_maps_highlight_y),272,floor(use_maps_highlight_y))
                draw_set_alpha(1)
                //Draw Scrollbar
                draw_background(ui_hud_open_scrollbar,283,floor(use_scrollbar_position))
                //Set Alpha Transparency Of Other Editor HUD Elements To Half Alpha Transparency
                use_tile_menu_alpha = 0.5
                break;
            }
        //Draw the Save Menu
        case 4:
            {
                //Draw Editor HUD At Half Alpha Transparency
                scr_draw_file_menu()
                //Draw Save Menu
                draw_background(ui_hud_save,2,60)
                //Draw Text
                draw_set_font(parent.menu_font)
                draw_set_color(c_white)
                draw_set_halign(fa_middle)
                draw_text_ext(155,70,lang_gui[parent.user_language_mode,16],16,266)
                draw_text_ext(81,114,lang_gui[parent.user_language_mode,17],16,116)
                draw_text_ext(241,114,lang_gui[parent.user_language_mode,18],16,116)
                draw_text_ext(99,178,lang_gui[parent.user_language_mode,14],16,116)
                draw_text_ext(201,178,lang_gui[parent.user_language_mode,15],16,116)
                draw_set_halign(fa_left)
                //Define Font
                draw_set_font(parent.text_font_academy)
                //Draw Save Data
                draw_text(59,93,use_write_keyboard_string_stage_name+use_keyboard_active_indicator)
                draw_text_ext(16,137,use_write_keyboard_string_description+use_keyboard_active_indicator_description,17,130)
                draw_text(188,138,use_write_keyboard_string_architect+use_keyboard_active_indicator_architect)
                //Set Alpha Transparency Of Other Editor HUD Elements To Half Alpha Transparency
                use_tile_menu_alpha = 0.5;
                break;
            }
        //Draw the New Canvas Menu
        case 5:
            {
                //Draw Editor HUD At Half Alpha Transparency
                scr_draw_file_menu()

                //Draw Quit Menu
                draw_background(ui_hud_new_canvas,2,45)
                //Draw Text
                draw_set_font(parent.menu_font)
                draw_set_color(c_white)
                draw_set_halign(fa_middle)
                draw_text_ext(151,63,lang_gui[parent.user_language_mode,10],16,266)
                draw_text_ext(92,161,lang_gui[parent.user_language_mode,11],16,116)
                draw_text_ext(227,161,lang_gui[parent.user_language_mode,12],16,116)
                draw_set_halign(fa_left)
                //Set Alpha Transparency Of Other Editor HUD Elements To Half Alpha Transparency
                use_tile_menu_alpha = 0.5
                break;
            }
    }

if use_file_menu = 0
    {
        var object_limit_warning_index = 0;
        var object_limit_sprite_index = 0;
        var object_limit_max = 0;

        var tile_preview_offset_x = 372;
        var tile_preview_offset_y = 27;
        if use_tile_menu = 1
            {
                tile_preview_offset_x = 353;
                tile_preview_offset_y = 9;
            }
        //Draw Currently Selected Tile
        switch(user_cursor_display_mode)
            {
                case 0:
                    {
                        if background_exists(user_tile_selected)
                            draw_background_ext(user_tile_selected,tile_preview_offset_x+u_elements+use_item_offset_x,tile_preview_offset_y+use_item_offset_y,use_item_aspect_ratio,use_item_aspect_ratio,0,c_white,1);
                        else
                            draw_background_stretched(ui_unknown_tile,tile_preview_offset_x+u_elements,tile_preview_offset_y,32,32);
                        break;
                    }
                case 1:
                    {
                        if sprite_exists(user_tile_selected)
                            {
                                var yes = 1;
                                var thumb = spr_metal_pup_thumbnail;
                                //NPCs
                                scr_set_npc_preview()
                                if npc_previw_thumbnail != spr_npc_ui_talk
                                    yes = 1;
                                switch(user_tile_selected)
                                    {
                                        default: {yes = 0; break;}
                                        //Enemy Previews
                                        case spr_metal_pup:         {thumb = spr_metal_pup_thumbnail; break;}
                                        case spr_blade_orbiter:     {thumb = spr_blade_orbiter_thumbnail; break;}
                                        case spr_rocket_puncher:    {thumb = spr_rocket_launcher_thumbnail; break;}
                                        case spr_shock_puppet:      {thumb = spr_shock_puppet_thumbnail; break;}
                                        case spr_turretus:          {thumb = spr_turretus_thumbnail;break;}
                                        case star_flounder:         {thumb = star_flounder; break;}
                                        case spr_saw_flounder:      {thumb = spr_saw_flounder_thumbnail; break;}
                                        case spr_bullfrag:          {thumb = spr_bullfrag; break;}
                                        case spr_shark_torpedo_unloaded: {thumb = spr_shark_torpedo_thumbnail; break;}
                                        case spr_fire_spitter:      {thumb = spr_fire_spitter_thumbnail; break;}
                                        case spr_buoybuoy:          {thumb = spr_buoybuoy_thumbnail; break;}
                                        case spr_ghetto_blaster:    {thumb = spr_ghetto_blaster_thumbnail; break;}
                                        case spr_dna_cannon:        {thumb = spr_dna_cannon_thumbnail; break;}
                                        case spr_malleus:           {thumb = spr_malleus_thumbnail; break;}
                                        case spr_sprindog:          {thumb = spr_sprindog_thumbnail; break;}
                                        case spr_wasp:              {thumb = spr_wasp_thumbnail; break;}
                                        case spr_ant_bomb:          {thumb = spr_ant_bomb_thumbnail; break;}
                                        case spr_stinger:           {thumb = spr_stinger_thumbnail; break;}
                                        case spr_rna_cannon:        {thumb = spr_rna_cannon_thumbnail; break;}
                                        case spr_ring_hammer_idle:  {thumb = spr_ring_hammer_thumbnail; break;}
                                        case spr_iris:              {thumb = spr_iris_thumbnail; break;}
                                        case spr_sushi_roller:      {thumb = spr_sushi_roller_thumbnail; break;}
                                        case spr_axle_turret_thumbnail: {thumb = spr_axle_turret_thumbnail; break;}
                                        case spr_sea_turretus:      {thumb = spr_sea_turretus_thumbnail; break;}
                                        case spr_snappy:            {thumb = spr_snappy_thumbnail; break;}
                                        case spr_bubble_orbiter:    {thumb = spr_bubble_orbiter_thumbnail; break;}
                                        //Bosses
                                        case spr_fireworks_tank_thumbnail: {thumb = spr_fireworks_tank_thumbnail; break;}
                                        case spr_blade_subordinate:        {thumb = spr_blade_subordinate; break;}
                                        case spr_bouncer_thumbnail:        {thumb = spr_bouncer_thumbnail; break;}
                                        case spr_star_marine_base_1:       {thumb = spr_star_marine_thumbnail; break;}
                                        case spr_guardian_head:            {thumb = spr_guardian_thumbnail; break;}
                                        //Gimmicks
                                        case spr_disc_ball:         {thumb = spr_disc_ball; break;}
                                        case spr_switch_water:      {thumb = spr_switch_water_thumbnail; break;}
                                        case spr_switch_door:       {thumb = spr_switch_door_thumbnail; break;}
                                        case spr_switch_bomb:       {thumb = spr_switch_bomb_thumbnail; break;}
                                        case spr_rogue_cube:        {thumb = spr_rogue_cube_3x; break;}
                                        case spr_buoy:              {thumb = spr_buoy_thumbnail; break;}
                                        case spr_buoy_flying:       {thumb = spr_buoy_flying_thumbnail; break;}
                                        case spr_lagoon_boat:       {thumb = spr_lagoon_boat_thumbnail; break;}
                                        case spr_boost_ring_right:  {yes = 2; draw_background_stretched(tile_boost_ring_right,tile_preview_offset_x+5+u_elements,tile_preview_offset_y,20,32); break;}
                                        case spr_boost_ring_left:   {yes = 2; draw_background_stretched(tile_boost_ring_left,tile_preview_offset_x+5+u_elements,tile_preview_offset_y,20,32); break;}
                                        case spr_boost_ring_up:     {yes = 2; draw_background_stretched(tile_boost_ring_up,tile_preview_offset_x+5+u_elements,tile_preview_offset_y+6,32,20); break;}
                                        case spr_boost_ring_down:   {yes = 2; draw_background_stretched(tile_boost_ring_down,tile_preview_offset_x+5+u_elements,tile_preview_offset_y+6,32,20); break;}
                                        case spr_super_boost_ring_right:  {yes = 2; draw_background_stretched(tile_boost_ring_right,tile_preview_offset_x+5+u_elements,tile_preview_offset_y,20,32); draw_sprite_stretched(spr_super_boost_ring_right,0,tile_preview_offset_x+5+u_elements,tile_preview_offset_y,20,32); break;}
                                        case spr_super_boost_ring_left:   {yes = 2; draw_background_stretched(tile_boost_ring_left,tile_preview_offset_x+5+u_elements,tile_preview_offset_y,20,32);  draw_sprite_stretched(spr_super_boost_ring_left,0,tile_preview_offset_x+5+u_elements,tile_preview_offset_y,20,32);  break;}
                                        case spr_super_boost_ring_up:     {yes = 2; draw_background_stretched(tile_boost_ring_up,tile_preview_offset_x+u_elements,tile_preview_offset_y+6,32,20);    draw_sprite_stretched(spr_super_boost_ring_up,0,tile_preview_offset_x+u_elements,tile_preview_offset_y+6,32,20);    break;}
                                        case spr_super_boost_ring_down:   {yes = 2; draw_background_stretched(tile_boost_ring_down,tile_preview_offset_x+u_elements,tile_preview_offset_y+6,32,20);  draw_sprite_stretched(spr_super_boost_ring_down,0,tile_preview_offset_x+u_elements,tile_preview_offset_y+6,32,20);  break;}
                                        case spr_gem:
                                            {
                                                yes = 2
                                                object_limit_warning_index = obj_gem_float
                                                object_limit_sprite_index = spr_gem
                                                object_limit_max = 2
                                                break;
                                            }
                                        case spr_gold_gem:
                                            {
                                                yes = 2
                                                object_limit_warning_index = obj_gold_gem_float
                                                object_limit_sprite_index = spr_gold_gem
                                                object_limit_max = 2
                                                break;
                                            }
                                        case spr_petal_shard:
                                            {
                                                yes = 2
                                                object_limit_warning_index = obj_petal_shard
                                                object_limit_sprite_index = spr_petal_shard
                                                object_limit_max = 2
                                                break;
                                            }
                                        case spr_petal_flower:
                                            {
                                                yes = 2
                                                object_limit_warning_index = obj_petal_float
                                                object_limit_sprite_index = spr_petal_flower
                                                object_limit_max = 2
                                                break;
                                            }
                                        case spr_shield_earth:
                                            {
                                                object_limit_warning_index = obj_shield_earth
                                                object_limit_sprite_index = spr_shield_earth
                                                object_limit_max = 16
                                                break;
                                            }
                                        case spr_shield_fire_front:
                                            {
                                                object_limit_warning_index = obj_shield_fire
                                                object_limit_sprite_index = spr_shield_fire_front
                                                object_limit_max = 16
                                                break;
                                            }
                                        case spr_shield_water:
                                            {
                                                object_limit_warning_index = obj_shield_water
                                                object_limit_sprite_index = spr_shield_water
                                                object_limit_max = 16
                                                break;
                                            }
                                        case spr_shield_metal:
                                            {
                                                object_limit_warning_index = obj_shield_metal
                                                object_limit_sprite_index = spr_shield_metal
                                                object_limit_max = 16
                                                break;
                                            }
                                        case spr_shield_wood:
                                            {
                                                object_limit_warning_index = obj_shield_wood
                                                object_limit_sprite_index = spr_shield_wood
                                                object_limit_max = 16
                                                break;
                                            }
                                        case spr_platform_modifier_horizontal:
                                            {
                                                object_limit_warning_index = obj_platform_hor
                                                object_limit_sprite_index = spr_platform_modifier_horizontal
                                                object_limit_max = 2
                                                break;
                                            }
                                        case spr_platform_modifier_vertical:
                                            {
                                                object_limit_warning_index = obj_platform_ver
                                                object_limit_sprite_index = spr_platform_modifier_vertical
                                                object_limit_max = 2
                                                break;
                                            }
                                        case spr_gem_flower_modifier:
                                            {
                                                object_limit_warning_index = obj_gem_flower_modifier
                                                object_limit_sprite_index = spr_gem_flower_modifier
                                                object_limit_max = 2
                                                break;
                                            }
                                        case spr_gascan_modifier:
                                            {
                                                object_limit_warning_index = obj_gascan_modifier
                                                object_limit_sprite_index = spr_gascan_modifier
                                                object_limit_max = 2
                                                break;
                                            }
                                        case spr_chibililac_cage:
                                            {
                                                object_limit_warning_index = obj_1up
                                                object_limit_sprite_index = spr_chibililac_cage
                                                object_limit_max = 8
                                                break;
                                            }
                                        case spr_mega_crate:
                                            {
                                                object_limit_warning_index = obj_mega_crate
                                                object_limit_sprite_index = spr_mega_crate
                                                object_limit_max = 16
                                                break;
                                            }
                                        case spr_mega_bomb:
                                            {
                                                object_limit_warning_index = obj_mega_bomb
                                                object_limit_sprite_index = spr_mega_bomb
                                                object_limit_max = 16
                                                break;
                                            }
                                        case spr_mega_block:
                                            {
                                                object_limit_warning_index = obj_mega_block
                                                object_limit_sprite_index = spr_mega_block
                                                object_limit_max = 16
                                                break;
                                            }
                                    }
                                if npc_previw_thumbnail != spr_npc_ui_talk
                                    {
                                        yes = 1
                                        thumb = npc_previw_thumbnail
                                    }
                                if yes = 0
                                     draw_sprite_part_ext(user_tile_selected,0,0,0,32,32,tile_preview_offset_x+u_elements,tile_preview_offset_y,1,1,c_white,1);
                                if yes = 1
                                    draw_sprite_stretched(thumb,0,tile_preview_offset_x+u_elements,tile_preview_offset_y,32,32);
                            }
                        else
                            draw_background_stretched(ui_unknown_tile,tile_preview_offset_x+u_elements,tile_preview_offset_y,32,32);
                        break;
                    }
            }
        if object_limit_warning_index != 0
            {
                if use_tile_menu = 0
                    {
                        if (user_tile_selected != spr_gem and user_tile_selected != spr_gold_gem and user_tile_selected != spr_petal_flower
                        and user_tile_selected != spr_petal_shard)
                            draw_sprite_part_ext(user_tile_selected,0,0,0,32,32,tile_preview_offset_x+u_elements,tile_preview_offset_y,1,1,c_white,1);
                        else
                            draw_sprite_ext(object_limit_sprite_index,0,388+u_elements,53,1,1,0,c_white,use_tile_menu_alpha);
                        //Warn Players If They Are Placing Too Many Items
                        if instance_number(object_limit_warning_index) &gt; use_optimization_limit/object_limit_max
                            {
                                draw_sprite_ext(spr_hazard_warning,use_optimization_warning,383+u_elements,42,0.5,0.5,0,c_white,use_tile_menu_alpha)
                                use_optimization_warning += 0.5
                                if use_optimization_warning &gt; 3.8 use_optimization_warning = 0;
                            }
                        else
                            {
                                draw_set_font(parent.text_font_academy)
                                draw_set_halign(fa_right)
                                draw_set_alpha(use_tile_menu_alpha)
                                draw_text(404+u_elements,45,string(instance_number(object_limit_warning_index)))
                                draw_set_halign(fa_left)
                                draw_set_alpha(1)
                            }
                    }
                else
                    {
                        if (user_tile_selected != spr_gem and user_tile_selected != spr_gold_gem and user_tile_selected != spr_petal_flower
                        and user_tile_selected != spr_petal_shard)
                            draw_sprite_part_ext(user_tile_selected,0,0,0,32,32,tile_preview_offset_x+u_elements,tile_preview_offset_y,1,1,c_white,1);
                        else
                            draw_sprite_ext(object_limit_sprite_index,0,369+u_elements,34,1,1,0,c_white,1);
                    }
            }


        //Apply Alpha Transparency To The Sidebar's GUI Elements While In The Tile Menu
        draw_set_alpha(use_tile_menu_alpha)
        //Draw Cursor's X/Y Positions
        draw_set_font(editor_font)
        draw_set_color(c_white)
        draw_text_transformed(374+u_elements,79,string(use_cursor_x),1,1,0)
        draw_text_transformed(374+u_elements,94,string(use_cursor_y),1,1,0)

        //Only Draw Elements Related To Layers And Grid Snap Sizes If We're Not In Play Test Mode
        if parent.user_cursor_mode = 1 and use_bg_selector_minimize = 0
            {
                //Draw Layer Depth Icon
                if user_cursor_display_mode = 0
                    {
                        var ui_layer_selection = ui_layer_flats;
                        var ui_layer_text = lang_gui[parent.user_language_mode,63];
                        switch(user_layer_selected)
                            {
                                case 0: {break;}
                                case 1: {ui_layer_selection = ui_layer_slopes; ui_layer_text = lang_gui[parent.user_language_mode,64]; break;}
                                case 2: {ui_layer_selection = ui_layer_fofs;   ui_layer_text = "FOF"; break;}
                                case 100000: {ui_layer_selection = ui_layer_flags; ui_layer_text = lang_gui[parent.user_language_mode,68]; break;}
                                default: {ui_layer_selection = ui_layer_scene; ui_layer_text = lang_gui[parent.user_language_mode,69]; break;}
                            }
                        draw_background_ext(ui_layer_selection,369+u_elements,123,1,1,0,c_white,use_tile_menu_alpha);
                        draw_set_halign(fa_left)
                        draw_set_font(editor_layer_font)
                        draw_set_alpha(use_tile_menu_alpha)
                        draw_text(372+u_elements,124,ui_layer_text)
                        draw_set_alpha(1)
                    }
                //Otherwise, Draw Object Layer
                else
                    draw_background_ext(ui_layer_object,369+u_elements,123,1,1,0,c_white,use_tile_menu_alpha);
                //Draw Grid Size Icon
                var ui_grid_selection = ui_grid_snap_2x;
                switch(user_grid_iteration)
                    {
                        default: {break;}
                        case 2: {ui_grid_selection = ui_grid_snap_4x; break;}
                        case 3: {ui_grid_selection = ui_grid_snap_8x; break;}
                    }
                draw_background_ext(ui_grid_selection,383+u_elements,151,1,1,0,c_white,use_tile_menu_alpha); 

                //Align Layer And Snap Text To The Right
                draw_set_halign(fa_right)
                //Draw Current Layer Depth
                if user_layer_iteration &gt; 4 and user_cursor_display_mode = 0
                    {
                        var user_layer_selected_string = "1";
                        switch(user_layer_selected)
                            {
                                case -5: {user_layer_selected_string = "11"; break;}
                                case -4: {user_layer_selected_string = "10"; break;}
                                case -3: {user_layer_selected_string = "9"; break;}
                                case -2: {user_layer_selected_string = "8"; break;}
                                case -1: {user_layer_selected_string = "7"; break;}
                                case 4:  {user_layer_selected_string = "6"; break;}
                                case 5:  {user_layer_selected_string = "5"; break;}
                                case 6:  {user_layer_selected_string = "4"; break;}
                                case 7:  {user_layer_selected_string = "3"; break;}
                                case 8:  {user_layer_selected_string = "2"; break;}
                                case 9:  {user_layer_selected_string = "1"; break;}
                            }
                        draw_set_alpha(use_tile_menu_alpha)
                        draw_text_transformed(408+u_elements,124,user_layer_selected_string,1,1,0)
                        draw_set_alpha(1)
                    }
                //Draw Current Snap Size
                draw_set_alpha(use_tile_menu_alpha)
                draw_text_transformed(404+u_elements,151,string(user_grid_snap),1,1,0)
                draw_set_alpha(1)
                //Reset Alignment To The Left For Other Sidebar Elements
                draw_set_halign(fa_left)
        
                //Draw Tile Layer Mode
                if use_tile_switching_mode = 0 draw_sprite_ext(ui_mode_active,0,364+u_elements,125,1,1,0,c_white,use_tile_menu_alpha);
                if use_debug_hud_mode = 1      draw_sprite_ext(ui_mode_active,0,364+u_elements,202,1,1,0,c_white,use_tile_menu_alpha);

            }

        //Draw Displayed Button Prompts
        if use_dispaly_key_prompt = 0
            draw_background_ext(use_display_put_here,354+u_elements,63,1,1,0,c_white,use_tile_menu_alpha);
        if use_dispaly_key_prompt = 1
            draw_sprite_ext(spr_keyboard_font,key_put_here,354+u_elements,63,1,1,0,c_white,use_tile_menu_alpha);
    }

//Show Help Captions
if (user_show_help_captions = 1 and !instance_exists(obj_stamps_tool)
and use_tile_menu = 0 and use_file_menu != 2 and parent.user_cursor_mode = 1)
    {
        draw_background_ext(ui_hud_captions,0,0,1,1,0,c_white,use_tile_menu_alpha);
        draw_sprite(ui_help_captions,0,8,220)
        draw_set_color(c_white)
        draw_set_font(parent.text_font_academy)
        draw_text(29,131,lang_gui[parent.user_language_mode,41])
        draw_text(29,146,lang_gui[parent.user_language_mode,42])
        draw_text(29,161,lang_gui[parent.user_language_mode,43])
        draw_text(29,176,lang_gui[parent.user_language_mode,44])
        draw_text(29,191,lang_gui[parent.user_language_mode,45])
        draw_text(29,206,lang_gui[parent.user_language_mode,46])
        draw_text(26,222,lang_gui[parent.user_language_mode,47])
        draw_set_font(editor_font)
        if use_dispaly_key_prompt = 0
            {
                if use_file_menu = 0 draw_background_ext(use_display_snap_up,356,148,1,1,0,c_white,use_tile_menu_alpha);
                draw_background_ext(use_display_layer_down,8,128,1,1,0,c_white,use_tile_menu_alpha)
                draw_background_ext(use_display_layer_up,8,143,1,1,0,c_white,use_tile_menu_alpha)
                draw_background_ext(use_display_copy,8,158,1,1,0,c_white,use_tile_menu_alpha)
                draw_background_ext(use_display_delete,8,173,1,1,0,c_white,use_tile_menu_alpha)
                draw_background_ext(use_display_new_tile,8,188,1,1,0,c_white,use_tile_menu_alpha)
                draw_background_ext(use_display_zoom,8,204,1,1,0,c_white,use_tile_menu_alpha)
            }

        //Draw Displayed Key Prompts
        if use_dispaly_key_prompt = 1
            {
                if use_file_menu = 0 draw_sprite_ext(spr_keyboard_font,key_snap_up,356,148,1,1,0,c_white,use_tile_menu_alpha);
                draw_sprite_ext(spr_keyboard_font,key_layer_down,8,128,1,1,0,c_white,use_tile_menu_alpha)
                draw_sprite_ext(spr_keyboard_font,key_layer_up,8,143,1,1,0,c_white,use_tile_menu_alpha)
                draw_sprite_ext(spr_keyboard_font,key_copy,8,158,1,1,0,c_white,use_tile_menu_alpha)
                draw_sprite_ext(spr_keyboard_font,key_delete,8,173,1,1,0,c_white,use_tile_menu_alpha)
                draw_sprite_ext(spr_keyboard_font,key_new_tile,8,188,1,1,0,c_white,use_tile_menu_alpha)
                draw_sprite_ext(spr_keyboard_font,key_zoom,8,204,1,1,0,c_white,use_tile_menu_alpha)
            }
    }

//Reset Alpha Transparency Of The Sidebar's GUI Elements
draw_set_alpha(1)

//Draw Background Selector
if use_tile_menu = 1
    {
        var background_selector_offset_x = 52;
        if use_bg_selector_minimize = 1
            background_selector_offset_x = 228;
        draw_background(ui_background_selector,313,background_selector_offset_x)
        draw_set_font(parent.text_font_academy)
        draw_set_color(c_white)
        draw_set_halign(fa_center)
        scr_set_background_string();
        if use_bg_selector_minimize = 0
            {
                draw_text_ext_transformed(367,55,lang_gui[parent.user_language_mode,54],21,200,0.50,0.50,0)
                draw_text_ext_transformed(367,63,use_bg_name_string,21,200,0.50,0.50,0);
            }
        draw_set_halign(fa_left)
        //Draw Background Thumbnails
        if use_bg_selector_minimize = 0
            {
                draw_background(ui_weather_selector,321,122)
                draw_set_halign(fa_middle)
                draw_text_ext_transformed(367,125,lang_gui[parent.user_language_mode,55],21,200,0.50,0.50,0)
                draw_set_halign(fa_left)
                //Page 1
                if use_background_page = 0
                    {
                        var background_thumbnail_count = 0;
                        var background_thumbnail_x = 325;
                        var background_thumbnail_y = 72;
                        while(background_thumbnail_count &lt; 18)
                            {
                                draw_sprite_stretched(spr_background_selector_thumbnails,background_thumbnail_count,background_thumbnail_x,background_thumbnail_y,12,12)
                                background_thumbnail_x += 15
                                if background_thumbnail_x &gt; 408
                                    {
                                        background_thumbnail_x = 325
                                        background_thumbnail_y += 15
                                    }
                                background_thumbnail_count += 1
                            }
                    }
                //Page 2
                if use_background_page = 1
                    {
                        var background_thumbnail_count = 18;
                        var background_thumbnail_x = 325;
                        var background_thumbnail_y = 72;
                        while(background_thumbnail_count &lt; 32)
                            {
                                draw_sprite_stretched(spr_background_selector_thumbnails,background_thumbnail_count,background_thumbnail_x,background_thumbnail_y,12,12)
                                background_thumbnail_x += 15
                                if background_thumbnail_x &gt; 408
                                    {
                                        background_thumbnail_x = 325
                                        background_thumbnail_y += 15
                                    }
                                background_thumbnail_count += 1
                            }
                    }
            }
        //Display Description Box
        if use_tile_menu_subpage &gt; 0
            {
                draw_background(ui_description_box,321,123)
                draw_text_ext_transformed(324,127,use_help_description,18,184,0.5,0.5,0)
                draw_set_halign(fa_center)
                draw_set_color(c_black)
                draw_set_alpha(0.5)
                var item_description = lang_gui[parent.user_language_mode,48];
                switch(use_tile_menu_subpage)
                    {
                        default: {item_description = lang_gui[parent.user_language_mode,48]; break;}
                        case 2: {item_description = lang_gui[parent.user_language_mode,49]; break;}
                        case 3: {item_description = lang_gui[parent.user_language_mode,50]; break;}
                        case 4: {item_description = lang_gui[parent.user_language_mode,51]; break;}
                        case 5: {item_description = lang_gui[parent.user_language_mode,52]; break;}
                        case 6: {item_description = lang_gui[parent.user_language_mode,53]; break;}
                    }
                draw_text_ext_transformed(368,223,item_description,18,184,0.5,0.5,0)
                draw_set_alpha(1)
                draw_set_color(c_white)
                draw_text_ext_transformed(367,222,item_description,18,184,0.5,0.5,0)
                draw_set_halign(fa_left)
            }
        //Draw Stamp Selector
        if parent.user_cursor_mode = 1 and use_tile_menu_subpage = 0
            {
                if use_stamp_state = 0
                    {
                        draw_background(ui_stamp_maximized,user_editor_hud_offset+9,158);
                        //Draw Background Thumbnails
                        var background_thumbnail_count = 0;
                        var background_thumbnail_x = user_editor_hud_offset+12;
                        var background_thumbnail_y = 172;
                        while(background_thumbnail_count &lt; 10)
                            {
                                draw_set_alpha(0.5)
                                draw_sprite_stretched(use_stamp_list[background_thumbnail_count],0,background_thumbnail_x,background_thumbnail_y,14,14)
                                draw_set_alpha(1)
                                background_thumbnail_x += 17
                                if background_thumbnail_x &gt; 408
                                    {
                                        background_thumbnail_x = user_editor_hud_offset+12
                                        background_thumbnail_y += 17
                                    }
                                background_thumbnail_count += 1
                            }
                    }
                else
                    draw_background(ui_stamp_minimized,user_editor_hud_offset+9,158);
                //Draw Text
                draw_set_font(parent.text_font_academy)
                draw_set_color(c_white)
                draw_set_halign(fa_middle)
                draw_text_transformed(367,161,lang_gui[parent.user_language_mode,40],0.5,0.5,1)
                draw_set_halign(fa_left)
            }
    }
//Draw Highlights Under Selected Items
if use_highlight_alpha &gt; 0
    {
        //Decrement Highlighter Alpha Transparency
        use_highlight_alpha -= 0.0075
        if use_highlight_alpha &lt; 0 use_highlight_alpha = 0
        //Draw Tile Boundary Box
        draw_set_alpha(use_highlight_alpha)
        draw_rectangle_colour(use_highlight_alpha_x,use_highlight_alpha_y,floor(use_highlight_alpha_width-1),floor(use_highlight_alpha_height-1),c_red,c_red,c_yellow,c_yellow,false)
        draw_set_color(c_white)
        draw_rectangle(use_highlight_alpha_x,use_highlight_alpha_y,floor(use_highlight_alpha_width-1),floor(use_highlight_alpha_height-1),true)
        draw_set_alpha(1)
    }

//Saving Notification
if use_write_save_notification = 1 draw_background(ui_hud_saving,19,81);

if parent.general_notifications[2] &gt; 0 or parent.general_notifications[1] &gt; 0 or parent.general_notifications[0] &gt; 0
    draw_background(ui_dialogue_box,0,179);

if parent.general_notifications[0] &gt; 0
    {
        parent.general_notifications[0] -= 1
        draw_set_font(parent.text_font_academy)
        draw_text(2,222,parent.general_notifications_string[0])
        if parent.general_notifications[0] = 0 parent.general_notifications_string[0] = "";
    }

if parent.general_notifications[1] &gt; 0
    {
        parent.general_notifications[1] -= 1
        draw_set_font(parent.text_font_academy)
        draw_text(2,202,parent.general_notifications_string[1])
        if parent.general_notifications[1] = 0 parent.general_notifications_string[1] = "";
    }

if parent.general_notifications[2] &gt; 0
    {
        parent.general_notifications[2] -= 1
        draw_set_font(parent.text_font_academy)
        draw_text(2,182,parent.general_notifications_string[2])
        if parent.general_notifications[2] = 0 parent.general_notifications_string[2] = "";
    }

//Draw Weather Notifications
var storm_notification_offset = 222;
if use_zoom_position != 1
    storm_notification_offset = 204;
switch(use_weather_iterations)
    {
        default: {break;}
        case 1: {draw_background(ui_rain_notification,2,storm_notification_offset) break;}
        case 2: {draw_background(ui_storm_notification,2,storm_notification_offset) break;}
        case 3: {draw_background(ui_tempest_notification,2,storm_notification_offset) break;}
        case 4: {draw_background(ui_slime_notification,2,storm_notification_offset) break;}
        case 5: {draw_background(ui_drizzle_notification,2,storm_notification_offset) break;}
    }

//Draw Letterbox Offscreen Above The Screen, To Hide Sliding HUD Elements Offscreen
//draw_sprite_stretched(spr_transition,0,0,-64,426,64)

if use_file_menu != 2
    {
        var use_cursor_frame = use_cursor_spr;
        //Set Cursor Frame
        switch(floor(use_cursor_animation_frame))
            {
                case 0: {use_cursor_frame = use_cursor_spr; break;}
                case 1: {use_cursor_frame = use_cursor_spr_1; break;}
                case 2: {use_cursor_frame = use_cursor_spr_2; break;}
                case 3: {use_cursor_frame = use_cursor_spr_1; break;}
            }
        //Draw Sprite
        draw_background_ext(use_cursor_frame,device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),parent.mouse_scale,parent.mouse_scale,0,c_white,parent.mouse_cursor_transparency)
    }
else
    {
        if user_pen_mode = spr_erasing_cursor
            {
                var use_cursor_circle_width = abs(user_pen_size);
                draw_set_alpha(0.8)
                draw_ellipse_colour(device_mouse_x_to_gui(0)-use_cursor_circle_width,device_mouse_y_to_gui(0)-use_cursor_circle_width,device_mouse_x_to_gui(0)+use_cursor_circle_width,device_mouse_y_to_gui(0)+use_cursor_circle_width,c_red,c_yellow,false)
                draw_set_color(c_white)
                draw_ellipse(device_mouse_x_to_gui(0)-use_cursor_circle_width,device_mouse_y_to_gui(0)-use_cursor_circle_width,device_mouse_x_to_gui(0)+use_cursor_circle_width,device_mouse_y_to_gui(0)+use_cursor_circle_width,true)
                draw_set_alpha(1)
            }
        draw_sprite_ext(user_pen_mode,0,device_mouse_x_to_gui(0),device_mouse_y_to_gui(0),1,1,0,c_white,parent.mouse_cursor_transparency);
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Screensaver
if parent.joy_input_screen_saver_alpha &gt; 0
    draw_sprite_ext(spr_transition,0,0,0,426,240,0,c_white,parent.joy_input_screen_saver_alpha);

if parent.key_reset_timer &gt; 0
    {
        draw_set_font(parent.menu_font)
        draw_set_color(c_white)
        draw_set_halign(fa_right)
        draw_set_alpha(parent.key_reset_alpha)
        draw_text(424,224,"Resetting.     .     .")
        draw_set_alpha(1)
        draw_set_halign(fa_left)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Shang Mu Architect Popup Menus And Elements

if parent.user_cursor_mode = 1
    {
        //Draw Room Boundaries
        draw_line_width(use_line_top[0],use_line_top[1],use_line_top[2],use_line_top[3],4)
        draw_line_width(use_line_bottom[0],use_line_bottom[1],use_line_bottom[2],use_line_bottom[3],8)
        draw_line_width(use_line_left[0],use_line_left[1],use_line_left[2],use_line_left[3],2)
        draw_line_width(use_line_right[0],use_line_right[1],use_line_right[2],use_line_right[3],8)
    }

draw_background_stretched(ui_next_map_tiled,use_line_right[2]-64,view_yview[view_port],64,view_hview[view_port])
draw_background(ui_next_map,use_line_right[2]-64,(view_yview[view_port]+view_hview[view_port]/2)-24)
//Draw Text
draw_set_font(parent.editor_menu_font)
draw_set_color(c_white)
draw_set_halign(fa_middle)
draw_text_ext(use_line_right[2]-32,(view_yview[view_port]+view_hview[view_port]/2)-32,lang_gui[parent.user_language_mode,109],12,48)
draw_set_halign(fa_left)
if parent.use_maps_current_map &gt; 0
    {
        draw_background_stretched(ui_next_map_tiled,use_line_left[0],view_yview[view_port],64,view_hview[view_port])
        draw_background(ui_prev_map,use_line_left[0],(view_yview[view_port]+view_hview[view_port]/2)-24)
        draw_set_halign(fa_middle)
        draw_text_ext(use_line_left[0]+32,(view_yview[view_port]+view_hview[view_port]/2)-32,lang_gui[parent.user_language_mode,110],12,48)
        draw_set_halign(fa_left)
    }

if parent.user_cursor_mode = 1
    {
        draw_rectangle_colour(boss_boundary_left,boss_boundary_top,boss_boundary_right,boss_boundary_bottom,c_yellow,c_yellow,c_orange,c_orange,true)
        draw_rectangle_colour(lock_boundary_left,lock_boundary_top,lock_boundary_right,lock_boundary_bottom,c_aqua,c_aqua,c_white,c_white,true)
    }

if user_line_tool_active &gt;= 1
    {
        draw_set_color(user_line_tool_color)
        if user_pen_mode = spr_line_tool
            draw_line_width(user_line_tool_x1-0.5,user_line_tool_y1-0.5,use_cursor_x-0.5,use_cursor_y-0.5,1);
        //Draw Fainter Circles/Rectangles If The Cursor Is Too Far Away From The Origin Point
        var pen_distance = point_distance(user_line_tool_x1,user_line_tool_y1,use_cursor_x,use_cursor_y);
        var pen_alpha = 1;
        if pen_distance &gt;= 64 pen_alpha = 0.25;
        draw_set_alpha(pen_alpha)
        //Draw Circle Tool
        if user_pen_mode = spr_circle_tool
            draw_circle(user_line_tool_x1,user_line_tool_y1,point_distance(user_line_tool_x1,user_line_tool_y1,use_cursor_x,use_cursor_y),true)
        //Draw Rectangle Tool
        if user_pen_mode = spr_rectangle_tool
            draw_rectangle(user_line_tool_x1-0.5,user_line_tool_y1-0.5,use_cursor_x-0.5,use_cursor_y-0.5,true)
        draw_set_alpha(1)
    }

if use_float_window = 0
    {
        if use_delete_selection_box_active = 1
            {
                draw_set_font(parent.text_font_academy)
                draw_set_halign(fa_left)
                draw_set_color(c_white)
                var use_delete_selection_box_string = lang_gui[parent.user_language_mode,111];
                if use_tile_switching_mode = 1
                    {
                        if user_cursor_display_mode = 0 use_delete_selection_box_string = lang_gui[parent.user_language_mode,112]+string(user_layer_selected);
                        if user_cursor_display_mode = 1 use_delete_selection_box_string = lang_gui[parent.user_language_mode,113];
                    }
                draw_text(use_delete_selection_box_x_0,use_delete_selection_box_y_0-14,use_delete_selection_box_string)
                draw_set_alpha(user_tile_boundary_alpha)
                draw_rectangle_colour(use_delete_selection_box_x_0,use_delete_selection_box_y_0,floor(use_delete_selection_box_x_1),floor(use_delete_selection_box_y_1),c_blue,c_blue,c_aqua,c_aqua,false)
                draw_rectangle(use_delete_selection_box_x_0,use_delete_selection_box_y_0,floor(use_delete_selection_box_x_1),floor(use_delete_selection_box_y_1),true)
                draw_set_alpha(1)
            }
    }

if user_tool_grid = 1
    draw_background_tiled_ext(mu_pixel_grid,0,0,1,1,c_white,0.50);

if use_file_menu != 2
    {    
        if use_float_window = 0
            {
                //Draw the Tile Underneath The Cursor
                switch(user_place_mode)
                    {
                        //Draw Tile Underneath The Cursor, And It's Boundary Box
                        case 0:
                            {
                                if use_tile_menu = 0 and parent.user_cursor_mode = 1 and side_bar_allow = 0 and use_next_previous_confirm = 0
                                and use_tile_properties_enable = 0 and use_corner_box = 0 and user_place_allow = 0
                                and use_delete_selection_box_active = 0
                                    {
                                        switch(user_cursor_display_mode)
                                            {
                                                //Draw Tile
                                                case 0:
                                                    {
                                                        if !tile_exists(user_move_tile_ID)
                                                            {
                                                                draw_background(user_tile_selected,user_grid_snap_x+user_grid_offset_x,user_grid_snap_y+user_grid_offset_y);
                                                                //Draw Tile Boundary Box
                                                                draw_set_alpha(user_tile_boundary_alpha)
                                                                draw_rectangle_colour(user_grid_snap_x+user_grid_offset_x,user_grid_snap_y+user_grid_offset_y,floor(user_grid_snap_x+user_grid_offset_x+background_get_width(user_tile_selected)-1),floor(user_grid_snap_y+user_grid_offset_y+background_get_height(user_tile_selected)-1),c_red,c_red,c_yellow,c_yellow,false)
                                                                draw_set_color(c_white)
                                                                draw_rectangle(user_grid_snap_x+user_grid_offset_x,user_grid_snap_y+user_grid_offset_y,floor(user_grid_snap_x+user_grid_offset_x+background_get_width(user_tile_selected)-1),floor(user_grid_snap_y+user_grid_offset_y+background_get_height(user_tile_selected)-1),true)
                                                                draw_set_alpha(1)
                                                            }
                                                        break;
                                                    }
                                                //Draw Sprite
                                                case 1:
                                                    {
                                                        if user_tile_selected = spr_loop_logic
                                                            {
                                                                var tile_search = tile_layer_find(surface_slopes,user_grid_snap_x,user_grid_snap_y);
                
                                                                if !tile_exists(tile_search)
                                                                    {
                                                                        draw_background(mu_slope_10,user_grid_snap_x-140,user_grid_snap_y-262)
                                                                        draw_background(mu_slope_11,user_grid_snap_x-140,user_grid_snap_y-128)
                                                                        draw_background(mu_slope_12,user_grid_snap_x,user_grid_snap_y-262)
                                                                        draw_background(mu_slope_13,user_grid_snap_x,user_grid_snap_y-128)
                                                                    }
                                                            }
                                                        if user_tile_selected = spr_brick_loop
                                                            {
                                                                var tile_search = tile_layer_find(surface_slopes,user_grid_snap_x,user_grid_snap_y);
                
                                                                if !tile_exists(tile_search)
                                                                    {
                                                                        draw_background(wd_slope_4,user_grid_snap_x-80,user_grid_snap_y-240)
                                                                        draw_background(wd_slope_7,user_grid_snap_x-80,user_grid_snap_y-112)
                                                                        draw_background(wd_slope_5,user_grid_snap_x,user_grid_snap_y-240)
                                                                        draw_background(wd_slope_6,user_grid_snap_x,user_grid_snap_y-112)
                                                                    }
                                                            }
                                                        if user_tile_selected = spr_road_loop
                                                            {
                                                                var tile_search = tile_layer_find(surface_slopes,user_grid_snap_x,user_grid_snap_y);
                
                                                                if !tile_exists(tile_search)
                                                                    {
                                                                        draw_background(wd_slope_16,user_grid_snap_x-152,user_grid_snap_y-268)
                                                                        draw_background(wd_slope_17,user_grid_snap_x-152,user_grid_snap_y-124)
                                                                        draw_background(wd_slope_18,user_grid_snap_x,user_grid_snap_y-268)
                                                                        draw_background(wd_slope_19,user_grid_snap_x,user_grid_snap_y-124)
                                                                    }
                                                            }
                                                        if user_tile_selected = spr_dna_cannon
                                                            draw_background(spr_dna_cannon_base,user_grid_snap_x-39,user_grid_snap_y-24);
                                                        draw_sprite_ext(user_tile_selected,0,user_grid_snap_x,user_grid_snap_y,1,1,item_rotate_angle,c_white,1);
                                                        //Boost Rings
                                                        if user_tile_selected = spr_boost_ring_right
                                                            draw_background(tile_boost_ring_right,user_grid_snap_x,user_grid_snap_y);
                                                        if user_tile_selected = spr_boost_ring_left
                                                            draw_background(tile_boost_ring_left,user_grid_snap_x,user_grid_snap_y);
                                                        if user_tile_selected = spr_boost_ring_up
                                                            draw_background(tile_boost_ring_up,user_grid_snap_x,user_grid_snap_y);
                                                        if user_tile_selected = spr_boost_ring_down
                                                            draw_background(tile_boost_ring_down,user_grid_snap_x,user_grid_snap_y);
                                                        //Hyper Boost Rings
                                                        if user_tile_selected = spr_super_boost_ring_right
                                                            {
                                                                draw_background(tile_boost_ring_right,user_grid_snap_x,user_grid_snap_y);
                                                                draw_sprite(spr_super_boost_ring_right,0,user_grid_snap_x,user_grid_snap_y)
                                                            }
                                                        if user_tile_selected = spr_super_boost_ring_left
                                                            {
                                                                draw_background(tile_boost_ring_left,user_grid_snap_x,user_grid_snap_y);
                                                                draw_sprite(spr_super_boost_ring_left,0,user_grid_snap_x,user_grid_snap_y)
                                                            }
                                                        if user_tile_selected = spr_super_boost_ring_up
                                                            {
                                                                draw_background(tile_boost_ring_up,user_grid_snap_x,user_grid_snap_y);
                                                                draw_sprite(spr_super_boost_ring_up,0,user_grid_snap_x,user_grid_snap_y)
                                                            }
                                                        if user_tile_selected = spr_super_boost_ring_down
                                                            {
                                                                draw_background(tile_boost_ring_down,user_grid_snap_x,user_grid_snap_y);
                                                                draw_sprite(spr_super_boost_ring_down,0,user_grid_snap_x,user_grid_snap_y)
                                                            }
                                                        break;
                                                    }
                                            }
                                    }
                                if tile_exists(user_move_tile_ID)
                                    {
                                        draw_background(user_move_tile_ID,user_grid_snap_x+user_move_offset_x,user_grid_snap_y+user_move_offset_y);
                                        //Draw Tile Boundary Box
                                        draw_set_alpha(user_tile_boundary_alpha)
                                        draw_rectangle_colour(user_grid_snap_x+user_move_offset_x,user_grid_snap_y+user_move_offset_y,floor(user_grid_snap_x+user_move_offset_x+background_get_width(user_move_tile_ID)-1),floor(user_grid_snap_y+user_move_offset_y+background_get_height(user_move_tile_ID)-1),c_red,c_red,c_yellow,c_yellow,false)
                                        draw_set_color(c_white)
                                        draw_rectangle(user_grid_snap_x+user_move_offset_x,user_grid_snap_y+user_move_offset_y,floor(user_grid_snap_x+user_move_offset_x+background_get_width(user_move_tile_ID)-1),floor(user_grid_snap_y+user_move_offset_y+background_get_height(user_move_tile_ID)-1),true)
                                        draw_set_alpha(1)
                                    }
                                break;
                            }
                        //Draw A Boundary Box Of The Tile Underneath The Cursor, As It Hovers Over The Tile
                        case 1:
                            {
                                //Scan For A Tile To Show Its Boundary Box
                                var tile_scanner = tile_layer_find(user_layer_selected,use_cursor_x,use_cursor_y);
                
                                if tile_exists(tile_scanner) and user_cursor_mode = 0 and use_tile_menu = 0 and (side_bar_allow = 0) and user_cursor_display_mode = 0
                                    {
                                        //Check For Exceptional Tiles That Should Be Excluded From Scanning (Such As Object-Specific Flag Tiles)
                                        var tile_scanner_ID = tile_get_background(tile_scanner);
                
                                        //Check for exceptional tiles the editor should be ignoring (Such as object-specific flag tiles)
                                        var tile_scanner_IDs_exceptional_tiles = scr_check_layer_surface(tile_scanner_ID)
        
                                        //Create exceptions for specific slope tiles
                                        var tile_scanner_IDs_exceptional_slope_tiles = 0;
                                        var tile_scanner_result = scr_set_check_exceptional_slope_tiles(tile_scanner_ID);
                                        if tile_scanner_result = 1
                                            {
                                                tile_scanner_IDs_exceptional_tiles = 1
                                                tile_scanner_IDs_exceptional_slope_tiles = 1
                                            }
                
                                        //If the exceptional tile scan returned positive, scan for any tiles found underneath the player's cursor
                                        if tile_scanner_IDs_exceptional_tiles = 1 and (!mouse_check_button(joy_mouse_button_left) and use_put_here = 0)
                                            {
                                                //Determine The Tile's Scaling
                                                var tile_modifier_x = tile_get_xscale(tile_scanner);
                                                var tile_modifier_y = tile_get_yscale(tile_scanner);
                                                //Draw Tile Boundary Box
                                                draw_set_alpha(user_tile_boundary_alpha)
                                                draw_rectangle_colour(tile_get_x(tile_scanner),tile_get_y(tile_scanner),floor(tile_get_x(tile_scanner)+tile_get_width(tile_scanner)*tile_modifier_x-1),floor(tile_get_y(tile_scanner)+tile_get_height(tile_scanner)*tile_modifier_y-1),c_red,c_red,c_yellow,c_yellow,false)
                                                draw_set_color(c_white)
                                                draw_rectangle(tile_get_x(tile_scanner),tile_get_y(tile_scanner),floor(tile_get_x(tile_scanner)+tile_get_width(tile_scanner)*tile_modifier_x-1),floor(tile_get_y(tile_scanner)+tile_get_height(tile_scanner)*tile_modifier_y-1),true)
                                                draw_set_alpha(1)
                                                //Draw Scaling Arrows
                                                if use_zoom_position &gt;= 1 and use_zoom_position &lt;= 3
                                                and not ((user_layer_selected = surface_slopes and tile_scanner_IDs_exceptional_slope_tiles = 0)
                                                or user_layer_selected = surface_enemy_flags or user_layer_selected = surface_flags)
                                                    {
                                                        draw_background(ui_resize_top_right,tile_get_x(tile_scanner)+tile_get_width(tile_scanner)-10,tile_get_y(tile_scanner))
                                                        draw_background(ui_resize_bottom_right,tile_get_x(tile_scanner)+tile_get_width(tile_scanner)-10,tile_get_y(tile_scanner)+tile_get_height(tile_scanner)-10)
                                                        draw_background(ui_resize_bottom_left,tile_get_x(tile_scanner),tile_get_y(tile_scanner)+tile_get_height(tile_scanner)-10)
                                                        draw_background(ui_resize_top_left,tile_get_x(tile_scanner),tile_get_y(tile_scanner))
                                                    }
                                                //After half of a second has passed, display the tile properties popup
                                                use_tile_properties_timer += 1
                                                if use_tile_properties_timer = 90 and use_tile_properties_enable = 0
                                                    {
                                                        var tool_x = tile_get_x(tile_scanner)+(tile_get_width(tile_scanner)/2);
                                                        var tool_y = tile_get_y(tile_scanner)
                                                        var tool_id = instance_create(tool_x-35,tool_y-35,obj_tile_properties_tool);
                                                        tool_id.gui_tile_id = tile_scanner
                                                        use_tile_properties_enable = 1
                                                        //Set cursor boundaries for disabling the tile properies popup
                                                        use_tile_properties_xscale = tile_get_xscale(tile_scanner)
                                                        use_tile_properties_yscale = tile_get_yscale(tile_scanner)
                                                        //If the tile isn't flipped, get normal horizontal boundaries
                                                        if tile_modifier_x &gt; 0
                                                            {
                                                                use_tile_properties_x = floor(tile_get_x(tile_scanner))+floor(tile_get_width(tile_scanner)/2)-use_zoom_tile_menu_scaling
                                                                use_tile_properties_boundary_x1 = floor(tile_get_x(tile_scanner))
                                                                use_tile_properties_boundary_x2 = floor(tile_get_x(tile_scanner))+floor(tile_get_width(tile_scanner))
                                                                //Set cursor boundaries for disabling tile interactions behind the tile properties popup
                                                                use_tile_properties_cursor_boundary_x1 = floor(tile_get_x(tile_scanner))+floor(tile_get_width(tile_scanner)/2)-use_zoom_tile_menu_scaling
                                                                use_tile_properties_cursor_boundary_x2 = floor(tile_get_x(tile_scanner))+floor(tile_get_width(tile_scanner)/2)+use_zoom_tile_menu_scaling
                                                            }
                                                        //If the tile is flipped, get mirrored horizontal boundaries
                                                        if tile_modifier_x &lt; 0
                                                            {
                                                                use_tile_properties_x = floor(tile_get_x(tile_scanner))-floor(tile_get_width(tile_scanner)/2)-use_zoom_tile_menu_scaling
                                                                use_tile_properties_boundary_x1 = floor(tile_get_x(tile_scanner))-floor(tile_get_width(tile_scanner))
                                                                use_tile_properties_boundary_x2 = floor(tile_get_x(tile_scanner))
                                                                //Set cursor boundaries for disabling tile interactions behind the tile properties popup
                                                                use_tile_properties_cursor_boundary_x1 = floor(tile_get_x(tile_scanner))-floor(tile_get_width(tile_scanner)/2)-use_zoom_tile_menu_scaling
                                                                use_tile_properties_cursor_boundary_x2 = floor(tile_get_x(tile_scanner))-floor(tile_get_width(tile_scanner)/2)+use_zoom_tile_menu_scaling
                                                            }
                                                        //If the tile isn't a slope tile, get normal vertical boundaries
                                                        if user_layer_selected != surface_slopes and user_layer_selected != surface_flats
                                                            {
                                                                //If the tile isn't flipped, get normal vertical boundaries
                                                                if tile_modifier_y &gt; 0
                                                                    {
                                                                        use_tile_properties_y = floor(tile_get_y(tile_scanner)-use_zoom_tile_menu_scaling_vertical_0)
                                                                        use_tile_properties_boundary_y1 = floor(tile_get_y(tile_scanner)-use_zoom_tile_menu_scaling_vertical_0)
                                                                        use_tile_properties_boundary_y2 = floor(tile_get_y(tile_scanner)+tile_get_height(tile_scanner))
                                                                        //Set cursor boundaries for disabling tile interactions behind the tile properties popup
                                                                        use_tile_properties_cursor_boundary_y1 = floor(tile_get_y(tile_scanner)-use_zoom_tile_menu_scaling_vertical_0)
                                                                        use_tile_properties_cursor_boundary_y2 = floor(tile_get_y(tile_scanner)+use_zoom_tile_menu_scaling_vertical_1)
                                                                    }
                                                                //If the tile is flipped, get mirrored vertical boundaries
                                                                if tile_modifier_y &lt; 0
                                                                    {
                                                                        use_tile_properties_y = floor(tile_get_y(tile_scanner)-tile_get_height(tile_scanner)-use_zoom_tile_menu_scaling_vertical_0)
                                                                        use_tile_properties_boundary_y1 = floor(tile_get_y(tile_scanner)-tile_get_height(tile_scanner)-use_zoom_tile_menu_scaling_vertical_0)
                                                                        use_tile_properties_boundary_y2 = floor(tile_get_y(tile_scanner))
                                                                        //Set cursor boundaries for disabling tile interactions behind the tile properties popup
                                                                        use_tile_properties_cursor_boundary_y1 = floor(tile_get_y(tile_scanner)-tile_get_height(tile_scanner)-use_zoom_tile_menu_scaling_vertical_0)
                                                                        use_tile_properties_cursor_boundary_y2 = floor(tile_get_y(tile_scanner)+use_zoom_tile_menu_scaling_vertical_1)
                                                                    }
                                                            }
                                                        //If the tile is a slope tile, get shorter vertical boundaries
                                                        else
                                                            {
                                                                use_tile_properties_y = floor(tile_get_y(tile_scanner)-use_zoom_tile_menu_scaling_vertical_0)
                                                                use_tile_properties_boundary_y1 = floor(tile_get_y(tile_scanner)-use_zoom_tile_menu_scaling_vertical_2)
                                                                use_tile_properties_boundary_y2 = floor(tile_get_y(tile_scanner)+tile_get_height(tile_scanner))
                                                                //Set cursor boundaries for disabling tile interactions behind the tile properties popup
                                                                use_tile_properties_cursor_boundary_y1 = floor(tile_get_y(tile_scanner)-use_zoom_tile_menu_scaling_vertical_2)
                                                                use_tile_properties_cursor_boundary_y2 = floor(tile_get_y(tile_scanner)+use_zoom_tile_menu_scaling_vertical_1)
                                                            }
                                                    }
                                                if use_tile_properties_timer = 90 and (user_layer_selected = surface_items or user_layer_selected = surface_modifiers) and use_tile_properties_enable = 0
                                                    {
                                                        scr_clear_zoom_level();
                                                    }
                                            }
                                    }
                                break;
                            }
                        //Draw Item Tiles Over Objects
                        case 2:
                            {
                                use_item_check_timer += 1
                                if use_item_check_timer = 10
                                    {
                                        use_item_check_timer = 0
                                        use_item_check_verified = scr_set_check_item(user_tile_selected);
                                        var instance_ID = instance_position(use_cursor_x,use_cursor_y,obj_delete_parent);
                                        if instance_exists(instance_ID)
                                            {
                                                if instance_ID.sprite_index = user_tile_selected
                                                    use_item_check_verified = 0;
                                            }
                                    }
                                if use_item_check_verified = 1 and side_bar_allow = 0 and use_tile_menu = 0
                                    draw_sprite(user_tile_selected,0,user_grid_snap_x,user_grid_snap_y);
                                break;
                            }
                    }
            }

        //Draw Moving Platform Placer Path
        if use_fof = 1
            {
                draw_line_width_colour(user_draw_path_x_1,user_draw_path_y_1,user_draw_path_x_2,user_draw_path_y_2,4,c_yellow,c_orange)
                draw_line_width_colour(user_draw_path_x_1,user_draw_path_y_1,user_draw_path_x_2,user_draw_path_y_2,2,c_orange,c_yellow)
                if user_tile_selected = spr_platform_modifier_horizontal
                    {
                        if user_draw_path_x_1 &lt; user_draw_path_x_2
                            draw_background_ext(mu_fof_3,user_draw_path_x_1+(abs(user_draw_path_x_1 - user_draw_path_x_2)/2)-32,
                            user_draw_path_y_1-15,1,1,0,c_white,0.5);
                        if user_draw_path_x_1 &gt; user_draw_path_x_2
                            draw_background_ext(mu_fof_3,user_draw_path_x_1-(abs(user_draw_path_x_1 - user_draw_path_x_2)/2)-32,
                            user_draw_path_y_1-15,1,1,0,c_white,0.5);
                    }
                if user_tile_selected = spr_platform_modifier_vertical
                    {
                        if user_draw_path_y_1 &lt; user_draw_path_y_2
                            draw_background_ext(mu_fof_3,user_draw_path_x_1-28,
                            user_draw_path_y_1+(abs(user_draw_path_y_1 - user_draw_path_y_2)/2)-15,1,1,0,c_white,0.5);
                        if user_draw_path_y_1 &gt; user_draw_path_y_2
                            draw_background_ext(mu_fof_3,user_draw_path_x_1-28,
                            user_draw_path_y_1-(abs(user_draw_path_y_1 - user_draw_path_y_2)/2)-15,1,1,0,c_white,0.5);
                    }
            }
        
        //Draw Repeat Tile Boundary Box
        if use_corner_box &gt; 0 and use_corner_box &lt; 5
            {
                //Draw Tile Previews
                var use_corner_counter_x = 0;
                var use_corner_counter_y = 0;
                var use_corner_width_s  = abs(use_corner_box_bottom_left_x - use_corner_box_top_right_x)
                var use_corner_height_s = abs(use_corner_box_bottom_left_y - use_corner_box_top_right_y)
                var use_tile_width_s  = tile_get_width(use_corner_box_id);
                var use_tile_height_s = tile_get_height(use_corner_box_id);
        
                //How many tiles can we create?
                use_corner_width_result_s  = floor(use_corner_width_s / use_tile_width_s);
                use_corner_height_result_s = floor(use_corner_height_s / use_tile_height_s);
                switch(use_corner_box)
                    {
                        //Top-right
                        case 1:
                            {
                                while(use_corner_counter_y &lt; use_corner_height_result_s)
                                    {
                                        draw_background(tile_get_background(use_corner_box_id),
                                        use_corner_box_bottom_left_x+(use_tile_width_s*use_corner_counter_x),
                                        use_corner_box_bottom_left_y-tile_get_height(use_corner_box_id)-(use_tile_height_s*use_corner_counter_y))
                                        use_corner_counter_x += 1;
                                        if (use_corner_counter_x &gt; use_corner_width_result_s)
                                            {
                                                use_corner_counter_x = 0;
                                                use_corner_counter_y += 1;
                                            }
                                    }
                                break;
                            }
                        //Bottom-right
                        case 2:
                            {
                                while(use_corner_counter_y &lt; use_corner_height_result_s)
                                    {
                                        draw_background(tile_get_background(use_corner_box_id),
                                        use_corner_box_bottom_left_x+(use_tile_width_s*use_corner_counter_x),
                                        use_corner_box_bottom_left_y+(use_tile_height_s*use_corner_counter_y))
                                        use_corner_counter_x += 1;
                                        if (use_corner_counter_x &gt; use_corner_width_result_s)
                                            {
                                                use_corner_counter_x = 0;
                                                use_corner_counter_y += 1;
                                            }
                                    }
                                break;
                            }
                        //Bottom-left
                        case 3:
                            {
                                while(use_corner_counter_y &lt; use_corner_height_result_s)
                                    {
                                        draw_background(tile_get_background(use_corner_box_id),
                                        use_corner_box_bottom_left_x-tile_get_width(use_corner_box_id)-(use_tile_width_s*use_corner_counter_x),
                                        use_corner_box_bottom_left_y+(use_tile_height_s*use_corner_counter_y))
                                        use_corner_counter_x += 1;
                                        if (use_corner_counter_x &gt; use_corner_width_result_s)
                                            {
                                                use_corner_counter_x = 0;
                                                use_corner_counter_y += 1;
                                            }
                                    }
                                break;
                            }
                        //Top-left
                        case 4:
                            {
                                while(use_corner_counter_y &lt; use_corner_height_result_s)
                                    {
                                        draw_background(tile_get_background(use_corner_box_id),
                                        use_corner_box_bottom_left_x-tile_get_width(use_corner_box_id)-(use_tile_width_s*use_corner_counter_x),
                                        use_corner_box_bottom_left_y-tile_get_height(use_corner_box_id)-(use_tile_height_s*use_corner_counter_y))
                                        use_corner_counter_x += 1;
                                        if (use_corner_counter_x &gt; use_corner_width_result_s)
                                            {
                                                use_corner_counter_x = 0;
                                                use_corner_counter_y += 1;
                                            }
                                    }
                                break;
                            }
                    }
                //Draw Tile Boundary Box
                draw_set_alpha(user_tile_boundary_alpha)
                draw_rectangle_colour(use_corner_box_bottom_left_x,use_corner_box_bottom_left_y,floor(use_corner_box_top_right_x-1),floor(use_corner_box_top_right_y-1),c_red,c_red,c_yellow,c_yellow,false)
                draw_set_color(c_white)
                draw_rectangle(use_corner_box_bottom_left_x,use_corner_box_bottom_left_y,floor(use_corner_box_top_right_x-1),floor(use_corner_box_top_right_y-1),true)
                draw_set_alpha(1)
        
            }

        //Draw Loop Exit Display Assistant
        if user_cursor_display_mode = 1 and user_tile_selected = spr_loop_exit
            {
                if use_tile_menu = 0 and user_cursor_mode = 0 and side_bar_allow = 0
                and use_tile_properties_enable = 0 and use_corner_box = 0
                and user_move_tile_ID = -1 and user_place_allow = 0
                    {
                        var user_loop_exit_assistant_id = tile_layer_find(surface_slopes,use_cursor_x,use_cursor_y);

                        use_loop_exit_timer += 1

                        if use_loop_exit_timer &gt;= 8
                            {
                                user_loop_exit_assistant_id_prev = user_loop_exit_assistant_id
                                use_loop_exit_timer = 0
                            }
                        if user_loop_exit_assistant_id_prev != user_loop_exit_assistant_id
                            {
                                use_loop_exit_x = 0
                                use_loop_exit_y = 0
                                use_loop_exit_angle = 0
                            }
        
                        if tile_exists(user_loop_exit_assistant_id)
                            {
                                //Animate Example Player
                                use_loop_exit_frame += 0.25
                                if use_loop_exit_frame &gt; 3.8 use_loop_exit_frame = 0;
                                //Decide Example Player's Skin
                                switch(obj_game_logic.skin)
                                    {
                                        case spr_lilac: {use_loop_exit_skin = spr_loop_exit_example_lilac; break;}
                                        case spr_carol: {use_loop_exit_skin = spr_loop_exit_example_carol; break;}
                                        case spr_milla: {use_loop_exit_skin = spr_loop_exit_example_milla; break;}
                                        case spr_spade: {use_loop_exit_skin = spr_loop_exit_example_spade; break;}
                                    }

                                var bg_id = tile_get_background(user_loop_exit_assistant_id);

                                //Top-Left -90 Degrees
                                if bg_id = mu_slope_10
                                or bg_id = mu_slope_14
                                or bg_id = wd_slope_4
                                or bg_id = wd_slope_12
                                or bg_id = wd_slope_16
                                or bg_id = wd_slope_20
                                    {
                                        use_loop_exit_display_target_angle = -90
                                        use_loop_exit_display_angle = lerp(use_loop_exit_display_angle,use_loop_exit_display_target_angle,0.15);
                                        draw_sprite_ext(spr_loop_exit_path,0,tile_get_x(user_loop_exit_assistant_id)+background_get_width(bg_id),tile_get_y(user_loop_exit_assistant_id)+background_get_height(bg_id),1,1,0,c_white,1);
                                        draw_sprite_ext(spr_loop_exit_path,1,tile_get_x(user_loop_exit_assistant_id)+background_get_width(bg_id),tile_get_y(user_loop_exit_assistant_id)+background_get_height(bg_id),1,1,use_loop_exit_display_angle,c_white,1);
                                        draw_sprite_ext(spr_loop_exit_path,2,tile_get_x(user_loop_exit_assistant_id)+background_get_width(bg_id),tile_get_y(user_loop_exit_assistant_id)+background_get_height(bg_id),1,1,use_loop_exit_display_target_angle,c_white,user_tile_boundary_alpha+0.25);

                                        //Reset Boundaries For Example Player        
                                        if use_loop_exit_y &lt; -168
                                            {
                                                use_loop_exit_x = 0
                                                use_loop_exit_y = 0
                                                use_loop_exit_angle = 0
                                            }
                                        if use_loop_exit_angle &gt; 0 use_loop_exit_angle = 0;
                                        //Example Player Movement
                                        if use_loop_exit_angle = 0 use_loop_exit_x -= 8;
                                        if use_loop_exit_angle &lt;= -90 use_loop_exit_y -= 8;
                                        if use_loop_exit_x &lt; -168 use_loop_exit_angle -= 8;
                                        if use_loop_exit_angle &lt; -90 use_loop_exit_angle = -90;
                                        //Draw Example Player
                                        draw_sprite_ext(use_loop_exit_skin,use_loop_exit_frame,(tile_get_x(user_loop_exit_assistant_id)+256)+use_loop_exit_x,tile_get_y(user_loop_exit_assistant_id)+168+use_loop_exit_y,-1,1,use_loop_exit_angle,c_white,0.75);
                                    }
        
                                //Bottom-Left 0 Degrees
                                if bg_id = mu_slope_11
                                or bg_id = mu_slope_15
                                or bg_id = wd_slope_7
                                or bg_id = wd_slope_15
                                or bg_id = wd_slope_17
                                or bg_id = wd_slope_21 
                                    {
                                        use_loop_exit_display_target_angle = 0
                                        use_loop_exit_display_angle = lerp(use_loop_exit_display_angle,use_loop_exit_display_target_angle,0.15);
                                        draw_sprite_ext(spr_loop_exit_path,0,tile_get_x(user_loop_exit_assistant_id)+background_get_width(bg_id),tile_get_y(user_loop_exit_assistant_id),1,1,0,c_white,1);
                                        draw_sprite_ext(spr_loop_exit_path,1,tile_get_x(user_loop_exit_assistant_id)+background_get_width(bg_id),tile_get_y(user_loop_exit_assistant_id),-1,1,use_loop_exit_display_angle,c_white,1);
                                        draw_sprite_ext(spr_loop_exit_path,2,tile_get_x(user_loop_exit_assistant_id)+background_get_width(bg_id),tile_get_y(user_loop_exit_assistant_id),-1,1,use_loop_exit_display_target_angle,c_white,user_tile_boundary_alpha+0.25);

                                        //Reset Boundaries For Example Player        
                                        if use_loop_exit_x &gt; 168
                                            {
                                                use_loop_exit_x = 0
                                                use_loop_exit_y = 0
                                                use_loop_exit_angle = 270
                                            }
                                        if use_loop_exit_angle &lt; 270 use_loop_exit_angle = 270;
                                        //Example Player Movement
                                        if use_loop_exit_angle = 270 use_loop_exit_y += 8;
                                        if use_loop_exit_angle = 360 use_loop_exit_x += 8;
                                        if use_loop_exit_y &gt; 168 use_loop_exit_angle += 8;
                                        if use_loop_exit_angle &gt; 360 use_loop_exit_angle = 360;
                                        //Draw Example Player
                                        draw_sprite_ext(use_loop_exit_skin,use_loop_exit_frame,(tile_get_x(user_loop_exit_assistant_id)+96)+use_loop_exit_x,(tile_get_y(user_loop_exit_assistant_id)-168)+use_loop_exit_y,1,1,use_loop_exit_angle,c_white,0.75);
                                    }
        
                                //Top-Right 90 Degrees
                                if bg_id = mu_slope_12
                                or bg_id = mu_slope_16
                                or bg_id = wd_slope_5
                                or bg_id = wd_slope_13
                                or bg_id = wd_slope_18
                                or bg_id = wd_slope_22
                                    {
                                        use_loop_exit_display_target_angle = 90
                                        use_loop_exit_display_angle = lerp(use_loop_exit_display_angle,use_loop_exit_display_target_angle,0.15);
                                        draw_sprite_ext(spr_loop_exit_path,0,tile_get_x(user_loop_exit_assistant_id),tile_get_y(user_loop_exit_assistant_id)+background_get_height(bg_id),1,1,0,c_white,1);
                                        draw_sprite_ext(spr_loop_exit_path,1,tile_get_x(user_loop_exit_assistant_id),tile_get_y(user_loop_exit_assistant_id)+background_get_height(bg_id),-1,1,use_loop_exit_display_angle,c_white,1);
                                        draw_sprite_ext(spr_loop_exit_path,2,tile_get_x(user_loop_exit_assistant_id),tile_get_y(user_loop_exit_assistant_id)+background_get_height(bg_id),-1,1,use_loop_exit_display_target_angle,c_white,user_tile_boundary_alpha+0.25);

                                        //Reset Boundaries For Example Player        
                                        if use_loop_exit_y &lt; -168
                                            {
                                                use_loop_exit_x = 0
                                                use_loop_exit_y = 0
                                                use_loop_exit_angle = 0
                                            }
                                        if use_loop_exit_angle &lt; 0 use_loop_exit_angle = 0;
                                        //Example Player Movement
                                        if use_loop_exit_angle = 0 use_loop_exit_x += 8;
                                        if use_loop_exit_angle &gt;= 90 use_loop_exit_y -= 8;
                                        if use_loop_exit_x &gt; 168 use_loop_exit_angle += 8;
                                        if use_loop_exit_angle &gt; 90 use_loop_exit_angle = 90;
                                        //Draw Example Player
                                        draw_sprite_ext(use_loop_exit_skin,use_loop_exit_frame,(tile_get_x(user_loop_exit_assistant_id)-168)+use_loop_exit_x,tile_get_y(user_loop_exit_assistant_id)+168+use_loop_exit_y,1,1,use_loop_exit_angle,c_white,0.75);
                                    }
        
                                //Bottom-Right 0 Degrees
                                if bg_id = mu_slope_13
                                or bg_id = mu_slope_17
                                or bg_id = wd_slope_6
                                or bg_id = wd_slope_14
                                or bg_id = wd_slope_19
                                or bg_id = wd_slope_23
                                    {
                                        use_loop_exit_display_target_angle = 0
                                        use_loop_exit_display_angle = lerp(use_loop_exit_display_angle,use_loop_exit_display_target_angle,0.15);
                                        draw_sprite_ext(spr_loop_exit_path,0,tile_get_x(user_loop_exit_assistant_id),tile_get_y(user_loop_exit_assistant_id),1,1,0,c_white,1);
                                        draw_sprite_ext(spr_loop_exit_path,1,tile_get_x(user_loop_exit_assistant_id),tile_get_y(user_loop_exit_assistant_id),1,1,use_loop_exit_display_angle,c_white,1);
                                        draw_sprite_ext(spr_loop_exit_path,2,tile_get_x(user_loop_exit_assistant_id),tile_get_y(user_loop_exit_assistant_id),1,1,use_loop_exit_display_target_angle,c_white,user_tile_boundary_alpha+0.25);

                                        //Reset Boundaries For Example Player        
                                        if use_loop_exit_x &lt; -168
                                            {
                                                use_loop_exit_x = 0
                                                use_loop_exit_y = 0
                                                use_loop_exit_angle = 90
                                            }
                                        if use_loop_exit_angle &gt; 90 use_loop_exit_angle = 90;
                                        //Example Player Movement
                                        if use_loop_exit_angle = 90 use_loop_exit_y += 8;
                                        if use_loop_exit_angle = 0 use_loop_exit_x -= 8;
                                        if use_loop_exit_y &gt; 168 use_loop_exit_angle -= 8;
                                        if use_loop_exit_angle &lt; 0 use_loop_exit_angle = 0;
                                        //Draw Example Player
                                        draw_sprite_ext(use_loop_exit_skin,use_loop_exit_frame,(tile_get_x(user_loop_exit_assistant_id)+16)+use_loop_exit_x,(tile_get_y(user_loop_exit_assistant_id)-168)+use_loop_exit_y,-1,1,use_loop_exit_angle,c_white,0.75);
                                    }
                            }
                        else
                            {
                                use_loop_exit_x = 0
                                use_loop_exit_y = 0
                                use_loop_exit_angle = 0
                            }
                    }
            }
        //Draw Click Particle Effect
        if use_particle_frame &gt; 0 draw_sprite_ext(spr_cube_pop_large,use_particle_frame,use_particle_x,use_particle_y,use_zoom_multiplier,use_zoom_multiplier,0,c_white,obj_game_logic.mouse_cursor_transparency);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
