<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bubble_orbiter</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-7</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy_floater</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics and Animation Variables
event_inherited()
scr_enemy_hp(8)
death_frame = 1
flash_palette = spr_bubble_orbiter_palette
offdir = 1                          //Sprite Offset Direction
offtime = 0                         //Sprite Animation Timer
anchor = y                          //Sprite Anchor Point
dropped_goodies = obj_petal
//Bubbles (Orbital)
bubble_speed = 2
bubble_speed_target = 2
bubble_count = 15
bubble_count_half = bubble_count / 2
var count = 0;
while(count &lt;= bubble_count)
    {
        ball_x[count] = x
        ball_y[count] = y + 16
        ball_dir[count] = 1
        ball_scale[count] = 1
        ball_target[count] = 1
        ball_health[count] = 1
        count += 1
    }
//Bubbles (Player Hurt State)
bubble_hurt_timer = -1
bubble_health = bubble_count
var count = 0;
while(count &lt;= 4)
    {
        hurt_x[count] = -64
        hurt_y[count] = -64
        hurt_gravity[count] = -4
        hurt_scale[count] = random_range(0.6,1)
        hurt_speed[count] = random_range(-4,4)
        count += 1
    }
//Bubbles (Death State)
bubble_dead_timer = 0
var count = 0;
while(count &lt;= 4)
    {
        dead_x[count] = -64
        dead_y[count] = -64
        dead_gravity[count] = -4
        dead_scale[count] = random_range(0.6,1)
        dead_speed[count] = random_range(-4,4)
        count += 1
    }
//Override bubble X positions with hand-written coordinates
//Coordinates assume that we're starting from the farthest-left
//foreground bubble
ball_x[ 0] = x - 96
ball_x[ 1] = x - 80
ball_x[ 2] = x - 64
ball_x[ 3] = x - 32
ball_x[ 4] = x
ball_x[ 5] = x + 32
ball_x[ 6] = x + 64
ball_x[ 7] = x + 80
ball_x[ 8] = x + 96
ball_x[ 9] = x + 48
ball_x[10] = x + 16
ball_x[11] = x
ball_x[12] = x - 16
ball_x[13] = x - 48
ball_x[14] = x - 72
ball_x[15] = x - 80

ball_dir[0] = 1
ball_dir[1] = 1
ball_dir[2] = 1
ball_dir[3] = 1
ball_dir[4] = 1
ball_dir[5] = 1
ball_dir[6] = 1
ball_dir[7] = 1
ball_dir[8] = -1
ball_dir[9] = -1
ball_dir[10] = -1
ball_dir[11] = -1
ball_dir[12] = -1
ball_dir[13] = -1
ball_dir[14] = -1
ball_dir[15] = -1

//Editor Mode Variables
width_x = sprite_width/2
height_y = sprite_height/2
can_hold_items = 0

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Logic and Animations
event_inherited()

if o.pause = 0
    {
        if death = 0 and freeze = 0 and state = 0
            {
                //Change facing direction
                if (o.px &gt;  x) xdir = 1;
                if (o.px &lt;= x) xdir = -1;
                //Apply Speed To Us
                y += offset
                //Apply Movement Speed
                if offdir = 0 and offset &lt; 0.5 offset += 0.10;
                if offdir = 1 and offset &gt; -8  offset -= 0.05;
                //Switch Direction of Movement
                if y &lt; anchor - 8   {offdir = 0; offtime += 1; bubble_speed_target = 2;}
                if y &gt; anchor       {offdir = 1; offtime += 1; bubble_speed_target = 1.5;}
                //Bubble Movement
                var count = 0;
                while(count &lt;= bubble_count)
                    {
                        if (ball_x[count] &gt; x + 56) ball_dir[count] = -1;
                        if (ball_x[count] &lt; x - 56) ball_dir[count] =  1;
                        bubble_speed = lerp(bubble_speed,bubble_speed_target,0.08)
                        ball_x[count] += bubble_speed*ball_dir[count]
                        //Change sphere's size in relation to its distance from the bubble orbiter
                        if ball_x[count] &lt; x - 24 ball_target[count] = 1;
                        if ball_x[count] &gt; x + 24 ball_target[count] = 0.6;
                        ball_scale[count] = lerp(ball_scale[count],ball_target[count],0.1)
                        count += 1
                    }
                //Attack the Player If They Touching Our Bubbles
                if (o.user_cursor_mode = 0 and bubble_health != 0)
                    {
                        if point_in_rectangle(o.universal_player_x,o.universal_player_y,x-64,y-16,x+64,y+16)
                        and o.hurt[0] = 0 and o.hurt[1] = 0
                        and o.shield_invuln = 32
                        and not (o.shield_active = 1 and o.shield = spr_shield_water)
                        //Also, Only Deal Damage If Our Swords Are Falling Down
                            {
                                scr_enemy_deal_damage(0.4,1,2)
                                bubble_hurt_timer = 0
                                audio_play_sound(snd_mud_splat,50,false)
                            }
                        if point_in_rectangle(o.universal_player_x,o.universal_player_y,x-64,y-16,x+64,y+16)
                        and (o.shield_active = 1 and o.shield = spr_shield_water)
                            {
                                if bubble_hurt_timer &gt; 30 or bubble_hurt_timer = -1
                                    {
                                        bubble_hurt_timer = 0
                                         audio_play_sound(snd_mud_splat,50,false)
                                    }
                            }
                        //Bomb Cube
                        var instance_ID = collision_rectangle(x-64,y-16,x+64,y+16,obj_player_cube_alt,false,true);
                        if instance_ID != noone
                            {
                                if instance_ID.cube_jiggle_timer = 0
                                    {
                                        instance_ID.cube_jiggle_timer = 10
                                        instance_ID.cube_health += 0.50
                                        bubble_hurt_timer = 0
                                    }
                            }
                        if obj_game_logic.user_enemy_level &lt; 2
                            {
                                //Attack other enemies within range of the boxing glove
                                instance_ID = collision_rectangle(x-64,y-16,x+64,y+16,obj_enemy_parent,false,true);
                                if instance_exists(instance_ID)
                                    {
                                        if instance_ID.attacked = 0 and instance_ID.alpha = 0
                                            {
                                                instance_ID.attacked = 1
                                                instance_ID.attacked_damage = 2
                                                bubble_hurt_timer = 0
                                            }
                                    }
                            }
                    }
            }
        //Bubbles (Player Hurt State Particles)
        if bubble_hurt_timer &gt;= 0
            {
                bubble_hurt_timer += 1
                if bubble_hurt_timer = 1
                    {
                        var count = 0;
                        while(count &lt;= 4)
                            {
                                hurt_x[count] = o.universal_player_x + random_range(-8,8)
                                hurt_y[count] = o.universal_player_y + random_range(-8,8)
                                hurt_gravity[count] = -4
                                hurt_speed[count] = random_range(-4,4)
                                ball_health[bubble_health] = 0
                                count += 1
                            }
                        bubble_health -= 1
                        if bubble_health &lt; 0
                            bubble_health = 0;
                        if bubble_health = 0
                            ball_health[0] = 0;
                    }
                if bubble_hurt_timer &gt; 1
                    {
                        var count = 0;
                        while(count &lt;= 4)
                            {
                                hurt_gravity[count] += 0.24
                                hurt_y[count] += hurt_gravity[count]

                                hurt_x[count] += hurt_speed[count]
                                count += 1
                            }   
                    }
                if bubble_hurt_timer &gt;= 512
                    bubble_hurt_timer = -1;
            }
        if death &gt;= 1
            {
                bubble_dead_timer += 1
                if bubble_dead_timer = 1
                    {
                        var count = 0;
                        while(count &lt;= 4)
                            {
                                dead_x[count] = x + random_range(-8,8)
                                dead_y[count] = y + random_range(-8,8)
                                dead_gravity[count] = -4
                                dead_speed[count] = random_range(-4,4)
                                count += 1
                            }
                        ball_health[0] = 0
                        ball_health[1] = 0
                        ball_health[2] = 0
                        ball_health[3] = 0
                        ball_health[4] = 0
                        ball_health[5] = 0
                        ball_health[6] = 0
                        ball_health[7] = 0
                        ball_health[8] = 0
                        ball_health[9] = 0
                        ball_health[10] = 0
                        ball_health[11] = 0
                        ball_health[12] = 0
                        ball_health[13] = 0
                        ball_health[14] = 0
                        ball_health[15] = 0
                    }
                if bubble_dead_timer &gt; 1
                    {
                        var count = 0;
                        while(count &lt;= 4)
                            {
                                dead_gravity[count] += 0.24
                                dead_y[count] += dead_gravity[count]

                                dead_x[count] += dead_speed[count]
                                count += 1
                            }
                    }
            }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Sprites
//Background Bubbles
var count = 0;
while(count &lt;= bubble_count)
    {
        if ball_dir[count] = -1 and ball_health[count] = 1
            draw_sprite_ext(spr_bubble_orbiter,2,ball_x[count],ball_y[count],ball_scale[count],ball_scale[count],0,c_white,1);
        count += 1
    }
//Draw Sprite
event_inherited()
//Foreground Bubbles
var count = 0;
while(count &lt;= bubble_count)
    {
        if ball_dir[count] = 1 and ball_health[count] = 1
        draw_sprite_ext(spr_bubble_orbiter,2,ball_x[count],ball_y[count],ball_scale[count],ball_scale[count],0,c_white,1)
        count += 1
    }
//Player Hurt Bubbles
if bubble_hurt_timer &gt;= 0
    {
        var count = 0;
        while(count &lt;= 4)
            {
                draw_sprite_ext(spr_bubble_orbiter,2,hurt_x[count],hurt_y[count],hurt_scale[count],hurt_scale[count],0,c_white,1)
                count += 1
            }
    }
//Death Bubbles
if bubble_dead_timer &gt;= 0 and bubble_health &gt; 0
    {
        var count = 0;
        while(count &lt;= 4)
            {
                draw_sprite_ext(spr_bubble_orbiter,2,dead_x[count],dead_y[count],dead_scale[count],dead_scale[count],0,c_white,1)
                count += 1
            }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
