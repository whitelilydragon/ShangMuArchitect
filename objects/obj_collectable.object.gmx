<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_gem</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-7</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics and Animation Variables

//Tile Surface Sensors
tile_surface_id = 0         //Floor Surface Collision Sensor
tile_surface_ce = 0         //Ceiling Surface Collision Sensor
tile_surface_lf = 0         //Left Surface Collision Sensor
tile_surface_rt = 0         //Right Surface Collision Sensor
tile_item_id    = 0         //Item Tile Sensor
item_asset_id   = 0         //Item Tile Asset

//Gravity Variables
gravity_speed   = 0         //Gravity Speed
gravity_accel   = 0.4375    //Gravity Acceleration
gravity_cap     = 8         //Gravity Maximum Speed
gravity_fof     = 0         //Gravity FOF Activation
gravity_slope   = 0         //Gravity Deactivation For Slopes

//State Trigger Variables
is_collected    = 0         //Has the Player Taken the Item?
is_confirmed    = 0         //Have We Confirmed Which Item We Are?
is_floating     = 1         //Were We Told to Float By Another Object?
is_sound        = 0         //Are We Playing A Sound?
is_speed        = 0         //Do We Have A Speed?
is_hor_speed    = 0         //Do We Have A Horizontal Speed? (Orb)
is_time         = 8         //Timer For Upwards Floating
is_hor_time     = 0         //Timer For Horizontal Movement (Orb)
is_an_orb       = 0         //Are We An Elemental Orb?
is_collectable  = 0         //Are We Allowed To Be Attracted By Shields?
is_shield_part  = 0         //Are We A Shield Particle?
is_follow_speed = 6         //How Fast Are We Following The Player?
is_following    = 0         //Have We Gotten Close To The Player?
is_item         = spr_gem   //What Item Are We? Arguments: spr_gem
//                                                         spr_petal_flower
//                                                         spr_gem_stone
//                                                         spr_sparkle
//                                                         spr_hearts
//                                                         spr_hud_gem_plus
//                                                         spr_shield_broken

//Partical Variables
ispeed          = 1         //Direction of speed (Hearts Particles)
itimer          = 0         //Timer for changing directions (Hearts Particles)
y_offset        = 0         //Offset value (Gems Particle)
destruction     = 0         //Should We Vanish Upon Touching Flat or Sloped Tile Surfaces?
iterate_x       = 0         //Cycle Through X Positions in Rotation Map Data
iterate_y       = 0         //Cycle Through Y Positions in Rotation Map Data
iterate_gen     = 0         //General Iteration Timer
px              = x         //X Rotation Offset
py              = y         //Y Rotation Offset
destruction     = 0         //Are We A Self-Destructing Particle?
gem_visible     = 1         //Are We Visible?

//Sparkle Particle Variables 1
sparkle_frame_0   = 0       //Sparkle Animated Frame
sparkle_visible_0 = 0       //Sparkle Visibility
sparkle_x_0       = x       //Sparkle X Position
sparkle_y_0       = y       //Sparkle Y Position
//Sparkle Particle Variables 2
sparkle_frame_1   = 0       //Sparkle Animated Frame
sparkle_visible_1 = 0       //Sparkle Visibility
sparkle_x_1       = x       //Sparkle X Position
sparkle_y_1       = y       //Sparkle Y Position
//Sparkle Particle Variables 3 (Used Exclusively For Orb Particles)
sparkle_frame_2   = 0       //Sparkle Animated Frame
sparkle_visible_2 = 0       //Sparkle Visibility
sparkle_x_2       = x       //Sparkle X Position
sparkle_y_2       = y       //Sparkle Y Position

//Heart Particle Variables 1
heart_frame_0   = 0       //Heart Animated Frame
heart_visible_0 = 0       //Heart Visibility
heart_x_0       = x       //Heart X Position
heart_y_0       = y       //Heart Y Position
heart_offset[0] = x       //Heart Offset X
heart_offset[1] = y       //Heart Offset Y
heart_timer_0   = 0       //Heart Timer
heart_speed_0   = 1       //Heart Speed
heart_speed_alt_0 = 0     //Heart Speed (Alt)
//Heart Particle Variables 2
heart_visible_1 = 0       //Heart Visibility
heart_x_1       = x       //Heart X Position
heart_y_1       = y       //Heart Y Position
heart_offset[2] = x       //Heart Offset X
heart_offset[3] = y       //Heart Offset Y
heart_timer_1   = 0       //Heart Timer
heart_speed_1   = 1       //Heart Speed
heart_speed_alt_1 = 0     //Heart Speed (Alt)

//Orb Particle Variables
orb_rotation = 0          //Rotation for Sprites
orb_timer    = 0          //How Long Should We Rotate Before Vanishing
orb_x        = x          //Orb X
orb_y        = y          //Orb Y
orb_visible  = 0          //Orb Visibility

//Particle Landing Variables
particle_landing_visible = 0
particle_landing_frame   = 0

//Are We Allowed To Hold Items?
give_item = 0
item = 0
attacked = 0

//Animation Variables
frame = 0                   //Current Frame
anim_frame = 5              //Maximum Number of Frames
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics and Animations

//Pause Safety Check
if obj_game_logic.pause = 0

{

//If We Are Within Range Of The Player, Consider Ourselves Collected
if point_distance(x,y,obj_game_logic.universal_player_x,obj_game_logic.universal_player_y) &lt;= 32 and destruction=0 and is_collectable&gt;24
and obj_game_logic.anim_current!=obj_game_logic.anim_hurt and obj_game_logic.anim_current!=obj_game_logic.anim_death
and obj_game_logic.user_cursor_mode = 0
    is_collected=1;

//Iterate is_collectable timer
if is_collectable &lt; 128 is_collectable += 1;

//  Flat Surface Collisions and Gravity  //
//---------------------------------------//

if (is_floating = 0)
    {
        //Floor Surface Collision Sensor
        tile_surface_id = tile_layer_find(surface_flats,x,y)
        
        //If we are colliding with a flat surface, stop gravity
        if tile_exists(tile_surface_id)
            {
                //Reset gravity speed
                gravity_speed=0
                //Reset horizontal speed
                is_speed=0
                //If We Are a Broken Shield Particle, Spawn a Landing Particle and Destroy Self
                if destruction=1
                    {
                        gem_visible=0
                        particle_landing_visible = 1
                    }
        }

//  Slope Surface Collisions  //
//----------------------------//

//Slope Surface Collision Sensor
tile_ramp_id = tile_layer_find(surface_slopes,x,y)

//If we are colliding with a slope tile, clip to its surface based on X position
if (tile_ramp_id!=-1 and gravity_slope = 0)
    {
        //Collect Background ID of the Tile
        tile_ramp_asset=tile_get_background(tile_ramp_id)
    
        //Get Gem Coordinates Relative to the Tile's Origins
        tile_ramp_pos[0]=abs(tile_get_x(tile_ramp_id)-x)   //Get X
        tile_ramp_pos[1]=abs(tile_get_y(tile_ramp_id)-y)   //Get Y
    
        //Check If Gem Y is Greater Than Slope's Current Height
        if tile_ramp_pos[1] &gt;= obj_game_logic.orig_clip[tile_ramp_asset,tile_ramp_pos[0]]
            {
                //If Gem is Colliding with Slope, Disable Gravity
                gravity_slope=1
                gravity_speed=0
                is_floating = 1
                //If We Are a Broken Shield Particle, Spawn a Landing Particle and Destroy Self
                if destruction=1
                    {
                        gem_visible = 0
                        particle_landing_visible = 1
                    }
            }
    }

//Apply horizontal speed if we are not interacting with flat surfaces or slopes
if (tile_surface_id=-1 and gravity_slope=0 and is_collected=0) x += is_speed;

//       Basic Gravity System       //
//----------------------------------//

//If we are not at the speed cap, apply acceleration.
if gravity_fof=0 and gravity_slope=0 and tile_surface_id=-1
    {
        //Apply Gravity Speed to Y Coordinates
        y+=gravity_speed

        gravity_speed+=gravity_accel
    }

} //End of Float Safety Check

//       Player Follow System       //
//----------------------------------//

//Follow player based on their passive effect
if  (point_distance(x,y,obj_game_logic.universal_player_x,obj_game_logic.universal_player_y) &lt; 128 and obj_game_logic.shield_active = 1
and is_collectable &gt; 32
and obj_game_logic.user_cursor_mode = 0)
    {
        if (sprite_index = spr_gem and obj_game_logic.shield = spr_shield_earth)
        or (sprite_index = spr_petal_flower and obj_game_logic.shield = spr_shield_wood)
        or (sprite_index = spr_gold_gem and obj_game_logic.shield = spr_shield_rock)
            is_following = 1;
    }

if is_following = 1
    {
        move_towards_point(obj_game_logic.universal_player_x,obj_game_logic.universal_player_y,is_follow_speed)
        is_follow_speed += 0.25
    }

//      Basic Animation System      //
//----------------------------------//

//Iterate Animation Frames
image_speed=0.12

if particle_landing_visible = 1
    {
        //Iterate Animations Timer
        particle_landing_frame  += 0.15
        //Destroy Self
        if particle_landing_frame &gt; 7.9
        {
            particle_landing_visible = 0
            instance_destroy();
        }
    }

//      Static Particle System      //
//----------------------------------//

//If we are a gem, produce a particle effect before disappearing
if (is_collected = 1)
    {
        if (sprite_index = spr_gem or sprite_index = spr_gem_particle)
            {
                //Alter Our Sprite To Be A Particle
                sprite_index = spr_gem_particle
                //Play Sound
                if is_sound = 0
                    {
                        audio_stop_sound(gem_sound)
                        audio_play_sound(gem_sound,50,false) is_sound = 1
                        //Add Gems To Player
                        obj_game_logic.gems -= 1
                        obj_game_logic.player_gems[obj_game_logic.player_current] += 1
                        obj_game_logic.player_best_crystals_count += 1;
                        //Add Gems To Petal Counter
                        if (obj_game_logic.shield_active = 1 and obj_game_logic.shield = spr_shield_wood)
                        {obj_game_logic.petals_count += 1}
                        //Add Energy to the Stamina Bar
                        if obj_game_logic.stamina &lt; 100
                            {
                                obj_game_logic.stamina += 5
                                obj_game_logic.milla_flutter_stamina_bar += 4.3333333333333333333333333333334
                                //Cull Stamina Bar if Added Energy is Too Much
                                //if obj_game_logic.stamina &gt; 100 obj_game_logic.stamina = 100;
                                obj_game_logic.stamina_boosted = 0
                            }
                        //Stamina Bar Flash
                        obj_game_logic.stamina_gem = 0
                        obj_game_logic.stamina_gem_con = 1
                        //Create Sparkle Particle
                        sparkle_x_0       = x
                        sparkle_y_0       = y
                        sparkle_visible_0 = 1
                        //Modify Rotation Offset Variables
                        px = x
                        py = y
                        //Reset Gem Counter (And Spawn 1up Faerie) If It's Below 0
                        scr_gem_reset_counter()
                    }
                //Iterate Through Data Points in the Rotation Map
                iterate_x+=3    //X Posit Iteration
                iterate_y+=3    //Y Posit Iteration
                iterate_gen+=3  //General Iteration

                //Iterate Sparkle Particle Sprite's Animations
                if sparkle_visible_0 = 1 sparkle_frame_0 += 0.32;
                if sparkle_visible_1 = 1 sparkle_frame_1 += 0.32;
                //Toggle Visibility of First Particle Off After Animations Completes
                if sparkle_frame_0 &gt;= 7 {sparkle_visible_0 = 0}
                //Refer To Self Destruction Code Below For Second Particle's Visibility Toggle

                //Once We've Completed A Rotation, Restart Rotation
                if iterate_x&gt;=51
                    {
                        iterate_x=0
                        iterate_y=0
                    }
                //Reference Rotation Map Data
                x = px + obj_game_logic.orig_rotate[spr_gem_particle+2000,iterate_x]
                y = py - 19 + obj_game_logic.orig_rotate[spr_gem_particle+3000,iterate_y]
                //Once We've Rotated For Long Enough, Create Second Sparkle Particle
                if iterate_gen&gt;51+random_range(14,28) and sparkle_visible_1 = 0
                    {
                        //Create Sparkle Particle
                        sparkle_x_1       = x
                        sparkle_y_1       = y
                        sparkle_visible_1 = 1
                        //Disable Visibility Of Main Sprite
                        gem_visible = 0
                    }
                //Destroy Self
                if sparkle_frame_1 &gt;= 7.9
                    {
                        sparkle_visible_1 = 0
                        instance_destroy();
                    }
            }
        //If we are a petal flower, fly towards the HUD
        if (sprite_index = spr_petal_flower)
            {
                if (y&gt;=view_yview[view_port]+40)
                    {
                        //Play Sound
                        if is_sound = 0
                            {
                                audio_stop_sound(petal_grab)
                                audio_play_sound(petal_grab,50,false)
                                is_sound=1
                            }
                        //Point us towards the top-left corner of the screen
                        direction = point_direction(x,y,view_xview[view_port],view_yview[view_port])
                        //Move towards the top-left corner of the screen
                        speed = 16
                        //Disable gravity
                        is_floating = 1;
                    }
                //Once we have reached the HUD, give the player a health petal and create a heart particle
                if (y&lt;view_yview[view_port]+40)
                    {
                        //Give the player a health petal.
                        if obj_game_logic.petals &lt; obj_game_logic.petalsmax
                            obj_game_logic.petals += 1;
                        obj_game_logic.petals = ceil(obj_game_logic.petals)
                        //(Or a gem, if the player's health is already at maximum.)
                        if obj_game_logic.petals &gt;= obj_game_logic.petalsmax
                            {
                                obj_game_logic.gems -= 1
                                obj_game_logic.player_gems[obj_game_logic.player_current] += 1
                                //Add Energy to the Stamina Bar
                                if obj_game_logic.stamina &lt; 100
                                    {
                                        obj_game_logic.stamina += 5
                                        obj_game_logic.milla_flutter_stamina_bar += 4.3333333333333333333333333333334
                                        //Cull Stamina Bar if Added Energy is Too Much
                                        //if obj_game_logic.stamina &gt; 100 obj_game_logic.stamina = 100;
                                        obj_game_logic.stamina_boosted = 0
                                    }
                                //Stamina Bar Flash
                                obj_game_logic.stamina_gem = 0
                                obj_game_logic.stamina_gem_con = 1
                                //Trigger Drawing of Gem Particles
                                obj_game_logic.gem_particle_trigger = 1
                                //Trigger Drawing of Certain Gem Particles Based On Offset
                                switch(obj_game_logic.gem_plus_pos)
                                    {
                                        //Particle 1
                                        case 0:
                                            {
                                                obj_game_logic.gem_particle_alpha_0 = 1
                                                obj_game_logic.gem_waiting_0        = 0
                                                obj_game_logic.gem_ispeed_0         = 0
                                                obj_game_logic.gem_particle_frame_0 = 0
                                                obj_game_logic.gem_particle_trig_0  = 1
                                                break;
                                            }
                                        //Particle 2
                                        case 1:
                                            {
                                                obj_game_logic.gem_particle_alpha_1 = 1
                                                obj_game_logic.gem_waiting_1        = 0
                                                obj_game_logic.gem_ispeed_1         = 0
                                                obj_game_logic.gem_particle_frame_1 = 0
                                                obj_game_logic.gem_particle_trig_1  = 1
                                                break;
                                            }
                                        //Particle 3
                                        case 2:
                                            {
                                                obj_game_logic.gem_particle_alpha_2 = 1
                                                obj_game_logic.gem_waiting_2        = 0
                                                obj_game_logic.gem_ispeed_2         = 0
                                                obj_game_logic.gem_particle_frame_2 = 0
                                                obj_game_logic.gem_particle_trig_2  = 1
                                                break;
                                            }
                                        //Particle 4
                                        case 3:
                                            {
                                                obj_game_logic.gem_particle_alpha_3 = 1
                                                obj_game_logic.gem_waiting_3        = 0
                                                obj_game_logic.gem_ispeed_3         = 0
                                                obj_game_logic.gem_particle_frame_3 = 0
                                                obj_game_logic.gem_particle_trig_3  = 1
                                                break;
                                            }
                                        //Particle 5
                                        case 4:
                                            {
                                                obj_game_logic.gem_particle_alpha_4 = 1
                                                obj_game_logic.gem_waiting_4        = 0
                                                obj_game_logic.gem_ispeed_4         = 0
                                                obj_game_logic.gem_particle_frame_4 = 0
                                                obj_game_logic.gem_particle_trig_4  = 1
                                                break;
                                            }
                                        //Particle 6
                                        case 5:
                                            {
                                                obj_game_logic.gem_particle_alpha_5 = 1
                                                obj_game_logic.gem_waiting_5        = 0
                                                obj_game_logic.gem_ispeed_5         = 0
                                                obj_game_logic.gem_particle_frame_5 = 0
                                                obj_game_logic.gem_particle_trig_5  = 1
                                                break;
                                            }
                                        //Particle 7
                                        case 6:
                                            {
                                                obj_game_logic.gem_particle_alpha_6 = 1
                                                obj_game_logic.gem_waiting_6        = 0
                                                obj_game_logic.gem_ispeed_6         = 0
                                                obj_game_logic.gem_particle_frame_6 = 0
                                                obj_game_logic.gem_particle_trig_6  = 1
                                                break;
                                            }
                                        //Particle 8
                                        case 7:
                                            {
                                                obj_game_logic.gem_particle_alpha_7 = 1
                                                obj_game_logic.gem_waiting_7        = 0
                                                obj_game_logic.gem_ispeed_7         = 0
                                                obj_game_logic.gem_particle_frame_7 = 0
                                                obj_game_logic.gem_particle_trig_7  = 1
                                                break;
                                            }
                                        //Particle 9
                                        case 8:
                                            {
                                                obj_game_logic.gem_particle_alpha_8 = 1
                                                obj_game_logic.gem_waiting_8        = 0
                                                obj_game_logic.gem_ispeed_8         = 0
                                                obj_game_logic.gem_particle_frame_8 = 0
                                                obj_game_logic.gem_particle_trig_8  = 1
                                                break;
                                            }
                                        //Particle 10
                                        case 9:
                                            {
                                                obj_game_logic.gem_particle_alpha_9 = 1
                                                obj_game_logic.gem_waiting_9        = 0
                                                obj_game_logic.gem_ispeed_9         = 0
                                                obj_game_logic.gem_particle_frame_9 = 0
                                                obj_game_logic.gem_particle_trig_9  = 1
                                                break;
                                            }
                                        //Particle 11
                                        case 10:
                                            {
                                                obj_game_logic.gem_particle_alpha_10 = 1
                                                obj_game_logic.gem_waiting_10        = 0
                                                obj_game_logic.gem_ispeed_10         = 0
                                                obj_game_logic.gem_particle_frame_10 = 0
                                                obj_game_logic.gem_particle_trig_10  = 1
                                                break;
                                            }
                                        //Particle 12
                                        case 11:
                                            {
                                                obj_game_logic.gem_particle_alpha_11 = 1
                                                obj_game_logic.gem_waiting_11        = 0
                                                obj_game_logic.gem_ispeed_11         = 0
                                                obj_game_logic.gem_particle_frame_11 = 0
                                                obj_game_logic.gem_particle_trig_11  = 1
                                                break;
                                            }
                                        //Particle 13
                                        case 12:
                                            {
                                                obj_game_logic.gem_particle_alpha_12 = 1
                                                obj_game_logic.gem_waiting_12        = 0
                                                obj_game_logic.gem_ispeed_12         = 0
                                                obj_game_logic.gem_particle_frame_12 = 0
                                                obj_game_logic.gem_particle_trig_12  = 1
                                                break;
                                            }
                                        //Particle 14
                                        case 13:
                                            {
                                                obj_game_logic.gem_particle_alpha_13 = 1
                                                obj_game_logic.gem_waiting_13        = 0
                                                obj_game_logic.gem_ispeed_13         = 0
                                                obj_game_logic.gem_particle_frame_13 = 0
                                                obj_game_logic.gem_particle_trig_13  = 1
                                                break;
                                            }
                                    }
                                //Update gem particle offset for the next gem particle
                                obj_game_logic.gem_plus_pos += 1
                                //If the gem particle offset is too high, reset its value
                                if obj_game_logic.gem_plus_pos &gt; 13 obj_game_logic.gem_plus_pos = 0;
                                //obj_particle_gems = instance_create(x,y,obj_gem_particle)
                                //obj_particle_gems.x = view_xview[view_port]+13
                                //obj_particle_gems.y = view_yview[view_port]+53
                                //Reset Gem Counter (And Spawn 1up Faerie) If It's Below 0
                                scr_gem_reset_counter()
                            }
                        //Play Sound
                        audio_stop_sound(petal_absorbed)
                        audio_play_sound(petal_absorbed,50,false)
                        //Create Heart Particle 1
                        heart_visible_0 = 1
                        heart_offset[0] = abs(view_xview[view_port]-x) + random_range(-16,16)
                        heart_offset[1] = abs(view_yview[view_port]-y) + random_range(-16,16)
                        //Create Heart Particle 2
                        heart_offset[2] = abs(view_xview[view_port]-x) + random_range(-16,16)
                        heart_offset[3] = abs(view_yview[view_port]-y) + random_range(-16,16)
                        //Set Our Depth To Be Above The Logic Object's Priority
                        depth = -7
                        //Set Our Visibility To 0
                        gem_visible = 0
                        //Set Our Speed To 0
                        speed = 0
                        //Keep Ourselves Clipped Within Object Activation Range During
                        //Heart Particle Animations
                        x = view_xview[view_port]
                        y = view_yview[view_port]
                        //Initialize New Collection State
                        //Refer to Hearts Logic Code Below For Secondary Phase Of Heart Particle Logic
                        is_collected = 2
                    }
            } //End of Health Petal Check
    } //End of Collected Safety Check

//If we are a heart, produce a particle effect before disappearing
if is_collected = 2
    {
        //Keep Ourselves Clipped Within Object Activation Range During
        //Heart Particle Animations
        x = view_xview[view_port]
        y = view_yview[view_port]
        //Sway heart particle side-by-side
        heart_x_0 = view_xview[view_port]+heart_offset[0]+heart_speed_0
        heart_y_0 = view_yview[view_port]+heart_offset[1]-heart_speed_alt_0
        //Sway heart particle side-by-side
        heart_x_1 = view_xview[view_port]+heart_offset[2]+heart_speed_1
        heart_y_1 = view_yview[view_port]+heart_offset[3]-heart_speed_alt_1
        heart_timer_0+=0.5
        //Phase 1: Sway
        if (heart_timer_0 &lt; 12)
            {
                //Heart 1
                heart_frame_0=0;
                heart_speed_0+=1;
                heart_speed_alt_0+=1
                //Heart 2
                heart_speed_1-=1
                heart_speed_alt_1+=1
            }
        //Phase 2: Sway In The Opposite Direction
        if (heart_timer_0 &gt;= 12 and heart_timer_0&lt;=15)
            {
                //Heart 1
                heart_frame_0=0;
                heart_speed_0-=1;
                heart_speed_alt_0+=1
                //Heart 2
                heart_speed_1+=1
                heart_speed_alt_1+=1
            }
        //Phase 3: Playback Animations
        if (heart_timer_0 &gt; 15) heart_frame_0+=0.24;
        //Destroy self once heart frame animations have completed
        if heart_frame_0 &gt;= 3 instance_destroy();
    }
    
} //End of Pause Safety Check

else

    {
        //Freeze Animations If We Are Paused
        image_speed=0
        //Prevent Movement If We Are Paused As A Petal Flower
        if (sprite_index = spr_petal_flower or sprite_index = spr_gem)
            move_towards_point(x,y,0);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Main Sprite
if gem_visible = 1 draw_sprite(sprite_index,image_index,x,y);

//Sparkle Particle Drawing 1
if sparkle_visible_0 = 1 draw_sprite(spr_sparkle,sparkle_frame_0,sparkle_x_0,sparkle_y_0);
//Sparkle Particle Drawing 2
if sparkle_visible_1 = 1 draw_sprite(spr_sparkle,sparkle_frame_1,sparkle_x_1,sparkle_y_1);
//Sparkle Particle Drawing 3
if sparkle_visible_2 = 1 draw_sprite(spr_sparkle,sparkle_frame_2,sparkle_x_2,sparkle_y_2);

//Heart Particle Drawing
if heart_visible_0 = 1
    {
        //Draw Sprite (With Alpha Blending)
        draw_set_blend_mode(bm_add)
        draw_sprite_ext(spr_hearts,heart_frame_0,heart_x_0,heart_y_0,1,1,0,c_white,1)
        //Draw Sprite (With Alpha Blending)
        draw_sprite_ext(spr_hearts,heart_frame_0,heart_x_1,heart_y_1,1,1,0,c_white,1)
        draw_set_blend_mode(bm_normal)
    }
//Shield Particle Drawing
if is_shield_part = 1 and particle_landing_visible = 0
    {
        draw_set_blend_mode(bm_add)
        draw_sprite_ext(sprite_index,0,x,y,1,1,0,c_white,1)
        draw_set_blend_mode(bm_normal)
    }
//Particle Landing Drawing

if particle_landing_visible = 1 draw_sprite(spr_particle_landing,particle_landing_frame,x,y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
