<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_axle_turret</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy_floater</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics and Animation Variables
event_inherited()
scr_enemy_hp(20)
hp_offset = -52
shell_angle = 0
snap = 0
flash_palette = spr_axle_turret_palette
can_hold_items = 0
dropped_goodies = obj_gold_gem
//Editor Mode Variables
start_x = x
start_y = y
width_x = sprite_width/2
height_y = sprite_height/2
death_type = 2
//Bullet Particles
bullet_x[0] = 0
bullet_y[0] = 0
bullet_x_move[0] = 0
bullet_y_move[0] = 0
bullet_frame[0] = 0
bullet_state[0] = 0
bullet_angle[0] = 0
bullet_sprite[0] = 0

bullet_x[1] = 0
bullet_y[1] = 0
bullet_x_move[1] = 0
bullet_y_move[1] = 0
bullet_frame[1] = 0
bullet_state[1] = 0
bullet_angle[1] = 0
bullet_sprite[1] = 0

bullet_x[2] = 0
bullet_y[2] = 0
bullet_x_move[2] = 0
bullet_y_move[2] = 0
bullet_frame[2] = 0
bullet_state[2] = 0
bullet_angle[2] = 0
bullet_sprite[2] = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room != rm_editor
    {
        tile_add(spr_axle_turret_base,0,0,56,56,x-28,y-28,-5)
        scr_enemy_drop_petal_shard(x,y,object_index)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Logic and Animations
event_inherited()
if o.pause = 0 and freeze = 0
    {
        if death = 0
            {
                //Animation Loops
                switch(state)
                    {
                        //Idle
                        case 0:
                            {
                                var var_speed_mod = 0.2;
                                if item = spr_mod_chip_speed
                                    {
                                        var_speed_mod = 0.45;
                                        being += 1
                                    }
                                shell_angle = lerp(shell_angle,direction,var_speed_mod)
                                being += 1
                                
                                if being &gt; 30 and being &lt; 60
                                    {
                                        frame += 0.25
                                        if frame &gt; 2.8 frame = 1;
                                        
                                    }
                                if being = 60 and o.user_cursor_mode = 0
                                    {
                                        if play_sound = 1 audio_play_sound(snd_enemy_shoot,50,false)
                                        frame = 3
                                        //Do not fire bullets if we're outside the camera's view
                                        var yes = 0;
                                        if (x &lt; view_xview[view_port] or x &gt; view_xview[view_port]+view_wview[view_port])
                                        or (y &lt; view_yview[view_port] or y &gt; view_yview[view_port]+(view_hview[view_port]))
                                            yes = 1;
                                        if yes = 0
                                            {
                                                bullet_state[0] = 1
                                                bullet_state[1] = 1
                                                bullet_state[2] = 1
                                            }
                                    }
                                if being = 72
                                    {
                                        frame = 0
                                    }
                                if being &gt; 90
                                    {
                                        var random_direction = floor(random_range(0,4));
                                        
                                        switch(random_direction)
                                            {
                                                case 0: {direction = 0; break;}
                                                case 1: {direction = 90; break;}
                                                case 2: {direction = 180; break;}
                                                case 3: {direction = 270; break;}
                                                case 4: {direction = 90; break;}
                                            }
                                        being = 0
                                        frame = 0
                                        snap = 0
                                    }
                                if shell_angle &gt; direction-2 and shell_angle &lt; direction+2 and snap = 0
                                    {
                                        snap = 1
                                        direction += 15
                                    }
                                if snap &gt; 0
                                    {
                                        snap += 1
                                        if snap = 10 direction -= 15;
                                    }
                                break;
                            }
                    }
            }
        //Bullets
        var bullet_cycle = 0;

        //Duplicate Bullet Behavior Across Three Separate Bullets
        while(bullet_cycle &lt;= 2)
            {
                if bullet_state[bullet_cycle] &gt; 0
                    {
                        //Spawn Phase
                        if bullet_state[bullet_cycle] = 1
                            {
                                bullet_state[bullet_cycle] = 2
                                bullet_x[bullet_cycle] = x
                                bullet_y[bullet_cycle] = y
                                bullet_x_move[bullet_cycle] = 33
                                bullet_y_move[bullet_cycle] = 33
                                bullet_frame[bullet_cycle] = 0
                                switch(direction)
                                    {
                                        case 180:  {bullet_angle[0] = 0; bullet_angle[1] = 45; bullet_angle[2] = 315; break;}
                                        case 270:  {bullet_angle[0] = 90; bullet_angle[1] = 135; bullet_angle[2] = 45; break;}
                                        case 0:    {bullet_angle[0] = 180; bullet_angle[1] = 135; bullet_angle[2] = 225; break;}
                                        case 90:   {bullet_angle[0] = 270; bullet_angle[1] = 225; bullet_angle[2] = 315; break;}
                                    }
                                bullet_sprite[bullet_cycle] = spr_axle_turret_bullet
                            }
                        //Movement Phase
                        if bullet_state[bullet_cycle] = 2
                            {
                                bullet_x[bullet_cycle] = x+lengthdir_x(bullet_x_move[bullet_cycle],bullet_angle[bullet_cycle])
                                bullet_y[bullet_cycle] = y+lengthdir_y(bullet_y_move[bullet_cycle],bullet_angle[bullet_cycle])
                                bullet_x_move[bullet_cycle] += 4
                                bullet_y_move[bullet_cycle] += 4
                                bullet_frame[bullet_cycle] += 0.15
                                if bullet_frame[bullet_cycle] &gt; 1.8 bullet_frame[bullet_cycle] = 0;
                                
                                var enemy_surface_id = tile_layer_find(surface_flats,bullet_x[bullet_cycle],bullet_y[bullet_cycle]);

                                if (enemy_surface_id != -1
                                //If we have collided with the boundaries of the room, explode
                                or bullet_x_move[bullet_cycle] &lt; 0 or bullet_x_move[bullet_cycle] &gt; room_width
                                or bullet_y_move[bullet_cycle] &gt; room_height)
                                    {
                                        bullet_state[bullet_cycle] = 3
                                        bullet_sprite[bullet_cycle] = spr_explosion_2
                                        if play_sound = 1 audio_play_sound(snd_enemy_projectile,50,false);
                                    }
                                if (o.hurt[0] = 0
                                and o.hurt[1] = 0
                                and o.shield_invuln = 32
                                and point_distance(bullet_x[bullet_cycle],bullet_y[bullet_cycle],o.universal_player_x,o.universal_player_y) &lt; 32)
                                    {
                                        bullet_state[bullet_cycle] = 3
                                        bullet_sprite[bullet_cycle] = spr_explosion_2
                                        scr_enemy_deal_damage(0.4,1,2);
                                        if play_sound = 1 audio_play_sound(snd_enemy_projectile,50,false);
                                    }
                                if (o.milla_special_attack &gt; 0 and o.milla_special_attack &lt;= 2)
                                    {
                                        if point_distance(bullet_x[bullet_cycle],bullet_y[bullet_cycle],o.milla_special_length_x2,o.milla_special_length_y2) &lt; 32*o.milla_special_attack
                                            {
                                                bullet_state[bullet_cycle] = 3
                                                bullet_sprite[bullet_cycle] = spr_explosion_2
                                                if play_sound = 1 audio_play_sound(snd_enemy_projectile,50,false);
                                            }
                                    }
                                //Bomb Cube
                                var instance_ID = collision_circle(bullet_x[bullet_cycle],bullet_y[bullet_cycle],32,obj_player_cube_alt,false,true);
                                if instance_exists(instance_ID)
                                    {
                                        if instance_ID.cube_jiggle_timer = 0
                                            {
                                                instance_ID.cube_jiggle_timer = 10
                                                instance_ID.cube_health += 0.50
                                            }
                                    }
                                if obj_game_logic.user_enemy_level &lt; 2
                                    {
                                        //Mega Items
                                        var instance_ID = collision_circle(bullet_x[bullet_cycle],bullet_y[bullet_cycle],32,obj_mega_item_parent,false,true);
                                        if instance_exists(instance_ID)
                                            {
                                                instance_ID.attacked = 2
                                            }
                                        //Items
                                        var instance_ID = collision_circle(bullet_x[bullet_cycle],bullet_y[bullet_cycle],32,obj_destructible,false,true);
                                        if instance_exists(instance_ID)
                                            {
                                                instance_ID.attacked = 1
                                            }
                                        //Attack other enemies within range of the boxing glove
                                        instance_ID = collision_circle(bullet_x[bullet_cycle],bullet_y[bullet_cycle],32,obj_enemy_parent,false,true);
                                        if instance_exists(instance_ID)
                                            {
                                                if instance_ID.attacked = 0 and instance_ID.alpha = 0
                                                    {
                                                        instance_ID.attacked = 1
                                                        instance_ID.attacked_damage = 2
                                                    }
                                            }
                                    }
                            }
                        //Explosion Phase
                        if bullet_state[bullet_cycle] = 3
                            {
                                bullet_frame[bullet_cycle] += 0.25
                                if bullet_frame[bullet_cycle] &gt; 8.8
                                    {
                                        bullet_state[bullet_cycle] = 0
                                        bullet_x[bullet_cycle] = -64
                                        bullet_y[bullet_cycle] = -64
                                        bullet_x_move[bullet_cycle] = 33
                                        bullet_y_move[bullet_cycle] = 33
                                    }
                            }
                    }
                bullet_cycle += 1    
            }
    } //End of pause check
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Sprite
var bullet_count = 0;

while(bullet_count &lt;= 2)
    {
        draw_sprite_ext(bullet_sprite[bullet_count],bullet_frame[bullet_count],
        bullet_x[bullet_count],bullet_y[bullet_count],1,1,bullet_angle[bullet_count],c_white,1)
        bullet_count += 1
    }
event_inherited()

var pal_alpha = 0;
if alpha &gt; 0.5 pal_alpha = 1;
script_execute(o.pal_swap_script,flash_palette,pal_alpha,false)
draw_sprite_ext(spr_axle_turret_shell,0,x,y,scale+spring_jiggle+enemy_growth,scale+spring_jiggle+enemy_growth,shell_angle,c_white,1)
shader_reset();
if alpha &gt; 0.5 and o.pal_swap_script = pal_swap_dummy
    {
        d3d_set_fog(true, c_yellow, 0, 0)
        draw_sprite_ext(spr_axle_turret_shell,0,x,y,scale+spring_jiggle+enemy_growth,scale+spring_jiggle+enemy_growth,shell_angle,c_white,0.65)
        d3d_set_fog(false, 0, 0, 0)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
