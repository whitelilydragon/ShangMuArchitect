<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_logic_processor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_activate_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Title Screen Menu
title_scroll_x   = 157      //X position offset for menu elements
title_offset_x   = 0        //What is our cursor's X offset?
title_scroll_active = 0     //Are the menus currently scrolling?
title_scroll_timer = 0      //How long are we allowed to scroll?
title_scroll_page  = 0      //What is our current page?
title_animation  = 0        //What is our current animation frame for the title screen menu cursor?
title_position   = 0        //What is our cursor's current offset on the menu?
title_page       = 0        //What is our current page on the menu?
title_scroll     = 0        //What is our cursor's current position on the menu?
title_bg_current = 0        //What is our background's current frame of animation?
title_type       = 0        //What is the type of our currently selected input device?
title_joy_poll   = 0        //At which stage are we modifying assigned inputs?
title_joy_polltimer = 0     //How long before we're allowed to poll for inputs?
title_joy_poll_button = 0   //Which button are we pressing during polling?
title_joy_poll_key = 0      //Which key are we pressing during polling?
title_joy_poll_hotkey = 0   //Which analog stick hotkey are we pressing during polling?
title_joy_poll_mouse = 0    //Which mouse button are we pressing during polling?
title_joy_cool_down  = 0    //How long before we're allowed to interact with the menus again?
title_room_goto = 0         //Which room are we heading to after the transition?
title_room_timer = 0        //How long should we wait before changing rooms?
title_item_shake_timer = -1 //Is the menu item shaking?
title_item_shake_mod = 1    //Menu item shake modifier
title_item_shake_iter = 0   //Menu item shake iteration timer
title_item_shake_iterations = 0 //Menu item shake iteration timer
title_item_shake_cur = 0    //Which menu item are we currently shaking?
title_cursor_shake = 0      //Are we currently shaking this menu cursor?
//Are we currently shaking this menu element?
title_item_shake[0]  = 0
title_item_shake[1]  = 0
title_item_shake[2]  = 0
title_item_shake[3]  = 0
title_item_shake[4]  = 0
title_item_shake[5]  = 0
title_item_shake[6]  = 0
title_item_shake[7]  = 0
title_item_shake[8]  = 0
title_item_shake[9]  = 0
title_item_shake[10] = 0
title_item_shake[11] = 0
title_item_shake[12] = 0
title_item_shake[13] = 0
title_item_shake[14] = 0
title_item_shake[15] = 0
title_item_shake[16] = 0
//Page 5
title_item_shake[17] = 0
title_item_shake[18] = 0
title_item_shake[19] = 0
title_item_shake[20] = 0
title_item_shake[21] = 0
title_item_shake[22] = 0
title_item_shake[23] = 0
title_item_shake[24] = 0
//Y Height
title_item_shake_y[0]  = 0
title_item_shake_y[1]  = 0
title_item_shake_y[2]  = 0
title_item_shake_y[3]  = 0
title_item_shake_y[4]  = 0
title_item_shake_y[5]  = 0
title_item_shake_y[6]  = 0
title_item_shake_y[7]  = 0
title_item_shake_y[8]  = 0
title_item_shake_y[9]  = 0
title_item_shake_y[10] = 0
title_item_shake_y[11] = 0
title_item_shake_y[12] = 0
title_item_shake_y[13] = 0
title_item_shake_y[14] = 0
title_item_shake_y[15] = 0
title_item_shake_y[16] = 0
//Page 5
title_item_shake_y[17] = 0
title_item_shake_y[18] = 0
title_item_shake_y[19] = 0
title_item_shake_y[20] = 0
title_item_shake_y[21] = 0
title_item_shake_y[22] = 0
title_item_shake_y[23] = 0
title_item_shake_y[24] = 0

//Campaign Mode Menu
title_campaign_menu = 0
title_campaign_x = 512
title_main_menu_x = 157
title_campaign_cooldown_timer = 0
title_item_shake[17] = 0
title_item_shake[18] = 0
title_item_shake[19] = 0
title_item_shake[20] = 0
title_item_shake_y[17] = 0    //Are we currently shaking this menu element?
title_item_shake_y[18] = 0    //Are we currently shaking this menu element?
title_item_shake_y[19] = 0    //Are we currently shaking this menu element?
title_item_shake_y[20] = 0    //Are we currently shaking this menu element?

//Player Mode Alpha Transparency
title_bg_alpha_0 = 0.9      //What is our controller background's transparency? (Player Mode)
title_bg_alpha_1 = 0.9      //What is our controller background's transparency? (Player Mode)
title_bg_alpha_2 = 0.9      //What is our controller background's transparency? (Player Mode)
title_bg_alpha_3 = 0.9      //What is our controller background's transparency? (Player Mode)
title_bg_alpha_4 = 0.9      //What is our controller background's transparency? (Player Mode)
title_bg_alpha_5 = 0.9      //What is our controller background's transparency? (Player Mode)
title_bg_alpha_6 = 0.9      //What is our controller background's transparency? (Player Mode)
title_bg_alpha_7 = 0.9      //What is our controller background's transparency? (Player Mode)
title_bg_alpha_8 = 0.9      //What is our controller background's transparency? (Player Mode)
//Editor Mode Alpha Transparency
title_ed_alpha_0  = 0.9      //What is our controller background's transparency? (Editor Mode)
title_ed_alpha_1  = 0.9      //What is our controller background's transparency? (Editor Mode)
title_ed_alpha_2  = 0.9      //What is our controller background's transparency? (Editor Mode)
title_ed_alpha_3  = 0.9      //What is our controller background's transparency? (Editor Mode)
title_ed_alpha_4  = 0.9      //What is our controller background's transparency? (Editor Mode)
title_ed_alpha_5  = 0.9      //What is our controller background's transparency? (Editor Mode)
title_ed_alpha_6  = 0.9      //What is our controller background's transparency? (Editor Mode)
title_ed_alpha_7  = 0.9      //What is our controller background's transparency? (Editor Mode)
title_ed_alpha_8  = 0.9      //What is our controller background's transparency? (Editor Mode)
title_ed_alpha_9  = 0.9      //What is our controller background's transparency? (Editor Mode)
title_ed_alpha_10 = 0.9      //What is our controller background's transparency? (Editor Mode)
title_ed_alpha_11 = 0.9      //What is our controller background's transparency? (Editor Mode)
title_ed_alpha_12 = 0.9      //What is our controller background's transparency? (Editor Mode)
title_ed_alpha_13 = 0.9      //What is our controller background's transparency? (Editor Mode)
title_ed_alpha_14 = 0.9      //What is our controller background's transparency? (Editor Mode)
title_ed_alpha_15 = 0.9      //What is our controller background's transparency? (Editor Mode)
title_coffee_frame = 0
title_savvy_eyes_frame = 0
title_savvy_eyes_timer = 0

//Create Shorthand Alias For The Player Object
o = obj_game_logic
title_alpha = 1
story_alpha = obj_game_logic.devstory_check
music_play_timer = 16

//Copy Internal Resolution From The Player Object
internal_resolution[0] = o.internal_resolution[0]
internal_resolution[1] = o.internal_resolution[1]

//Keyboard Bindings (Player Mode)
key_left    = o.key_left
key_right   = o.key_right
key_up      = o.key_up
key_down    = o.key_down
key_a       = o.key_a
key_b       = o.key_b
key_c       = o.key_c
key_d       = o.key_d
key_start   = o.key_start

//Joystick Modern Bindings (Player Mode)
deadzone_mod    = o.deadzone_mod
joy_left_mod    = o.joy_left_mod
joy_right_mod   = o.joy_right_mod
joy_up_mod      = o.joy_up_mod
joy_down_mod    = o.joy_down_mod
joy_x_mod       = o.joy_x_mod
joy_y_mod       = o.joy_y_mod
joy_a_mod       = o.joy_a_mod
joy_b_mod       = o.joy_b_mod
joy_c_mod       = o.joy_c_mod
joy_d_mod       = o.joy_d_mod
joy_start_mod   = o.joy_start_mod
left_stick_left = o.left_stick_left
left_stick_right = o.left_stick_right
left_stick_up = o.left_stick_up
left_stick_down = o.left_stick_down
right_stick_left = o.right_stick_left
right_stick_right = o.right_stick_right
right_stick_up = o.right_stick_up
right_stick_down = o.right_stick_down

//Button Press Cooldowns
control_limit = 0
saving_prompt = 0
saving_defaults_prompt = 0

//Language Array; 0 = English; 1 = Portuguese
lang_select = o.user_language_mode
scr_lang_titlescreen()

//Set Default Axis For Movement Inputs
joy_input_axis = "dpad"
joy_input_swap = 32769

//D-Pad Movement
menu_input[0,0] = 0    //Joystick Right
menu_input[0,1] = 0    //Joystick Down
menu_input[0,2] = 0    //Joystick Left
menu_input[0,3] = 0    //Joystick Up

//Player Actions
menu_input[1,0] = 0    //Joystick A
menu_input[1,2] = 0    //Joystick B
menu_input[1,3] = 0    //Joystick C
menu_input[1,4] = 0    //Joystick D
menu_input[2,0] = 0    //Joystick "Start"
menu_input[2,1] = 0    //Joystick Input Switch (Keyboard or Joystick? Keyboard By Default)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Title Screen and Option Menus

//=========================================================//
//--------------------Title Screen Menu--------------------//
//=========================================================//

//Reset Breath Meter
o.breath = o.breath_max

//Coffe Particles Animations
title_coffee_frame += 0.12
if title_coffee_frame &gt; 15.8
    title_coffee_frame = 0;
//Savvy's Eyes' Animations
title_savvy_eyes_timer += 1
if title_savvy_eyes_timer &gt; 180
    {
        title_savvy_eyes_frame += 0.12
        if title_savvy_eyes_frame &gt; 2.8
            {
                title_savvy_eyes_frame = 0
                title_savvy_eyes_timer = 0
            }
    }

//Play Music
if music_play_timer &gt; 0 music_play_timer-=1;
if music_play_timer = 0
    {
        audio_play_sound(ost_title_screen_stringtunes,50,true)
        music_play_timer=-1
        //Adjust Current Song's Volume
        if o.music_mute = 0 scr_adjust_music_silent(o.music_volume/100,1000);
        else scr_adjust_music_silent(0,1000);
    }

//Animate Cursor
title_animation+=0.1 if title_animation&gt;6.8 title_animation=0;

//Animate Background
background_x[2] -= 0.025
background_x[3] -= 0.0255
title_bg_current += 0.05 if title_bg_current &gt; 2.8 title_bg_current = 0;

//Animate Transition
if title_alpha &gt; 0 title_alpha -= 0.035;

//==================Collect Input From the Keyboard==================//

//If The Keyboard Is Assigned For Input, Read The Keyboard For Inputs
if o.joy_input[2,1] = 0 and o.joy_input[2,6] = 0 and o.transition_active = 0
    {
        //Arrow Key Movement
        menu_input[0,0] = keyboard_check(key_right) //Joystick Right
        menu_input[0,1] = keyboard_check(key_down)  //Joystick Down
        menu_input[0,2] = keyboard_check(key_left)  //Joystick Left
        menu_input[0,3] = keyboard_check(key_up)    //JoyStick Up

        //Player Actions
        menu_input[1,0] = keyboard_check(key_a)
        menu_input[1,2] = keyboard_check(key_b)
        menu_input[1,3] = keyboard_check(key_c)
        menu_input[1,4] = keyboard_check(key_d)
        menu_input[2,0] = keyboard_check(key_start)

        //Lock the use of the enter key when invoking alt right for fullscreen mode toggle
        if keyboard_check_direct(vk_ralt) and key_start = 13 menu_input[2,0] = 0;
    }
//==================Collect Input From the Joystick==================//
//                         Modern Controller                         //

//If a modern joystick is not assigned for input, disable keyboard inputs
if o.joy_input[2,1] = 1 and not gamepad_is_connected(o.joy_modern_id) or o.transition_active = 1
    {
        //D-Pad Movement
        menu_input[0,0] = 0    //Joystick Right
        menu_input[0,1] = 0    //Joystick Down
        menu_input[0,2] = 0    //Joystick Left
        menu_input[0,3] = 0    //Joystick Up
        
        //Player Actions
        menu_input[1,0] = 0
        menu_input[1,2] = 0
        menu_input[1,3] = 0
        menu_input[1,4] = 0
        menu_input[2,0] = 0
    }

//If A Modern Joystick Is Assigned For Input, Read The Joystick For Inputs
if o.joy_input[2,1] = 1 and gamepad_is_connected(o.joy_modern_id) and o.joy_input[2,6] = 0 and o.transition_active = 0
    {
        //D-Pad Movement
        menu_input[0,0] = gamepad_button_check(o.joy_modern_id,joy_right_mod) //Joystick Right
        menu_input[0,1] = gamepad_button_check(o.joy_modern_id,joy_down_mod)  //Joystick Down
        menu_input[0,2] = gamepad_button_check(o.joy_modern_id,joy_left_mod)  //Joystick Left
        menu_input[0,3] = gamepad_button_check(o.joy_modern_id,joy_up_mod)    //JoyStick Up
        //Editor Actions
        menu_input[1,0] = gamepad_button_check(o.joy_modern_id,joy_a_mod)
        menu_input[1,2] = gamepad_button_check(o.joy_modern_id,joy_b_mod)
        menu_input[1,3] = gamepad_button_check(o.joy_modern_id,joy_c_mod)
        menu_input[1,4] = gamepad_button_check(o.joy_modern_id,joy_d_mod)
        menu_input[2,0] = gamepad_button_check(o.joy_modern_id,joy_start_mod)
        //If Analog Hotkeys Are Enabled, Perform Actions Based On Inputs
        if o.enable_hotkeys = 1
            {
                //Left Analog Stick
                if (gamepad_axis_value(o.joy_modern_id,gp_axislh) &lt; -deadzone_mod) scr_set_hotkey_options(left_stick_left);
                if (gamepad_axis_value(o.joy_modern_id,gp_axislh) &gt;  deadzone_mod) scr_set_hotkey_options(left_stick_right);
                if (gamepad_axis_value(o.joy_modern_id,gp_axislv) &lt; -deadzone_mod) scr_set_hotkey_options(left_stick_up);
                if (gamepad_axis_value(o.joy_modern_id,gp_axislv) &gt;  deadzone_mod) scr_set_hotkey_options(left_stick_down);
                //Right Analog Stick
                if (gamepad_axis_value(o.joy_modern_id,gp_axisrh) &lt; -deadzone_mod) scr_set_hotkey_options(right_stick_left);
                if (gamepad_axis_value(o.joy_modern_id,gp_axisrh) &gt;  deadzone_mod) scr_set_hotkey_options(right_stick_right);
                if (gamepad_axis_value(o.joy_modern_id,gp_axisrv) &lt; -deadzone_mod) scr_set_hotkey_options(right_stick_up);
                if (gamepad_axis_value(o.joy_modern_id,gp_axisrv) &gt;  deadzone_mod) scr_set_hotkey_options(right_stick_down);
            }
    }

//==================================================================//
//--Check for singular button presses across all assigned bindings--//
//==================================================================//

//D-Pad Movement
if menu_input[0,0] = 1 {o.use_right += 1 if o.use_right = 1 o.use_menu_x+=1;} else o.use_right = 0; //Right
if menu_input[0,1] = 1 {o.use_down  += 1 if o.use_down  = 1 o.use_menu_y+=1;} else o.use_down = 0;  //Down
if menu_input[0,2] = 1 {o.use_left  += 1 if o.use_left  = 1 o.use_menu_x-=1;} else o.use_left = 0;  //Left
if menu_input[0,3] = 1 {o.use_up    += 1 if o.use_up    = 1 o.use_menu_y-=1;} else o.use_up = 0;    //Up
//Player Actions (Accept/Cancel)
if menu_input[1,2] = 1 o.use_a += 1; else o.use_a = 0;         //A Button (Confirm)
if menu_input[1,0] = 1 o.use_b += 1; else o.use_b = 0;         //B Button (Cancel)
if menu_input[1,3] = 1 o.use_c += 1; else o.use_c = 0;         //C Button (Confirm)
if menu_input[2,0] = 1 o.use_start += 1; else o.use_start = 0; //Start Button (Confirm)

if control_limit &gt; 0 control_limit -= 1;

//      Cursor Shaking Actions      //
//----------------------------------//

if title_item_shake_timer &gt;= 0
    {
        //Decrement menu item shake length timer
        title_item_shake_timer-=1
        //Increment menu item shake iteration timer
        title_item_shake_iterations += 1
        //Lessen menu item shake over time
        if title_item_shake_mod &gt; 0.1 title_item_shake_mod -= 0.05;
        //Reset menu item shake iteration timer
        if title_item_shake_iterations &gt; 3 title_item_shake_iterations = 0;
        //Menu item x shake
        switch(title_item_shake_iterations)
            {
                case 0: {title_item_shake[title_item_shake_cur]= 0;  title_item_shake_y[title_item_shake_cur]= 0; break;}
                case 1: {title_item_shake[title_item_shake_cur]= 0;  title_item_shake_y[title_item_shake_cur]= 1; break;}
                case 2: {title_item_shake[title_item_shake_cur]= 3;  title_item_shake_y[title_item_shake_cur]= 0; break;}
                case 3: {title_item_shake[title_item_shake_cur]= 0;  title_item_shake_y[title_item_shake_cur]=-2; break;}
                case 4: {title_item_shake[title_item_shake_cur]=-3;  title_item_shake_y[title_item_shake_cur]=-1; break;}
                case 5: {title_item_shake[title_item_shake_cur]=-2;  title_item_shake_y[title_item_shake_cur]= 1; break;}
                case 6: {title_item_shake[title_item_shake_cur]= 1;  title_item_shake_y[title_item_shake_cur]= 0; break;}
                case 7: {title_item_shake[title_item_shake_cur]= 2;  title_item_shake_y[title_item_shake_cur]=-1; break;}
                case 8: {title_item_shake[title_item_shake_cur]= 1;  title_item_shake_y[title_item_shake_cur]=-1; break;}
                case 9: {title_item_shake[title_item_shake_cur]=-1;  title_item_shake_y[title_item_shake_cur]=-1; break;}
                case 10: {title_item_shake[title_item_shake_cur]=-1; title_item_shake_y[title_item_shake_cur]= 0; break;}
            }
        //If the timer has ended, stop menu item shake
        if title_item_shake_timer=0
            {
                title_item_shake_iterations =  0
                title_item_shake_timer      = -1
                title_item_shake_mod        =  1
                title_cursor_shake          =  0
                title_item_shake[title_item_shake_cur] = 0
                //Reset menu shake for all shakable items
                title_item_shake[0]  = 0
                title_item_shake[1]  = 0
                title_item_shake[2]  = 0
                title_item_shake[3]  = 0
                title_item_shake[4]  = 0
                title_item_shake[5]  = 0
                title_item_shake[6]  = 0
                title_item_shake[7]  = 0
                title_item_shake[8]  = 0
                title_item_shake[9]  = 0
                title_item_shake[10] = 0
                title_item_shake[11] = 0
                title_item_shake[12] = 0
                title_item_shake[13] = 0
                title_item_shake[14] = 0
                title_item_shake[15] = 0
                title_item_shake[16] = 0
                title_item_shake_y[0]  = 0
                title_item_shake_y[1]  = 0
                title_item_shake_y[2]  = 0
                title_item_shake_y[3]  = 0
                title_item_shake_y[4]  = 0
                title_item_shake_y[5]  = 0
                title_item_shake_y[6]  = 0
                title_item_shake_y[7]  = 0
                title_item_shake_y[8]  = 0
                title_item_shake_y[9]  = 0
                title_item_shake_y[10] = 0
                title_item_shake_y[11] = 0
                title_item_shake_y[12] = 0
                title_item_shake_y[13] = 0
                title_item_shake_y[14] = 0
                title_item_shake_y[15] = 0
                title_item_shake_y[16] = 0
                //Page 5
                title_item_shake_y[17] = 0
                title_item_shake_y[18] = 0
                title_item_shake_y[19] = 0
                title_item_shake_y[20] = 0
                title_item_shake_y[21] = 0
                title_item_shake_y[22] = 0
                title_item_shake_y[23] = 0
            }
    }

//Debug controls
//if keyboard_check_pressed(vk_left) = 1  and title_scroll_timer = 0 {title_scroll_active = 2; title_scroll_page += 1; title_scroll_timer = 16;}
//if keyboard_check_pressed(vk_right) = 1 and title_scroll_timer = 0 {title_scroll_active = 1; title_scroll_page -= 1; title_scroll_timer = 16;}

//Navigate menus based on our current page
switch(title_scroll_page)
    {
        //-------------------Title Screen Menu-------------------//
        //=======================================================//

        case 0:
            {
                //Use this opportunity to allow the freeze frame mechanic to be adjusted by a hotkey, as well
                if keyboard_check_pressed(vk_escape)
                    scr_set_freeze_frames_esc();
                if ((mouse_check_button_pressed(mb_left) or mouse_check_button_pressed(mb_right))
                and o.joy_mouse_button_switch = 1
                and title_scroll_active = 0
                and device_mouse_x_to_gui(0) &gt;= 127 and device_mouse_x_to_gui(0) &lt;= 254
                and device_mouse_y_to_gui(0) &gt;= 131 and device_mouse_y_to_gui(0) &lt;= 209)
                    {
                        //Play
                        if device_mouse_y_to_gui(0) &gt;= 131 and device_mouse_y_to_gui(0) &lt;= 148
                            title_scroll = 0;
                        //Edit
                        if device_mouse_y_to_gui(0) &gt;= 149 and device_mouse_y_to_gui(0) &lt;= 168
                            title_scroll = 1;
                        //Story
                        if device_mouse_y_to_gui(0) &gt;= 169 and device_mouse_y_to_gui(0) &lt;= 188
                            title_scroll = 2;
                        //Options
                        if device_mouse_y_to_gui(0) &gt;= 189 and device_mouse_y_to_gui(0) &lt;= 209
                            title_scroll = 3;
                        //Exit (Quit Game)
                        if device_mouse_y_to_gui(0) &gt;= 210 and device_mouse_y_to_gui(0) &lt;= 230
                            title_scroll = 4;
                        //Exit (Campaign Mode)
                        if title_campaign_menu &gt; 0 and title_scroll = 4
                            title_scroll = 3;
                        o.use_a = 1
                    }
                //Go to a different room after the transition
                if o.transition_active = 1
                    {
                        title_room_timer += 1
                        //Lock player inputs
                        o.joy_input[2,6] = 30
                        //Sanity check against wrong warps
                        if  title_room_goto != rm_main_menu
                        and title_room_goto != rm_editor
                        and title_room_goto != rm_games_end
                        and title_room_goto != rm_sm_character_select
                            title_room_goto = rm_main_menu;
                        //After the iteration timer ends, change rooms
                        if title_room_timer &gt; 30
                            {
                                room_goto(title_room_goto)
                                o.transition_active = 0
                                o.transition_position = 0
                                o.title_room_timer = 0
                            }
                    }
                //Scroll through menu items
                if o.use_up   = 1
                    {
                        title_scroll -= 1
                        //Shake menu items while scrolling through them
                        switch(title_scroll)
                            {
                                case 0: {title_item_shake_timer = 10; title_item_shake_cur = 0; break;}
                                case 1: {title_item_shake_timer = 10; title_item_shake_cur = 1; break;}
                                case 2: {title_item_shake_timer = 10; title_item_shake_cur = 2; break;}
                                case 3: {title_item_shake_timer = 10; title_item_shake_cur = 3; break;}
                                case 4: {title_item_shake_timer = 10; title_item_shake_cur = 4; break;}
                            }
                        audio_play_sound(pause_select,50,false)
                    }
                if o.use_down = 1
                    {
                        title_scroll += 1
                        //Shake menu items while scrolling through them
                        switch(title_scroll)
                            {
                                case 0: {title_item_shake_timer = 10; title_item_shake_cur = 0; break;}
                                case 1: {title_item_shake_timer = 10; title_item_shake_cur = 1; break;}
                                case 2: {title_item_shake_timer = 10; title_item_shake_cur = 2; break;}
                                case 3: {title_item_shake_timer = 10; title_item_shake_cur = 3; break;}
                                case 4: {title_item_shake_timer = 10; title_item_shake_cur = 4; break;}
                            }
                        audio_play_sound(pause_select,50,false)
                    }
                //Loop through menu items if our selection is going beyond the boundaries
                if title_campaign_menu = 0
                    {
                        if title_scroll &lt; 0 {title_scroll = 4; title_item_shake_timer = 8; title_item_shake_cur = 4;}
                        if title_scroll &gt; 4 {title_scroll = 0; title_item_shake_timer = 8; title_item_shake_cur = 0;}
                    }
                if title_campaign_menu = 1
                    {
                        if title_scroll &lt; 0 {title_scroll = 3; title_item_shake_timer = 8; title_item_shake_cur = 4;}
                        if title_scroll &gt; 3 {title_scroll = 0; title_item_shake_timer = 8; title_item_shake_cur = 0;}
                    }
                if (o.use_a = 1 or o.use_c = 1 or o.use_start = 1)
                    {
                        if title_campaign_menu = 0 and title_campaign_cooldown_timer = 0
                            {
                                switch(title_scroll)
                                    {
                                        case 0: {audio_play_sound(pause_exit,50,false); title_room_goto=rm_main_menu; o.transition_active = 1; break;} //Go to Shang Mu Academy
                                        case 1: {audio_play_sound(pause_exit,50,false); title_room_goto=rm_editor;    o.transition_active = 1; break;} //Go to Shang Mu Architect Editor
                                        case 2:
                                            {
                                                //Go to Shang Mu Architect's Story Mode
                                                if story_alpha = 1
                                                    {
                                                        audio_play_sound(pause_jingle,50,false);
                                                        title_scroll = 0
                                                        title_campaign_menu = 1
                                                        title_campaign_x = 512
                                                        title_main_menu_x = 157
                                                        title_campaign_cooldown_timer = 16
                                                    }
                                                break;
                                            }
                                        //Go to the Options menu
                                        case 3:
                                            {
                                                audio_play_sound(pause_jingle,50,false);
                                                title_scroll_active = 2; title_scroll_page += 1; title_scroll_timer = 16; title_scroll = 0;
                                                break;
                                            }
                                        case 4: {audio_play_sound(pause_exit,50,false); title_room_goto=rm_games_end; o.transition_active = 1; break;} //Exit the game
                                    }
                            }
                        if title_campaign_menu = 1 and title_campaign_cooldown_timer = 0
                            {
                                switch(title_scroll)
                                    {
                                        case 0: {audio_play_sound(pause_exit,50,false); title_room_goto=rm_sm_character_select; o.transition_active = 1; o.campaign_menu_mode = 0; break;} //Go to Story Mode
                                        case 1: {audio_play_sound(pause_exit,50,false); title_room_goto=rm_sm_character_select; o.transition_active = 1; o.campaign_menu_mode = 1; break;} //Go to Classic Mode
                                        case 2: {audio_play_sound(pause_exit,50,false); title_room_goto=rm_sm_character_select; o.transition_active = 1; o.campaign_menu_mode = 2; break;} //Go to Time Attack Mode
                                        //Go back to the "main" menu
                                        case 3:
                                            {
                                                audio_play_sound(pause_jingle,50,false)
                                                title_scroll = 0
                                                title_campaign_menu = 2
                                                title_campaign_cooldown_timer = 16
                                                break;
                                            }
                                    }
                            }
                    }
                if o.use_b = 1 and title_campaign_menu = 1
                    {
                        if title_scroll != 3
                            {
                                title_scroll = 3
                                title_item_shake_timer = 10
                                title_item_shake_cur = 3
                                title_campaign_cooldown_timer = 16
                                audio_play_sound(pause_select,50,false)
                            }
                        if title_scroll = 3 and title_campaign_cooldown_timer = 0
                            {
                                title_scroll = 0
                                title_campaign_menu = 2
                                title_campaign_cooldown_timer = 16
                                audio_play_sound(pause_jingle,50,false)
                            }
                    }
                if title_campaign_menu = 1
                    {
                        title_campaign_x  -= 36.4375;
                        title_main_menu_x -= 36.4375;
                        if title_campaign_x &lt; 157
                            title_campaign_x = 157;
                        if title_main_menu_x &lt; -256
                            title_main_menu_x = -256;
                    }
                if title_campaign_menu = 2
                    {
                        title_campaign_x  += 36.4375;
                        title_main_menu_x += 36.4375;
                        if title_main_menu_x &gt; 157
                            {
                                title_main_menu_x = 157
                                title_campaign_menu = 0
                            }
                    }
                if title_campaign_cooldown_timer &gt; 0
                    title_campaign_cooldown_timer -= 1;
                break;
            }

        //--------------------Options Menu--------------------//
        //====================================================//

        case 1:
            {
                if ((mouse_check_button_pressed(mb_left) or mouse_check_button_pressed(mb_right))
                and o.joy_mouse_button_switch = 1
                and title_scroll_active = 0
                and device_mouse_x_to_gui(0) &gt;= 62 and device_mouse_x_to_gui(0) &lt;= 381
                and device_mouse_y_to_gui(0) &gt;= 42 and device_mouse_y_to_gui(0) &lt;= 235)
                    {
                        //Screen Size
                        if device_mouse_y_to_gui(0) &gt;= 42 and device_mouse_y_to_gui(0) &lt;= 64
                            title_scroll = 0;
                        //Shaders
                        if device_mouse_y_to_gui(0) &gt;= 68 and device_mouse_y_to_gui(0) &lt;= 91
                            title_scroll = 1;
                        //Music Volume
                        if device_mouse_y_to_gui(0) &gt;= 92 and device_mouse_y_to_gui(0) &lt;= 115
                            title_scroll = 2;
                        //Sound Volume
                        if device_mouse_y_to_gui(0) &gt;= 116 and device_mouse_y_to_gui(0) &lt;= 139
                            title_scroll = 3;
                        //Player Controls
                        if device_mouse_y_to_gui(0) &gt;= 140 and device_mouse_y_to_gui(0) &lt;= 163
                            title_scroll = 4;
                        //Editor Controls
                        if device_mouse_y_to_gui(0) &gt;= 164 and device_mouse_y_to_gui(0) &lt;= 187
                            title_scroll = 5;
                        //Sensitivity
                        if device_mouse_y_to_gui(0) &gt;= 188 and device_mouse_y_to_gui(0) &lt;= 211
                            title_scroll = 6;
                        //Okay
                        if device_mouse_y_to_gui(0) &gt;= 212 and device_mouse_y_to_gui(0) &lt;= 235
                            title_scroll = 7;
                        //Shake menu items while scrolling through them
                        switch(title_scroll)
                            {
                                case 0: {title_item_shake_timer = 10; title_item_shake_cur = 3; break;}
                                case 1: {title_item_shake_timer = 10; title_item_shake_cur = 4; break;}
                                case 2: {title_item_shake_timer = 10; title_item_shake_cur = 5; break;}
                                case 3: {title_item_shake_timer = 10; title_item_shake_cur = 6; break;}
                                case 4: {title_item_shake_timer = 10; title_item_shake_cur = 7; break;}
                                case 5: {title_item_shake_timer = 10; title_item_shake_cur = 8; break;}
                                case 6: {title_item_shake_timer = 10; title_item_shake_cur = 9; break;}
                                case 7: {title_item_shake_timer = 10; title_item_shake_cur = 10; break;}
                            }
                        audio_play_sound(pause_select,50,false)
                        o.use_a = 1
                    }
                //Scroll through menu items
                if o.use_up   = 1
                    {
                        title_scroll -= 1
                        //Shake menu items while scrolling through them
                        switch(title_scroll)
                            {
                                case 0: {title_item_shake_timer = 10; title_item_shake_cur = 3; break;}
                                case 1: {title_item_shake_timer = 10; title_item_shake_cur = 4; break;}
                                case 2: {title_item_shake_timer = 10; title_item_shake_cur = 5; break;}
                                case 3: {title_item_shake_timer = 10; title_item_shake_cur = 6; break;}
                                case 4: {title_item_shake_timer = 10; title_item_shake_cur = 7; break;}
                                case 5: {title_item_shake_timer = 10; title_item_shake_cur = 8; break;}
                                case 6: {title_item_shake_timer = 10; title_item_shake_cur = 9; break;}
                                case 7: {title_item_shake_timer = 10; title_item_shake_cur = 10; break;}
                            }
                        audio_play_sound(pause_select,50,false)
                    }
                if o.use_down = 1
                    {
                        title_scroll += 1
                        //Shake menu items while scrolling through them
                        switch(title_scroll)
                            {
                                case 0: {title_item_shake_timer = 10; title_item_shake_cur = 3; break;}
                                case 1: {title_item_shake_timer = 10; title_item_shake_cur = 4; break;}
                                case 2: {title_item_shake_timer = 10; title_item_shake_cur = 5; break;}
                                case 3: {title_item_shake_timer = 10; title_item_shake_cur = 6; break;}
                                case 4: {title_item_shake_timer = 10; title_item_shake_cur = 7; break;}
                                case 5: {title_item_shake_timer = 10; title_item_shake_cur = 8; break;}
                                case 6: {title_item_shake_timer = 10; title_item_shake_cur = 9; break;}
                                case 7: {title_item_shake_timer = 10; title_item_shake_cur = 10; break;}
                            }
                        audio_play_sound(pause_select,50,false)
                    }
                //Scroll left through menu items
                if o.use_left = 1
                    {
                        switch(title_scroll)
                            {
                                //Resize game window
                                case 0:
                                    {
                                        if window_get_width() &lt;= 1278
                                            {
                                                //Play Sound
                                                audio_play_sound(pause_select,50,false);
                                                //Downscale window size
                                                o.view_scale_x -= 426;
                                                o.view_scale_y -= 240;
                                                o.view_scale-=1;
                                                //If below 1x scale is attempted, reset to 3x scale
                                                if o.view_scale_y&lt;240
                                                    {
                                                        o.view_scale_x = 1278;
                                                        o.view_scale_y = 720;
                                                        o.view_scale=3;
                                                    }
                                                //Downscale new window size
                                                window_set_size(o.view_scale_x,o.view_scale_y)
                                                window_set_position(display_get_width()/2-o.view_scale_x/2,display_get_height()/2-o.view_scale_y/2);
                                            }
                                        if window_get_width() &gt; 1278
                                            scr_set_message("Cannot adjust window size while maximized!")
                                        break;

                                    }
                                //Shaders
                                case 1:
                                    {
                                        o.enable_shaders -= 1
                                        if o.enable_shaders &lt; 0
                                            o.enable_shaders = 1;

                                        switch(o.enable_shaders)
                                            {
                                                case 0: {o.pal_swap_script = pal_swap_dummy; break;}
                                                case 1: {o.pal_swap_script = pal_swap_set; break;}
                                            }
                                        if o.enable_shaders = 1 and global.Pal_Shader = -1
                                            pal_swap_init_system(shd_pal_swapper);
                                        break;
                                    }
                                //Adjust Music Volume
                                case 2:
                                    {
                                        //Play Sound
                                        audio_play_sound(pause_select,50,false);
                                        //Decrease Music Volume
                                        o.music_volume -= 10
                                        //Reset Music Volume if we have decreased volume below 0%
                                        if o.music_volume &lt; 0 {o.music_volume = 100}
                                        //Readjust Music Volume
                                        audio_sound_gain(o.music_index,o.music_volume/100,0)
                                        break;
                                    }
                                //Adjust Sound Volume
                                case 3:
                                    {
                                        //Play Sound
                                        audio_play_sound(pause_select,50,false);
                                        //Decrease Sound Volume
                                        o.game_sound_volume -= 10
                                        //Reset Sound Volume if we have decreased volume below 0%
                                        if o.game_sound_volume &lt; 0 {o.game_sound_volume = 100}
                                        //Readjust Sound Volume of all known sound effects
                                        scr_adjust_sounds(o.game_sound_volume/100)
                                        break;
                                    }
                                //Adjust Language Option
                                case 5:
                                    {
                                        audio_play_sound(pause_select,50,false)
                                        o.user_language_mode -= 1
                                        if o.user_language_mode &lt; 0
                                            o.user_language_mode = 5;
                                        lang_select = o.user_language_mode
                                        break;
                                    }
                            }
                    }
                //Scroll right through menu items
                if o.use_right = 1
                    {
                        switch(title_scroll)
                            {
                                //Resize game window
                                case 0:
                                    {
                                        if window_get_width() &lt;= 1278
                                            {
                                                //Play Sound
                                                audio_play_sound(pause_select,50,false);
                                                //Upscale window size
                                                o.view_scale_x += 426;
                                                o.view_scale_y += 240;
                                                o.view_scale+=1;
                                                //If above 3x scale is attempted, reset to 1x scale
                                                if o.view_scale_y&gt;720
                                                    {
                                                        o.view_scale_x = 426;
                                                        o.view_scale_y = 240;
                                                        o.view_scale=1;
                                                    }
                                                //Upscale new window size
                                                window_set_size(o.view_scale_x,o.view_scale_y)
                                                window_set_position(display_get_width()/2-o.view_scale_x/2,display_get_height()/2-o.view_scale_y/2);
                                            }
                                        if window_get_width() &gt; 1278
                                            scr_set_message("Cannot adjust window size while maximized!")
                                        break;
                                    }
                                //Shaders
                                case 1:
                                    {
                                        o.enable_shaders += 1
                                        if o.enable_shaders &gt; 1
                                            o.enable_shaders = 0;

                                        switch(o.enable_shaders)
                                            {
                                                case 0: {o.pal_swap_script = pal_swap_dummy; break;}
                                                case 1: {o.pal_swap_script = pal_swap_set; break;}
                                            }
                                        if o.enable_shaders = 1 and global.Pal_Shader = -1
                                            pal_swap_init_system(shd_pal_swapper);
                                        break;
                                    }
                                //Adjust Music Volume
                                case 2:
                                    {
                                        //Play Sound
                                        audio_play_sound(pause_select,50,false);
                                        //Increase Music Volume
                                        o.music_volume += 10
                                        //Reset Music Volume if we have increased volume above 100%
                                        if o.music_volume &gt; 100 o.music_volume = 0;
                                        //Readjust Music Volume
                                        audio_sound_gain(o.music_index,o.music_volume/100,0)
                                        break;
                                    }
                                //Adjust Sound Volume
                                case 3:
                                    {
                                        //Play Sound
                                        audio_play_sound(pause_select,50,false);
                                        //Increase Sound Volume
                                        o.game_sound_volume += 10
                                        //Reset Sound Volume if we have increased volume above 100%
                                        if o.game_sound_volume &gt; 100 {o.game_sound_volume = 0}
                                        //Readjust Sound Volume of all known sound effects
                                        scr_adjust_sounds(o.game_sound_volume/100)
                                        break;
                                    }
                                //Adjust Language Option
                                case 5:
                                    {
                                        audio_play_sound(pause_select,50,false)
                                        o.user_language_mode += 1
                                        if o.user_language_mode &gt; 5
                                            o.user_language_mode = 0;
                                        lang_select = o.user_language_mode
                                        break;
                                    }
                            }
                    }
                //Loop through menu items if our selection is going beyond the boundaries
                if title_scroll &lt; 0 {title_scroll = 7; title_item_shake_timer = 8; title_item_shake_cur = 10;}
                if title_scroll &gt; 7 {title_scroll = 0; title_item_shake_timer = 8; title_item_shake_cur = 3;}
                //Select Okay if we have pressed the B button
                if o.use_b = 1 and title_scroll = 7
                    {
                        audio_play_sound(pause_jingle,50,false);
                        title_scroll_active = 1; title_scroll_page -= 1; title_scroll_timer = 16; title_scroll = 0;
                        nsfs_init()
                        ini_open_ns(program_directory + "gamedata.dat")
                        //Look for visual settings to change.
                        ini_write_string("main_settings","vblank",o.vblank)
                        ini_write_string("main_settings","fullscreen",o.fullscreen)
                        ini_write_string("main_settings","performance_profile",o.performance)
                        ini_write_string("main_settings","enable_shaders",string(o.enable_shaders))
                        ini_write_string("main_settings","window_scaling",string(o.view_scale))
                        ini_write_string("main_settings","music_volume",string(o.music_volume))
                        ini_write_string("main_settings","sound_volume",string(o.game_sound_volume))
                        ini_write_string("extended_settings","user_language_mode",string(o.user_language_mode))
                        //ini_write_string("joystick_modern_bindings","deadzone",string(o.deadzone_mod))
                        ini_write_string("main_settings","performance_profile",string(o.performance_profile))
                        //ini_write_string("main_settings","screen_shake",string(screen_shake))
                        //Close INI Configuration File
                        ini_close_ns();
                        saving_prompt = 120
                    }
                //Set cursor to Okay if we have pressed the B button, and the cursor is not already there
                if o.use_b = 1 and title_scroll != 7 {audio_play_sound(pause_select,50,false); title_scroll = 7; title_item_shake_timer = 8; title_item_shake_cur = 10;}
                if (o.use_a = 1 or o.use_c = 1 or o.use_start = 1) and control_limit = 0
                    {
                        switch(title_scroll)
                            {
                                //Resize game window
                                case 0:
                                    {
                                        if window_get_width() &lt;= 1278
                                            {
                                                //Play Sound
                                                audio_play_sound(pause_select,50,false);
                                                //Upscale window size
                                                o.view_scale_x += 426;
                                                o.view_scale_y += 240;
                                                o.view_scale+=1
                                                //If above 3x scale is attempted, reset to 1x scale
                                                if o.view_scale_y&gt;720
                                                    {
                                                        o.view_scale_x = 426
                                                        o.view_scale_y = 240
                                                        o.view_scale = 1
                                                    }
                                                //Upscale new window size
                                                window_set_size(o.view_scale_x,o.view_scale_y)
                                                window_set_position(display_get_width()/2-o.view_scale_x/2,display_get_height()/2-o.view_scale_y/2);
                                            }
                                        if window_get_width() &gt; 1278
                                            scr_set_message("Cannot adjust window size while maximized!")
                                        break;
                                    }
                                //Shaders
                                case 1:
                                    {
                                        o.enable_shaders += 1
                                        if o.enable_shaders &gt; 1
                                            o.enable_shaders = 0;

                                        switch(o.enable_shaders)
                                            {
                                                case 0: {o.pal_swap_script = pal_swap_dummy; break;}
                                                case 1: {o.pal_swap_script = pal_swap_set; break;}
                                            }
                                        if o.enable_shaders = 1 and global.Pal_Shader = -1
                                            pal_swap_init_system(shd_pal_swapper);
                                        break;
                                    }
                                //Adjust Music Volume
                                case 2:
                                    {
                                        //Play Sound
                                        audio_play_sound(pause_select,50,false);
                                        //Increase Music Volume
                                        o.music_volume += 10
                                        //Reset Music Volume if we have increased volume beyond 100%
                                        if o.music_volume &gt; 100 o.music_volume = 0;
                                        //Readjust Music Volume
                                        audio_sound_gain(o.music_index,o.music_volume/100,0)
                                        break;
                                    }
                                //Adjust Sound Volume
                                case 3:
                                    {
                                        //Play Sound
                                        audio_play_sound(pause_select,50,false);
                                        //Increase Sound Volume
                                        o.game_sound_volume += 10
                                        //Reset Sound Volume if we have increased volume above 100%
                                        if o.game_sound_volume &gt; 100 o.game_sound_volume = 0;
                                        //Readjust Sound Volume of all known sound effects
                                        scr_adjust_sounds(o.game_sound_volume/100)
                                        break;
                                    }
                                //Go To Player Control Settings
                                case 4:
                                    {
                                        audio_play_sound(pause_jingle,50,false);
                                        title_scroll_active = 2; title_scroll_page += 1; title_scroll_timer = 16; title_scroll = 0;
                                        break;
                                    }
                                //Change Language Settings
                                case 5:
                                    {
                                        audio_play_sound(pause_jingle,50,false);
                                        o.user_language_mode += 1
                                        if o.user_language_mode &gt; 5
                                            o.user_language_mode = 0;
                                        lang_select = o.user_language_mode
                                        break;
                                    }
                                //Go To Gameplay Settings
                                case 6:
                                    {
                                        audio_play_sound(pause_jingle,50,false);
                                        title_scroll_active = 2; title_scroll_page = 4; title_scroll_timer = 16; title_scroll = 0;
                                        break;
                                    }
                                //Save Settings and Return To Title Screen
                                case 7:
                                    {
                                        audio_play_sound(pause_jingle,50,false);
                                        title_scroll_active = 1; title_scroll_page -= 1; title_scroll_timer = 16; title_scroll = 0;
                                        nsfs_init()
                                        ini_open_ns(program_directory + "gamedata.dat")
                                        //Look for visual settings to change.
                                        ini_write_string("main_settings","vblank",o.vblank)
                                        ini_write_string("main_settings","fullscreen",o.fullscreen)
                                        ini_write_string("main_settings","performance_profile",o.performance)
                                        ini_write_string("main_settings","enable_shaders",string(o.enable_shaders))
                                        ini_write_string("main_settings","window_scaling",string(o.view_scale))
                                        ini_write_string("main_settings","music_volume",string(o.music_volume))
                                        ini_write_string("main_settings","sound_volume",string(o.game_sound_volume))
                                        ini_write_string("joystick_modern_bindings","deadzone",string(o.deadzone_mod))
                                        ini_write_string("main_settings","performance_profile",string(o.performance_profile))
                                        ini_write_string("extended_settings","user_language_mode",string(o.user_language_mode))
                                        //ini_write_string("main_settings","screen_shake",string(screen_shake))
                                        //Close INI Configuration File
                                        ini_close_ns();
                                        saving_prompt = 120
                                        break;
                                    }
                            }
                    }
                break;
            }

        //--------------------Gameplay Menu--------------------//
        //====================================================//

        case 4:
            {
                if ((mouse_check_button_pressed(mb_left) or mouse_check_button_pressed(mb_right))
                and o.joy_mouse_button_switch = 1
                and title_scroll_active = 0
                and device_mouse_x_to_gui(0) &gt;= 62 and device_mouse_x_to_gui(0) &lt;= 381
                and device_mouse_y_to_gui(0) &gt;= 42 and device_mouse_y_to_gui(0) &lt;= 235)
                    {
                        //Difficulty
                        if device_mouse_y_to_gui(0) &gt;= 42 and device_mouse_y_to_gui(0) &lt;= 64
                            title_scroll = 0;
                        //Camera Shake
                        if device_mouse_y_to_gui(0) &gt;= 68 and device_mouse_y_to_gui(0) &lt;= 91
                            title_scroll = 1;
                        //Camera Zoom
                        if device_mouse_y_to_gui(0) &gt;= 92 and device_mouse_y_to_gui(0) &lt;= 115
                            title_scroll = 2;
                        //Display Moveset
                        if device_mouse_y_to_gui(0) &gt;= 116 and device_mouse_y_to_gui(0) &lt;= 139
                            title_scroll = 3;
                        //Display Enemy Healthbars
                        if device_mouse_y_to_gui(0) &gt;= 140 and device_mouse_y_to_gui(0) &lt;= 163
                            title_scroll = 4;
                        ////Sensitivity
                        if device_mouse_y_to_gui(0) &gt;= 164 and device_mouse_y_to_gui(0) &lt;= 187
                            title_scroll = 5;
                        //Freeze Frames
                        if device_mouse_y_to_gui(0) &gt;= 188 and device_mouse_y_to_gui(0) &lt;= 211
                            title_scroll = 6;
                        //Okay
                        if device_mouse_y_to_gui(0) &gt;= 212 and device_mouse_y_to_gui(0) &lt;= 235
                            title_scroll = 7;
                        //Shake menu items while scrolling through them
                        switch(title_scroll)
                            {
                                case 0: {title_item_shake_timer = 10; title_item_shake_cur = 17; break;}
                                case 1: {title_item_shake_timer = 10; title_item_shake_cur = 18; break;}
                                case 2: {title_item_shake_timer = 10; title_item_shake_cur = 19; break;}
                                case 3: {title_item_shake_timer = 10; title_item_shake_cur = 20; break;}
                                case 4: {title_item_shake_timer = 10; title_item_shake_cur = 21; break;}
                                case 5: {title_item_shake_timer = 10; title_item_shake_cur = 22; break;}
                                case 6: {title_item_shake_timer = 10; title_item_shake_cur = 23; break;}
                                case 7: {title_item_shake_timer = 10; title_item_shake_cur = 24; break;}
                            }
                        audio_play_sound(pause_select,50,false)
                        o.use_a = 1
                    }
                //Scroll through menu items
                if o.use_up   = 1
                    {
                        title_scroll -= 1
                        //Shake menu items while scrolling through them
                        switch(title_scroll)
                            {
                                case 0: {title_item_shake_timer = 10; title_item_shake_cur = 17; break;}
                                case 1: {title_item_shake_timer = 10; title_item_shake_cur = 18; break;}
                                case 2: {title_item_shake_timer = 10; title_item_shake_cur = 19; break;}
                                case 3: {title_item_shake_timer = 10; title_item_shake_cur = 20; break;}
                                case 4: {title_item_shake_timer = 10; title_item_shake_cur = 21; break;}
                                case 5: {title_item_shake_timer = 10; title_item_shake_cur = 22; break;}
                                case 6: {title_item_shake_timer = 10; title_item_shake_cur = 23; break;}
                                case 7: {title_item_shake_timer = 10; title_item_shake_cur = 24; break;}
                            }
                        audio_play_sound(pause_select,50,false)
                    }
                if o.use_down = 1
                    {
                        title_scroll += 1
                        //Shake menu items while scrolling through them
                        switch(title_scroll)
                            {
                                case 0: {title_item_shake_timer = 10; title_item_shake_cur = 17; break;}
                                case 1: {title_item_shake_timer = 10; title_item_shake_cur = 18; break;}
                                case 2: {title_item_shake_timer = 10; title_item_shake_cur = 19; break;}
                                case 3: {title_item_shake_timer = 10; title_item_shake_cur = 20; break;}
                                case 4: {title_item_shake_timer = 10; title_item_shake_cur = 21; break;}
                                case 5: {title_item_shake_timer = 10; title_item_shake_cur = 22; break;}
                                case 6: {title_item_shake_timer = 10; title_item_shake_cur = 23; break;}
                                case 7: {title_item_shake_timer = 10; title_item_shake_cur = 24; break;}
                            }
                        audio_play_sound(pause_select,50,false)
                    }
                //Scroll left through menu items
                if o.use_left = 1
                    {
                        switch(title_scroll)
                            {
                                //Difficulty
                                case 0:
                                    {
                                        o.user_enemy_level -= 1
                                        if o.user_enemy_level &lt; 0
                                            o.user_enemy_level = 4;
                                        audio_play_sound(pause_select,50,false)
                                        break;

                                    }
                                //Camera Shake Intensity
                                case 1:
                                    {
                                        o.user_camera_shake_intensity -= 0.25
                                        if o.user_camera_shake_intensity &lt; 0
                                            o.user_camera_shake_intensity = 1.5;
                                        audio_play_sound(pause_select,50,false)
                                        break;
                                    }
                                //Camera Zoom
                                case 2:
                                    {
                                        o.user_disable_zoom_gimmick -= 1
                                        if o.user_disable_zoom_gimmick &lt; 0
                                            o.user_disable_zoom_gimmick = 1;
                                        audio_play_sound(pause_select,50,false);
                                        break;
                                    }
                                //Display Moveset
                                case 3:
                                    {
                                        o.user_move_list_display -= 1
                                        if o.user_move_list_display &lt; 0
                                            o.user_move_list_display = 1;
                                        audio_play_sound(pause_select,50,false);
                                        break;
                                    }
                                //Display Enemy Health
                                case 4:
                                    {
                                        o.user_enemy_health_display -= 1
                                        if o.user_enemy_health_display &lt; 0
                                            o.user_enemy_health_display = 1;
                                        audio_play_sound(pause_select,50,false);
                                        break;
                                    }
                                //Adjust Sensitivity
                                case 5:
                                    {
                                        audio_play_sound(pause_select,50,false);
                                        //Decrease Deadzone
                                        o.deadzone_mod -= 0.05
                                        //Reset Deadzone if we have decreased deadzone below 0%
                                        if o.deadzone_mod &lt; 0 o.deadzone_mod = 0.95;
                                        break;
                                    }
                                //Freeze Frames
                                case 6:
                                    {
                                        o.user_freeze_frames -= 1
                                        if o.user_freeze_frames &lt; 0
                                            o.user_freeze_frames = 1;
                                        audio_play_sound(pause_select,50,false);
                                        break;
                                    }
                            }
                    }
                //Scroll right through menu items
                if o.use_right = 1
                    {
                        switch(title_scroll)
                            {
                                //Difficulty
                                case 0:
                                    {
                                        o.user_enemy_level += 1
                                        if o.user_enemy_level &gt; 4
                                            o.user_enemy_level = 0;
                                        audio_play_sound(pause_select,50,false)
                                        break;
                                    }
                                //Camera Shake Intensity
                                case 1:
                                    {
                                        o.user_camera_shake_intensity += 0.25
                                        if o.user_camera_shake_intensity &gt; 1.5
                                            o.user_camera_shake_intensity = 0;
                                        audio_play_sound(pause_select,50,false)
                                        break;
                                    }
                                //Camera Zoom
                                case 2:
                                    {
                                        o.user_disable_zoom_gimmick += 1
                                        if o.user_disable_zoom_gimmick &gt; 1
                                            o.user_disable_zoom_gimmick = 0;
                                        audio_play_sound(pause_select,50,false);
                                        break;
                                    }
                                //Display Moveset
                                case 3:
                                    {
                                        o.user_move_list_display += 1
                                        if o.user_move_list_display &gt; 1
                                            o.user_move_list_display = 0;
                                        audio_play_sound(pause_select,50,false);
                                        break;
                                    }
                                //Display Enemy Health
                                case 4:
                                    {
                                        o.user_enemy_health_display += 1
                                        if o.user_enemy_health_display &gt; 1
                                            o.user_enemy_health_display = 0;
                                        audio_play_sound(pause_select,50,false);
                                        break;
                                    }
                                //Adjust Sensitivity
                                case 5:
                                    {
                                        audio_play_sound(pause_select,50,false);
                                        o.deadzone_mod += 0.05
                                        if o.deadzone_mod &gt; 0.95
                                            o.deadzone_mod = 0;
                                        break;
                                    }
                                //Freeze Frames
                                case 6:
                                    {
                                        o.user_freeze_frames += 1
                                        if o.user_freeze_frames &gt; 1
                                            o.user_freeze_frames = 0;
                                        audio_play_sound(pause_select,50,false);
                                        break;
                                    }
                            }
                    }
                //Loop through menu items if our selection is going beyond the boundaries
                if title_scroll &lt; 0 {title_scroll = 7; title_item_shake_timer = 8; title_item_shake_cur = 23;}
                if title_scroll &gt; 7 {title_scroll = 0; title_item_shake_timer = 8; title_item_shake_cur = 17;}
                //Select Okay if we have pressed the B button
                if o.use_b = 1 and title_scroll = 7
                    {
                        audio_play_sound(pause_jingle,50,false);
                        title_scroll_active = 1; title_scroll_page = 1; title_scroll_timer = 16; title_scroll = 0;
                        nsfs_init()
                        ini_open_ns(program_directory + "gamedata.dat")
                        //Look for visual settings to change.
                        ini_write_string("extended_settings","user_camera_shake_intensity",string(o.user_camera_shake_intensity))
                        ini_write_string("extended_settings","user_enemy_level",string(o.user_enemy_level))
                        ini_write_string("extended_settings","user_enemy_health_display",string(o.user_enemy_health_display))
                        ini_write_string("extended_settings","user_move_list_display",string(o.user_move_list_display))
                        ini_write_string("extended_settings","user_camera_zoom_toggle",string(o.user_disable_zoom_gimmick))
                        ini_write_string("joystick_modern_bindings","deadzone",string(o.deadzone_mod))
                        //ini_write_string("main_settings","screen_shake",string(screen_shake))
                        //Close INI Configuration File
                        ini_close_ns();
                        saving_prompt = 120
                    }
                //Set cursor to Okay if we have pressed the B button, and the cursor is not already there
                if o.use_b = 1 and title_scroll != 7 {audio_play_sound(pause_select,50,false); title_scroll = 7; title_item_shake_timer = 8; title_item_shake_cur = 10;}
                if (o.use_a = 1 or o.use_c = 1 or o.use_start = 1) and control_limit = 0
                    {
                        switch(title_scroll)
                            {
                                //Difficulty
                                case 0:
                                    {
                                        o.user_enemy_level += 1
                                        if o.user_enemy_level &gt; 4
                                            o.user_enemy_level = 0;
                                        audio_play_sound(pause_select,50,false)
                                        break;
            
                                    }
                                //Camera Shake Intensity
                                case 1:
                                    {
                                        o.user_camera_shake_intensity += 0.25
                                        if o.user_camera_shake_intensity &gt; 1.5
                                            o.user_camera_shake_intensity = 0;
                                        audio_play_sound(pause_select,50,false)
                                        break;
                                    }
                                //Camera Zoom
                                case 2:
                                    {
                                        o.user_disable_zoom_gimmick += 1
                                        if o.user_disable_zoom_gimmick &gt; 1
                                            o.user_disable_zoom_gimmick = 0;
                                        audio_play_sound(pause_select,50,false);
                                        break;
                                    }
                                //Display Moveset
                                case 3:
                                    {
                                        o.user_move_list_display += 1
                                        if o.user_move_list_display &gt; 1
                                            o.user_move_list_display = 0;
                                        audio_play_sound(pause_select,50,false);
                                        break;
                                    }
                                //Display Enemy Health
                                case 4:
                                    {
                                        o.user_enemy_health_display += 1
                                        if o.user_enemy_health_display &gt; 1
                                            o.user_enemy_health_display = 0;
                                        audio_play_sound(pause_select,50,false);
                                        break;
                                    }
                                //Adjust Sensitivity
                                case 5:
                                    {
                                        audio_play_sound(pause_select,50,false);
                                        o.deadzone_mod += 0.05
                                        if o.deadzone_mod &gt; 0.95
                                            o.deadzone_mod = 0;
                                        break;
                                    }
                                //Freeze Frames
                                case 6:
                                    {
                                        o.user_freeze_frames += 1
                                        if o.user_freeze_frames &gt; 1
                                            o.user_freeze_frames = 0;
                                        audio_play_sound(pause_select,50,false);
                                        break;
                                    }
                                //Save Settings and Return To Title Screen
                                case 7:
                                    {
                                        audio_play_sound(pause_jingle,50,false);
                                        title_scroll_active = 1; title_scroll_page = 1; title_scroll_timer = 16; title_scroll = 0;
                                        nsfs_init()
                                        ini_open_ns(program_directory + "gamedata.dat")
                                        //Look for visual settings to change.
                                        ini_write_string("extended_settings","user_camera_shake_intensity",string(o.user_camera_shake_intensity))
                                        ini_write_string("extended_settings","user_enemy_level",string(o.user_enemy_level))
                                        ini_write_string("extended_settings","user_enemy_health_display",string(o.user_enemy_health_display))
                                        ini_write_string("extended_settings","user_move_list_display",string(o.user_move_list_display))
                                        ini_write_string("extended_settings","user_camera_zoom_toggle",string(o.user_disable_zoom_gimmick))
                                        ini_write_string("extended_settings","user_freeze_frames",string(o.user_freeze_frames))
                                        ini_write_string("joystick_modern_bindings","deadzone",string(o.deadzone_mod))
                                        //ini_write_string("main_settings","screen_shake",string(screen_shake))
                                        //Close INI Configuration File
                                        ini_close_ns();
                                        saving_prompt = 120
                                        break;
                                    }
                            }
                    }
                break;
            }

        //------------------Controls Settings------------------//
        //=====================================================//

        case 2:
            {
                if ((mouse_check_button_pressed(mb_left) or mouse_check_button_pressed(mb_right))
                and o.joy_mouse_button_switch = 1
                and title_scroll_active = 0
                and device_mouse_x_to_gui(0) &gt;= 324 and device_mouse_x_to_gui(0) &lt;= 425
                and device_mouse_y_to_gui(0) &gt;= 0 and device_mouse_y_to_gui(0) &lt;= 27)
                    {
                        title_type = 0;
                        title_scroll_active = 2;
                        title_scroll_page = 3;
                        title_scroll_timer = 16;
                        title_scroll = 0;
                        audio_play_sound(pause_jingle,50,false);
                    }

                if keyboard_check_pressed(vk_escape) and title_joy_poll = 0
                    {
                        audio_play_sound(pause_select,50,false)
                        //Refresh Keyboard Bindings (Player Mode)
                        o.key_left  = vk_left
                        o.key_up    = vk_up
                        o.key_right = vk_right
                        o.key_down  = vk_down
                        o.key_a     = 88
                        o.key_b     = 90
                        o.key_c     = 67
                        o.key_d     = 83
                        o.key_start = 13
                        o.key_left_s  = "Left"
                        o.key_up_s    = "Up"
                        o.key_right_s = "Right"
                        o.key_down_s  = "Down"
                        o.key_a_s     = "X"
                        o.key_b_s     = "Z"
                        o.key_c_s     = "C"
                        o.key_d_s     = "S"
                        o.key_start_s = "Enter"
                        key_left    = o.key_left
                        key_right   = o.key_right
                        key_up      = o.key_up
                        key_down    = o.key_down
                        key_a       = o.key_a
                        key_b       = o.key_b
                        key_c       = o.key_c
                        key_d       = o.key_d
                        key_start   = o.key_start

                        //Refresh Mouse Bindings (Player Mode)
                        o.mouse_left = 0
                        o.mouse_right = 2
                        o.mouse_middle = 3
                        o.mouse_scroll_up = 4
                        o.mouse_scroll_down = 5
                        
                        //Refresh Joystick Bindings (Player Mode)
                        o.deadzone_mod  = 0.15
                        o.joy_left_mod  = 32783
                        o.joy_right_mod = 32784
                        o.joy_up_mod    = 32781
                        o.joy_down_mod  = 32782
                        o.joy_x_mod     = 32785
                        o.joy_y_mod     = 32786
                        o.joy_a_mod     = 32771
                        o.joy_b_mod     = 32769
                        o.joy_c_mod     = 32776
                        o.joy_d_mod     = 32774
                        o.joy_start     = 32778
                        o.joy_left_mod_s  = "Left"
                        o.joy_right_mod_s = "Right"
                        o.joy_up_mod_s    = "Up"
                        o.joy_down_mod_s  = "Down"
                        o.joy_x_mod_s     = "X Axis"
                        o.joy_y_mod_s     = "Y Axis"
                        o.joy_a_mod_s     = "X"
                        o.joy_b_mod_s     = "A"
                        o.joy_c_mod_s     = "RT"
                        o.joy_d_mod_s     = "RB"
                        o.joy_start_s     = "Start"
                        deadzone_mod    = o.deadzone_mod
                        joy_left_mod    = o.joy_left_mod
                        joy_right_mod   = o.joy_right_mod
                        joy_up_mod      = o.joy_up_mod
                        joy_down_mod    = o.joy_down_mod
                        joy_x_mod       = o.joy_x_mod
                        joy_y_mod       = o.joy_y_mod
                        joy_a_mod       = o.joy_a_mod
                        joy_b_mod       = o.joy_b_mod
                        joy_c_mod       = o.joy_c_mod
                        joy_d_mod       = o.joy_d_mod
                        joy_start_mod   = o.joy_start_mod
                        o.left_stick_left   = 5
                        o.left_stick_right  = 6
                        o.left_stick_up     = 7
                        o.left_stick_down   = 8
                        o.right_stick_left  = 2
                        o.right_stick_right = 3
                        o.right_stick_up    = 9
                        o.right_stick_down  = 4
                        left_stick_left = o.left_stick_left
                        left_stick_right = o.left_stick_right
                        left_stick_up = o.left_stick_up
                        left_stick_down = o.left_stick_down
                        right_stick_left = o.right_stick_left
                        right_stick_right = o.right_stick_right
                        right_stick_up = o.right_stick_up
                        right_stick_down = o.right_stick_down

                        //Write changes to gamedata.dat
                        nsfs_init()
                        ini_open_ns(program_directory + "gamedata.dat")
                        //Joystick Modern Bindings (Player Mode)
                        ini_write_string("joystick_modern_bindings","deadzone","0.15")
                        ini_write_string("joystick_modern_bindings","joy_left","32783")
                        ini_write_string("joystick_modern_bindings","joy_right","32784")
                        ini_write_string("joystick_modern_bindings","joy_up","32781")
                        ini_write_string("joystick_modern_bindings","joy_down","32782")
                        ini_write_string("joystick_modern_bindings","joy_x","32785")
                        ini_write_string("joystick_modern_bindings","joy_y","32786")
                        ini_write_string("joystick_modern_bindings","joy_a","32771")
                        ini_write_string("joystick_modern_bindings","joy_b","32769")
                        ini_write_string("joystick_modern_bindings","joy_c","32776")
                        ini_write_string("joystick_modern_bindings","joy_d","32774")
                        ini_write_string("joystick_modern_bindings","joy_start","32778")
                        //Analog Stick Hotkeys
                        ini_write_string("joystick_modern_hotkeys","left_stick_left","5")
                        ini_write_string("joystick_modern_hotkeys","left_stick_right","6")
                        ini_write_string("joystick_modern_hotkeys","left_stick_up","7")
                        ini_write_string("joystick_modern_hotkeys","left_stick_down","8")
                        ini_write_string("joystick_modern_hotkeys","right_stick_left","2")
                        ini_write_string("joystick_modern_hotkeys","right_stick_right","3")
                        ini_write_string("joystick_modern_hotkeys","right_stick_up","9")
                        ini_write_string("joystick_modern_hotkeys","right_stick_down","4")
                        //Keyboard Bindings (Player Mode)
                        ini_write_string("keyboard_bindings","key_left","37")
                        ini_write_string("keyboard_bindings","key_right","39")
                        ini_write_string("keyboard_bindings","key_up","38")
                        ini_write_string("keyboard_bindings","key_down","40")
                        ini_write_string("keyboard_bindings","key_a","88")
                        ini_write_string("keyboard_bindings","key_b","90")
                        ini_write_string("keyboard_bindings","key_c","67")
                        ini_write_string("keyboard_bindings","key_d","83")
                        ini_write_string("keyboard_bindings","key_start","13")
                        //Mouse Bindings (Player Mode)
                        ini_write_string("mouse_bindings","mouse_left","0")
                        ini_write_string("mouse_bindings","mouse_right","2")
                        ini_write_string("mouse_bindings","mouse_middle","3")
                        ini_write_string("mouse_bindings","mouse_scroll_up","4")
                        ini_write_string("mouse_bindings","mouse_scroll_down","5")
                        ini_write_string("mouse_bindings","mouse_deadzone_up","0")
                        ini_write_string("mouse_bindings","mouse_deadzone_down","0")
                        ini_write_string("mouse_bindings","mouse_deadzone_left","0")
                        ini_write_string("mouse_bindings","mouse_deadzone_right","0")
                        //Close INI Configuration File
                        ini_close_ns();
                        saving_defaults_prompt = 120
                    }
                //Do not allow menu scrolling or interations if we are listening for inputs
                if title_joy_poll = 0 and title_joy_cool_down = 0
                    {
                        if ((mouse_check_button_pressed(mb_left) or mouse_check_button_pressed(mb_right))
                        and o.joy_mouse_button_switch = 1
                        and title_scroll_active = 0
                        and device_mouse_x_to_gui(0) &gt;= 101 and device_mouse_x_to_gui(0) &lt;= 344)
                            {
                                o.use_a = 1
                                //Input Type
                                if device_mouse_y_to_gui(0) &gt;= 0 and device_mouse_y_to_gui(0) &lt;= 39
                                    {
                                        title_scroll = 0;
                                        if device_mouse_x_to_gui(0) &gt;= 165 and device_mouse_x_to_gui(0) &lt;= 214
                                            title_type=0;
                                        if device_mouse_x_to_gui(0) &gt;= 215 and device_mouse_x_to_gui(0) &lt;= 263
                                            title_type=1;
                                        if device_mouse_x_to_gui(0) &gt;= 264 and device_mouse_x_to_gui(0) &lt;= 313
                                            title_type=2;
                                        o.use_a = 0
                                    }
                                //Up
                                if device_mouse_y_to_gui(0) &gt;= 40 and device_mouse_y_to_gui(0) &lt;= 59
                                    title_scroll = 1;
                                //Down
                                if device_mouse_y_to_gui(0) &gt;= 60 and device_mouse_y_to_gui(0) &lt;= 79
                                    title_scroll = 2;
                                //Left
                                if device_mouse_y_to_gui(0) &gt;= 80 and device_mouse_y_to_gui(0) &lt;= 99
                                    title_scroll = 3;
                                //Right
                                if device_mouse_y_to_gui(0) &gt;= 100 and device_mouse_y_to_gui(0) &lt;= 119
                                    title_scroll = 4;
                                //Action
                                if device_mouse_y_to_gui(0) &gt;= 120 and device_mouse_y_to_gui(0) &lt;= 139
                                    title_scroll = 5;
                                //Jump
                                if device_mouse_y_to_gui(0) &gt;= 140 and device_mouse_y_to_gui(0) &lt;= 159
                                    title_scroll = 6;
                                //Special
                                if device_mouse_y_to_gui(0) &gt;= 160 and device_mouse_y_to_gui(0) &lt;= 179
                                    title_scroll = 7;
                                //Switch
                                if device_mouse_y_to_gui(0) &gt;= 180 and device_mouse_y_to_gui(0) &lt;= 199
                                    title_scroll = 8;
                                //Start
                                if device_mouse_y_to_gui(0) &gt;= 200 and device_mouse_y_to_gui(0) &lt;= 219
                                    title_scroll = 9;
                                //Okay
                                if device_mouse_y_to_gui(0) &gt;= 220 and device_mouse_y_to_gui(0) &lt;= 239
                                    title_scroll = 10;
                                //Shake menu items while scrolling through them
                                switch(title_scroll)
                                    {
                                        case 0: {title_item_shake_timer = 10; title_item_shake_cur = 4; break;}
                                        case 10: {title_item_shake_timer = 10; title_item_shake_cur = 12; break;}
                                    }
                                audio_play_sound(pause_select,50,false)
                            }
                        //Scroll through menu items
                        if o.use_up   = 1
                            {
                                title_scroll -= 1
                                //Shake menu items while scrolling through them
                                switch(title_scroll)
                                    {
                                        case 0: {title_item_shake_timer = 8; title_item_shake_cur = 11; break;}
                                        case 10: {title_item_shake_timer = 8; title_item_shake_cur = 12; break;}
                                    }
                                audio_play_sound(pause_select,50,false)
                            }
                        if o.use_down = 1
                            {
                                title_scroll += 1
                                //Shake menu items while scrolling through them
                                switch(title_scroll)
                                    {
                                        case 0: {title_item_shake_timer = 8; title_item_shake_cur = 11; break;}
                                        case 10: {title_item_shake_timer = 8; title_item_shake_cur = 12; break;}
                                    }
                                audio_play_sound(pause_select,50,false)
                            }
                        if o.use_left = 1 and title_scroll = 0
                            {
                                audio_play_sound(pause_select,50,false);
                                title_type-=1; if title_type &lt; 0 title_type = 0;
                            }
                        if o.use_right = 1 and title_scroll = 0
                            {
                                audio_play_sound(pause_select,50,false);
                                title_type += 1; if title_type &gt; 2
                                    {
                                        title_type = 0;
                                        title_scroll_active = 2;
                                        title_scroll_page = 3;
                                        title_scroll_timer = 16;
                                        title_scroll = 0;
                                        audio_play_sound(pause_jingle,50,false);
                                    }
                            }
                        //Loop through menu items if our selection is going beyond the boundaries
                        if title_scroll &lt; 0 {title_scroll = 10; title_item_shake_timer = 8; title_item_shake_cur = 12;}
                        if title_scroll &gt; 10 {title_scroll = 0; title_item_shake_timer = 8; title_item_shake_cur = 11;}
                        //Select Okay if we have pressed the B button
                        if o.use_b = 1 and title_scroll = 10
                            {
                                audio_play_sound(pause_jingle,50,false);
                                title_scroll_active = 1; title_scroll_page -= 1; title_scroll_timer = 16; title_scroll = 0;
                                //Refresh Keyboard Bindings (Player Mode)
                                key_left    = o.key_left
                                key_right   = o.key_right
                                key_up      = o.key_up
                                key_down    = o.key_down
                                key_a       = o.key_a
                                key_b       = o.key_b
                                key_c       = o.key_c
                                key_d       = o.key_d
                                key_start   = o.key_start
                                
                                //Refresh Joystick Bindings (Player Mode)
                                deadzone_mod    = o.deadzone_mod
                                joy_left_mod    = o.joy_left_mod
                                joy_right_mod   = o.joy_right_mod
                                joy_up_mod      = o.joy_up_mod
                                joy_down_mod    = o.joy_down_mod
                                joy_x_mod       = o.joy_x_mod
                                joy_y_mod       = o.joy_y_mod
                                joy_a_mod       = o.joy_a_mod
                                joy_b_mod       = o.joy_b_mod
                                joy_c_mod       = o.joy_c_mod
                                joy_d_mod       = o.joy_d_mod
                                joy_start_mod   = o.joy_start_mod
                                left_stick_left = o.left_stick_left
                                left_stick_right = o.left_stick_right
                                left_stick_up = o.left_stick_up
                                left_stick_down = o.left_stick_down
                                right_stick_left = o.right_stick_left
                                right_stick_right = o.right_stick_right
                                right_stick_up = o.right_stick_up
                                right_stick_down = o.right_stick_down

                                //Write changes to gamedata.dat
                                nsfs_init()
                                ini_open_ns(program_directory + "gamedata.dat")
                                //Joystick Modern Bindings (Player Mode)
                                ini_write_string("joystick_modern_bindings","deadzone",string(o.deadzone_mod))
                                ini_write_string("joystick_modern_bindings","joy_left",string(o.joy_left_mod))
                                ini_write_string("joystick_modern_bindings","joy_right",string(o.joy_right_mod))
                                ini_write_string("joystick_modern_bindings","joy_up",string(o.joy_up_mod))
                                ini_write_string("joystick_modern_bindings","joy_down",string(o.joy_down_mod))
                                ini_write_string("joystick_modern_bindings","joy_x",string(o.joy_x_mod))
                                ini_write_string("joystick_modern_bindings","joy_y",string(o.joy_y_mod))
                                ini_write_string("joystick_modern_bindings","joy_a",string(o.joy_a_mod))
                                ini_write_string("joystick_modern_bindings","joy_b",string(o.joy_b_mod))
                                ini_write_string("joystick_modern_bindings","joy_c",string(o.joy_c_mod))
                                ini_write_string("joystick_modern_bindings","joy_d",string(o.joy_d_mod))
                                ini_write_string("joystick_modern_bindings","joy_start",string(o.joy_start_mod))
                                //Analog Stick Hotkeys
                                ini_write_string("joystick_modern_hotkeys","left_stick_left",string(o.left_stick_left))
                                ini_write_string("joystick_modern_hotkeys","left_stick_right",string(o.left_stick_right))
                                ini_write_string("joystick_modern_hotkeys","left_stick_up",string(o.left_stick_up))
                                ini_write_string("joystick_modern_hotkeys","left_stick_down",string(o.left_stick_down))
                                ini_write_string("joystick_modern_hotkeys","right_stick_left",string(o.right_stick_left))
                                ini_write_string("joystick_modern_hotkeys","right_stick_right",string(o.right_stick_right))
                                ini_write_string("joystick_modern_hotkeys","right_stick_up",string(o.right_stick_up))
                                ini_write_string("joystick_modern_hotkeys","right_stick_down",string(o.right_stick_down))
                                //Keyboard Bindings (Player Mode)
                                ini_write_string("keyboard_bindings","key_left",string(o.key_left))
                                ini_write_string("keyboard_bindings","key_right",string(o.key_right))
                                ini_write_string("keyboard_bindings","key_up",string(o.key_up))
                                ini_write_string("keyboard_bindings","key_down",string(o.key_down))
                                ini_write_string("keyboard_bindings","key_a",string(o.key_a))
                                ini_write_string("keyboard_bindings","key_b",string(o.key_b))
                                ini_write_string("keyboard_bindings","key_c",string(o.key_c))
                                ini_write_string("keyboard_bindings","key_d",string(o.key_d))
                                ini_write_string("keyboard_bindings","key_start",string(o.key_start))
                                //Mouse Bindings (Player Mode)
                                ini_write_string("mouse_bindings","mouse_left",string(o.mouse_left))
                                ini_write_string("mouse_bindings","mouse_right",string(o.mouse_right))
                                ini_write_string("mouse_bindings","mouse_middle",string(o.mouse_middle))
                                ini_write_string("mouse_bindings","mouse_scroll_up",string(o.mouse_scroll_up))
                                ini_write_string("mouse_bindings","mouse_scroll_down",string(o.mouse_scroll_down))
                                ini_write_string("mouse_bindings","mouse_deadzone_up",string(o.mouse_deadzone_up))
                                ini_write_string("mouse_bindings","mouse_deadzone_down",string(o.mouse_deadzone_down))
                                ini_write_string("mouse_bindings","mouse_deadzone_left",string(o.mouse_deadzone_left))
                                ini_write_string("mouse_bindings","mouse_deadzone_right",string(o.mouse_deadzone_right))
                                //Close INI Configuration File
                                ini_close_ns();
                                saving_prompt = 120
                            }
                        //Set cursor to Okay if we have pressed the B button, and the cursor is not already there
                        if o.use_b = 1 and title_scroll != 10 {audio_play_sound(pause_select,50,false); title_scroll = 10; title_item_shake_timer = 8; title_item_shake_cur = 12;}
                    }
                //Undo input polling if the player has pressed the ESC key
                if keyboard_check(vk_escape) and title_joy_poll != 0
                    {
                        //Return background elements to normal
                        title_bg_alpha_0 = 0.9
                        title_bg_alpha_1 = 0.9
                        title_bg_alpha_2 = 0.9
                        title_bg_alpha_3 = 0.9
                        title_bg_alpha_4 = 0.9
                        title_bg_alpha_5 = 0.9
                        title_bg_alpha_6 = 0.9
                        title_bg_alpha_7 = 0.9
                        title_bg_alpha_8 = 0.9
                        //Play Sound
                        audio_play_sound(pause_jingle,50,false)
                        //Reset poll timer
                        title_joy_polltimer = 8
                        //Reset poll button assignment
                        title_joy_poll_button = 0
                        //Enforce input cooldown
                        title_joy_cool_down = 8
                        //Reset input polling stage
                        title_joy_poll = 0
                    }
                //If we are at the input polling stage, listen for inputs
                if title_joy_poll = 1
                    {
                        //Decrement poll timer
                        if title_joy_polltimer &gt; -8 title_joy_polltimer -= 1;
                        //Allow input polling once eight frames have passed
                        if title_joy_polltimer &lt; -7
                            {
                                //Reset input polling stage
                                if keyboard_check(vk_escape) = 1
                                    {
                                        title_joy_poll = 0
                                        //Return background elements to normal
                                        title_bg_alpha_0 = 0.9
                                        title_bg_alpha_1 = 0.9
                                        title_bg_alpha_2 = 0.9
                                        title_bg_alpha_3 = 0.9
                                        title_bg_alpha_4 = 0.9
                                        title_bg_alpha_5 = 0.9
                                        title_bg_alpha_6 = 0.9
                                        title_bg_alpha_7 = 0.9
                                        title_bg_alpha_8 = 0.9
                                    }
                                switch(title_type)
                                    {
                                        //Listen for key inputs
                                        case 0:
                                            {
                                                //Do not allow the escape key to be bound
                                                if  not keyboard_check(vk_escape) = 1
                                                //Do not allow the function keys to be bound
                                                and not keyboard_check(vk_f1)  = 1
                                                and not keyboard_check(vk_f2)  = 1
                                                and not keyboard_check(vk_f3)  = 1
                                                and not keyboard_check(vk_f4)  = 1
                                                and not keyboard_check(vk_f5)  = 1
                                                and not keyboard_check(vk_f6)  = 1
                                                and not keyboard_check(vk_f7)  = 1
                                                and not keyboard_check(vk_f8)  = 1
                                                and not keyboard_check(vk_f9)  = 1
                                                and not keyboard_check(vk_f10) = 1
                                                and not keyboard_check(vk_f11) = 1
                                                and not keyboard_check(vk_f12) = 1
                                                //Do not allow the windows keys to be bound
                                                and not keyboard_check(91)     = 1
                                                and not keyboard_check(92)     = 1
                                                    {
                                                        if keyboard_check(vk_anykey) = 1
                                                            {
                                                                title_joy_poll_key = keyboard_key;
                                                                title_joy_poll = 3;
                                                                title_joy_polltimer = 8;
                                                            }
                                                    }
                                                break;
                                            }
                                        //Listen for button inputs
                                        case 1:
                                            {
                                                if gamepad_button_check(o.joy_modern_id,gp_face1)      {title_joy_poll_button = 32769; title_joy_poll = 2; title_joy_polltimer = 8;}
                                                if gamepad_button_check(o.joy_modern_id,gp_face2)      {title_joy_poll_button = 32770; title_joy_poll = 2; title_joy_polltimer = 8;}
                                                if gamepad_button_check(o.joy_modern_id,gp_face3)      {title_joy_poll_button = 32771; title_joy_poll = 2; title_joy_polltimer = 8;}
                                                if gamepad_button_check(o.joy_modern_id,gp_face4)      {title_joy_poll_button = 32772; title_joy_poll = 2; title_joy_polltimer = 8;}
                                                if gamepad_button_check(o.joy_modern_id,gp_shoulderl)  {title_joy_poll_button = 32773; title_joy_poll = 2; title_joy_polltimer = 8;}
                                                if gamepad_button_check(o.joy_modern_id,gp_shoulderr)  {title_joy_poll_button = 32774; title_joy_poll = 2; title_joy_polltimer = 8;}
                                                if gamepad_button_check(o.joy_modern_id,gp_shoulderlb) {title_joy_poll_button = 32775; title_joy_poll = 2; title_joy_polltimer = 8;}
                                                if gamepad_button_check(o.joy_modern_id,gp_shoulderrb) {title_joy_poll_button = 32776; title_joy_poll = 2; title_joy_polltimer = 8;}
                                                if gamepad_button_check(o.joy_modern_id,gp_select)     {title_joy_poll_button = 32777; title_joy_poll = 2; title_joy_polltimer = 8;}
                                                if gamepad_button_check(o.joy_modern_id,gp_start)      {title_joy_poll_button = 32778; title_joy_poll = 2; title_joy_polltimer = 8;}
                                                if gamepad_button_check(o.joy_modern_id,gp_stickl)     {title_joy_poll_button = 32779; title_joy_poll = 2; title_joy_polltimer = 8;}
                                                if gamepad_button_check(o.joy_modern_id,gp_stickr)     {title_joy_poll_button = 32780; title_joy_poll = 2; title_joy_polltimer = 8;}
                                                if gamepad_button_check(o.joy_modern_id,gp_padu)       {title_joy_poll_button = 32781; title_joy_poll = 2; title_joy_polltimer = 8;}
                                                if gamepad_button_check(o.joy_modern_id,gp_padd)       {title_joy_poll_button = 32782; title_joy_poll = 2; title_joy_polltimer = 8;}
                                                if gamepad_button_check(o.joy_modern_id,gp_padl)       {title_joy_poll_button = 32783; title_joy_poll = 2; title_joy_polltimer = 8;}
                                                if gamepad_button_check(o.joy_modern_id,gp_padr)       {title_joy_poll_button = 32784; title_joy_poll = 2; title_joy_polltimer = 8;}
                                                //Check gamepad axises
                                                if gamepad_axis_value(o.joy_modern_id,gp_axislh) &lt; -o.deadzone_mod {title_joy_poll_hotkey = "Joy L - Left"; title_joy_poll_button = 0; title_joy_poll = 2;}
                                                if gamepad_axis_value(o.joy_modern_id,gp_axislh) &gt;  o.deadzone_mod {title_joy_poll_hotkey = "Joy L - Right"; title_joy_poll_button = 0; title_joy_poll = 2;}
                                                if gamepad_axis_value(o.joy_modern_id,gp_axislv) &lt; -o.deadzone_mod {title_joy_poll_hotkey = "Joy L - Up"; title_joy_poll_button = 0; title_joy_poll = 2;}
                                                if gamepad_axis_value(o.joy_modern_id,gp_axislv) &gt;  o.deadzone_mod {title_joy_poll_hotkey = "Joy L - Down"; title_joy_poll_button = 0; title_joy_poll = 2;}
                                                if gamepad_axis_value(o.joy_modern_id,gp_axisrh) &lt; -o.deadzone_mod {title_joy_poll_hotkey = "Joy R - Left"; title_joy_poll_button = 0; title_joy_poll = 2;}
                                                if gamepad_axis_value(o.joy_modern_id,gp_axisrh) &gt;  o.deadzone_mod {title_joy_poll_hotkey = "Joy R - Right"; title_joy_poll_button = 0; title_joy_poll = 2;}
                                                if gamepad_axis_value(o.joy_modern_id,gp_axisrv) &lt; -o.deadzone_mod {title_joy_poll_hotkey = "Joy R - Up"; title_joy_poll_button = 0; title_joy_poll = 2;}
                                                if gamepad_axis_value(o.joy_modern_id,gp_axisrv) &gt;  o.deadzone_mod {title_joy_poll_hotkey = "Joy R - Down"; title_joy_poll_button = 0; title_joy_poll = 2;}
                                                break;
                                            }
                                        case 2:
                                            {
                                                if title_scroll &gt; 4
                                                    {
                                                        if mouse_check_button(mb_left)   {title_joy_poll_mouse = 0; title_joy_poll = 4; title_joy_polltimer = 8;}
                                                        if mouse_check_button(mb_right)  {title_joy_poll_mouse = 2; title_joy_poll = 4; title_joy_polltimer = 8;}
                                                        if mouse_check_button(mb_middle) {title_joy_poll_mouse = 3; title_joy_poll = 4; title_joy_polltimer = 8;}
                                                        if mouse_wheel_up()              {title_joy_poll_mouse = 4; title_joy_poll = 4; title_joy_polltimer = 8;}
                                                        if mouse_wheel_down()            {title_joy_poll_mouse = 5; title_joy_poll = 4; title_joy_polltimer = 8;}
                                                    }
                                                if (menu_input[0,3] = 1 or menu_input[0,1] = 1
                                                or mouse_wheel_up() or mouse_wheel_down()
                                                or mouse_check_button(mb_left)
                                                or mouse_check_button(mb_right))
                                                and title_scroll &lt;= 4
                                                    {
                                                        title_joy_poll = 5;
                                                        title_joy_polltimer = 8;
                                                    }
                                                break;
                                            }
                                    }
                            }
                    }
                //If we have registered an input during the polling stage, save changes and return background elements to normal
                //(Button Inputs Only)
                if title_joy_poll = 2
                    {
                        //Check for conflicting button mappings
                        switch(title_scroll)
                            {
                                //Up
                                case 1:
                                    {
                                        if title_joy_poll_button = o.joy_down_mod   {o.joy_down_mod = o.joy_up_mod; o.joy_down_mod_s = scr_translate_alt_codes_gamepad(o.joy_up_mod)}
                                        if title_joy_poll_button = o.joy_left_mod   {o.joy_left_mod = o.joy_up_mod; o.joy_left_mod_s = scr_translate_alt_codes_gamepad(o.joy_up_mod)}
                                        if title_joy_poll_button = o.joy_right_mod  {o.joy_right_mod = o.joy_up_mod; o.joy_right_mod_s = scr_translate_alt_codes_gamepad(o.joy_up_mod)}
                                        if title_joy_poll_button = o.joy_a_mod      {o.joy_a_mod = o.joy_up_mod; o.joy_a_mod_s = scr_translate_alt_codes_gamepad(o.joy_up_mod)}
                                        if title_joy_poll_button = o.joy_b_mod      {o.joy_b_mod = o.joy_up_mod; o.joy_b_mod_s = scr_translate_alt_codes_gamepad(o.joy_up_mod)}
                                        if title_joy_poll_button = o.joy_c_mod      {o.joy_c_mod = o.joy_up_mod; o.joy_c_mod_s = scr_translate_alt_codes_gamepad(o.joy_up_mod)}
                                        if title_joy_poll_button = o.joy_d_mod      {o.joy_d_mod = o.joy_up_mod; o.joy_d_mod_s = scr_translate_alt_codes_gamepad(o.joy_up_mod)}
                                        if title_joy_poll_button = o.joy_start_mod  {o.joy_start_mod = o.joy_up_mod; o.joy_start_mod_s = scr_translate_alt_codes_gamepad(o.joy_up_mod)}
                                        break;
                                    }
                                //Down
                                case 2:
                                    {
                                        if title_joy_poll_button = o.joy_up_mod     {o.joy_up_mod = o.joy_down_mod; o.joy_up_mod_s = scr_translate_alt_codes_gamepad(o.joy_down_mod)}
                                        if title_joy_poll_button = o.joy_left_mod   {o.joy_left_mod = o.joy_down_mod; o.joy_left_mod_s = scr_translate_alt_codes_gamepad(o.joy_down_mod)}
                                        if title_joy_poll_button = o.joy_right_mod  {o.joy_right_mod = o.joy_down_mod; o.joy_right_mod_s = scr_translate_alt_codes_gamepad(o.joy_down_mod)}
                                        if title_joy_poll_button = o.joy_a_mod      {o.joy_a_mod = o.joy_down_mod; o.joy_a_mod_s = scr_translate_alt_codes_gamepad(o.joy_down_mod)}
                                        if title_joy_poll_button = o.joy_b_mod      {o.joy_b_mod = o.joy_down_mod; o.joy_b_mod_s = scr_translate_alt_codes_gamepad(o.joy_down_mod)}
                                        if title_joy_poll_button = o.joy_c_mod      {o.joy_c_mod = o.joy_down_mod; o.joy_c_mod_s = scr_translate_alt_codes_gamepad(o.joy_down_mod)}
                                        if title_joy_poll_button = o.joy_d_mod      {o.joy_d_mod = o.joy_down_mod; o.joy_d_mod_s = scr_translate_alt_codes_gamepad(o.joy_down_mod)}
                                        if title_joy_poll_button = o.joy_start_mod  {o.joy_start_mod = o.joy_up_mod; o.joy_start_mod_s = scr_translate_alt_codes_gamepad(o.joy_down_mod)}
                                        break;
                                    }
                                //Left
                                case 3:
                                    {
                                        if title_joy_poll_button = o.joy_down_mod   {o.joy_down_mod = o.joy_left_mod; o.joy_down_mod_s = scr_translate_alt_codes_gamepad(o.joy_left_mod)}
                                        if title_joy_poll_button = o.joy_up_mod     {o.joy_up_mod = o.joy_left_mod; o.joy_up_mod_s = scr_translate_alt_codes_gamepad(o.joy_left_mod)}
                                        if title_joy_poll_button = o.joy_right_mod  {o.joy_right_mod = o.joy_left_mod; o.joy_right_mod_s = scr_translate_alt_codes_gamepad(o.joy_left_mod)}
                                        if title_joy_poll_button = o.joy_a_mod      {o.joy_a_mod = o.joy_left_mod; o.joy_a_mod_s = scr_translate_alt_codes_gamepad(o.joy_left_mod)}
                                        if title_joy_poll_button = o.joy_b_mod      {o.joy_b_mod = o.joy_left_mod; o.joy_b_mod_s = scr_translate_alt_codes_gamepad(o.joy_left_mod)}
                                        if title_joy_poll_button = o.joy_c_mod      {o.joy_c_mod = o.joy_left_mod; o.joy_c_mod_s = scr_translate_alt_codes_gamepad(o.joy_left_mod)}
                                        if title_joy_poll_button = o.joy_d_mod      {o.joy_d_mod = o.joy_left_mod; o.joy_d_mod_s = scr_translate_alt_codes_gamepad(o.joy_left_mod)}
                                        if title_joy_poll_button = o.joy_start_mod  {o.joy_start_mod = o.joy_left_mod; o.joy_start_mod_s = scr_translate_alt_codes_gamepad(o.joy_left_mod)}
                                        break;
                                    }
                                //Right
                                case 4:
                                    {
                                        if title_joy_poll_button = o.joy_down_mod   {o.joy_down_mod = o.joy_right_mod; o.joy_down_mod_s = scr_translate_alt_codes_gamepad(o.joy_right_mod)}
                                        if title_joy_poll_button = o.joy_left_mod   {o.joy_left_mod = o.joy_right_mod; o.joy_left_mod_s = scr_translate_alt_codes_gamepad(o.joy_right_mod)}
                                        if title_joy_poll_button = o.joy_up_mod     {o.joy_up_mod = o.joy_right_mod; o.joy_up_mod_s = scr_translate_alt_codes_gamepad(o.joy_right_mod)}
                                        if title_joy_poll_button = o.joy_a_mod      {o.joy_a_mod = o.joy_right_mod; o.joy_a_mod_s = scr_translate_alt_codes_gamepad(o.joy_right_mod)}
                                        if title_joy_poll_button = o.joy_b_mod      {o.joy_b_mod = o.joy_right_mod; o.joy_b_mod_s = scr_translate_alt_codes_gamepad(o.joy_right_mod)}
                                        if title_joy_poll_button = o.joy_c_mod      {o.joy_c_mod = o.joy_right_mod; o.joy_c_mod_s = scr_translate_alt_codes_gamepad(o.joy_right_mod)}
                                        if title_joy_poll_button = o.joy_d_mod      {o.joy_d_mod = o.joy_right_mod; o.joy_d_mod_s = scr_translate_alt_codes_gamepad(o.joy_right_mod)}
                                        if title_joy_poll_button = o.joy_start_mod  {o.joy_start_mod = o.joy_right_mod; o.joy_start_mod_s = scr_translate_alt_codes_gamepad(o.joy_right_mod)}
                                        break;
                                    }
                                //A
                                case 5:
                                    {
                                        if title_joy_poll_button = o.joy_down_mod   {o.joy_down_mod = o.joy_a_mod; o.joy_down_mod_s = scr_translate_alt_codes_gamepad(o.joy_a_mod)}
                                        if title_joy_poll_button = o.joy_left_mod   {o.joy_left_mod = o.joy_a_mod; o.joy_left_mod_s = scr_translate_alt_codes_gamepad(o.joy_a_mod)}
                                        if title_joy_poll_button = o.joy_right_mod  {o.joy_right_mod = o.joy_a_mod; o.joy_right_mod_s = scr_translate_alt_codes_gamepad(o.joy_a_mod)}
                                        if title_joy_poll_button = o.joy_up_mod     {o.joy_up_mod = o.joy_a_mod; o.joy_up_mod_s = scr_translate_alt_codes_gamepad(o.joy_a_mod)}
                                        if title_joy_poll_button = o.joy_b_mod      {o.joy_b_mod = o.joy_a_mod; o.joy_b_mod_s = scr_translate_alt_codes_gamepad(o.joy_a_mod)}
                                        if title_joy_poll_button = o.joy_c_mod      {o.joy_c_mod = o.joy_a_mod; o.joy_c_mod_s = scr_translate_alt_codes_gamepad(o.joy_a_mod)}
                                        if title_joy_poll_button = o.joy_d_mod      {o.joy_d_mod = o.joy_a_mod; o.joy_d_mod_s = scr_translate_alt_codes_gamepad(o.joy_a_mod)}
                                        if title_joy_poll_button = o.joy_start_mod  {o.joy_start_mod = o.joy_up_mod; o.joy_start_mod_s = scr_translate_alt_codes_gamepad(o.joy_a_mod)}
                                        break;
                                    }
                                //B
                                case 6:
                                    {
                                        if title_joy_poll_button = o.joy_down_mod   {o.joy_down_mod = o.joy_b_mod; o.joy_down_mod_s = scr_translate_alt_codes_gamepad(o.joy_b_mod)}
                                        if title_joy_poll_button = o.joy_left_mod   {o.joy_left_mod = o.joy_b_mod; o.joy_left_mod_s = scr_translate_alt_codes_gamepad(o.joy_b_mod)}
                                        if title_joy_poll_button = o.joy_right_mod  {o.joy_right_mod = o.joy_b_mod; o.joy_right_mod_s = scr_translate_alt_codes_gamepad(o.joy_b_mod)}
                                        if title_joy_poll_button = o.joy_up_mod      {o.joy_up_mod = o.joy_b_mod; o.joy_up_mod_s = scr_translate_alt_codes_gamepad(o.joy_b_mod)}
                                        if title_joy_poll_button = o.joy_a_mod      {o.joy_a_mod = o.joy_b_mod; o.joy_a_mod_s = scr_translate_alt_codes_gamepad(o.joy_b_mod)}
                                        if title_joy_poll_button = o.joy_c_mod      {o.joy_c_mod = o.joy_b_mod; o.joy_c_mod_s = scr_translate_alt_codes_gamepad(o.joy_b_mod)}
                                        if title_joy_poll_button = o.joy_d_mod      {o.joy_d_mod = o.joy_b_mod; o.joy_d_mod_s = scr_translate_alt_codes_gamepad(o.joy_b_mod)}
                                        if title_joy_poll_button = o.joy_start_mod  {o.joy_start_mod = o.joy_b_mod; o.joy_start_mod_s = scr_translate_alt_codes_gamepad(o.joy_b_mod)}
                                        break;
                                    }
                                //C
                                case 7:
                                    {
                                        if title_joy_poll_button = o.joy_down_mod   {o.joy_down_mod = o.joy_c_mod; o.joy_down_mod_s = scr_translate_alt_codes_gamepad(o.joy_c_mod)}
                                        if title_joy_poll_button = o.joy_left_mod   {o.joy_left_mod = o.joy_c_mod; o.joy_left_mod_s = scr_translate_alt_codes_gamepad(o.joy_c_mod)}
                                        if title_joy_poll_button = o.joy_right_mod  {o.joy_right_mod = o.joy_c_mod; o.joy_right_mod_s = scr_translate_alt_codes_gamepad(o.joy_c_mod)}
                                        if title_joy_poll_button = o.joy_up_mod      {o.joy_up_mod = o.joy_c_mod; o.joy_up_mod_s = scr_translate_alt_codes_gamepad(o.joy_c_mod)}
                                        if title_joy_poll_button = o.joy_a_mod      {o.joy_a_mod = o.joy_c_mod; o.joy_a_mod_s = scr_translate_alt_codes_gamepad(o.joy_c_mod)}
                                        if title_joy_poll_button = o.joy_b_mod      {o.joy_b_mod = o.joy_c_mod; o.joy_b_mod_s = scr_translate_alt_codes_gamepad(o.joy_c_mod)}
                                        if title_joy_poll_button = o.joy_d_mod      {o.joy_d_mod = o.joy_c_mod; o.joy_d_mod_s = scr_translate_alt_codes_gamepad(o.joy_c_mod)}
                                        if title_joy_poll_button = o.joy_start_mod  {o.joy_start_mod = o.joy_c_mod; o.joy_start_mod_s = scr_translate_alt_codes_gamepad(o.joy_c_mod)}
                                        break;
                                    }
                                //D
                                case 8:
                                    {
                                        if title_joy_poll_button = o.joy_down_mod   {o.joy_down_mod = o.joy_d_mod; o.joy_down_mod_s = scr_translate_alt_codes_gamepad(o.joy_d_mod)}
                                        if title_joy_poll_button = o.joy_left_mod   {o.joy_left_mod = o.joy_d_mod; o.joy_left_mod_s = scr_translate_alt_codes_gamepad(o.joy_d_mod)}
                                        if title_joy_poll_button = o.joy_right_mod  {o.joy_right_mod = o.joy_d_mod; o.joy_right_mod_s = scr_translate_alt_codes_gamepad(o.joy_d_mod)}
                                        if title_joy_poll_button = o.joy_up_mod      {o.joy_up_mod = o.joy_d_mod; o.joy_up_mod_s = scr_translate_alt_codes_gamepad(o.joy_d_mod)}
                                        if title_joy_poll_button = o.joy_a_mod      {o.joy_a_mod = o.joy_d_mod; o.joy_a_mod_s = scr_translate_alt_codes_gamepad(o.joy_d_mod)}
                                        if title_joy_poll_button = o.joy_b_mod      {o.joy_b_mod = o.joy_d_mod; o.joy_b_mod_s = scr_translate_alt_codes_gamepad(o.joy_d_mod)}
                                        if title_joy_poll_button = o.joy_c_mod      {o.joy_c_mod = o.joy_d_mod; o.joy_c_mod_s = scr_translate_alt_codes_gamepad(o.joy_d_mod)}
                                        if title_joy_poll_button = o.joy_start_mod  {o.joy_start_mod = o.joy_d_mod; o.joy_start_mod_s = scr_translate_alt_codes_gamepad(o.joy_d_mod)}
                                        break;
                                    }
                                //Start
                                case 9:
                                    {
                                        if title_joy_poll_button = o.joy_down_mod   {o.joy_down_mod = o.joy_start_mod; o.joy_down_mod_s = scr_translate_alt_codes_gamepad(o.joy_start_mod)}
                                        if title_joy_poll_button = o.joy_left_mod   {o.joy_left_mod = o.joy_start_mod; o.joy_left_mod_s = scr_translate_alt_codes_gamepad(o.joy_start_mod)}
                                        if title_joy_poll_button = o.joy_right_mod  {o.joy_right_mod = o.joy_start_mod; o.joy_right_mod_s = scr_translate_alt_codes_gamepad(o.joy_start_mod)}
                                        if title_joy_poll_button = o.joy_up_mod      {o.joy_up_mod = o.joy_start_mod; o.joy_up_mod_s = scr_translate_alt_codes_gamepad(o.joy_start_mod)}
                                        if title_joy_poll_button = o.joy_a_mod      {o.joy_a_mod = o.joy_start_mod; o.joy_a_mod_s = scr_translate_alt_codes_gamepad(o.joy_start_mod)}
                                        if title_joy_poll_button = o.joy_b_mod      {o.joy_b_mod = o.joy_start_mod; o.joy_b_mod_s = scr_translate_alt_codes_gamepad(o.joy_start_mod)}
                                        if title_joy_poll_button = o.joy_c_mod      {o.joy_c_mod = o.joy_start_mod; o.joy_c_mod_s = scr_translate_alt_codes_gamepad(o.joy_start_mod)}
                                        if title_joy_poll_button = o.joy_d_mod      {o.joy_d_mod = o.joy_start_mod; o.joy_d_mod_s = scr_translate_alt_codes_gamepad(o.joy_start_mod)}
                                        break;
                                    }
                            }
                        //Apply button assignments
                        if title_joy_poll_button != 0
                            {
                                switch(title_scroll)
                                    {
                                        case 1: {o.joy_up_mod    = title_joy_poll_button; o.joy_up_mod_s    = scr_translate_alt_codes_gamepad(o.joy_up_mod);    break;}
                                        case 2: {o.joy_down_mod  = title_joy_poll_button; o.joy_down_mod_s  = scr_translate_alt_codes_gamepad(o.joy_down_mod);  break;}
                                        case 3: {o.joy_left_mod  = title_joy_poll_button; o.joy_left_mod_s  = scr_translate_alt_codes_gamepad(o.joy_left_mod);  break;}
                                        case 4: {o.joy_right_mod = title_joy_poll_button; o.joy_right_mod_s = scr_translate_alt_codes_gamepad(o.joy_right_mod); break;}
                                        case 5: {o.joy_a_mod     = title_joy_poll_button; o.joy_a_mod_s     = scr_translate_alt_codes_gamepad(o.joy_a_mod);     break;}
                                        case 6: {o.joy_b_mod     = title_joy_poll_button; o.joy_b_mod_s     = scr_translate_alt_codes_gamepad(o.joy_b_mod);     break;}
                                        case 7: {o.joy_c_mod     = title_joy_poll_button; o.joy_c_mod_s     = scr_translate_alt_codes_gamepad(o.joy_c_mod);     break;}
                                        case 8: {o.joy_d_mod     = title_joy_poll_button; o.joy_d_mod_s     = scr_translate_alt_codes_gamepad(o.joy_d_mod);     break;}
                                        case 9: {o.joy_start_mod = title_joy_poll_button; o.joy_start_mod_s = scr_translate_alt_codes_gamepad(o.joy_start_mod); break;}
                                    }
                            }
                        if title_joy_poll_button = 0
                            {
                                if title_joy_poll_hotkey = "Joy L - Left"
                                    {
                                        scr_clear_hotkey(scr_edit_hotkey(title_scroll))
                                        o.left_stick_left = scr_edit_hotkey(title_scroll);
                                    }
                                if title_joy_poll_hotkey = "Joy L - Right"
                                    {
                                        scr_clear_hotkey(scr_edit_hotkey(title_scroll))
                                        o.left_stick_right = scr_edit_hotkey(title_scroll);
                                    }
                                if title_joy_poll_hotkey = "Joy L - Up"
                                    {
                                        scr_clear_hotkey(scr_edit_hotkey(title_scroll))
                                        o.left_stick_up = scr_edit_hotkey(title_scroll);
                                    }
                                if title_joy_poll_hotkey = "Joy L - Down"
                                    {
                                        scr_clear_hotkey(scr_edit_hotkey(title_scroll))
                                        o.left_stick_down = scr_edit_hotkey(title_scroll);
                                    }
                                if title_joy_poll_hotkey = "Joy R - Left"
                                    {
                                        scr_clear_hotkey(scr_edit_hotkey(title_scroll))
                                        o.right_stick_left = scr_edit_hotkey(title_scroll);
                                    }
                                if title_joy_poll_hotkey = "Joy R - Right"
                                    {
                                        scr_clear_hotkey(scr_edit_hotkey(title_scroll))
                                        o.right_stick_right = scr_edit_hotkey(title_scroll);
                                    }
                                if title_joy_poll_hotkey = "Joy R - Up"
                                    {
                                        scr_clear_hotkey(scr_edit_hotkey(title_scroll))
                                        o.right_stick_up = scr_edit_hotkey(title_scroll);
                                    }
                                if title_joy_poll_hotkey = "Joy R - Down"
                                    {
                                        scr_clear_hotkey(scr_edit_hotkey(title_scroll))
                                        o.right_stick_down = scr_edit_hotkey(title_scroll);
                                    }
                            }
                        scr_ui_reset_background_elements();
                    }
                //If we have registered an input during the polling stage, save changes and return background elements to normal
                //(Keyboard Inputs Only)
                if title_joy_poll = 3
                    {
                        //Check for conflicting button mappings
                        switch(title_scroll)
                            {
                                //Up
                                case 1:
                                    {
                                        if title_joy_poll_key = o.key_down   {o.key_down = o.key_up; o.key_down_s = scr_translate_alt_codes_keyboard(o.key_up)}
                                        if title_joy_poll_key = o.key_left   {o.key_left = o.key_up; o.key_left_s = scr_translate_alt_codes_keyboard(o.key_up)}
                                        if title_joy_poll_key = o.key_right  {o.key_right = o.key_up; o.key_right_s = scr_translate_alt_codes_keyboard(o.key_up)}
                                        if title_joy_poll_key = o.key_a      {o.key_a = o.key_up; o.key_a_s = scr_translate_alt_codes_keyboard(o.key_up)}
                                        if title_joy_poll_key = o.key_b      {o.key_b = o.key_up; o.key_b_s = scr_translate_alt_codes_keyboard(o.key_up)}
                                        if title_joy_poll_key = o.key_c      {o.key_c = o.key_up; o.key_c_s = scr_translate_alt_codes_keyboard(o.key_up)}
                                        if title_joy_poll_key = o.key_d      {o.key_d = o.key_up; o.key_d_s = scr_translate_alt_codes_keyboard(o.key_up)}
                                        if title_joy_poll_key = o.key_start  {o.key_start = o.key_up; o.key_start_s = scr_translate_alt_codes_keyboard(o.key_up)}
                                        break;
                                    }
                                //Down
                                case 2:
                                    {
                                        if title_joy_poll_key = o.key_up     {o.key_up = o.key_down; o.key_up_s = scr_translate_alt_codes_keyboard(o.key_down)}
                                        if title_joy_poll_key = o.key_left   {o.key_left = o.key_down; o.key_left_s = scr_translate_alt_codes_keyboard(o.key_down)}
                                        if title_joy_poll_key = o.key_right  {o.key_right = o.key_down; o.key_right_s = scr_translate_alt_codes_keyboard(o.key_down)}
                                        if title_joy_poll_key = o.key_a      {o.key_a = o.key_down; o.key_a_s = scr_translate_alt_codes_keyboard(o.key_down)}
                                        if title_joy_poll_key = o.key_b      {o.key_b = o.key_down; o.key_b_s = scr_translate_alt_codes_keyboard(o.key_down)}
                                        if title_joy_poll_key = o.key_c      {o.key_c = o.key_down; o.key_c_s = scr_translate_alt_codes_keyboard(o.key_down)}
                                        if title_joy_poll_key = o.key_d      {o.key_d = o.key_down; o.key_d_s = scr_translate_alt_codes_keyboard(o.key_down)}
                                        if title_joy_poll_key = o.key_start  {o.key_start = o.key_up; o.key_start_s = scr_translate_alt_codes_keyboard(o.key_down)}
                                        break;
                                    }
                                //Left
                                case 3:
                                    {
                                        if title_joy_poll_key = o.key_down   {o.key_down = o.key_left; o.key_down_s = scr_translate_alt_codes_keyboard(o.key_left)}
                                        if title_joy_poll_key = o.key_up     {o.key_up = o.key_left; o.key_up_s = scr_translate_alt_codes_keyboard(o.key_left)}
                                        if title_joy_poll_key = o.key_right  {o.key_right = o.key_left; o.key_right_s = scr_translate_alt_codes_keyboard(o.key_left)}
                                        if title_joy_poll_key = o.key_a      {o.key_a = o.key_left; o.key_a_s = scr_translate_alt_codes_keyboard(o.key_left)}
                                        if title_joy_poll_key = o.key_b      {o.key_b = o.key_left; o.key_b_s = scr_translate_alt_codes_keyboard(o.key_left)}
                                        if title_joy_poll_key = o.key_c      {o.key_c = o.key_left; o.key_c_s = scr_translate_alt_codes_keyboard(o.key_left)}
                                        if title_joy_poll_key = o.key_d      {o.key_d = o.key_left; o.key_d_s = scr_translate_alt_codes_keyboard(o.key_left)}
                                        if title_joy_poll_key = o.key_start  {o.key_start = o.key_left; o.key_start_s = scr_translate_alt_codes_keyboard(o.key_left)}
                                        break;
                                    }
                                //Right
                                case 4:
                                    {
                                        if title_joy_poll_key = o.key_down   {o.key_down = o.key_right; o.key_down_s = scr_translate_alt_codes_keyboard(o.key_right)}
                                        if title_joy_poll_key = o.key_left   {o.key_left = o.key_right; o.key_left_s = scr_translate_alt_codes_keyboard(o.key_right)}
                                        if title_joy_poll_key = o.key_up     {o.key_up = o.key_right; o.key_up_s = scr_translate_alt_codes_keyboard(o.key_right)}
                                        if title_joy_poll_key = o.key_a      {o.key_a = o.key_right; o.key_a_s = scr_translate_alt_codes_keyboard(o.key_right)}
                                        if title_joy_poll_key = o.key_b      {o.key_b = o.key_right; o.key_b_s = scr_translate_alt_codes_keyboard(o.key_right)}
                                        if title_joy_poll_key = o.key_c      {o.key_c = o.key_right; o.key_c_s = scr_translate_alt_codes_keyboard(o.key_right)}
                                        if title_joy_poll_key = o.key_d      {o.key_d = o.key_right; o.key_d_s = scr_translate_alt_codes_keyboard(o.key_right)}
                                        if title_joy_poll_key = o.key_start  {o.key_start = o.key_right; o.key_start_s = scr_translate_alt_codes_keyboard(o.key_right)}
                                        break;
                                    }
                                //A
                                case 5:
                                    {
                                        if title_joy_poll_key = o.key_down   {o.key_down = o.key_a; o.key_down_s = scr_translate_alt_codes_keyboard(o.key_a)}
                                        if title_joy_poll_key = o.key_left   {o.key_left = o.key_a; o.key_left_s = scr_translate_alt_codes_keyboard(o.key_a)}
                                        if title_joy_poll_key = o.key_right  {o.key_right = o.key_a; o.key_right_s = scr_translate_alt_codes_keyboard(o.key_a)}
                                        if title_joy_poll_key = o.key_up      {o.key_up = o.key_a; o.key_up_s = scr_translate_alt_codes_keyboard(o.key_a)}
                                        if title_joy_poll_key = o.key_b      {o.key_b = o.key_a; o.key_b_s = scr_translate_alt_codes_keyboard(o.key_a)}
                                        if title_joy_poll_key = o.key_c      {o.key_c = o.key_a; o.key_c_s = scr_translate_alt_codes_keyboard(o.key_a)}
                                        if title_joy_poll_key = o.key_d      {o.key_d = o.key_a; o.key_d_s = scr_translate_alt_codes_keyboard(o.key_a)}
                                        if title_joy_poll_key = o.key_start  {o.key_start = o.key_up; o.key_start_s = scr_translate_alt_codes_keyboard(o.key_a)}
                                        break;
                                    }
                                //B
                                case 6:
                                    {
                                        if title_joy_poll_key = o.key_down   {o.key_down = o.key_b; o.key_down_s = scr_translate_alt_codes_keyboard(o.key_b)}
                                        if title_joy_poll_key = o.key_left   {o.key_left = o.key_b; o.key_left_s = scr_translate_alt_codes_keyboard(o.key_b)}
                                        if title_joy_poll_key = o.key_right  {o.key_right = o.key_b; o.key_right_s = scr_translate_alt_codes_keyboard(o.key_b)}
                                        if title_joy_poll_key = o.key_up      {o.key_up = o.key_b; o.key_up_s = scr_translate_alt_codes_keyboard(o.key_b)}
                                        if title_joy_poll_key = o.key_a      {o.key_a = o.key_b; o.key_a_s = scr_translate_alt_codes_keyboard(o.key_b)}
                                        if title_joy_poll_key = o.key_c      {o.key_c = o.key_b; o.key_c_s = scr_translate_alt_codes_keyboard(o.key_b)}
                                        if title_joy_poll_key = o.key_d      {o.key_d = o.key_b; o.key_d_s = scr_translate_alt_codes_keyboard(o.key_b)}
                                        if title_joy_poll_key = o.key_start  {o.key_start = o.key_b; o.key_start_s = scr_translate_alt_codes_keyboard(o.key_b)}
                                        break;
                                    }
                                //C
                                case 7:
                                    {
                                        if title_joy_poll_key = o.key_down   {o.key_down = o.key_c; o.key_down_s = scr_translate_alt_codes_keyboard(o.key_c)}
                                        if title_joy_poll_key = o.key_left   {o.key_left = o.key_c; o.key_left_s = scr_translate_alt_codes_keyboard(o.key_c)}
                                        if title_joy_poll_key = o.key_right  {o.key_right = o.key_c; o.key_right_s = scr_translate_alt_codes_keyboard(o.key_c)}
                                        if title_joy_poll_key = o.key_up      {o.key_up = o.key_c; o.key_up_s = scr_translate_alt_codes_keyboard(o.key_c)}
                                        if title_joy_poll_key = o.key_a      {o.key_a = o.key_c; o.key_a_s = scr_translate_alt_codes_keyboard(o.key_c)}
                                        if title_joy_poll_key = o.key_b      {o.key_b = o.key_c; o.key_b_s = scr_translate_alt_codes_keyboard(o.key_c)}
                                        if title_joy_poll_key = o.key_d      {o.key_d = o.key_c; o.key_d_s = scr_translate_alt_codes_keyboard(o.key_c)}
                                        if title_joy_poll_key = o.key_start  {o.key_start = o.key_c; o.key_start_s = scr_translate_alt_codes_keyboard(o.key_c)}
                                        break;
                                    }
                                //D
                                case 8:
                                    {
                                        if title_joy_poll_key = o.key_down   {o.key_down = o.key_d; o.key_down_s = scr_translate_alt_codes_keyboard(o.key_d)}
                                        if title_joy_poll_key = o.key_left   {o.key_left = o.key_d; o.key_left_s = scr_translate_alt_codes_keyboard(o.key_d)}
                                        if title_joy_poll_key = o.key_right  {o.key_right = o.key_d; o.key_right_s = scr_translate_alt_codes_keyboard(o.key_d)}
                                        if title_joy_poll_key = o.key_up      {o.key_up = o.key_d; o.key_up_s = scr_translate_alt_codes_keyboard(o.key_d)}
                                        if title_joy_poll_key = o.key_a      {o.key_a = o.key_d; o.key_a_s = scr_translate_alt_codes_keyboard(o.key_d)}
                                        if title_joy_poll_key = o.key_b      {o.key_b = o.key_d; o.key_b_s = scr_translate_alt_codes_keyboard(o.key_d)}
                                        if title_joy_poll_key = o.key_c      {o.key_c = o.key_d; o.key_c_s = scr_translate_alt_codes_keyboard(o.key_d)}
                                        if title_joy_poll_key = o.key_start      {o.key_start = o.key_d; o.key_start_s = scr_translate_alt_codes_keyboard(o.key_d)}
                                        break;
                                    }                                    
                                //Start
                                case 9:
                                    {
                                        if title_joy_poll_key = o.key_down   {o.key_down = o.key_start; o.key_down_s = scr_translate_alt_codes_keyboard(o.key_start)}
                                        if title_joy_poll_key = o.key_left   {o.key_left = o.key_start; o.key_left_s = scr_translate_alt_codes_keyboard(o.key_start)}
                                        if title_joy_poll_key = o.key_right  {o.key_right = o.key_start; o.key_right_s = scr_translate_alt_codes_keyboard(o.key_start)}
                                        if title_joy_poll_key = o.key_up      {o.key_up = o.key_start; o.key_up_s = scr_translate_alt_codes_keyboard(o.key_start)}
                                        if title_joy_poll_key = o.key_a      {o.key_a = o.key_start; o.key_a_s = scr_translate_alt_codes_keyboard(o.key_start)}
                                        if title_joy_poll_key = o.key_b      {o.key_b = o.key_start; o.key_b_s = scr_translate_alt_codes_keyboard(o.key_start)}
                                        if title_joy_poll_key = o.key_c      {o.key_c = o.key_start; o.key_c_s = scr_translate_alt_codes_keyboard(o.key_start)}
                                        if title_joy_poll_key = o.key_d      {o.key_d = o.key_start; o.key_d_s = scr_translate_alt_codes_keyboard(o.key_start)}
                                        break;
                                    }
                            }
                        switch(title_scroll)
                            {
                                case 1: {o.key_up    = title_joy_poll_key; o.key_up_s    = scr_translate_alt_codes_keyboard(o.key_up);    break;}
                                case 2: {o.key_down  = title_joy_poll_key; o.key_down_s  = scr_translate_alt_codes_keyboard(o.key_down);  break;}
                                case 3: {o.key_left  = title_joy_poll_key; o.key_left_s  = scr_translate_alt_codes_keyboard(o.key_left);  break;}
                                case 4: {o.key_right = title_joy_poll_key; o.key_right_s = scr_translate_alt_codes_keyboard(o.key_right); break;}
                                case 5: {o.key_a     = title_joy_poll_key; o.key_a_s     = scr_translate_alt_codes_keyboard(o.key_a);     break;}
                                case 6: {o.key_b     = title_joy_poll_key; o.key_b_s     = scr_translate_alt_codes_keyboard(o.key_b);     break;}
                                case 7: {o.key_c     = title_joy_poll_key; o.key_c_s     = scr_translate_alt_codes_keyboard(o.key_c);     break;}
                                case 8: {o.key_d     = title_joy_poll_key; o.key_d_s     = scr_translate_alt_codes_keyboard(o.key_d);     break;}
                                case 9: {o.key_start = title_joy_poll_key; o.key_start_s = scr_translate_alt_codes_keyboard(o.key_start); break;}
                            }
                        scr_ui_reset_background_elements()
                    }
                //If we have registered an input during the polling stage, save changes and return background elements to normal
                //(Mouse Button Inputs Only)
                if title_joy_poll = 4
                    {
                        switch(title_scroll)
                            {
                                case 5: {o.mouse_left = title_joy_poll_mouse; scr_clear_mouse_buttons(); break;}
                                case 6: {o.mouse_right = title_joy_poll_mouse; scr_clear_mouse_buttons(); break;}
                                case 7: {o.mouse_middle = title_joy_poll_mouse; scr_clear_mouse_buttons(); break;}
                                case 8: {o.mouse_scroll_up = title_joy_poll_mouse; scr_clear_mouse_buttons(); break;}
                                case 9: {o.mouse_scroll_down = title_joy_poll_mouse; scr_clear_mouse_buttons(); break;}
                            }
                        scr_ui_reset_background_elements();
                    }
                //Mouse Deadzone adjustments
                if title_joy_poll = 5
                    {
                        //Decrement poll timer
                        if title_joy_polltimer &gt; -8 title_joy_polltimer -= 1;
                        if mouse_wheel_up() or menu_input[0,3] = 1
                            {
                                switch(title_scroll)
                                    {
                                        case 1: {o.mouse_deadzone_up += 1; if o.mouse_deadzone_up &gt; 50 o.mouse_deadzone_up = 50; break;}
                                        case 2: {o.mouse_deadzone_down += 1; if o.mouse_deadzone_down &gt; 50 o.mouse_deadzone_down = 50; break;}
                                        case 3: {o.mouse_deadzone_left += 1; if o.mouse_deadzone_left &gt; 50 o.mouse_deadzone_left = 50; break;}
                                        case 4: {o.mouse_deadzone_right += 1; if o.mouse_deadzone_right &gt; 50 o.mouse_deadzone_right = 50; break;}
                                    }
                            }
                        if mouse_wheel_down() or menu_input[0,1] = 1
                            {
                                switch(title_scroll)
                                    {
                                        case 1: {o.mouse_deadzone_up -= 1; if o.mouse_deadzone_up &lt; -50 o.mouse_deadzone_up = -50; break;}
                                        case 2: {o.mouse_deadzone_down -= 1; if o.mouse_deadzone_down &lt; -50 o.mouse_deadzone_down = -50; break;}
                                        case 3: {o.mouse_deadzone_left -= 1; if o.mouse_deadzone_left &lt; -50 o.mouse_deadzone_left = -50; break;}
                                        case 4: {o.mouse_deadzone_right -= 1; if o.mouse_deadzone_right &lt; -50 o.mouse_deadzone_right = -50; break;}
                                    }
                            }
                        //Allow input polling once eight frames have passed
                        if (mouse_check_button(mb_left) or mouse_check_button(mb_right))
                        or (o.use_a = 1 or o.use_c = 1 or o.use_start = 1)
                            {
                                if title_joy_polltimer &lt; -7
                                    scr_ui_reset_background_elements();
                            }
                    }
                //Enforce a cool down on inputs after assigning an input
                if title_joy_cool_down &gt; 0 title_joy_cool_down -= 1;
                //If the inputs cool down is not enforced, allow interactions with the menu
                if (title_joy_poll = 0 and title_joy_cool_down = 0) and (o.use_a = 1 or o.use_c = 1 or o.use_start = 1)
                    {
                        switch(title_scroll)
                            {
                                //Change input type
                                case 0:
                                    {
                                        audio_play_sound(pause_select,50,false);
                                        title_type+=1; if title_type &gt; 2 title_type=0;
                                        break;
                                    }
                                //Up
                                case 1:
                                    {
                                        //If this is the start of the input polling stage, lower opacity of other buttons
                                        if title_joy_poll = 0
                                            {
                                                title_bg_alpha_0 = 0.9
                                                title_bg_alpha_1 = 0.4
                                                title_bg_alpha_2 = 0.4
                                                title_bg_alpha_3 = 0.4
                                                title_bg_alpha_4 = 0.4
                                                title_bg_alpha_5 = 0.4
                                                title_bg_alpha_6 = 0.4
                                                title_bg_alpha_7 = 0.4
                                                title_bg_alpha_8 = 0.4
                                                //Iterate input polling stage
                                                title_joy_poll = 1
                                                //Set poll timer
                                                title_joy_polltimer = 8
                                            }
                                        break;
                                    }
                                //Down
                                case 2:
                                    {
                                        //If this is the start of the input polling stage, lower opacity of other buttons
                                        if title_joy_poll = 0
                                            {
                                                title_bg_alpha_0 = 0.4
                                                title_bg_alpha_1 = 0.9
                                                title_bg_alpha_2 = 0.4
                                                title_bg_alpha_3 = 0.4
                                                title_bg_alpha_4 = 0.4
                                                title_bg_alpha_5 = 0.4
                                                title_bg_alpha_6 = 0.4
                                                title_bg_alpha_7 = 0.4
                                                title_bg_alpha_8 = 0.4
                                                //Iterate input polling stage
                                                title_joy_poll = 1
                                                //Set poll timer
                                                title_joy_polltimer = 8
                                            }
                                        break;
                                    }
                                //Left
                                case 3:
                                    {
                                        //If this is the start of the input polling stage, lower opacity of other buttons
                                        if title_joy_poll = 0
                                            {
                                                title_bg_alpha_0 = 0.4
                                                title_bg_alpha_1 = 0.4
                                                title_bg_alpha_2 = 0.9
                                                title_bg_alpha_3 = 0.4
                                                title_bg_alpha_4 = 0.4
                                                title_bg_alpha_5 = 0.4
                                                title_bg_alpha_6 = 0.4
                                                title_bg_alpha_7 = 0.4
                                                title_bg_alpha_8 = 0.4
                                                //Iterate input polling stage
                                                title_joy_poll = 1
                                                //Set poll timer
                                                title_joy_polltimer = 8
                                            }
                                        break;
                                    }
                                //Right
                                case 4:
                                    {
                                        //If this is the start of the input polling stage, lower opacity of other buttons
                                        if title_joy_poll = 0
                                            {
                                                title_bg_alpha_0 = 0.4
                                                title_bg_alpha_1 = 0.4
                                                title_bg_alpha_2 = 0.4
                                                title_bg_alpha_3 = 0.9
                                                title_bg_alpha_4 = 0.4
                                                title_bg_alpha_5 = 0.4
                                                title_bg_alpha_6 = 0.4
                                                title_bg_alpha_7 = 0.4
                                                title_bg_alpha_8 = 0.4
                                                //Iterate input polling stage
                                                title_joy_poll = 1
                                                //Set poll timer
                                                title_joy_polltimer = 8
                                            }
                                        break;
                                    }
                                //A
                                case 5:
                                    {
                                        //If this is the start of the input polling stage, lower opacity of other buttons
                                        if title_joy_poll = 0
                                            {
                                                title_bg_alpha_0 = 0.4
                                                title_bg_alpha_1 = 0.4
                                                title_bg_alpha_2 = 0.4
                                                title_bg_alpha_3 = 0.4
                                                title_bg_alpha_4 = 0.9
                                                title_bg_alpha_5 = 0.4
                                                title_bg_alpha_6 = 0.4
                                                title_bg_alpha_7 = 0.4
                                                title_bg_alpha_8 = 0.4
                                                //Iterate input polling stage
                                                title_joy_poll = 1
                                                //Set poll timer
                                                title_joy_polltimer = 8
                                            }
                                        break;
                                    }
                                //B
                                case 6:
                                    {
                                        //If this is the start of the input polling stage, lower opacity of other buttons
                                        if title_joy_poll = 0
                                            {
                                                title_bg_alpha_0 = 0.4
                                                title_bg_alpha_1 = 0.4
                                                title_bg_alpha_2 = 0.4
                                                title_bg_alpha_3 = 0.4
                                                title_bg_alpha_4 = 0.4
                                                title_bg_alpha_5 = 0.9
                                                title_bg_alpha_6 = 0.4
                                                title_bg_alpha_7 = 0.4
                                                title_bg_alpha_8 = 0.4
                                                //Iterate input polling stage
                                                title_joy_poll = 1
                                                //Set poll timer
                                                title_joy_polltimer = 8
                                            }
                                        break;
                                    }
                                //C
                                case 7:
                                    {
                                        //If this is the start of the input polling stage, lower opacity of other buttons
                                        if title_joy_poll = 0
                                            {
                                                title_bg_alpha_0 = 0.4
                                                title_bg_alpha_1 = 0.4
                                                title_bg_alpha_2 = 0.4
                                                title_bg_alpha_3 = 0.4
                                                title_bg_alpha_4 = 0.4
                                                title_bg_alpha_5 = 0.4
                                                title_bg_alpha_6 = 0.9
                                                title_bg_alpha_7 = 0.4
                                                title_bg_alpha_8 = 0.4
                                                //Iterate input polling stage
                                                title_joy_poll = 1
                                                //Set poll timer
                                                title_joy_polltimer = 8
                                            }
                                        break;
                                    }
                                //D
                                case 8:
                                    {
                                        //If this is the start of the input polling stage, lower opacity of other buttons
                                        if title_joy_poll = 0
                                            {
                                                title_bg_alpha_0 = 0.4
                                                title_bg_alpha_1 = 0.4
                                                title_bg_alpha_2 = 0.4
                                                title_bg_alpha_3 = 0.4
                                                title_bg_alpha_4 = 0.4
                                                title_bg_alpha_5 = 0.4
                                                title_bg_alpha_6 = 0.4
                                                title_bg_alpha_7 = 0.9
                                                title_bg_alpha_8 = 0.4
                                                //Iterate input polling stage
                                                title_joy_poll = 1
                                                //Set poll timer
                                                title_joy_polltimer = 8
                                            }
                                        break;
                                    }
                                //Start
                                case 9:
                                    {
                                    
                                        //If this is the start of the input polling stage, lower opacity of other buttons
                                        if title_joy_poll = 0
                                            {
                                                title_bg_alpha_0 = 0.4
                                                title_bg_alpha_1 = 0.4
                                                title_bg_alpha_2 = 0.4
                                                title_bg_alpha_3 = 0.4
                                                title_bg_alpha_4 = 0.4
                                                title_bg_alpha_5 = 0.4
                                                title_bg_alpha_6 = 0.4
                                                title_bg_alpha_7 = 0.4
                                                title_bg_alpha_8 = 0.9
                                                //Iterate input polling stage
                                                title_joy_poll = 1
                                                //Set poll timer
                                                title_joy_polltimer = 8
                                            }
                                        break;
                                    }
                                //Save Settings and Return To Options Screen
                                case 10:
                                    {
                                        audio_play_sound(pause_jingle,50,false);
                                        title_scroll_active = 1; title_scroll_page -= 1; title_scroll_timer = 16; title_scroll = 0;
                                        control_limit = 32;

                                        //Refresh Keyboard Bindings (Player Mode)
                                        key_left    = o.key_left
                                        key_right   = o.key_right
                                        key_up      = o.key_up
                                        key_down    = o.key_down
                                        key_a       = o.key_a
                                        key_b       = o.key_b
                                        key_c       = o.key_c
                                        key_d       = o.key_d
                                        key_start   = o.key_start
                                        
                                        //Refresh Joystick Bindings (Player Mode)
                                        deadzone_mod    = o.deadzone_mod
                                        joy_left_mod    = o.joy_left_mod
                                        joy_right_mod   = o.joy_right_mod
                                        joy_up_mod      = o.joy_up_mod
                                        joy_down_mod    = o.joy_down_mod
                                        joy_x_mod       = o.joy_x_mod
                                        joy_y_mod       = o.joy_y_mod
                                        joy_a_mod       = o.joy_a_mod
                                        joy_b_mod       = o.joy_b_mod
                                        joy_c_mod       = o.joy_c_mod
                                        joy_d_mod       = o.joy_d_mod
                                        joy_start_mod   = o.joy_start_mod
                                        left_stick_left = o.left_stick_left
                                        left_stick_right = o.left_stick_right
                                        left_stick_up = o.left_stick_up
                                        left_stick_down = o.left_stick_down
                                        right_stick_left = o.right_stick_left
                                        right_stick_right = o.right_stick_right
                                        right_stick_up = o.right_stick_up
                                        right_stick_down = o.right_stick_down

                                        //Write changes to gamedata.dat
                                        nsfs_init()
                                        ini_open_ns(program_directory + "gamedata.dat")
                                        //Joystick Modern Bindings (Player Mode)
                                        ini_write_string("joystick_modern_bindings","deadzone",string(o.deadzone_mod))
                                        ini_write_string("joystick_modern_bindings","joy_left",string(o.joy_left_mod))
                                        ini_write_string("joystick_modern_bindings","joy_right",string(o.joy_right_mod))
                                        ini_write_string("joystick_modern_bindings","joy_up",string(o.joy_up_mod))
                                        ini_write_string("joystick_modern_bindings","joy_down",string(o.joy_down_mod))
                                        ini_write_string("joystick_modern_bindings","joy_x",string(o.joy_x_mod))
                                        ini_write_string("joystick_modern_bindings","joy_y",string(o.joy_y_mod))
                                        ini_write_string("joystick_modern_bindings","joy_a",string(o.joy_a_mod))
                                        ini_write_string("joystick_modern_bindings","joy_b",string(o.joy_b_mod))
                                        ini_write_string("joystick_modern_bindings","joy_c",string(o.joy_c_mod))
                                        ini_write_string("joystick_modern_bindings","joy_d",string(o.joy_d_mod))
                                        ini_write_string("joystick_modern_bindings","joy_start",string(o.joy_start_mod))
                                        //Analog Stick Hotkeys
                                        ini_write_string("joystick_modern_hotkeys","left_stick_left",string(o.left_stick_left))
                                        ini_write_string("joystick_modern_hotkeys","left_stick_right",string(o.left_stick_right))
                                        ini_write_string("joystick_modern_hotkeys","left_stick_up",string(o.left_stick_up))
                                        ini_write_string("joystick_modern_hotkeys","left_stick_down",string(o.left_stick_down))
                                        ini_write_string("joystick_modern_hotkeys","right_stick_left",string(o.right_stick_left))
                                        ini_write_string("joystick_modern_hotkeys","right_stick_right",string(o.right_stick_right))
                                        ini_write_string("joystick_modern_hotkeys","right_stick_up",string(o.right_stick_up))
                                        ini_write_string("joystick_modern_hotkeys","right_stick_down",string(o.right_stick_down))
                                        //Keyboard Bindings (Player Mode)
                                        ini_write_string("keyboard_bindings","key_left",string(o.key_left))
                                        ini_write_string("keyboard_bindings","key_right",string(o.key_right))
                                        ini_write_string("keyboard_bindings","key_up",string(o.key_up))
                                        ini_write_string("keyboard_bindings","key_down",string(o.key_down))
                                        ini_write_string("keyboard_bindings","key_a",string(o.key_a))
                                        ini_write_string("keyboard_bindings","key_b",string(o.key_b))
                                        ini_write_string("keyboard_bindings","key_c",string(o.key_c))
                                        ini_write_string("keyboard_bindings","key_d",string(o.key_d))
                                        ini_write_string("keyboard_bindings","key_start",string(o.key_start))
                                        //Mouse Bindings (Player Mode)
                                        ini_write_string("mouse_bindings","mouse_left",string(o.mouse_left))
                                        ini_write_string("mouse_bindings","mouse_right",string(o.mouse_right))
                                        ini_write_string("mouse_bindings","mouse_middle",string(o.mouse_middle))
                                        ini_write_string("mouse_bindings","mouse_scroll_up",string(o.mouse_scroll_up))
                                        ini_write_string("mouse_bindings","mouse_scroll_down",string(o.mouse_scroll_down))
                                        ini_write_string("mouse_bindings","mouse_deadzone_up",string(o.mouse_deadzone_up))
                                        ini_write_string("mouse_bindings","mouse_deadzone_down",string(o.mouse_deadzone_down))
                                        ini_write_string("mouse_bindings","mouse_deadzone_left",string(o.mouse_deadzone_left))
                                        ini_write_string("mouse_bindings","mouse_deadzone_right",string(o.mouse_deadzone_right))
                                        //Close INI Configuration File
                                        ini_close_ns();
                                        saving_prompt = 120
                                        break;
                                    }
                            }
                    }
                break;
            }

        //-------------------Editor Controls-------------------//
        //=====================================================//
        case 3:
            {
                if ((mouse_check_button_pressed(mb_left) or mouse_check_button_pressed(mb_right))
                and o.joy_mouse_button_switch = 1
                and title_scroll_active = 0
                and device_mouse_x_to_gui(0) &gt;= 0 and device_mouse_x_to_gui(0) &lt;= 100
                and device_mouse_y_to_gui(0) &gt;= 0 and device_mouse_y_to_gui(0) &lt;= 27)
                    {
                        title_type = 0;
                        title_scroll_active = 1;
                        title_scroll_page -= 1;
                        title_scroll_timer = 16;
                        title_scroll = 0;
                        scr_set_save_editor_settings()
                        audio_play_sound(pause_jingle,50,false);
                    }

                //Do not allow menu scrolling or interations if we are listening for inputs
                if title_joy_poll = 0 and title_joy_cool_down = 0
                    {
                        if ((mouse_check_button_pressed(mb_left) or mouse_check_button_pressed(mb_right))
                        and o.joy_mouse_button_switch = 1
                        and title_scroll_active = 0)
                            {
                                if device_mouse_x_to_gui(0) &gt;= 32 and device_mouse_x_to_gui(0) &lt;= 409
                                    {
                                        //Input Type
                                        if device_mouse_y_to_gui(0) &gt;= 0 and device_mouse_y_to_gui(0) &lt;= 39
                                            title_scroll = 0;
                                        //Okay
                                        if device_mouse_y_to_gui(0) &gt;= 200 and device_mouse_y_to_gui(0) &lt;= 239
                                            title_scroll = 17;
                                        //Shake menu items while scrolling through them
                                        switch(title_scroll)
                                            {
                                                case 0: {title_item_shake_timer = 10; title_item_shake_cur = 13; break;}
                                                case 17: {title_item_shake_timer = 10; title_item_shake_cur = 14; break;}
                                            }
                                    }
                                //Left Section
                                if device_mouse_x_to_gui(0) &gt;= 32 and device_mouse_x_to_gui(0) &lt;= 212
                                    {
                                        //Up
                                        if device_mouse_y_to_gui(0) &gt;= 40 and device_mouse_y_to_gui(0) &lt;= 59
                                            title_scroll = 1;
                                        //Down
                                        if device_mouse_y_to_gui(0) &gt;= 60 and device_mouse_y_to_gui(0) &lt;= 79
                                            title_scroll = 2;
                                        //Left
                                        if device_mouse_y_to_gui(0) &gt;= 80 and device_mouse_y_to_gui(0) &lt;= 99
                                            title_scroll = 3;
                                        //Right
                                        if device_mouse_y_to_gui(0) &gt;= 100 and device_mouse_y_to_gui(0) &lt;= 119
                                            title_scroll = 4;
                                        //Place
                                        if device_mouse_y_to_gui(0) &gt;= 120 and device_mouse_y_to_gui(0) &lt;= 139
                                            title_scroll = 5;
                                        //Copy
                                        if device_mouse_y_to_gui(0) &gt;= 140 and device_mouse_y_to_gui(0) &lt;= 159
                                            title_scroll = 6;
                                        //Delete
                                        if device_mouse_y_to_gui(0) &gt;= 160 and device_mouse_y_to_gui(0) &lt;= 179
                                            title_scroll = 7;
                                        //New Tile
                                        if device_mouse_y_to_gui(0) &gt;= 180 and device_mouse_y_to_gui(0) &lt;= 199
                                            title_scroll = 8;
                                    }
                                //Right Section
                                if device_mouse_x_to_gui(0) &gt;= 229 and device_mouse_x_to_gui(0) &lt;= 409
                                    {
                                        //Undo
                                        if device_mouse_y_to_gui(0) &gt;= 40 and device_mouse_y_to_gui(0) &lt;= 59
                                            title_scroll = 9;
                                        //Redo
                                        if device_mouse_y_to_gui(0) &gt;= 60 and device_mouse_y_to_gui(0) &lt;= 79
                                            title_scroll = 10;
                                        //Play Mode
                                        if device_mouse_y_to_gui(0) &gt;= 80 and device_mouse_y_to_gui(0) &lt;= 99
                                            title_scroll = 11;
                                        //Exit
                                        if device_mouse_y_to_gui(0) &gt;= 100 and device_mouse_y_to_gui(0) &lt;= 119
                                            title_scroll = 12;
                                        //Layer Up
                                        if device_mouse_y_to_gui(0) &gt;= 120 and device_mouse_y_to_gui(0) &lt;= 139
                                            title_scroll = 13;
                                        //Layer Down
                                        if device_mouse_y_to_gui(0) &gt;= 140 and device_mouse_y_to_gui(0) &lt;= 159
                                            title_scroll = 14;
                                        //Snap
                                        if device_mouse_y_to_gui(0) &gt;= 160 and device_mouse_y_to_gui(0) &lt;= 179
                                            title_scroll = 15;
                                        //Zoom
                                        if device_mouse_y_to_gui(0) &gt;= 180 and device_mouse_y_to_gui(0) &lt;= 199
                                            title_scroll = 16;
                                    }
                                audio_play_sound(pause_select,50,false)
                                o.use_a = 1
                            }
                        //Scroll through menu items
                        if o.use_up   = 1
                            {
                                title_scroll -= 1
                                //Shake menu items while scrolling through them
                                switch(title_scroll)
                                    {
                                        case 0:  {title_item_shake_timer = 10; title_item_shake_cur = 13; break;}
                                        case 17: {title_item_shake_timer = 10; title_item_shake_cur = 14; break;}
                                    }
                                audio_play_sound(pause_select,50,false)
                            }
                        if o.use_down = 1
                            {
                                title_scroll += 1
                                //Shake menu items while scrolling through them
                                switch(title_scroll)
                                    {
                                        case 0:  {title_item_shake_timer = 10; title_item_shake_cur = 13; break;}
                                        case 17: {title_item_shake_timer = 10; title_item_shake_cur = 14; break;}
                                    }
                                audio_play_sound(pause_select,50,false)
                            }
                        //Loop through menu items if our selection is going beyond the boundaries
                        if title_scroll &lt; 0  {title_scroll = 17; title_item_shake_timer = 10; title_item_shake_cur = 14;}
                        if title_scroll &gt; 17 {title_scroll = 0;  title_item_shake_timer = 10; title_item_shake_cur = 13;}
                        //Bring the cursor up to the bottom-left menu item, if we were previously on the "Okay" menu item
                        if title_scroll = 9 and o.use_down = 1 {title_scroll = 17; title_item_shake_timer = 10; title_item_shake_cur = 14;}
                        //Bring the cursor down to the "Okay" menu item, if we were scrolling below the bottom-left menu item
                        if title_scroll = 16 and o.use_up  = 1 {title_scroll = 8}
                        //Scroll through input types with the left and right buttons/keys
                        if o.use_left = 1 and title_scroll = 0
                            {
                                audio_play_sound(pause_select,50,false);
                                title_type-=1; if title_type &lt; 0
                                    {
                                        title_type = 0;
                                        title_scroll_active = 1;
                                        title_scroll_page -= 1;
                                        title_scroll_timer = 16;
                                        title_scroll = 0;
                                        scr_set_save_editor_settings()
                                        audio_play_sound(pause_jingle,50,false);
                                    }
                            }
                        if o.use_right = 1 and title_scroll = 0
                            {
                                audio_play_sound(pause_select,50,false);
                                title_type += 1; if title_type &gt; 1 title_type = 1;
                            }
                        //Scroll through menu items horizontally based on vertical position
                        if title_scroll &gt; 0 and title_scroll &lt; 17 and (o.use_left = 1 or o.use_right = 1)
                            {
                                switch(title_scroll)
                                    {
                                        case 1:  {title_scroll = 9;  break;}
                                        case 2:  {title_scroll = 10; break;}
                                        case 3:  {title_scroll = 11; break;}
                                        case 4:  {title_scroll = 12; break;}
                                        case 5:  {title_scroll = 13; break;}
                                        case 6:  {title_scroll = 14; break;}
                                        case 7:  {title_scroll = 15; break;}
                                        case 8:  {title_scroll = 16; break;}
                                        case 9:  {title_scroll = 1;  break;}
                                        case 10: {title_scroll = 2;  break;}
                                        case 11: {title_scroll = 3;  break;}
                                        case 12: {title_scroll = 4;  break;}
                                        case 13: {title_scroll = 5;  break;}
                                        case 14: {title_scroll = 6;  break;}
                                        case 15: {title_scroll = 7;  break;}
                                        case 16: {title_scroll = 8;  break;}
                                    }
                            }
                        
                        //Select Okay if we have pressed the B button
                        if o.use_b = 1 and title_scroll = 17
                        or ((o.use_a = 1 or o.use_c = 1 or o.use_start = 1) and title_scroll=17)
                            {
                                audio_play_sound(pause_jingle,50,false);
                                title_scroll_active = 1; title_scroll_page = 1; title_scroll_timer = 32; title_scroll = 0;
                                //Write changes to gamedata.dat
                                nsfs_init()
                                ini_open_ns(program_directory + "gamedata.dat")
                                //Keyboard Bindings (Player Mode)
                                ini_write_string("keyboard_editor_bindings","move_left",string(o.key_move_left))
                                ini_write_string("keyboard_editor_bindings","move_right",string(o.key_move_right))
                                ini_write_string("keyboard_editor_bindings","move_up",string(o.key_move_up))
                                ini_write_string("keyboard_editor_bindings","move_down",string(o.key_move_down))
                                ini_write_string("keyboard_editor_bindings","mode",string(o.key_mode))
                                ini_write_string("keyboard_editor_bindings","delete",string(o.key_delete))
                                ini_write_string("keyboard_editor_bindings","put_here",string(o.key_put_here))
                                ini_write_string("keyboard_editor_bindings","copy",string(o.key_copy))
                                ini_write_string("keyboard_editor_bindings","layer_up",string(o.key_layer_up))
                                ini_write_string("keyboard_editor_bindings","layer_down",string(o.key_layer_down))
                                ini_write_string("keyboard_editor_bindings","snap_up",string(o.key_snap_up))
                                ini_write_string("keyboard_editor_bindings","zoom",string(o.key_zoom))
                                ini_write_string("keyboard_editor_bindings","pause",string(o.key_pause))
                                ini_write_string("keyboard_editor_bindings","new_tile",string(o.key_new_tile))
                                ini_write_string("keyboard_editor_bindings","undo",string(o.key_undo))
                                ini_write_string("keyboard_editor_bindings","redo",string(o.key_redo))
                                //Joystick Modern Bindings (Player Mode)
                                ini_write_string("joystick_modern_editor_bindings","move_left",string(o.joy_move_left))
                                ini_write_string("joystick_modern_editor_bindings","move_right",string(o.joy_move_right))
                                ini_write_string("joystick_modern_editor_bindings","move_up",string(o.joy_move_up))
                                ini_write_string("joystick_modern_editor_bindings","move_down",string(o.joy_move_down))
                                ini_write_string("joystick_modern_editor_bindings","mode",string(o.joy_mode))
                                ini_write_string("joystick_modern_editor_bindings","delete",string(o.joy_delete))
                                ini_write_string("joystick_modern_editor_bindings","put_here",string(o.joy_put_here))
                                ini_write_string("joystick_modern_editor_bindings","copy",string(o.joy_copy))
                                ini_write_string("joystick_modern_editor_bindings","layer_up",string(o.joy_layer_up))
                                ini_write_string("joystick_modern_editor_bindings","layer_down",string(o.joy_layer_down))
                                ini_write_string("joystick_modern_editor_bindings","snap_up",string(o.joy_snap_up))
                                ini_write_string("joystick_modern_editor_bindings","zoom",string(o.joy_zoom))
                                ini_write_string("joystick_modern_editor_bindings","pause",string(o.joy_pause))
                                ini_write_string("joystick_modern_editor_bindings","new_tile",string(o.joy_new_tile))
                                ini_write_string("joystick_modern_editor_bindings","undo",string(o.joy_undo))
                                ini_write_string("joystick_modern_editor_bindings","redo",string(o.joy_redo))
                                //Close INI Configuration File
                                ini_close_ns();
                                saving_prompt = 120
                            }
                        //Set cursor to Okay if we have pressed the B button, and the cursor is not already there
                        if o.use_b = 1 and title_scroll != 17 {audio_play_sound(pause_select,50,false); title_scroll = 17; title_item_shake_timer = 8; title_item_shake_cur = 14;}
                    }

                //Undo input polling if the player has pressed the ESC key
                if keyboard_check(vk_escape) and title_joy_poll != 0
                    {
                        //Return background elements to normal
                        title_ed_alpha_0  = 0.9
                        title_ed_alpha_1  = 0.9
                        title_ed_alpha_2  = 0.9
                        title_ed_alpha_3  = 0.9
                        title_ed_alpha_4  = 0.9
                        title_ed_alpha_5  = 0.9
                        title_ed_alpha_6  = 0.9
                        title_ed_alpha_7  = 0.9
                        title_ed_alpha_8  = 0.9
                        title_ed_alpha_9  = 0.9
                        title_ed_alpha_10 = 0.9
                        title_ed_alpha_11 = 0.9
                        title_ed_alpha_12 = 0.9
                        title_ed_alpha_13 = 0.9
                        title_ed_alpha_14 = 0.9
                        title_ed_alpha_15 = 0.9
                        //Play Sound
                        audio_play_sound(pause_jingle,50,false)
                        //Reset poll timer
                        title_joy_polltimer = 8
                        //Reset poll button assignment
                        title_joy_poll_button = 0
                        //Enforce input cooldown
                        title_joy_cool_down = 8
                        //Reset input polling stage
                        title_joy_poll = 0
                    }

                //If we are at the input polling stage, listen for inputs
                if title_joy_poll = 1
                    {
                        //Decrement poll timer
                        if title_joy_polltimer &gt; -8 title_joy_polltimer -= 1;
                        //Allow input polling once eight frames have passed
                        if title_joy_polltimer &lt; -7
                            {
                                //Reset input polling stage
                                if keyboard_check(vk_escape) = 1
                                    {
                                        title_joy_poll = 0
                                        //Return background elements to normal
                                        title_ed_alpha_0  = 0.9
                                        title_ed_alpha_1  = 0.9
                                        title_ed_alpha_2  = 0.9
                                        title_ed_alpha_3  = 0.9
                                        title_ed_alpha_4  = 0.9
                                        title_ed_alpha_5  = 0.9
                                        title_ed_alpha_6  = 0.9
                                        title_ed_alpha_7  = 0.9
                                        title_ed_alpha_8  = 0.9
                                        title_ed_alpha_9  = 0.9
                                        title_ed_alpha_10 = 0.9
                                        title_ed_alpha_11 = 0.9
                                        title_ed_alpha_12 = 0.9
                                        title_ed_alpha_13 = 0.9
                                        title_ed_alpha_14 = 0.9
                                        title_ed_alpha_15 = 0.9
                                    }
                                switch(title_type)
                                    {
                                        //Listen for key inputs
                                        case 0:
                                            {
                                                //Do not allow the escape key to be bound
                                                if  not keyboard_check(vk_escape) = 1
                                                //Do not allow the function keys to be bound
                                                and not keyboard_check(vk_f1)  = 1
                                                and not keyboard_check(vk_f2)  = 1
                                                and not keyboard_check(vk_f3)  = 1
                                                and not keyboard_check(vk_f4)  = 1
                                                and not keyboard_check(vk_f5)  = 1
                                                and not keyboard_check(vk_f6)  = 1
                                                and not keyboard_check(vk_f7)  = 1
                                                and not keyboard_check(vk_f8)  = 1
                                                and not keyboard_check(vk_f9)  = 1
                                                and not keyboard_check(vk_f10) = 1
                                                and not keyboard_check(vk_f11) = 1
                                                and not keyboard_check(vk_f12) = 1
                                                //Do not allow the windows keys to be bound
                                                and not keyboard_check(91)     = 1
                                                and not keyboard_check(92)     = 1
                                                    {
                                                        if keyboard_check(vk_anykey) = 1
                                                            {
                                                                title_joy_poll_key = keyboard_key;
                                                                title_joy_poll = 3;
                                                                title_joy_polltimer = 8;
                                                            }
                                                    }
                                                break;
                                            }
                                        //Listen for button inputs
                                        case 1:
                                            {
                                                if gamepad_button_check(o.joy_modern_id,gp_face1)      {title_joy_poll_button = 32769; title_joy_poll = 2; title_joy_polltimer = 8;}
                                                if gamepad_button_check(o.joy_modern_id,gp_face2)      {title_joy_poll_button = 32770; title_joy_poll = 2; title_joy_polltimer = 8;}
                                                if gamepad_button_check(o.joy_modern_id,gp_face3)      {title_joy_poll_button = 32771; title_joy_poll = 2; title_joy_polltimer = 8;}
                                                if gamepad_button_check(o.joy_modern_id,gp_face4)      {title_joy_poll_button = 32772; title_joy_poll = 2; title_joy_polltimer = 8;}
                                                if gamepad_button_check(o.joy_modern_id,gp_shoulderl)  {title_joy_poll_button = 32773; title_joy_poll = 2; title_joy_polltimer = 8;}
                                                if gamepad_button_check(o.joy_modern_id,gp_shoulderr)  {title_joy_poll_button = 32774; title_joy_poll = 2; title_joy_polltimer = 8;}
                                                if gamepad_button_check(o.joy_modern_id,gp_shoulderlb) {title_joy_poll_button = 32775; title_joy_poll = 2; title_joy_polltimer = 8;}
                                                if gamepad_button_check(o.joy_modern_id,gp_shoulderrb) {title_joy_poll_button = 32776; title_joy_poll = 2; title_joy_polltimer = 8;}
                                                if gamepad_button_check(o.joy_modern_id,gp_select)     {title_joy_poll_button = 32777; title_joy_poll = 2; title_joy_polltimer = 8;}
                                                if gamepad_button_check(o.joy_modern_id,gp_start)      {title_joy_poll_button = 32778; title_joy_poll = 2; title_joy_polltimer = 8;}
                                                if gamepad_button_check(o.joy_modern_id,gp_stickl)     {title_joy_poll_button = 32779; title_joy_poll = 2; title_joy_polltimer = 8;}
                                                if gamepad_button_check(o.joy_modern_id,gp_stickr)     {title_joy_poll_button = 32780; title_joy_poll = 2; title_joy_polltimer = 8;}
                                                if gamepad_button_check(o.joy_modern_id,gp_padu)       {title_joy_poll_button = 32781; title_joy_poll = 2; title_joy_polltimer = 8;}
                                                if gamepad_button_check(o.joy_modern_id,gp_padd)       {title_joy_poll_button = 32782; title_joy_poll = 2; title_joy_polltimer = 8;}
                                                if gamepad_button_check(o.joy_modern_id,gp_padl)       {title_joy_poll_button = 32783; title_joy_poll = 2; title_joy_polltimer = 8;}
                                                if gamepad_button_check(o.joy_modern_id,gp_padr)       {title_joy_poll_button = 32784; title_joy_poll = 2; title_joy_polltimer = 8;}
                                                //Check gamepad axises
                                                //if abs(gamepad_axis_value(0,gp_axislh)) &gt; o.deadzone_mod  {title_joy_poll_button = 32785; title_joy_poll = 2;}
                                                //if abs(gamepad_axis_value(0,gp_axislv)) &gt; o.deadzone_mod  {title_joy_poll_button = 32786; title_joy_poll = 2;}
                                                //if abs(gamepad_axis_value(0,gp_axisrh)) &gt; o.deadzone_mod  {title_joy_poll_button = 32787; title_joy_poll = 2;}
                                                //if abs(gamepad_axis_value(0,gp_axisrv)) &gt; o.deadzone_mod  {title_joy_poll_button = 32788; title_joy_poll = 2;}
                                                break;
                                            }
                                    }
                            }
                    }
                //If we have registered an input during the polling stage, save changes and return background elements to normal
                //(Button Inputs Only)
                if title_joy_poll = 2
                    {
                        switch(title_scroll)
                            {
                                case 1:  {o.joy_move_up    = title_joy_poll_button; o.joy_move_up_s    = scr_translate_alt_codes_gamepad(o.joy_move_up);    break;}
                                case 2:  {o.joy_move_down  = title_joy_poll_button; o.joy_move_down_s  = scr_translate_alt_codes_gamepad(o.joy_move_down);  break;}
                                case 3:  {o.joy_move_left  = title_joy_poll_button; o.joy_move_left_s  = scr_translate_alt_codes_gamepad(o.joy_move_left);  break;}
                                case 4:  {o.joy_move_right = title_joy_poll_button; o.joy_move_right_s = scr_translate_alt_codes_gamepad(o.joy_move_right); break;}
                                case 5:  {o.joy_put_here   = title_joy_poll_button; o.joy_put_here_s   = scr_translate_alt_codes_gamepad(o.joy_put_here);   break;}
                                case 6:  {o.joy_copy       = title_joy_poll_button; o.joy_copy_s       = scr_translate_alt_codes_gamepad(o.joy_copy);       break;}
                                case 7:  {o.joy_delete     = title_joy_poll_button; o.joy_delete_s     = scr_translate_alt_codes_gamepad(o.joy_delete);     break;}
                                case 8:  {o.joy_new_tile   = title_joy_poll_button; o.joy_new_tile_s   = scr_translate_alt_codes_gamepad(o.joy_new_tile);   break;}
                                case 9:  {o.joy_undo       = title_joy_poll_button; o.joy_undo_s       = scr_translate_alt_codes_gamepad(o.joy_undo);       break;}
                                case 10: {o.joy_redo       = title_joy_poll_button; o.joy_redo_s       = scr_translate_alt_codes_gamepad(o.joy_redo);       break;}
                                case 11: {o.joy_mode       = title_joy_poll_button; o.joy_mode_s       = scr_translate_alt_codes_gamepad(o.joy_mode);       break;}
                                case 12: {o.joy_pause      = title_joy_poll_button; o.joy_pause_s      = scr_translate_alt_codes_gamepad(o.joy_pause);      break;}
                                case 13: {o.joy_layer_up   = title_joy_poll_button; o.joy_layer_up_s   = scr_translate_alt_codes_gamepad(o.joy_layer_up);   break;}
                                case 14: {o.joy_layer_down = title_joy_poll_button; o.joy_layer_down_s = scr_translate_alt_codes_gamepad(o.joy_layer_down); break;}
                                case 15: {o.joy_snap_up    = title_joy_poll_button; o.joy_snap_up_s    = scr_translate_alt_codes_gamepad(o.joy_snap_up);    break;}
                                case 16: {o.joy_zoom       = title_joy_poll_button; o.joy_zoom_s       = scr_translate_alt_codes_gamepad(o.joy_zoom);       break;}
                            }
                        //Return background elements to normal
                        title_ed_alpha_0  = 0.9
                        title_ed_alpha_1  = 0.9
                        title_ed_alpha_2  = 0.9
                        title_ed_alpha_3  = 0.9
                        title_ed_alpha_4  = 0.9
                        title_ed_alpha_5  = 0.9
                        title_ed_alpha_6  = 0.9
                        title_ed_alpha_7  = 0.9
                        title_ed_alpha_8  = 0.9
                        title_ed_alpha_9  = 0.9
                        title_ed_alpha_10 = 0.9
                        title_ed_alpha_11 = 0.9
                        title_ed_alpha_12 = 0.9
                        title_ed_alpha_13 = 0.9
                        title_ed_alpha_14 = 0.9
                        title_ed_alpha_15 = 0.9
                        //Play Sound
                        audio_play_sound(pause_jingle,50,false)
                        //Reset poll timer
                        title_joy_polltimer = 8
                        //Reset poll button assignment
                        title_joy_poll_button = 0
                        //Enforce input cooldown
                        title_joy_cool_down = 8
                        //Reset input polling stage
                        title_joy_poll = 0
                    }
                //If we have registered an input during the polling stage, save changes and return background elements to normal
                //(Keyboard Inputs Only)
                if title_joy_poll = 3
                    {
                        switch(title_scroll)
                            {
                                case 1:  {o.key_move_up    = title_joy_poll_key; o.key_move_up_s    = scr_translate_alt_codes_keyboard(o.key_move_up);    break;}
                                case 2:  {o.key_move_down  = title_joy_poll_key; o.key_move_down_s  = scr_translate_alt_codes_keyboard(o.key_move_down);  break;}
                                case 3:  {o.key_move_left  = title_joy_poll_key; o.key_move_left_s  = scr_translate_alt_codes_keyboard(o.key_move_left);  break;}
                                case 4:  {o.key_move_right = title_joy_poll_key; o.key_move_right_s = scr_translate_alt_codes_keyboard(o.key_move_right); break;}
                                case 5:  {o.key_put_here   = title_joy_poll_key; o.key_put_here_s   = scr_translate_alt_codes_keyboard(o.key_put_here);   break;}
                                case 6:  {o.key_copy       = title_joy_poll_key; o.key_copy_s       = scr_translate_alt_codes_keyboard(o.key_copy);       break;}
                                case 7:  {o.key_delete     = title_joy_poll_key; o.key_delete_s     = scr_translate_alt_codes_keyboard(o.key_delete);     break;}
                                case 8:  {o.key_new_tile   = title_joy_poll_key; o.key_new_tile_s   = scr_translate_alt_codes_keyboard(o.key_new_tile);   break;}
                                case 9:  {o.key_undo       = title_joy_poll_key; o.key_undo_s       = scr_translate_alt_codes_keyboard(o.key_undo);       break;}
                                case 10: {o.key_redo       = title_joy_poll_key; o.key_redo_s       = scr_translate_alt_codes_keyboard(o.key_redo);       break;}
                                case 11: {o.key_mode       = title_joy_poll_key; o.key_mode_s       = scr_translate_alt_codes_keyboard(o.key_mode);       break;}
                                case 12: {o.key_pause      = title_joy_poll_key; o.key_pause_s      = scr_translate_alt_codes_keyboard(o.key_pause);      break;}
                                case 13: {o.key_layer_up   = title_joy_poll_key; o.key_layer_up_s   = scr_translate_alt_codes_keyboard(o.key_layer_up);   break;}
                                case 14: {o.key_layer_down = title_joy_poll_key; o.key_layer_down_s = scr_translate_alt_codes_keyboard(o.key_layer_down); break;}
                                case 15: {o.key_snap_up    = title_joy_poll_key; o.key_snap_up_s    = scr_translate_alt_codes_keyboard(o.key_snap_up);    break;}
                                case 16: {o.key_zoom       = title_joy_poll_key; o.key_zoom_s       = scr_translate_alt_codes_keyboard(o.key_zoom);       break;}
                            }
                        //Return background elements to normal
                        title_ed_alpha_0  = 0.9
                        title_ed_alpha_1  = 0.9
                        title_ed_alpha_2  = 0.9
                        title_ed_alpha_3  = 0.9
                        title_ed_alpha_4  = 0.9
                        title_ed_alpha_5  = 0.9
                        title_ed_alpha_6  = 0.9
                        title_ed_alpha_7  = 0.9
                        title_ed_alpha_8  = 0.9
                        title_ed_alpha_9  = 0.9
                        title_ed_alpha_10 = 0.9
                        title_ed_alpha_11 = 0.9
                        title_ed_alpha_12 = 0.9
                        title_ed_alpha_13 = 0.9
                        title_ed_alpha_14 = 0.9
                        title_ed_alpha_15 = 0.9
                        //Play Sound
                        audio_play_sound(pause_jingle,50,false)
                        //Reset poll timer
                        title_joy_polltimer = 8
                        //Reset poll key assignment
                        title_joy_poll_key = 0
                        //Enforce input cooldown
                        title_joy_cool_down = 8
                        //Reset input polling stage
                        title_joy_poll = 0
                    }
                //Enforce a cool down on inputs after assigning an input
                if title_joy_cool_down &gt; 0
                    {
                        title_joy_cool_down -= 1
                    }
                if (title_joy_poll = 0 and title_joy_cool_down = 0) and (o.use_a = 1 or o.use_c = 1 or o.use_start = 1)
                    {
                        switch(title_scroll)
                            {
                                case 0: {audio_play_sound(pause_select,50,false); title_type+=1; if title_type &gt; 1 title_type=0; break;} //Change Input Type
                                //Save Settings and Return To Options Screen
                                case 17:
                                    {
                                        audio_play_sound(pause_jingle,50,false);
                                        title_scroll_active = 1; title_scroll_page -= 2; title_scroll_timer = 32; title_scroll = 0;
                                        control_limit = 32;
                                        //Write changes to gamedata.dat
                                        nsfs_init()
                                        ini_open_ns(program_directory + "gamedata.dat")
                                        //Keyboard Bindings (Player Mode)
                                        ini_write_string("keyboard_editor_bindings","move_left",string(o.key_move_left))
                                        ini_write_string("keyboard_editor_bindings","move_right",string(o.key_move_right))
                                        ini_write_string("keyboard_editor_bindings","move_up",string(o.key_move_up))
                                        ini_write_string("keyboard_editor_bindings","move_down",string(o.key_move_down))
                                        ini_write_string("keyboard_editor_bindings","mode",string(o.key_mode))
                                        ini_write_string("keyboard_editor_bindings","delete",string(o.key_delete))
                                        ini_write_string("keyboard_editor_bindings","put_here",string(o.key_put_here))
                                        ini_write_string("keyboard_editor_bindings","copy",string(o.key_copy))
                                        ini_write_string("keyboard_editor_bindings","layer_up",string(o.key_layer_up))
                                        ini_write_string("keyboard_editor_bindings","layer_down",string(o.key_layer_down))
                                        ini_write_string("keyboard_editor_bindings","snap_up",string(o.key_snap_up))
                                        ini_write_string("keyboard_editor_bindings","zoom",string(o.key_zoom))
                                        ini_write_string("keyboard_editor_bindings","pause",string(o.key_pause))
                                        ini_write_string("keyboard_editor_bindings","new_tile",string(o.key_new_tile))
                                        ini_write_string("keyboard_editor_bindings","undo",string(o.key_undo))
                                        ini_write_string("keyboard_editor_bindings","redo",string(o.key_redo))
                                        //Joystick Modern Bindings (Player Mode)
                                        ini_write_string("joystick_modern_editor_bindings","move_left",string(o.joy_move_left))
                                        ini_write_string("joystick_modern_editor_bindings","move_right",string(o.joy_move_right))
                                        ini_write_string("joystick_modern_editor_bindings","move_up",string(o.joy_move_up))
                                        ini_write_string("joystick_modern_editor_bindings","move_down",string(o.joy_move_down))
                                        ini_write_string("joystick_modern_editor_bindings","mode",string(o.joy_mode))
                                        ini_write_string("joystick_modern_editor_bindings","delete",string(o.joy_delete))
                                        ini_write_string("joystick_modern_editor_bindings","put_here",string(o.joy_put_here))
                                        ini_write_string("joystick_modern_editor_bindings","copy",string(o.joy_copy))
                                        ini_write_string("joystick_modern_editor_bindings","layer_up",string(o.joy_layer_up))
                                        ini_write_string("joystick_modern_editor_bindings","layer_down",string(o.joy_layer_down))
                                        ini_write_string("joystick_modern_editor_bindings","snap_up",string(o.joy_snap_up))
                                        ini_write_string("joystick_modern_editor_bindings","zoom",string(o.joy_zoom))
                                        ini_write_string("joystick_modern_editor_bindings","pause",string(o.joy_pause))
                                        ini_write_string("joystick_modern_editor_bindings","new_tile",string(o.joy_new_tile))
                                        ini_write_string("joystick_modern_editor_bindings","undo",string(o.joy_undo))
                                        ini_write_string("joystick_modern_editor_bindings","redo",string(o.joy_redo))
                                        //Close INI Configuration File
                                        ini_close_ns();
                                        saving_prompt = 120
                                        break;
                                    }
                            }
                        //If this is the start of the input polling stage, lower opacity of other buttons
                        if title_joy_poll = 0 and title_scroll &gt; 0 and title_scroll &lt; 17
                            {
                                title_ed_alpha_0  = 0.4
                                title_ed_alpha_1  = 0.4
                                title_ed_alpha_2  = 0.4
                                title_ed_alpha_3  = 0.4
                                title_ed_alpha_4  = 0.4
                                title_ed_alpha_5  = 0.4
                                title_ed_alpha_6  = 0.4
                                title_ed_alpha_7  = 0.4
                                title_ed_alpha_8  = 0.4
                                title_ed_alpha_9  = 0.4
                                title_ed_alpha_10 = 0.4
                                title_ed_alpha_11 = 0.4
                                title_ed_alpha_12 = 0.4
                                title_ed_alpha_13 = 0.4
                                title_ed_alpha_14 = 0.4
                                title_ed_alpha_15 = 0.4
                                //Modify the alpha transparency of only the selected item
                                switch(title_scroll)
                                    {
                                        case 1:  {title_ed_alpha_0  = 0.9; break;}
                                        case 2:  {title_ed_alpha_1  = 0.9; break;}
                                        case 3:  {title_ed_alpha_2  = 0.9; break;}
                                        case 4:  {title_ed_alpha_3  = 0.9; break;}
                                        case 5:  {title_ed_alpha_4  = 0.9; break;}
                                        case 6:  {title_ed_alpha_5  = 0.9; break;}
                                        case 7:  {title_ed_alpha_6  = 0.9; break;}
                                        case 8:  {title_ed_alpha_7  = 0.9; break;}
                                        case 9:  {title_ed_alpha_8  = 0.9; break;}
                                        case 10: {title_ed_alpha_9  = 0.9; break;}
                                        case 11: {title_ed_alpha_10 = 0.9; break;}
                                        case 12: {title_ed_alpha_11 = 0.9; break;}
                                        case 13: {title_ed_alpha_12 = 0.9; break;}
                                        case 14: {title_ed_alpha_13 = 0.9; break;}
                                        case 15: {title_ed_alpha_14 = 0.9; break;}
                                        case 16: {title_ed_alpha_15 = 0.9; break;}
                                    }
                                //Iterate input polling stage
                                title_joy_poll = 1
                                //Set poll timer
                                title_joy_polltimer = 8
                            }
                    }
                break;
            }
    }

//Do not allow the menu's pages to scroll beyond the controls menu
if title_scroll_page &gt; 4
    {
        title_scroll_page = 4
        title_scroll_timer = 0
        title_scroll_active = 0
    }
//Do not allow the menu's pages to scroll beyond the title screen's menu
if title_scroll_page &lt; 0
    {
        title_scroll_page = 0
        title_scroll_timer = 0
        title_scroll_active = 0
    }
//Scroll through menus based on provided paramters
switch(title_scroll_active)
    {
        case 1: {title_scroll_x += 36.4375; title_scroll_timer -= 1; break;}
        case 2: {title_scroll_x -= 36.4375; title_scroll_timer -= 1; break;}
    }
//Disable scrolling once the timer has ended
if title_scroll_timer &lt;= 0
    {
        title_scroll_active = 0
        title_scroll_timer  = 0
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop Title Screen Music and Play Aqua Surface
audio_stop_sound(ost_title_screen_stringtunes)

if title_room_goto = rm_editor
    {
        audio_play_sound(ost_titlescreen_aqua_surface_woofle,50,true)
        
        //Adjust Current Song's Volume
        if o.music_mute = 0 scr_adjust_music_silent(o.music_volume/100,1000);
        else scr_adjust_music_silent(0,1000);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Saving Prompt
if saving_prompt &gt; 0
    {
        draw_set_font(o.menu_font)
        draw_set_halign(fa_right)
        draw_text(424,222,lang_gui[lang_select,58])
        draw_set_halign(fa_left)
        saving_prompt -= 1
    }
//Draw Saving Default Controls Prompt
if saving_defaults_prompt &gt; 0
    {
        draw_set_font(o.menu_font)
        draw_set_halign(fa_right)
        draw_text(424,222,lang_gui[lang_select,59])
        draw_set_halign(fa_left)
        saving_defaults_prompt -= 1
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Title Screen Menu

//Set Font For The Menu
draw_set_font(o.menu_font);
draw_set_color(c_white);

//Animate Background
switch(floor(title_bg_current))
    {
        case 0: {background_index[3] = mu_bg_10; break;}
        case 1: {background_index[3] = mu_bg_11; break;}
        case 2: {background_index[3] = mu_bg_12; break;}
    }

draw_sprite(spr_coffee_particles,title_coffee_frame,121,170)
draw_sprite(ui_savvy_eyes,title_savvy_eyes_frame,102,172)

//------------------Page 1------------------//
//------------------------------------------//

if title_scroll_page &lt; 2
    {
        if title_campaign_menu = 0
            {
                draw_text(title_scroll_x+title_item_shake[0],132+title_item_shake_y[0],lang_gui[o.user_language_mode,0])
                draw_text(title_scroll_x+title_item_shake[1],152+title_item_shake_y[1],lang_gui[o.user_language_mode,1])
                draw_text(title_scroll_x+title_item_shake[2],172+title_item_shake_y[2],lang_gui[o.user_language_mode,2])
                draw_text(title_scroll_x+title_item_shake[3],192+title_item_shake_y[3],lang_gui[o.user_language_mode,3])
                draw_text(title_scroll_x+title_item_shake[4],212+title_item_shake_y[4],lang_gui[o.user_language_mode,4])
                draw_background(ui_title_screen,title_scroll_x-113,2)
                if title_scroll_page = 0
                    {
                        switch(title_scroll)
                            {
                                case 0: {title_position = 134; break;}
                                case 1: {title_position = 154; break;}
                                case 2: {title_position = 174; break;}
                                case 3: {title_position = 194; break;}
                                case 4: {title_position = 214; break;}
                            }
                        draw_sprite(spr_pause_menu_3,title_animation,title_scroll_x-30-title_item_shake[title_item_shake_cur],title_position-title_item_shake_y[title_item_shake_cur])
                    }
            }
        if title_campaign_menu &gt; 0
            {
                //Draw a more easily-manipulated duplicate of the "main menu"
                draw_text(title_main_menu_x,132,lang_gui[o.user_language_mode,0])
                draw_text(title_main_menu_x,152,lang_gui[o.user_language_mode,1])
                draw_text(title_main_menu_x,172,lang_gui[o.user_language_mode,2])
                draw_text(title_main_menu_x,192,lang_gui[o.user_language_mode,3])
                draw_text(title_main_menu_x,212,lang_gui[o.user_language_mode,4])
                draw_sprite(ui_title_screen_academy,0,title_scroll_x-113,2)
                if title_scroll_page = 0
                    {
                        switch(title_scroll)
                            {
                                case 0: {title_position = 134; break;}
                                case 1: {title_position = 154; break;}
                                case 2: {title_position = 174; break;}
                                case 3: {title_position = 194; break;}
                                case 4: {title_position = 214; break;}
                            }                    
                        draw_sprite(spr_pause_menu_3,title_animation,title_main_menu_x-30,title_position)
                    }
                //Draw campaign menu
                draw_text(title_campaign_x+title_item_shake[0],132+title_item_shake_y[0],lang_gui[o.user_language_mode,5])
                draw_text(title_campaign_x+title_item_shake[1],152+title_item_shake_y[1],lang_gui[o.user_language_mode,6])
                draw_text(title_campaign_x+title_item_shake[2],172+title_item_shake_y[2],lang_gui[o.user_language_mode,7])
                draw_text(title_campaign_x+title_item_shake[3],192+title_item_shake_y[3],lang_gui[o.user_language_mode,8])
                if title_scroll_page = 0
                    {
                        switch(title_scroll)
                            {
                                case 0: {title_position = 134; break;}
                                case 1: {title_position = 154; break;}
                                case 2: {title_position = 174; break;}
                                case 3: {title_position = 194; break;}
                            }                    
                        draw_sprite(spr_pause_menu_3,title_animation,title_campaign_x-30,title_position)
                    }
            }
        draw_set_font(o.version_number_font);
        draw_set_color(c_white);
        draw_set_halign(fa_right)
        draw_text(internal_res_width-4,internal_res_height-22,o.version_string)
        draw_background(ui_copyright,internal_res_width-157,internal_res_height-12)
        draw_set_font(o.menu_font);
        draw_set_color(c_white);
        draw_set_halign(fa_left)
    }

//------------------Page 2------------------//
//------------------------------------------//

//draw_background(ui_options,title_scroll_x+internal_resolution[0]+173,6)
draw_set_font(o.stage_title_font);
draw_set_color(c_white)
draw_set_halign(fa_middle)
draw_text(title_scroll_x+internal_resolution[0]+213,6,lang_gui[o.user_language_mode,3])

draw_set_font(o.menu_font);
draw_set_halign(fa_left)
draw_set_color(c_white);
//Window Scaling
draw_background(ui_window_scale,title_scroll_x+internal_resolution[0]+46+title_item_shake[3],47+title_item_shake_y[3])
draw_text(title_scroll_x+internal_resolution[0]+66+title_item_shake[3],48+title_item_shake_y[3],lang_gui[o.user_language_mode,9])
//Shaders
draw_background(ui_shaders,title_scroll_x+internal_resolution[0]+46+title_item_shake[4],72+title_item_shake_y[4])
draw_text(title_scroll_x+internal_resolution[0]+66+title_item_shake[4],73+title_item_shake_y[4],lang_gui[o.user_language_mode,10])
//Music Volume
draw_background(ui_music_volume,title_scroll_x+internal_resolution[0]+45+title_item_shake[5],97+title_item_shake_y[5])
draw_text(title_scroll_x+internal_resolution[0]+65+title_item_shake[5],98+title_item_shake_y[5],lang_gui[o.user_language_mode,11])
//Sound Volume
draw_background(ui_sound_volume,title_scroll_x+internal_resolution[0]+46+title_item_shake[6],122+title_item_shake_y[6])
draw_text(title_scroll_x+internal_resolution[0]+65+title_item_shake[6],122+title_item_shake_y[6],lang_gui[o.user_language_mode,12])
//Control Settings Menu
draw_background(ui_joypad,title_scroll_x+internal_resolution[0]+45+title_item_shake[7],144+title_item_shake_y[7])
draw_text(title_scroll_x+internal_resolution[0]+65+title_item_shake[7],145+title_item_shake_y[7],lang_gui[o.user_language_mode,13])
//Language
draw_background(ui_joypad_editor,title_scroll_x+internal_resolution[0]+45+title_item_shake[8],168+title_item_shake_y[8])
draw_text(title_scroll_x+internal_resolution[0]+65+title_item_shake[8],169+title_item_shake_y[8],lang_gui[o.user_language_mode,14])
//Gameplay Settings
draw_background(ui_gameplay_setttings,title_scroll_x+internal_resolution[0]+47+title_item_shake[9],192+title_item_shake_y[9])
draw_text(title_scroll_x+internal_resolution[0]+65+title_item_shake[9],192+title_item_shake_y[9],lang_gui[o.user_language_mode,15])

draw_set_halign(fa_middle)
//Okay
draw_text(title_scroll_x+internal_resolution[0]+221+title_item_shake[10],217+title_item_shake_y[10],lang_gui[o.user_language_mode,16])

//Reset Text Rendering
draw_set_halign(fa_left)
//Window Scaling
switch(o.view_scale_x)
    {
        case 426:  {draw_text(title_scroll_x+internal_resolution[0]+352,46,"1"); break;}
        case 852:  {draw_text(title_scroll_x+internal_resolution[0]+352,46,"2"); break;}
        case 1278: {draw_text(title_scroll_x+internal_resolution[0]+352,46,"3"); break;}
    }
draw_text(title_scroll_x+internal_resolution[0]+365,47,"x")
//Language
draw_set_font(o.text_font_academy)
draw_set_color(c_white)
draw_text(title_scroll_x+internal_resolution[0]+8,224,lang_gui[o.user_language_mode,60])

draw_set_font(o.menu_font)
draw_set_color(c_white)

//Set Text To Render To The Right
draw_set_halign(fa_right)
//Shaders
switch(o.enable_shaders)
    {
        case 0: {draw_text(title_scroll_x+internal_resolution[0]+380,73,lang_gui[o.user_language_mode,17]) break;}
        case 1: {draw_text(title_scroll_x+internal_resolution[0]+380,73,lang_gui[o.user_language_mode,18]) break;}
    }
//Draw Volume Percentage
draw_text(title_scroll_x+internal_resolution[0]+380,96,string_format(string(o.music_volume),2,0)+"%")
draw_text(title_scroll_x+internal_resolution[0]+380,120,string_format(string(o.game_sound_volume),2,0)+"%")

//Language
draw_set_halign(fa_middle)
switch(o.user_language_mode)
    {
        case 0: {draw_text(title_scroll_x+internal_resolution[0]+364,169,"US-EN") break;}
        case 1: {draw_text(title_scroll_x+internal_resolution[0]+364,169,"BR-PT") break;}
        case 2: {draw_text(title_scroll_x+internal_resolution[0]+364,169,"PL-PL") break;}
        case 3: {draw_text(title_scroll_x+internal_resolution[0]+364,169,"ES-ES") break;}
        case 4: {draw_text(title_scroll_x+internal_resolution[0]+364,169,"DE-DE") break;}
        case 5: {draw_text(title_scroll_x+internal_resolution[0]+364,169,"RU-RU") break;}
    }
//Draw Sensitivity Percentage
//draw_text(title_scroll_x+internal_resolution[0]+364,191,string(string_format(o.deadzone_mod*100,2,0))+"%")
//Reset Text Rendering
draw_set_halign(fa_left)
//Draw Cursor
if title_scroll_page = 1
    {
        switch(title_scroll)
            {
                case 0: {title_position = 49;  title_offset_x = 0;   break;}
                case 1: {title_position = 74;  title_offset_x = 0;   break;}
                case 2: {title_position = 99;  title_offset_x = 0;   break;}
                case 3: {title_position = 123; title_offset_x = 0;   break;}
                case 4: {title_position = 147; title_offset_x = 0;   break;}
                case 5: {title_position = 170; title_offset_x = 0;   break;}
                case 6: {title_position = 194; title_offset_x = 0;   break;}
                case 7:
                    {
                        title_position = 219;
                        title_offset_x = 143;
                        if o.user_language_mode = 1 title_offset_x = 124;
                        break;
                    }
            }
        draw_sprite(spr_pause_menu_3,title_animation,title_scroll_x+internal_resolution[0]+15+title_offset_x-title_item_shake[title_item_shake_cur],title_position-title_item_shake_y[title_item_shake_cur])
    }

//------------------Page 3------------------//
//------------------------------------------//

if title_scroll_page &gt; 0 and title_scroll_page &lt; 4 
    {
        var ui_title_type = ui_digital_analog;
        if title_type = 0 ui_title_type = ui_keys_text;
        if title_type = 2 ui_title_type = ui_mouse_buttons_text;
        draw_background(ui_title_type,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+229,32)
        //Type
        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+109+title_item_shake[11],12+title_item_shake_y[11],lang_gui[o.user_language_mode,61])
        //Background
        draw_background_ext(ui_controller_settings_bg_play_analog_mode,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+101,40,1,1,0,c_white,title_bg_alpha_0)
        draw_background_ext(ui_controller_settings_bg_play_analog_mode,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+101,60,1,1,0,c_white,title_bg_alpha_1)
        draw_background_ext(ui_controller_settings_bg_play_analog_mode,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+101,80,1,1,0,c_white,title_bg_alpha_2)
        draw_background_ext(ui_controller_settings_bg_play_analog_mode,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+101,100,1,1,0,c_white,title_bg_alpha_3)
        draw_background_ext(ui_controller_settings_bg_play_analog_mode,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+101,120,1,1,0,c_white,title_bg_alpha_4)
        draw_background_ext(ui_controller_settings_bg_play_analog_mode,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+101,140,1,1,0,c_white,title_bg_alpha_5)
        draw_background_ext(ui_controller_settings_bg_play_analog_mode,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+101,160,1,1,0,c_white,title_bg_alpha_6)
        draw_background_ext(ui_controller_settings_bg_play_analog_mode,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+101,180,1,1,0,c_white,title_bg_alpha_7)
        draw_background_ext(ui_controller_settings_bg_play_analog_mode,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+101,200,1,1,0,c_white,title_bg_alpha_8)
        //Set Font
        draw_set_font(o.text_font_academy)
        draw_set_color(c_white);
        //Press ESC to cancel changes
        if title_joy_poll = 0 draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+158,224,lang_gui[o.user_language_mode,19]);
        //Set Text To Render To The Center
        draw_set_halign(fa_center)
        //Draw different icons based on selected input device
        switch(title_type)
            {
                //Keyboard
                case 0:
                    {
                        //Keyboard
                        draw_background(ui_keyboard_play_mode,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+166,6)
                        //Gamepad
                        draw_background(ui_gamepad_play_mode_darkened,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+214,6)
                        //Mouse
                        draw_background(ui_mouse_play_mode_darkened,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+264,2)
                        //Keyboard Text
                        draw_background(ui_keyboard_text,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+114,32)
                        
                        //Up Button
                        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+247,44,string(o.key_up_s))
                        //Down Button
                        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+247,64,string(o.key_down_s))
                        //Left Button
                        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+247,84,string(o.key_left_s))
                        //Right Button
                        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+247,104,string(o.key_right_s))
                        //A Button
                        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+247,124,string(o.key_a_s))
                        //B Button
                        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+247,144,string(o.key_b_s))
                        //C Button
                        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+247,164,string(o.key_c_s))
                        //D Button
                        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+247,184,string(o.key_d_s))
                        //Start Button
                        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+247,204,string(o.key_start_s))
                        break;
                    }
                //Gamepad
                case 1:
                    {
                        //Keyboard
                        draw_background(ui_keyboard_play_mode_darkened,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+166,6)
                        //Gamepad
                        draw_background(ui_gamepad_play_mode,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+214,6)
                        //Mouse
                        draw_background(ui_mouse_play_mode_darkened,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+264,2)
                        //Gamepad Text
                        draw_background(ui_gamepad_text,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+118,32)

                        //Up Button
                        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+247,44,o.joy_up_mod_s)
                        //Down Button
                        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+247,64,o.joy_down_mod_s)
                        //Left Button
                        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+247,84,o.joy_left_mod_s)
                        //Right Button
                        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+247,104,o.joy_right_mod_s)
                        //A Button
                        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+247,124,o.joy_a_mod_s)
                        //B Button
                        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+247,144,o.joy_b_mod_s)
                        //C Button
                        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+247,164,o.joy_c_mod_s)
                        //D Button
                        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+247,184,o.joy_d_mod_s)
                        //Start Button
                        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+247,204,o.joy_start_mod_s)

                        //Analog Stick Buttons

                        //Left Stick - Left
                        draw_sprite(ui_gampad_analog_sticks,3,title_scroll_x+internal_resolution[0]+internal_resolution[0]+150+325,scr_get_hotkey(o.left_stick_left))
                        //Left Stick - Right
                        draw_sprite(ui_gampad_analog_sticks,1,title_scroll_x+internal_resolution[0]+internal_resolution[0]+150+325,scr_get_hotkey(o.left_stick_right))
                        //Left Stick - Up
                        draw_sprite(ui_gampad_analog_sticks,0,title_scroll_x+internal_resolution[0]+internal_resolution[0]+150+325,scr_get_hotkey(o.left_stick_up))
                        //Left Stick - Down
                        draw_sprite(ui_gampad_analog_sticks,2,title_scroll_x+internal_resolution[0]+internal_resolution[0]+150+325,scr_get_hotkey(o.left_stick_down))
                        //Right Stick - Left
                        draw_sprite(ui_gampad_analog_sticks,7,title_scroll_x+internal_resolution[0]+internal_resolution[0]+150+325,scr_get_hotkey(o.right_stick_left))
                        //Right Stick - Right
                        draw_sprite(ui_gampad_analog_sticks,5,title_scroll_x+internal_resolution[0]+internal_resolution[0]+150+325,scr_get_hotkey(o.right_stick_right))
                        //Right Stick - Up
                        draw_sprite(ui_gampad_analog_sticks,4,title_scroll_x+internal_resolution[0]+internal_resolution[0]+150+325,scr_get_hotkey(o.right_stick_up))
                        //Right Stick - Down
                        draw_sprite(ui_gampad_analog_sticks,6,title_scroll_x+internal_resolution[0]+internal_resolution[0]+150+325,scr_get_hotkey(o.right_stick_down))
                        break;
                    }
                //Mouse
                case 2:
                    {
                        //Keyboard
                        draw_background(ui_keyboard_play_mode_darkened,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+166,6)
                        //Gamepad
                        draw_background(ui_gamepad_play_mode_darkened,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+214,6)
                        //Mouse
                        draw_background(ui_mouse_play_mode,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+264,2)
                        //Mouse Text
                        draw_background(ui_mouse_text,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+114,32)
                        
                        //Up Button
                        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+247,44,lang_gui[o.user_language_mode,20])
                        //Down Button
                        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+247,64,lang_gui[o.user_language_mode,21])
                        //Left Button
                        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+247,84,lang_gui[o.user_language_mode,22])
                        //Right Button
                        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+247,104,lang_gui[o.user_language_mode,23])
                        //A Button
                        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+247,124,scr_get_mouse_button(o.mouse_left))
                        //B Button
                        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+247,144,scr_get_mouse_button(o.mouse_right))
                        //C Button
                        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+247,164,scr_get_mouse_button(o.mouse_middle))
                        //D Button
                        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+247,184,scr_get_mouse_button(o.mouse_scroll_up))
                        //Start Button
                        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+247,204,scr_get_mouse_button(o.mouse_scroll_down))

                        //Deadzone Up
                        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+325,44,string(o.mouse_deadzone_up)+"%")
                        //Deadzone Down
                        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+325,64,string(o.mouse_deadzone_down)+"%")
                        //Deadzone Left
                        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+325,84,string(o.mouse_deadzone_left)+"%")
                        //Deadzone Right
                        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+325,104,string(o.mouse_deadzone_right)+"%")

                        //Left Mouse Button
                        draw_sprite(ui_mouse_buttons,o.mouse_left,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+318,124)
                        //Right Mouse Button
                        draw_sprite(ui_mouse_buttons,o.mouse_right,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+318,144)
                        //Middle Mouse Button
                        draw_sprite(ui_mouse_buttons,o.mouse_middle,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+318,164)
                        //Scroll Wheel Up
                        draw_sprite(ui_mouse_buttons,o.mouse_scroll_up,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+318,184)
                        //Scroll Wheel Down
                        draw_sprite(ui_mouse_buttons,o.mouse_scroll_down,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+318,204)
                        break;
                    }
            }
        //Reset Text Rendering
        draw_set_halign(fa_middle)
        //Up Button
        draw_background(ui_gamepad_button_up,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+85,42)
        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+140,44,lang_gui[o.user_language_mode,24])
        //Down Button
        draw_background(ui_gamepad_button_down,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+85,62)
        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+140,64,lang_gui[o.user_language_mode,25])
        //Left Button
        draw_background(ui_gamepad_button_left,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+85,82)
        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+140,84,lang_gui[o.user_language_mode,26])
        //Right Button
        draw_background(ui_gamepad_button_right,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+85,102)
        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+140,104,lang_gui[o.user_language_mode,27])
        //A Button
        draw_background(ui_gamepad_button_a,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+85,122)
        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+140,124,lang_gui[o.user_language_mode,28])
        //B Button
        draw_background(ui_gamepad_button_b,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+85,142)
        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+140,144,lang_gui[o.user_language_mode,29])
        //C Button
        draw_background(ui_gamepad_button_c,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+85,162)
        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+140,164,lang_gui[o.user_language_mode,30])
        //D Button
        draw_background(ui_gamepad_button_y,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+85,182)
        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+140,184,lang_gui[o.user_language_mode,31])
        //Start Button
        draw_background(ui_gamepad_button_start,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+85,202)
        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+140,204,lang_gui[o.user_language_mode,32])
        
        draw_set_halign(fa_left)
        //Press ESC to cancel changes
        var title_joy_text_string = lang_gui[o.user_language_mode,33];
        //Press/Scroll Up or Down
        if (title_joy_poll = 5) or (title_scroll &lt;= 4 and title_type = 2 and title_joy_poll &gt; 0)
            title_joy_text_string = lang_gui[o.user_language_mode,34];
        if title_joy_poll &gt; 0 draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+158,224,title_joy_text_string);
        //Okay
        draw_set_font(o.menu_font);
        draw_set_color(c_white);
        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+189+title_item_shake[12],222+title_item_shake_y[12],lang_gui[o.user_language_mode,16])
        
        draw_set_halign(fa_right)
        draw_sprite(ui_title_screen_arrow,0,title_scroll_x+internal_resolution[0]+internal_resolution[0]+160+402,11)
        draw_text(title_scroll_x+internal_resolution[0]+internal_resolution[0]+160+400,11,lang_gui[o.user_language_mode,1])
        draw_set_halign(fa_left)

        //Draw Cursor
        if title_scroll_page = 2
            {
                draw_sprite(spr_pause_menu_3,title_animation,title_scroll_x+internal_resolution[0]+internal_resolution[0]+157+title_offset_x-title_item_shake[title_item_shake_cur],title_position-title_item_shake_y[title_item_shake_cur])
                switch(title_scroll)
                    {
                        case 0: {title_position = 15;  title_offset_x = 78;  break;}
                        case 1: {title_position = 45;  title_offset_x = 186; break;}
                        case 2: {title_position = 65;  title_offset_x = 186; break;}
                        case 3: {title_position = 85;  title_offset_x = 186; break;}
                        case 4: {title_position = 105; title_offset_x = 186; break;}
                        case 5: {title_position = 125; title_offset_x = 186; break;}
                        case 6: {title_position = 145; title_offset_x = 186; break;}
                        case 7: {title_position = 165; title_offset_x = 186; break;}
                        case 8: {title_position = 185; title_offset_x = 186; break;}
                        case 9: {title_position = 205; title_offset_x = 186; break;}
                        case 10: {title_position = 225; title_offset_x = 159; break;}
                    }
            }
    }

//------------------Page 4------------------//
//------------------------------------------//

if title_scroll_page &gt;= 1
    {
        //Type
        draw_text(title_scroll_x+internal_resolution[0]*4-3+(32)+title_item_shake[13],12+title_item_shake_y[13],lang_gui[o.user_language_mode,61])
        //Background
        draw_background_ext(ui_controller_settings_bg_edit_mode,title_scroll_x+internal_resolution[0]*4-80,40,1,1,0,c_white,title_ed_alpha_0)
        draw_background_ext(ui_controller_settings_bg_edit_mode,title_scroll_x+internal_resolution[0]*4-80,60,1,1,0,c_white,title_ed_alpha_1)
        draw_background_ext(ui_controller_settings_bg_edit_mode,title_scroll_x+internal_resolution[0]*4-80,80,1,1,0,c_white,title_ed_alpha_2)
        draw_background_ext(ui_controller_settings_bg_edit_mode,title_scroll_x+internal_resolution[0]*4-80,100,1,1,0,c_white,title_ed_alpha_3)
        draw_background_ext(ui_controller_settings_bg_edit_mode,title_scroll_x+internal_resolution[0]*4-80,120,1,1,0,c_white,title_ed_alpha_4)
        draw_background_ext(ui_controller_settings_bg_edit_mode,title_scroll_x+internal_resolution[0]*4-80,140,1,1,0,c_white,title_ed_alpha_5)
        draw_background_ext(ui_controller_settings_bg_edit_mode,title_scroll_x+internal_resolution[0]*4-80,160,1,1,0,c_white,title_ed_alpha_6)
        draw_background_ext(ui_controller_settings_bg_edit_mode,title_scroll_x+internal_resolution[0]*4-80,180,1,1,0,c_white,title_ed_alpha_7)
        draw_background_ext(ui_controller_settings_bg_edit_mode,title_scroll_x+internal_resolution[0]*4+117,40,1,1,0,c_white,title_ed_alpha_8)
        draw_background_ext(ui_controller_settings_bg_edit_mode,title_scroll_x+internal_resolution[0]*4+117,60,1,1,0,c_white,title_ed_alpha_9)
        draw_background_ext(ui_controller_settings_bg_edit_mode,title_scroll_x+internal_resolution[0]*4+117,80,1,1,0,c_white,title_ed_alpha_10)
        draw_background_ext(ui_controller_settings_bg_edit_mode,title_scroll_x+internal_resolution[0]*4+117,100,1,1,0,c_white,title_ed_alpha_11)
        draw_background_ext(ui_controller_settings_bg_edit_mode,title_scroll_x+internal_resolution[0]*4+117,120,1,1,0,c_white,title_ed_alpha_12)
        draw_background_ext(ui_controller_settings_bg_edit_mode,title_scroll_x+internal_resolution[0]*4+117,140,1,1,0,c_white,title_ed_alpha_13)
        draw_background_ext(ui_controller_settings_bg_edit_mode,title_scroll_x+internal_resolution[0]*4+117,160,1,1,0,c_white,title_ed_alpha_14)
        draw_background_ext(ui_controller_settings_bg_edit_mode,title_scroll_x+internal_resolution[0]*4+117,180,1,1,0,c_white,title_ed_alpha_15)
        //Set Font
        draw_set_font(o.menu_font)
        draw_set_color(c_white)

        draw_set_halign(fa_left)
        draw_sprite(ui_title_screen_arrow,1,title_scroll_x+(internal_resolution[0]*4)-109+8,11)
        draw_text(title_scroll_x+(internal_resolution[0]*4)-109+25,11,lang_gui[o.user_language_mode,0])

        draw_set_font(o.text_font_academy)
        draw_set_color(c_white)
        draw_set_halign(fa_center)
        //Draw different icons based on selected input device
        switch(title_type)
            {
                //Keyboard
                case 0:
                    {
                        //Keyboard
                        draw_background(ui_keyboard_play_mode,title_scroll_x+internal_resolution[0]*4+117,4)
                        //Gamepad
                        draw_background(ui_gamepad_play_mode_darkened,title_scroll_x+internal_resolution[0]*4+184,4)
                        
                        //Up Button
                        draw_text(title_scroll_x+internal_resolution[0]*4+56,44,string(o.key_move_up_s))
                        //Down Button
                        draw_text(title_scroll_x+internal_resolution[0]*4+56,64,string(o.key_move_down_s))
                        //Left Button
                        draw_text(title_scroll_x+internal_resolution[0]*4+56,84,string(o.key_move_left_s))
                        //Right Button
                        draw_text(title_scroll_x+internal_resolution[0]*4+56,104,string(o.key_move_right_s))
                        //Move Button
                        draw_text(title_scroll_x+internal_resolution[0]*4+56,124,string(o.key_put_here_s))
                        //Delete Button
                        draw_text(title_scroll_x+internal_resolution[0]*4+56,144,string(o.key_copy_s))
                        //Place Button
                        draw_text(title_scroll_x+internal_resolution[0]*4+56,164,string(o.key_delete_s))
                        //Copy Button
                        draw_text(title_scroll_x+internal_resolution[0]*4+56,184,string(o.key_new_tile_s))

                        //Undo
                        draw_text(title_scroll_x+internal_resolution[0]*4+253,44,o.key_undo_s)
                        //Redo
                        draw_text(title_scroll_x+internal_resolution[0]*4+253,64,o.key_redo_s)
                        //New Tile Button
                        draw_text(title_scroll_x+internal_resolution[0]*4+253,84,string(o.key_mode_s))
                        //Pause Button
                        draw_text(title_scroll_x+internal_resolution[0]*4+253,104,string(o.key_pause_s))
                        //Layer Up Button
                        draw_text(title_scroll_x+internal_resolution[0]*4+253,124,string(o.key_layer_up_s))
                        //Layer Down Button
                        draw_text(title_scroll_x+internal_resolution[0]*4+253,144,string(o.key_layer_down_s))
                        //Snap Up Button
                        draw_text(title_scroll_x+internal_resolution[0]*4+253,164,string(o.key_snap_up_s))
                        //Snap Down Button
                        draw_text(title_scroll_x+internal_resolution[0]*4+253,184,string(o.key_zoom_s))
                        break;
                    }
                //Gamepad
                case 1:
                    {
                        //Keyboard
                        draw_background(ui_keyboard_play_mode_darkened,title_scroll_x+internal_resolution[0]*4+117,4)
                        //Gamepad
                        draw_background(ui_gamepad_play_mode,title_scroll_x+internal_resolution[0]*4+184,4)

                        //Up Button
                        draw_text(title_scroll_x+internal_resolution[0]*4+56,44,o.joy_move_up_s)
                        //Down Button
                        draw_text(title_scroll_x+internal_resolution[0]*4+56,64,o.joy_move_down_s)
                        //Left Button
                        draw_text(title_scroll_x+internal_resolution[0]*4+56,84,o.joy_move_left_s)
                        //Right Button
                        draw_text(title_scroll_x+internal_resolution[0]*4+56,104,o.joy_move_right_s)
                        //Move Button
                        draw_text(title_scroll_x+internal_resolution[0]*4+56,124,o.joy_put_here_s)
                        //Delete Button
                        draw_text(title_scroll_x+internal_resolution[0]*4+56,144,o.joy_copy_s)
                        //Place Button
                        draw_text(title_scroll_x+internal_resolution[0]*4+56,164,o.joy_delete_s)
                        //Copy Button
                        draw_text(title_scroll_x+internal_resolution[0]*4+56,184,o.joy_new_tile_s)

                        //Undo
                        draw_text(title_scroll_x+internal_resolution[0]*4+253,44,o.joy_undo_s)
                        //Redo
                        draw_text(title_scroll_x+internal_resolution[0]*4+253,64,o.joy_redo_s)
                        //Mode Button
                        draw_text(title_scroll_x+internal_resolution[0]*4+253,84,o.joy_mode_s)
                        //Pause Button
                        draw_text(title_scroll_x+internal_resolution[0]*4+253,104,o.joy_pause_s)
                        //Layer Up Button
                        draw_text(title_scroll_x+internal_resolution[0]*4+253,124,o.joy_layer_up_s)
                        //Layer Down Button
                        draw_text(title_scroll_x+internal_resolution[0]*4+253,144,o.joy_layer_down_s)
                        //Snap Up Button
                        draw_text(title_scroll_x+internal_resolution[0]*4+253,164,o.joy_snap_up_s)
                        //Zoom Button
                        draw_text(title_scroll_x+internal_resolution[0]*4+253,184,o.joy_zoom_s)
                        break;
                    }
            }
        //Reset Text Rendering
        draw_set_halign(fa_left)
        //Up Button
        draw_background(ui_gamepad_button_up,title_scroll_x+internal_resolution[0]*4-96,42)
        draw_text(title_scroll_x+internal_resolution[0]*4-68,44,lang_gui[o.user_language_mode,24])
        //Down Button
        draw_background(ui_gamepad_button_down,title_scroll_x+internal_resolution[0]*4-96,62)
        draw_text(title_scroll_x+internal_resolution[0]*4-68,64,lang_gui[o.user_language_mode,25])
        //Left Button
        draw_background(ui_gamepad_button_left,title_scroll_x+internal_resolution[0]*4-96,82)
        draw_text(title_scroll_x+internal_resolution[0]*4-68,84,lang_gui[o.user_language_mode,26])
        //Right Button
        draw_background(ui_gamepad_button_right,title_scroll_x+internal_resolution[0]*4-96,102)
        draw_text(title_scroll_x+internal_resolution[0]*4-68,104,lang_gui[o.user_language_mode,27])
        //A Button
        draw_background(ui_gamepad_button_a,title_scroll_x+internal_resolution[0]*4-96,122)
        draw_text(title_scroll_x+internal_resolution[0]*4-68,124,lang_gui[o.user_language_mode,35])
        //B Button
        draw_background(ui_gamepad_button_b,title_scroll_x+internal_resolution[0]*4-96,142)
        draw_text(title_scroll_x+internal_resolution[0]*4-68,144,lang_gui[o.user_language_mode,36])
        //X Button
        draw_background(ui_gamepad_button_x,title_scroll_x+internal_resolution[0]*4-96,162)
        draw_text(title_scroll_x+internal_resolution[0]*4-68,164,lang_gui[o.user_language_mode,37])
        //Y Button
        draw_background(ui_gamepad_button_y,title_scroll_x+internal_resolution[0]*4-96,182)
        draw_text(title_scroll_x+internal_resolution[0]*4-68,184,lang_gui[o.user_language_mode,38])

        //Undo
        draw_background(ui_gamepad_x_axis,title_scroll_x+internal_resolution[0]*4+101,42)
        draw_text(title_scroll_x+internal_resolution[0]*4+126,44,lang_gui[o.user_language_mode,39])
        //Redo
        draw_background(ui_gamepad_y_axis,title_scroll_x+internal_resolution[0]*4+101,62)
        draw_text(title_scroll_x+internal_resolution[0]*4+126,64,lang_gui[o.user_language_mode,40])
        //Select Button
        draw_background(ui_gamepad_button_select,title_scroll_x+internal_resolution[0]*4+101,82)
        draw_text(title_scroll_x+internal_resolution[0]*4+120,84,lang_gui[o.user_language_mode,41])
        //Start Button
        draw_background(ui_gamepad_button_start,title_scroll_x+internal_resolution[0]*4+101,102)
        draw_text(title_scroll_x+internal_resolution[0]*4+126,104,lang_gui[o.user_language_mode,42])

        var lang_offsets = 0;
        if o.user_language_mode = 1 lang_offsets = 16;
        //LB Button
        draw_background(ui_gamepad_button_lb,title_scroll_x+internal_resolution[0]*4+101,122)
        draw_text(title_scroll_x+internal_resolution[0]*4+122,124,lang_gui[o.user_language_mode,43])
        draw_background(ui_gamepad_button_up,title_scroll_x+internal_resolution[0]*4+(162+lang_offsets),122)
        //RB Button
        draw_background(ui_gamepad_button_rb,title_scroll_x+internal_resolution[0]*4+101,142)
        draw_text(title_scroll_x+internal_resolution[0]*4+122,144,lang_gui[o.user_language_mode,43])
        draw_background(ui_gamepad_button_down,title_scroll_x+internal_resolution[0]*4+(162+lang_offsets),142)
        //LT Button
        draw_background(ui_gamepad_button_lt,title_scroll_x+internal_resolution[0]*4+101,162)
        draw_text(title_scroll_x+internal_resolution[0]*4+128,164,lang_gui[o.user_language_mode,44])
        //RT Button
        draw_background(ui_gamepad_button_rt,title_scroll_x+internal_resolution[0]*4+101,182)
        draw_text(title_scroll_x+internal_resolution[0]*4+128,184,lang_gui[o.user_language_mode,45])
        //Okay
        draw_set_font(o.menu_font);
        draw_set_color(c_white);
        draw_text(title_scroll_x+internal_resolution[0]*4+69+title_item_shake[14],209+title_item_shake_y[14],lang_gui[o.user_language_mode,16])
        if title_scroll_page = 3
            {
                draw_sprite(spr_pause_menu_3,title_animation,title_scroll_x+internal_resolution[0]*4-111+title_offset_x-title_item_shake[title_item_shake_cur],title_position-title_item_shake[title_item_shake_cur])
                switch(title_scroll)
                    {
                        case 0: {title_position  = 15;  title_offset_x = 113;  break;}
                        case 1: {title_position  = 45;  title_offset_x = 98;  break;}
                        case 2: {title_position  = 65;  title_offset_x = 98;  break;}
                        case 3: {title_position  = 85;  title_offset_x = 98;  break;}
                        case 4: {title_position  = 105; title_offset_x = 98;  break;}
                        case 5: {title_position  = 125; title_offset_x = 98;  break;}
                        case 6: {title_position  = 145; title_offset_x = 98;  break;}
                        case 7: {title_position  = 165; title_offset_x = 98;  break;}
                        case 8: {title_position  = 185; title_offset_x = 98;  break;}
                        case 9: {title_position  = 45;  title_offset_x = 295; break;}
                        case 10: {title_position = 65;  title_offset_x = 295; break;}
                        case 11: {title_position = 85;  title_offset_x = 295; break;}
                        case 12: {title_position = 105; title_offset_x = 295; break;}
                        case 13: {title_position = 125; title_offset_x = 295; break;}
                        case 14: {title_position = 145; title_offset_x = 295; break;}
                        case 15: {title_position = 165; title_offset_x = 295; break;}
                        case 16: {title_position = 185; title_offset_x = 295; break;}
                        case 17: {title_position = 211; title_offset_x = 151; break;}
                    }
            }
    }

//------------------Page 5------------------//
//------------------------------------------//


if title_scroll_page = 1 or title_scroll_page = 4
    {
        var title_scroll_x_page_5 = title_scroll_x+(internal_resolution[0]*2)+157;

        draw_set_font(o.stage_title_font);
        draw_set_color(c_white)
        draw_set_halign(fa_middle)
        draw_text(title_scroll_x_page_5+213,6,lang_gui[o.user_language_mode,46])

        draw_set_font(o.menu_font);
        draw_set_halign(fa_left)
        draw_set_color(c_white);
        //Difficulty
        draw_background(ui_difficulty,title_scroll_x_page_5+46+title_item_shake[17],47+title_item_shake_y[17])
        draw_text(title_scroll_x_page_5+66+title_item_shake[17],48+title_item_shake_y[17],lang_gui[o.user_language_mode,47])
        //Camera Shake
        draw_background(ui_camera,title_scroll_x_page_5+46+title_item_shake[18],72+title_item_shake_y[18])
        draw_text(title_scroll_x_page_5+66+title_item_shake[18],73+title_item_shake_y[18],lang_gui[o.user_language_mode,48])
        //Camera Zoom
        draw_background(ui_zoom_camera,title_scroll_x_page_5+45+title_item_shake[19],97+title_item_shake_y[19])
        draw_text(title_scroll_x_page_5+65+title_item_shake[19],98+title_item_shake_y[19],lang_gui[o.user_language_mode,49])
        //Display Moveset
        draw_background(ui_moveset_display,title_scroll_x_page_5+46+title_item_shake[20],122+title_item_shake_y[20])
        draw_text(title_scroll_x_page_5+65+title_item_shake[20],122+title_item_shake_y[20],lang_gui[o.user_language_mode,50])
        //Display Enemy Health
        draw_background(ui_display_enemy_health,title_scroll_x_page_5+45+title_item_shake[21],144+title_item_shake_y[21])
        draw_text(title_scroll_x_page_5+65+title_item_shake[21],145+title_item_shake_y[21],lang_gui[o.user_language_mode,51])
        //Controller Deadzone
        draw_background(ui_gamepad_deadzone,title_scroll_x_page_5+47+title_item_shake[22],168+title_item_shake_y[22])
        draw_text(title_scroll_x_page_5+65+title_item_shake[22],169+title_item_shake_y[22],lang_gui[o.user_language_mode,52])
        //Freeze Frames
        draw_sprite(ui_title_screen_arrow,2,title_scroll_x_page_5+47+title_item_shake[23],191+title_item_shake_y[23])
        draw_text(title_scroll_x_page_5+65+title_item_shake[23],192+title_item_shake_y[23],lang_gui[o.user_language_mode,62])
        
        //Reset Text Rendering
        draw_set_halign(fa_middle)
        //Okay
        draw_text(title_scroll_x_page_5+221+title_item_shake[24],217+title_item_shake_y[24],lang_gui[o.user_language_mode,16])

        //Difficulty Scaling
        switch(o.user_enemy_level)
            {
                case 0:  {draw_text(title_scroll_x_page_5+366,46,lang_gui[o.user_language_mode,53]); break;}
                case 1:  {draw_text(title_scroll_x_page_5+366,46,lang_gui[o.user_language_mode,54]); break;}
                case 2:  {draw_text(title_scroll_x_page_5+366,46,lang_gui[o.user_language_mode,55]); break;}
                case 3:  {draw_text(title_scroll_x_page_5+366,46,lang_gui[o.user_language_mode,56]); break;}
                case 4:  {draw_text(title_scroll_x_page_5+366,46,lang_gui[o.user_language_mode,57]); break;}
            }
        //Camera Shake
        draw_text(title_scroll_x_page_5+366,71,string(o.user_camera_shake_intensity*100)+"%")
        //Draw Sensitivity Percentage
        draw_text(title_scroll_x_page_5+366,168,string(string_format(o.deadzone_mod*100,2,0))+"%")
        //Camera Zoom
        if o.user_disable_zoom_gimmick = 0
            draw_text(title_scroll_x_page_5+366,96,lang_gui[o.user_language_mode,17]);
        else
            draw_text(title_scroll_x_page_5+366,96,lang_gui[o.user_language_mode,18]);
        //Display Moveset
        if o.user_move_list_display = 0
            draw_text(title_scroll_x_page_5+366,122,lang_gui[o.user_language_mode,17]);
        else
            draw_text(title_scroll_x_page_5+366,122,lang_gui[o.user_language_mode,18]);
        //Display Enemy Health
        if o.user_enemy_health_display = 0
            draw_text(title_scroll_x_page_5+366,146,lang_gui[o.user_language_mode,17]);
        else
            draw_text(title_scroll_x_page_5+366,146,lang_gui[o.user_language_mode,18]);
        //Freeze Frames
        if o.user_freeze_frames = 0
            draw_text(title_scroll_x_page_5+366,192,lang_gui[o.user_language_mode,17]);
        else
            draw_text(title_scroll_x_page_5+366,192,lang_gui[o.user_language_mode,18]);

        draw_set_halign(fa_left)
        switch(title_scroll)
            {
                case 0: {title_position = 49;  title_offset_x = 0;   break;}
                case 1: {title_position = 74;  title_offset_x = 0;   break;}
                case 2: {title_position = 99;  title_offset_x = 0;   break;}
                case 3: {title_position = 123; title_offset_x = 0;   break;}
                case 4: {title_position = 147; title_offset_x = 0;   break;}
                case 5: {title_position = 170; title_offset_x = 0;   break;}
                case 6: {title_position = 194; title_offset_x = 0;   break;}
                case 7:
                    {
                        title_position = 219;
                        title_offset_x = 143;
                        if o.user_language_mode = 1 title_offset_x = 124;
                        break;
                    }
            }
        //Draw Cursor
        draw_sprite(spr_pause_menu_3,title_animation,title_scroll_x_page_5+15+title_offset_x-title_item_shake[title_item_shake_cur],title_position-title_item_shake_y[title_item_shake_cur])
    }

//============Fade To Or From Black============//

draw_sprite_ext(spr_transition,0,0,0,426,240,0,c_white,title_alpha)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
