<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bomb_flower_modifier</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_delete_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics and Animation Variables
frame = 0                           //Animation Frame
angle = 0                           //Angle of Rotation
heart = 12                          //Enemy Health
heartmax = 12                       //Enemy Health
state = 0                           //Enemy State
being = 0                           //Enemy State (Attack Iterations)
xdir = 1                            //Facing Direction
bob = 0                             //Y Offset Bobbing (Blade Subordinate)
bob_x = 0
alpha = 0                           //Sprite Flash Alpha
ghost_alpha = 1
ground = 0
subangle = 0
flash_palette = spr_shock_puppet_palette
death = 0
death_type = 1
death_frame = 19
hp_mod = 4.167
hp_offset = -52
hp_target = heart
boss_enemy = 0
can_hold_items = 1
unkillable = 0
o = obj_game_logic
//Physics
enemy_speed = 0                     //Movement Speed
enemy_direction = 0                 //Direction of Movement
enemy_direction_speed = 0.5         //Modifier For Directional Speed
enemy_explosion_x = x               //X Position of Explosion Particle
enemy_explosion_y = y               //Y Position of Explosion Particle
enemy_explosion_frame = 0           //Animation Frame of Explosion Particle
damage_tick = 0                     //Number of Frames Before We're Allowed To Get Burned Again
scale = 1
user_tile_boundary_alpha = 0
user_tile_boundary_fade_direction = 1
weather_rain_particles_frame = 0
weather_slip = 0
weather_slip_target = 0
slip_timer = 0
gravity_slope = 0
gravity_speed = 0
gravity_cap = 4
gravity_max = 4
gravity_accel = 0.21875

//Editor Mode Variables
start_x = x
start_y = y
width_x = sprite_width/2
height_y = sprite_height/2
ground = 0
death = 0
play_sound = 1

captured     = 0
is_gems      = 0
//Spring
spring_speed = 0
spring_frame = 0
spring_offset_x = 0
spring_offset_y = 0
spring_angle = 0
spring_y_offset = 0
spring_jiggle = 0
spring_jiggle_scale = 0
spring_jiggle_timer = 0
give_item = 0
item = 0
attacked = 0
dropped_goodies = noone
attacked_damage = 4
parried_attack = 0
can_parry = 0
can_draw_sprite = 1
can_draw_healthbar = 1
can_float = 0
can_die_upon_impact = 1
offset = 0
offdir = 1
offtime = 0
y_offset = 0
item_offset = height_y
floor_offset = 0
freeze = 0
mod_chip = 0
mod_chip_frame = 0
enemy_growth = 0
enemy_growth_target = 1
mod_bomb_timer = 0
mod_bomb_accel = 0.05
mod_bomb_flash = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Basic Logic
if obj_game_logic.pause = 0
    {
//Disable sound playback if we are zoomed out, or beyond the camera's boundaries
play_sound = 1
if room = rm_editor
    {
        var parent = obj_level_editor;
        if parent.use_zoom_scale_factor != 1 play_sound = 0;
        if parent.use_enemy_mode_iterations = 2 freeze = 1; else freeze = 0;
        if o.user_cursor_mode = 0 freeze = 0;
        if parent.use_write_delay &gt; 0
        or (point_in_rectangle(parent.use_cursor_x,parent.use_cursor_y,start_x-width_x,start_y-height_y,start_x+width_x,start_y+height_y)
        and parent.user_cursor_mode = 0 and parent.use_tile_menu = 0 and parent.side_bar_allow = 0)
        or (freeze = 1)
            {
                x = start_x
                y = start_y
                captured = 0
                gravity_speed = 0
            }
    }
if x &lt; view_xview[view_port]-196
or x &gt; view_xview[view_port]+view_wview[view_port]+196
    play_sound = 0;
if y &lt; view_yview[view_port]-196
or y &gt; view_yview[view_port]+view_hview[view_port]+196
    play_sound = 0;
if freeze = 0
    {
//Reduce Alpha If It Is Applied
if alpha &gt; 0 alpha -=0.20;
if alpha &lt; 0 alpha = 0;

if slip_timer &gt; 0
    {
        if slip_timer &gt; 0 slip_timer -= 1;
        weather_slip = lerp(weather_slip,weather_slip_target,0.08);
        if can_float = 0 x += weather_slip;
    }

if item != 0
    {
        //Mod Chip Behavior
        if item = spr_mod_chip_detonate
            {
                if point_in_rectangle(o.px,o.py,x-width_x,y-sprite_height,x+width_x,y-16)
                    {
                        if o.gravity_speed &gt; 0
                            {
                                heart = -1
                                scr_set_spring_launch(abs(o.gravity_speed)+1,o.spring_timer_blue,90)
                            }
                    }
            }
        
        if item = spr_mod_chip_spring
            {
                if point_in_rectangle(o.px,o.py,x-width_x,y-sprite_height,x+width_x,y)
                and spring_jiggle_timer = 0
                    {
                        if o.gravity_speed &gt; 0 and o.py &lt; y-16
                            {
                                spring_jiggle_timer = 10
                                scr_set_spring_launch(8,o.spring_timer_blue,90)
                            }
                        if o.ground = 1 and o.user_cursor_mode = 0
                            {
                                o.hsp = 8*-o.xdir
                                spring_jiggle_timer = 10
                            }
                    }
                //Jiggle if we've gotten bounced off of
                if spring_jiggle_timer &gt; 0
                    {
                        spring_jiggle_timer -= 0.5
                        if spring_jiggle_timer = 9.5
                            {
                                audio_stop_sound(snd_bouncy_cube)
                                audio_play_sound(snd_bouncy_cube,50,false);
                            }
                        switch(spring_jiggle_timer)
                            {
                                case 9: {spring_jiggle_scale = 0.5; break;}
                                case 6: {spring_jiggle_scale = 0.15; break;}
                                case 4: {spring_jiggle_scale = 0.65; break;}
                                case 3: {spring_jiggle_scale = 0.25; break;}
                                case 2: {spring_jiggle_scale = 0.45; break;}
                                case 1: {spring_jiggle_scale = 0; break;}
                            }
                    }
                spring_jiggle = lerp(spring_jiggle,spring_jiggle_scale,0.5)
            }
        
        if item = spr_mod_chip_bomb
            {
                if mod_bomb_timer = 0 and attacked = 1
                    mod_bomb_timer = 1;
                if mod_bomb_timer &gt; 0
                    {
                        if mod_bomb_timer = 1
                            {
                                mod_bomb_timer = 2
                                audio_stop_sound(snd_mega_bomb)
                                audio_play_sound(snd_mega_bomb,50,false);
                            }
                        mod_bomb_flash += mod_bomb_accel
                        if mod_bomb_flash &gt; 1
                            {
                                audio_stop_sound(snd_mega_bomb)
                                audio_play_sound(snd_mega_bomb,50,false);
                                mod_bomb_flash = 0
                                mod_bomb_accel += 0.0025
                            }
                        if mod_bomb_accel &gt;= 0.075
                            {
                                var bomb_ID = instance_create(random_range(x-32,x),random_range(y-32,y),obj_bomb);
                                bomb_ID.detonate_for_milla = 1;
                                var bomb_ID = instance_create(random_range(x,x+32),random_range(y,y-16),obj_bomb);
                                bomb_ID.detonate_for_milla = 1;
                                var bomb_ID = instance_create(random_range(x-16,x),random_range(y-8,y),obj_bomb);
                                bomb_ID.detonate_for_milla = 1;
                                var bomb_ID = instance_create(random_range(x-64,x),random_range(y-64,y),obj_bomb);
                                bomb_ID.detonate_for_milla = 1;
                                var bomb_ID = instance_create(random_range(x-48,x),random_range(y-32,y),obj_bomb);
                                bomb_ID.detonate_for_milla = 1;
                                var bomb_ID = instance_create(random_range(x,x+64),random_range(y-16,y),obj_bomb);
                                bomb_ID.detonate_for_milla = 1;
                                var bomb_ID = instance_create(random_range(x,x+48),random_range(y-48,y),obj_bomb);
                                bomb_ID.detonate_for_milla = 1;
                                if room = rm_editor
                                    {
                                        instance_create(start_x,start_y,object_index)
                                        instance_destroy()
                                    }
                                else instance_destroy();
                            }
                    }
            }
        
        if item = spr_mod_chip_extra_large
            {
                if enemy_growth &lt; enemy_growth_target
                    enemy_growth = lerp(enemy_growth,enemy_growth_target,0.15);
            }
        
        //Mod Chip Popup Status
        if room = rm_editor
            {
                switch(item)
                    {
                        case spr_mod_chip_alt_weapon:  {mod_chip_frame = 0; break;}
                        case spr_mod_chip_speed:       {mod_chip_frame = 1; break;}
                        case spr_mod_chip_health:      {mod_chip_frame = 2; break;}
                        case spr_mod_chip_extra_large: {mod_chip_frame = 3; break;}
                        case spr_mod_chip_bomb:        {mod_chip_frame = 4; break;}
                        case spr_mod_chip_spring:      {mod_chip_frame = 5; break;}
                        case spr_mod_chip_detonate:    {mod_chip_frame = 6; break;}
                        case spr_target:               {mod_chip_frame = 9; break;}
                        case spr_keycard:              {mod_chip_frame = 10; break;}
                    }
            }
    }

if (o.shield_active = 1
and (o.shield = spr_shield_fire_front or o.shield = spr_shield_rock)
and o.use_editor = 0 and damage_tick = 0 and death = 0)
    {
        if point_distance(x,y,o.universal_player_x,o.universal_player_y) &lt;= 64
            {
                if o.shield = spr_shield_fire_front
                    heart -= 2.5;
                if o.shield = spr_shield_rock
                    heart -= abs(o.hsp)/2;
                alpha = 1
                audio_stop_sound(snd_enemy_hit)
                audio_play_sound(snd_enemy_hit,50,false)
                damage_tick = 8
            }
    }
if can_parry = 1
    {
        if object_index = obj_fireworks_tank
            {
                if attacked = 1
                    {
                        if (o.attack[0] = 1 or o.attack[3] = 1)
                        and o.pause_logic = 0
                        and (o.universal_player_x &gt;= x-160 and o.universal_player_x &lt; x+160
                        and  o.universal_player_y &gt; parry_line)
                            {
                                audio_stop_sound(character_parry)
                                audio_play_sound(character_parry,50,false)
                                if o.user_freeze_frames = 1
                                    {
                                        o.pause_logic = 5
                                        parried_attack = 5
                                    }
                                if o.user_freeze_frames = 0
                                or o.skin = spr_milla
                                    {
                                        o.pause_logic = 0
                                        parried_attack = 8
                                    }
                                attacked = 0
                            }
                        if instance_exists(obj_player_cube)
                            {
                                if  o.pause_logic = 0
                                and (obj_player_cube.x &gt;= x-160 and obj_player_cube.x &lt; x+160
                                and  obj_player_cube.y &gt; parry_line)
                                    {
                                        audio_stop_sound(character_parry)
                                        audio_play_sound(character_parry,50,false)
                                        if o.user_freeze_frames = 1
                                            {
                                                o.pause_logic = 5
                                                parried_attack = 5
                                            }
                                        if o.user_freeze_frames = 0
                                        or o.skin = spr_milla
                                            {
                                                o.pause_logic = 0
                                                parried_attack = 8
                                            }
                                        attacked = 0
                                    }
                            }
                    }
            }
    }
if parried_attack &gt; 0 parried_attack -= 1;
//Hurt
if parried_attack = 0
    {
        if damage_tick &gt; 0 damage_tick -=1;
        if attacked = 1  and death = 0 and alpha &lt;= 0
            {
                heart -= attacked_damage
                if o.user_freeze_frames = 0
                    alpha = 1.5;
                else
                    alpha = 1;
                attacked = 0
                audio_stop_sound(snd_enemy_hit)
                audio_play_sound(snd_enemy_hit,50,false)
            }
    }

//Check for floating gems, and collect them if they're touching our sprite
if can_hold_items = 1
    {
        var instance_ID = collision_rectangle(x-width_x,y-height_y,x+width_x,y+height_y,obj_gem_float,false,true);
        if instance_exists(instance_ID) and death = 0
            {
                if instance_ID.is_collected = 0
                and instance_ID.object_index != obj_petal_shard_float
                    {
                        instance_ID.is_collected=2;
                        var value = 1;
                        if instance_ID.sprite_index = spr_red_gem
                            value = 5;
                        is_gems += value;
                    }
            }
        var instance_ID = collision_rectangle(x-width_x,y-height_y,x+width_x,y+height_y,obj_gem,false,true);
        if instance_exists(instance_ID) and death = 0
            {
                if instance_ID.is_collected = 0
                and instance_ID.object_index != obj_petal_shard
                    {
                        instance_ID.is_collected=2;
                        var value = 1;
                        if instance_ID.sprite_index = spr_red_gem
                            value = 5;
                        is_gems += value;
                    }
            }
    }

if death = 0 and can_float = 0
    {
        //Spring Collisions
        var spring_id = collision_point(x+(sign(spring_speed) * 36),y+spring_y_offset,obj_spring_0,false,true);
        var cube_id   = collision_point(x+(sign(spring_speed) * 36),y+spring_y_offset,obj_player_cube_alt,false,true);
        
        if instance_exists(spring_id)
            {
                switch(spring_id.sprite_index)
                    {
                        case spr_spring_0:  {gravity_speed = -9;                       spring_angle = 90;  break;}
                        case spr_spring_1:  {gravity_speed = -9;  spring_speed = 9;    spring_angle = 45;  break;}
                        case spr_spring_2:  {gravity_speed = -9;  spring_speed = -9;   spring_angle = 135; break;}
                        case spr_spring_3:  {gravity_speed =  9;  spring_speed = 9;    spring_angle = 315; break;}
                        case spr_spring_4:  {gravity_speed = 9;   spring_speed = -9;   spring_angle = 225; break;}
                        case spr_spring_5:  {gravity_speed = -18;                      spring_angle = 90;  break;}
                        case spr_spring_6:  {gravity_speed = -18; spring_speed = -18;  spring_angle = 135; break;}
                        case spr_spring_7:  {gravity_speed = -18; spring_speed = 18;   spring_angle = 45;  break;}
                        case spr_spring_8:  {gravity_speed =  18; spring_speed = 18;   spring_angle = 315; break;}
                        case spr_spring_9:  {gravity_speed = 18;  spring_speed = -18;  spring_angle = 225; break;}
                        case spr_spring_10: {spring_speed = 9;                         spring_angle = 0;   break;}
                        case spr_spring_11: {spring_speed = -9;                        spring_angle = 180; break;}
                        case spr_spring_12: {gravity_speed = 9;                        spring_angle = 270; break;}
                        case spr_spring_13: {gravity_speed = 18;                       spring_angle = 270; break;}
                        case spr_spring_14: {spring_speed = 18;                        spring_angle = 0;   break;}
                        case spr_spring_15: {spring_speed = -18;                       spring_angle = 180; break;}
                        case spr_spring_16: {gravity_speed = -abs(gravity_speed)-1;    spring_angle = 90;  break;}
                        case spr_spring_19: {gravity_speed = abs(gravity_speed)+4;     spring_angle = 270; break;}
                        //Green Springs
                        case spr_spring_24: {gravity_speed = -4.5;                     spring_angle = 90;  break;}
                        case spr_spring_25: {spring_speed = 4.5;                       spring_angle = 0;   break;}
                        case spr_spring_26: {spring_speed = -4.5;                      spring_angle = 180; break;}
                        case spr_spring_27: {gravity_speed = 4.5;                      spring_angle = 270; break;}
                        //Spike Springs
                        case spr_spring_28: {gravity_speed = -9;                     spring_angle = 90;  break;}
                        case spr_spring_29: {spring_speed = 9;                       spring_angle = 0;   break;}
                        case spr_spring_30: {spring_speed = -9;                      spring_angle = 180; break;}
                        case spr_spring_31: {gravity_speed = 9;                      spring_angle = 270; break;}
                        default: {break;}
                    }
                spring_offset_x = spring_id.x+16
                spring_offset_y = spring_id.y+16
                //Take Damage From Spike Springs
                if (spring_id.sprite_index = spr_spring_28
                or spring_id.sprite_index = spr_spring_29
                or spring_id.sprite_index = spr_spring_30
                or spring_id.sprite_index = spr_spring_31)
                and (damage_tick = 0)
                    {
                        heart -= 1;
                        alpha = 1
                        audio_stop_sound(snd_enemy_hit)
                        audio_play_sound(snd_enemy_hit,50,false)
                        damage_tick = 8
                    }
                if spring_frame = 0 
                    {
                        spring_frame = 0.5
                        if spring_id.object_index = obj_spring_24
                        or spring_id.object_index = obj_spring_25
                        or spring_id.object_index = obj_spring_26
                        or spring_id.object_index = obj_spring_27
                            {
                                audio_stop_sound(character_spring_weak)
                                audio_play_sound(character_spring_weak,50,false)
                            }
                        else
                            {
                                audio_stop_sound(character_spring)
                                audio_play_sound(character_spring,50,false)
                            }
                    }
            }
        if instance_exists(cube_id)
            {
                gravity_speed = -abs(gravity_speed)-1;
                spring_angle = 90;
                if cube_id.cube_jiggle_timer &lt; 1
                    {
                        cube_id.cube_health -= 0.15
                        cube_id.cube_jiggle_timer = 10
                    }
            }
        if gravity_slope=0 and ground = 0 {x += spring_speed; /*angle += abs(spring_speed)*xdir;*/}
        else {spring_speed = 0; if death = 0 angle = 0;}
        
        /*if spring_speed != 0
            {
                var spring_sensor = tile_layer_find(surface_flats,x+(sign(spring_speed) * 8),y);
        
                if spring_sensor != -1
                    {
                        death = death_type
                        spring_speed = 0
                        gravity_speed = 0
                        if room = rm_editor
                            {
                                x = start_x
                                y = start_y
                            }
                    }
            }
        */
    }

//Trigger Death State
if heart &lt; 0 and death &lt; 1
    {
        death = death_type
        if obj_game_logic.xdir = 1  enemy_direction = point_direction(obj_game_logic.px,obj_game_logic.py,x+32,y);
        if obj_game_logic.xdir = -1 enemy_direction = point_direction(obj_game_logic.px,obj_game_logic.py,x-32,y);
        if death_type = 1 xdir = obj_game_logic.xdir;
        //Set target speed
        enemy_speed = 4+abs(obj_game_logic.hsp)
        if play_sound = 1
            {
                audio_stop_sound(snd_enemy_dead)
                audio_play_sound(snd_enemy_dead,50,false)
            }
        frame = death_frame
        //Spit Out Any Given Item
        scr_enemy_spit_out_items(self)
    }
    }   //Freeze Check
    }   //Pause Check
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Sprite
if spring_frame &gt; 0
    {
        draw_sprite_ext(spr_spring_explosion,spring_frame,spring_offset_x,spring_offset_y,1,1,spring_angle,c_white,1)
        spring_frame += 0.5
        if spring_frame &gt; 10.8 spring_frame = 0;
    }
//Draw Ghost
if room = rm_editor draw_sprite_ext(sprite_index,0,start_x,start_y,1,1,0,c_white,0.5);
//Draw Sprite
if can_draw_sprite = 1
    {
        if death &lt; 2
            {
                var pal_alpha = 0;
                if alpha &gt; 0.5 pal_alpha = 1;
                script_execute(o.pal_swap_script,flash_palette,pal_alpha,false)
                draw_sprite_ext(sprite_index,frame,x+bob_x,y+bob,xdir*(scale+spring_jiggle+enemy_growth),scale+enemy_growth-(spring_jiggle/3),angle+subangle,c_white,ghost_alpha)
                shader_reset();
                if alpha &gt; 0.5 and o.pal_swap_script = pal_swap_dummy
                    {
                        d3d_set_fog(true, c_yellow, 0, 0)
                        draw_sprite_ext(sprite_index,frame,x+bob_x,y+bob,xdir*(scale+spring_jiggle+enemy_growth),scale+enemy_growth-(spring_jiggle/3),angle+subangle,c_white,0.65)
                        d3d_set_fog(false, 0, 0, 0)
                    }
                //Draw Bomb Chip Flash
                if mod_bomb_flash &gt; 0.5
                    {
                        draw_set_blend_mode(bm_add)
                        draw_sprite_ext(sprite_index,frame,x+bob_x,y,xdir*(scale+spring_jiggle+enemy_growth),scale+enemy_growth-(spring_jiggle/3),angle+subangle,c_red,1);
                        draw_set_blend_mode(bm_normal)
                        
                    }
                if o.use_weather_conditions &gt; 0 and y &lt; o.water_height
                    {
                        //Splatter Animations
                        weather_rain_particles_frame += o.use_weather_conditions*0.20
                        if weather_rain_particles_frame &gt; 3.8
                            weather_rain_particles_frame = 0;
                        draw_sprite_ext(spr_rain_particles,weather_rain_particles_frame,x,y+y_offset,1,1,0,c_white,1)
                    }
            }
    }
//Draw Health Bar
if (can_draw_healthbar = 1) and (room = rm_editor or o.user_enemy_health_display = 1 or o.debug_hud_sensors = 1)
    {
        hp_target = lerp(hp_target,floor(heart*hp_mod),0.15);
        var heart_string = heart;
        if heart &lt;= 0
            {
                hp_target = 0
                heart_string = 0
            }
        var hp_frame = clamp(hp_target,0,49);
        draw_sprite(spr_enemy_health_bar,hp_frame,x,y+hp_offset)
        draw_set_font(o.version_number_font)
        draw_set_color(c_white)
        draw_text(x-25,y+hp_offset+10,string(heart_string) + " / " + string(heartmax))
    }

if room = rm_editor
    {
        var parent = obj_level_editor;
        if (point_in_rectangle(parent.use_cursor_x,parent.use_cursor_y,x-width_x,y-height_y,x+width_x,y+height_y)
            and parent.user_cursor_mode = 0 and parent.use_tile_menu = 0 and parent.side_bar_allow = 0)
            {
                //Fade Effect For The Sprite's Boundary Box
                if user_tile_boundary_fade_direction = 1 user_tile_boundary_alpha += 0.0075;
                if user_tile_boundary_fade_direction = 0 user_tile_boundary_alpha -= 0.0075;
                if user_tile_boundary_alpha &gt; 0.8 user_tile_boundary_fade_direction = 0;
                if user_tile_boundary_alpha &lt; 0.3 user_tile_boundary_fade_direction = 1;
                if can_draw_sprite = 1
                    {
                        draw_set_blend_mode(bm_add)
                        draw_sprite_ext(sprite_index,frame,x,y,xdir*(scale+enemy_growth),scale+enemy_growth,angle+subangle,c_yellow,user_tile_boundary_alpha);
                        draw_set_blend_mode(bm_normal)
                    }
                if (
                    parent.user_tile_selected = spr_target
                or  parent.user_tile_selected = spr_keycard
                or  parent.user_tile_selected = spr_mod_chip_alt_weapon
                or  parent.user_tile_selected = spr_mod_chip_health
                or  parent.user_tile_selected = spr_mod_chip_speed
                or  parent.user_tile_selected = spr_mod_chip_extra_large
                or  parent.user_tile_selected = spr_mod_chip_bomb
                or  parent.user_tile_selected = spr_mod_chip_spring
                or  parent.user_tile_selected = spr_mod_chip_detonate
                    )
                and item = 0
                    {
                        scale = lerp(scale,1.25,0.125)
                        draw_sprite(parent.user_tile_selected,0,x+16,y-16)
                        draw_sprite(spr_display_plus,0,x+32,y-16)
                        give_item = 1
                    }
                else
                    {
                        scale = 1;
                        give_item = 0;
                    }
            }
        else
            {
                scale = 1;
                give_item = 0;
            }
    }
//Draw an item if it was given to us
if item != 0
    {
        if room = rm_editor
            draw_sprite(spr_enemy_popup_status,mod_chip_frame,x,y-sprite_height-8);
        else
            draw_sprite_ext(item,0,x,y-sprite_height-8,0.5,0.5,0,c_white,1);
    }
//Draw Explosion Particle
if death = 2 draw_sprite(spr_explosion_1,enemy_explosion_frame,x,y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
