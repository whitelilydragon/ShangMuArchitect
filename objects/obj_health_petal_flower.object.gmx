<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_health_petal_flower</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>obj_destructible</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Animation Timers
frame = 0               //Current Frame
//Particle Variables
frame_speed = 0         //Vertical Speed of Particle
position    = 16        //Horizontal Offset
//Are We Allowed To Hold Items?
give_item = 0
item = 0
tiles = -1
attacked = 0
no_more = 0
rotate_angle = 0
rotate_timer = 0
item_x = 0
item_y = -16
weather_rain_particles_frame = 0
tile_mask = tile_add(mu_door_1,0,0,32,24,x-16,y-24,surface_flats)
tile_set_visible(tile_mask,false)
heart_visible_0 = 0
//Create Heart Particle 1
heart_offset[0] = x + 16 + random_range(-16,16)
heart_offset[1] = y + 12 + random_range(-16,16)
//Create Heart Particle 2
heart_offset[2] = x + 16 + random_range(-16,16)
heart_offset[3] = y + 12 + random_range(-16,16)
//Create Heart Particle 3
heart_offset[4] = x + 16 + random_range(-16,16)
heart_offset[5] = y + 12 + random_range(-16,16)
//Heart Particle Variables 1
heart_frame_0   = 0       //Heart Animated Frame
heart_x_0       = x       //Heart X Position
heart_y_0       = y       //Heart Y Position
heart_timer_0   = 0       //Heart Timer
heart_speed_0   = 1       //Heart Speed
heart_speed_alt_0 = 0     //Heart Speed (Alt)
//Heart Particle Variables 2
heart_x_1       = x       //Heart X Position
heart_y_1       = y       //Heart Y Position
heart_speed_1   = 1       //Heart Speed
heart_speed_alt_1 = 0     //Heart Speed (Alt)
//Heart Particle Variables 3
heart_x_2       = x       //Heart X Position
heart_y_2       = y       //Heart Y Position
heart_speed_2   = 1       //Heart Speed
heart_speed_alt_2 = 0     //Heart Speed (Alt)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if tile_exists(tile_mask) tile_delete(tile_mask);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Pause Safety Check
if obj_game_logic.pause = 0
{

if (tile_exists(tile_mask))
    {
        rotate_timer += 1
        if (rotate_timer &gt; 60 and room != rm_editor)
        or (rotate_timer &gt; 20 and room  = rm_editor)
            scr_item_set_mask_offset();
    }

//If The Player Has Destroyed The Gem Flower Tile, Destroy Modified Tile And Self
if (attacked = 1 and no_more = 0)
    {
        //Create Petals
        scr_attack_tile(x+item_x,y+item_y,obj_petal,0,spr_petal_flower,0)
        scr_attack_tile(x+item_x,y+item_y,obj_petal,0,spr_petal_flower,-0.5)
        scr_attack_tile(x+item_x,y+item_y,obj_petal,0,spr_petal_flower,-1)
        scr_attack_tile(x+item_x,y+item_y,obj_petal,0,spr_petal_flower,0.5)
        scr_attack_tile(x+item_x,y+item_y,obj_petal,0,spr_petal_flower,1)
        scr_attack_tile(x+item_x,y+item_y,obj_petal,0,spr_petal_flower,1.5)
        audio_stop_sound(flower_destroy)
        audio_play_sound(flower_destroy,50,false)
        if tile_exists(tile_mask) tile_delete(tile_mask);
        heart_visible_0 = 1
        attacked = 0
        no_more = 1
        //Explode if the game's difficulty is set to level 5
        if obj_game_logic.user_enemy_level &gt;= 4
            {
                var bomb_ID = instance_create(x+item_x,y+item_y,obj_cube_rogue_bomb);
                bomb_ID.detonate_for_milla = 1;
                bomb_ID.dont_leave_decorations = 1;
            }
    }
//Advance Frames
if heart_visible_0 = 1
    {
        //Advance Frames
        if frame &lt; 6.8 frame+=0.24
        //If The Animations Have Completed, Add A Scenery Tile
        if frame &gt;= 6.8
            {
                //Add Scenery Tile
                if (room != rm_editor and rotate_angle = 0)
                    tile_add(spr_flower_1_5,0,0,56,32,x-28,y-32,4);
                //Destroy Ourselves If Our Performance Profile Is Set To "Low"
                if obj_game_logic.performance_profile = 0
                    {
                        if room = rm_editor
                            {
                                instance_create(x,y,obj_health_petal_flower)
                                instance_destroy();
                            }
                        else
                            instance_destroy();
                    }
            }
        //Sway heart particle side-by-side
        heart_x_0 = heart_offset[0]+heart_speed_0
        heart_y_0 = heart_offset[1]-heart_speed_alt_0
        //Sway heart particle side-by-side
        heart_x_1 = heart_offset[2]+heart_speed_1
        heart_y_1 = heart_offset[3]-heart_speed_alt_1
        //Sway heart particle side-by-side
        heart_x_2 = heart_offset[4]+heart_speed_2
        heart_y_2 = heart_offset[5]-heart_speed_alt_2
        //Iterate Heart Timer
        heart_timer_0+=0.5
        //Phase 1: Sway
        if (heart_timer_0 &lt; 12)
            {
                //Heart 1
                heart_frame_0=0;
                heart_speed_0+=1;
                heart_speed_alt_0+=1
                //Heart 2
                heart_speed_1-=1
                heart_speed_alt_1+=1
                //Heart 3
                heart_speed_2-=1
                heart_speed_alt_2+=1
            }
        //Phase 2: Sway In The Opposite Direction
        if (heart_timer_0 &gt;= 12 and heart_timer_0&lt;=15)
            {
                //Heart 1
                heart_frame_0=0;
                heart_speed_0-=1;
                heart_speed_alt_0+=1
                //Heart 2
                heart_speed_1+=1
                heart_speed_alt_1+=1
                //Heart 3
                heart_speed_2+=1
                heart_speed_alt_2+=1
            }
        //Phase 3: Playback Animations
        if (heart_timer_0 &gt; 15)
            {
                heart_frame_0+=0.24
            }
        //Destroy self once heart frame animations have completed
        if heart_frame_0 &gt;= 3
            {
                if room = rm_editor
                    {
                        instance_create(x,y,obj_health_petal_flower)
                        instance_destroy();
                    }
                else
                    instance_destroy();
            }
    }
} //End of Pause Safety Check
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Animate Main Sprite
draw_sprite_ext(spr_health_petal_flower,frame,x,y,1,1,rotate_angle,c_white,1)
if obj_game_logic.use_weather_conditions &gt; 0 and y &lt; obj_game_logic.water_height
    scr_item_draw_rain_particles(self);
///Draw Particle Sprite
if heart_visible_0 = 1 and obj_game_logic.performance_profile = 1
    {
        //Draw Sprite (With Alpha Blending)
        draw_set_blend_mode(bm_add)
        draw_sprite_ext(spr_hearts,heart_frame_0,heart_x_0,heart_y_0-32,1,1,0,c_white,1)
        //Draw Sprite (With Alpha Blending)
        draw_sprite_ext(spr_hearts,heart_frame_0,heart_x_1,heart_y_1-32,1,1,0,c_white,1)
        //Draw Sprite (With Alpha Blending)
        draw_sprite_ext(spr_hearts,heart_frame_0,heart_x_2,heart_y_2-32,1,1,0,c_white,1)
        draw_set_blend_mode(bm_normal)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
