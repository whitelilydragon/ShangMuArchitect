<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_fire_spitter</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy_dropper</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics and Animation Variables
event_inherited()
scr_enemy_hp(9)
flash_palette = spr_fire_spitter_palette
death_frame = 0
turn  = 0                           //Sprite Turning
xdir_previous = 0                   //Previous Facing Direction
tile_scanner_timer = 0
water_ID = noone
dropped_goodies = obj_gold_gem
//Animations And Particles
anim_firing = 0
anim_firing_mod = 0
anim_firing_timer = 0
flame_offset[0] = 23
flame_offset[1] = 11
flame_offset[2] = 0
//Fire Particle 1
fire_x[0] = -10000
fire_y[0] = y
fire_frame[0] = 0
//Fire Particle 2
fire_x[1] = -10000
fire_y[1] = y
fire_frame[1] = 1
//Fire Particle 3
fire_x[2] = -10000
fire_y[2] = y
fire_frame[2] = 2
//Fire Particle 4
fire_x[3] = -10000
fire_y[3] = y
fire_frame[3] = 3
//Fire Particle 5
fire_x[4] = -10000
fire_y[4] = y
fire_frame[4] = 4
//Fire Particle 6
fire_x[5] = -10000
fire_y[5] = y
fire_frame[5] = 5
//Editor Mode Variables
start_x = x
start_y = y
width_x = sprite_width/2
height_y = sprite_height/2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Logic and Animations
event_inherited()
if o.pause = 0 and freeze = 0
    {
        if captured = 1 and object_index = obj_firespitter and state &lt; 2
            instance_change(obj_fire_spitter_child,true);

        if death &gt; 0 and sprite_index = spr_fire_spitter
            {
                sprite_index = spr_fire_spitter_death
                if room != rm_editor
                    {
                        tile_temp = tile_add(spr_fire_spitter_base,0,0,x+55,17,x-28,y-17,4);
                        if xdir = -1
                            {
                                tile_set_scale(tile_temp,-1,1)
                                tile_set_position(tile_temp,x+28,y-17)
                            }
                    }
            }

        //Reduce Turning If It Is Applied
        if turn &gt; 0 turn -= 0.2;

        //Check If Our Direction Has Changed, And Turn Around, Before Copying What Our Current Direction Is
        if xdir_previous!=xdir turn = 5;
        //Copy Current Direction
        xdir_previous = xdir

        //Firing Warm Up Phase
        var var_speed_mod = 0.0025;
        if item = spr_mod_chip_speed var_speed_mod = 0.01;
        anim_firing += anim_firing_mod
        if anim_firing &gt; 1 anim_firing = 0;
        if anim_firing_mod &lt; 0.5 anim_firing_mod += var_speed_mod;

        //Detect smart pools
        water_ID = collision_point(x,y,obj_smart_pools,false,true)

        //Animation Loops
        if state = 0 and death = 0
            {
                //Iterate Animations
                if turn = 0
                    {
                        if frame &gt; 3.5 frame = 0; frame += 0.45;
                        //Enemy Movement
                        var var_speed = 2;
                        if item = spr_mod_chip_speed var_speed = 4;
                        if scale = 1 x += var_speed*xdir;
                    }
                if turn != 0
                    {
                        if frame &lt; 4 frame = 4; frame += 0.15;
                        if frame &gt; 6.7 {frame = 0; turn = 0}
                    }
                //Sideways Collisions
                tile_scanner_timer += 1
                if tile_scanner_timer &gt;= 5
                    {
                        if xdir = 1
                            {
                                if tile_layer_find(surface_flats,x+36,y-18) or x &gt; room_width -32 xdir = -1;
                            }
                        else
                            {
                                if tile_layer_find(surface_flats,x-36,y-18) or x &lt; 32 xdir = 1;
                            }
                        //Directional Switching Tiles
                        var tile_flag = tile_layer_find(surface_flags,x+(4*xdir),y-18);
                        var turn_on_tile = 0;
                        if tile_exists(tile_flag)
                            {
                                var tile_flag_bg = tile_get_background(tile_flag);
                                if tile_flag_bg = tile_layer_changer
                                    {
                                        if xdir = 1  and turn_on_tile = 0 {xdir = -1; x -= 4; turn_on_tile = 1;}
                                        if xdir = -1 and turn_on_tile = 0 {xdir =  1; x += 4; turn_on_tile = 1;}
                                    }
                            }
                        tile_scanner_timer = 0
                    }
                //Floor Collisions
                var floor_left   = tile_layer_find(surface_flats,x-36,y+2)
                var floor_right  = tile_layer_find(surface_flats,x+36,y+2)
                var floor_center = tile_layer_find(surface_flats,x,y+2)

                //---Turning System---//

                //Turn Around If There Are No Floors Ahead
                if gravity_slope = 0
                    {
                        if tile_exists(floor_left) and tile_exists(floor_center) and !tile_exists(floor_right) xdir=-1;
                        if !tile_exists(floor_left) and tile_exists(floor_center) and tile_exists(floor_right) xdir=1;
                    }
                //Clip To Slope
                if gravity_slope = 1
                    {
                        //Edge Detection For Slopes
                        var tile_check_id = tile_layer_find(surface_slopes,x+(16*xdir),y);
                        var tile_already_turned = 0;
                        if (tile_check_id = -1 and xdir = 1 and tile_already_turned = 0 and floor_right = -1) {xdir = -1; tile_already_turned = 1;}
                        if (tile_check_id = -1 and xdir = -1 and tile_already_turned = 0 and floor_left = -1) {xdir = 1; tile_already_turned = 1;}
                    }

                //Firing
                if anim_firing_mod &gt;= 0.5
                    {
                        var floor_frame = floor(frame);
                        var frame_offset = 0;
                        var mod_offset = 1;
                        if item = spr_mod_chip_extra_large mod_offset = 2;
                        switch(floor_frame)
                            {
                                case 4:  {frame_offset = flame_offset[1]; break;}
                                case 5:  {frame_offset = flame_offset[2]; break;}
                                case 6:  {frame_offset = flame_offset[1]; break;}
                                default: {frame_offset = flame_offset[0]; break;}
                            }
                        var fire_frame_counter = 0;
                        while (fire_frame_counter &lt;= 5)
                            {
                                fire_x[fire_frame_counter] += 4*xdir
                                fire_frame[fire_frame_counter] += 0.25
                                if fire_frame[fire_frame_counter] &gt; 8.5
                                    {
                                        fire_frame[fire_frame_counter] = 0
                                        fire_x[fire_frame_counter] = x + ((frame_offset*mod_offset)*xdir)
                                        fire_y[fire_frame_counter] = y-(24*mod_offset)
                                    }
                                fire_frame_counter += 1
                            }
                        anim_firing_timer += 1
                        if o.user_cursor_mode = 1
                            anim_firing_timer = 180;
                        switch(anim_firing_timer)
                            {
                                case 1:  {fire_x[0] = x + ((frame_offset*mod_offset)*xdir); fire_y[0] = y-(24*mod_offset); if play_sound = 1 audio_play_sound(snd_enemy_flame,50,false); break;}
                                case 4:  {fire_x[1] = x + ((frame_offset*mod_offset)*xdir); fire_y[1] = y-(24*mod_offset); break;}
                                case 8:  {fire_x[2] = x + ((frame_offset*mod_offset)*xdir); fire_y[2] = y-(24*mod_offset); break;}
                                case 10: {fire_x[3] = x + ((frame_offset*mod_offset)*xdir); fire_y[3] = y-(24*mod_offset); break;}
                                case 14: {fire_x[4] = x + ((frame_offset*mod_offset)*xdir); fire_y[4] = y-(24*mod_offset); break;}
                                case 18: {fire_x[5] = x + ((frame_offset*mod_offset)*xdir); fire_y[5] = y-(24*mod_offset); break;}
                                case 180:
                                    {
                                        anim_firing_timer = 0
                                        anim_firing_mod = 0
                                        fire_x[0] = -10000
                                        fire_x[1] = -10000
                                        fire_x[2] = -10000
                                        fire_x[3] = -10000
                                        fire_x[4] = -10000
                                        fire_x[5] = -10000
                                        fire_frame[0] = 0
                                        fire_frame[1] = 1
                                        fire_frame[2] = 2
                                        fire_frame[3] = 3
                                        fire_frame[4] = 4
                                        fire_frame[5] = 5
                                        break;
                                    }
                            }
                        //Search for damage
                        var hitbox_x1 = x+28;
                        var hitbox_x2 = x+84;
                        if xdir = -1
                            {
                                hitbox_x1 = x-84
                                hitbox_x2 = x-24
                            }
                        var hitbox_bottom = y;
                        if o.player_hitbox_radius = 32 hitbox_bottom = y-20;
                        if point_in_rectangle(o.universal_player_x,o.universal_player_y,hitbox_x1,y-30,hitbox_x2,hitbox_bottom)
                        and o.hurt[0] = 0 and y &lt; o.water_height and !instance_exists(water_ID)
                        and o.shield_invuln = 32
                        and not (o.shield_active = 1 and o.shield=spr_shield_fire_front)
                            scr_enemy_deal_damage(0.4,1,2);
                        if (tile_scanner_timer &gt; 3 and y &lt; o.water_height and !instance_exists(water_ID))
                            {
                                //Bomb Cube
                                var instance_ID = collision_circle(hitbox_x2,y-30,32,obj_player_cube_alt,false,true);
                                if instance_exists(instance_ID)
                                    {
                                        if instance_ID.cube_jiggle_timer = 0
                                            {
                                                instance_ID.cube_jiggle_timer = 10
                                                instance_ID.cube_health += 0.50
                                            }
                                    }
                                if obj_game_logic.user_enemy_level &lt; 2
                                    {
                                        //Mega Items
                                        var instance_ID = collision_circle(hitbox_x2,y-30,32,obj_mega_item_parent,false,true);
                                        if instance_exists(instance_ID)
                                            {
                                                instance_ID.attacked = 2
                                            }
                                        if room != rm_editor
                                            {
                                                var crate_ID = collision_rectangle(hitbox_x1,y-30,hitbox_x2,hitbox_bottom,obj_destructible,false,true);
                                                if instance_exists(crate_ID)
                                                    {
                                                        crate_ID.attacked = 1
                                                    }
                                            }
                                        //Attack other enemies within range of the boxing glove
                                        instance_ID = collision_rectangle(hitbox_x1,y-30,hitbox_x2,hitbox_bottom,obj_enemy_parent,false,true);
                                        if instance_exists(instance_ID)
                                            {
                                                if instance_ID.attacked = 0 and instance_ID.alpha = 0
                                                    {
                                                        instance_ID.attacked = 1
                                                        instance_ID.attacked_damage = 0.5
                                                    }
                                            }
                                    }
                            }
                    }
            }
    } //End of pause check
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Sprite
event_inherited()
if death = 0
    {
        if anim_firing &gt;= 0.5 and turn = 0 draw_sprite_ext(sprite_index,7,x,y,xdir*scale,scale,0,c_white,1);
        //Draw Fire Particles
        if (y &lt; obj_game_logic.water_height and !instance_exists(water_ID))
            {
                draw_sprite(spr_explosion_2,fire_frame[0],fire_x[0],fire_y[0])
                draw_sprite(spr_explosion_2,fire_frame[1],fire_x[1],fire_y[1])
                draw_sprite(spr_explosion_2,fire_frame[2],fire_x[2],fire_y[2])
                draw_sprite(spr_explosion_2,fire_frame[3],fire_x[3],fire_y[3])
                draw_sprite(spr_explosion_2,fire_frame[4],fire_x[4],fire_y[4])
                draw_sprite(spr_explosion_2,fire_frame[5],fire_x[5],fire_y[5])
            }
        else
            {
                draw_sprite(spr_explosion_3,fire_frame[0],fire_x[0],fire_y[0])
                draw_sprite(spr_explosion_3,fire_frame[1],fire_x[1],fire_y[1])
                draw_sprite(spr_explosion_3,fire_frame[2],fire_x[2],fire_y[2])
                draw_sprite(spr_explosion_3,fire_frame[3],fire_x[3],fire_y[3])
                draw_sprite(spr_explosion_3,fire_frame[4],fire_x[4],fire_y[4])
                draw_sprite(spr_explosion_3,fire_frame[5],fire_x[5],fire_y[5])
            }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
