<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_loop_tile_logic</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_delete_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>tile_surface_id = tile_layer_find(surface_slopes,x+1,y+1)
tile_background_id = -1
tile_outline = tile_slope_inside_0
alpha = 0.1
alpha_lerp = 1
visible = false
image_index = 0
tile_side_a = 1
tile_side_b = 0
tile_side_a_bg = mu_ramp_6
tile_side_b_bg = mu_ramp_18
tile_outline_a_bg = tile_slope_inside_0
tile_outline_b_bg = tile_slope_outside_0
parent = obj_game_logic
edit = obj_level_editor
dont_delete_tile = 0
delete_self = 0
tile_width  = -1
tile_height = -1
tile_depth = surface_slopes
//Top-Left Trigger Boundaries
tile_trigger_top_left_x_1 = 0
tile_trigger_top_left_y_1 = 0
tile_trigger_top_left_x_2 = 0
tile_trigger_top_left_y_2 = 0
//Top-Right Trigger Boundaries
tile_trigger_top_right_x_1 = 0
tile_trigger_top_right_y_1 = 0
tile_trigger_top_right_x_2 = 0
tile_trigger_top_right_y_2 = 0
//Bottom-Left Trigger Boundaries
tile_trigger_bottom_left_x_1 = 0
tile_trigger_bottom_left_y_1 = 0
tile_trigger_bottom_left_x_2 = 0
tile_trigger_bottom_left_y_2 = 0
//Bottom-Right Trigger Boundaries
tile_trigger_bottom_right_x_1 = 0
tile_trigger_bottom_right_y_1 = 0
tile_trigger_bottom_right_x_2 = 0
tile_trigger_bottom_right_y_2 = 0
//Are We Allowed To Hold Items?
give_item = 0
item = 0

if tile_exists(tile_surface_id)
    {
        tile_background_id = tile_get_background(tile_surface_id);

        if tile_background_id = cs_ramp_6
        or tile_background_id = cs_ramp_18
            {
                x = tile_get_x(tile_surface_id)
                y = tile_get_y(tile_surface_id)+16
            }
    }

//Make Ourselves Visible If We Are In Editor Mode
if room = rm_editor
    {
        if (obj_level_editor.use_debug_hud_mode = 1 and visible = false) visible = true;
        if (obj_level_editor.use_debug_hud_mode = 0 and visible = true) visible = false;
    }
else
    {
        if (obj_game_logic.debug_hud != 1 and visible = false) visible = true;
        if (obj_game_logic.debug_hud = 1  and visible = true) visible = false;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if tile_exists(tile_surface_id) and dont_delete_tile = 0 tile_delete(tile_surface_id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///2D Tile Mask Logic Controller Logic
if tile_exists(tile_surface_id)
    {
        if tile_side_a = 1
            {
                if point_in_rectangle(parent.px,parent.py,x-16,y-40,x+48,y)
                or point_in_triangle(parent.px,parent.py,x-16,y,x+48,y,x+48,y+56)
                    {
                        if tile_background_id = mu_ramp_6
                            {
                                tile_set_background(tile_surface_id,mu_ramp_18);
                                tile_background_id = mu_ramp_18;
                                tile_side_a = 0; 
                                tile_side_b = 1;
                            }
                        if tile_background_id = cs_ramp_6
                            {
                                tile_set_background(tile_surface_id,cs_ramp_18);
                                tile_background_id = cs_ramp_18;
                                tile_side_a = 0; 
                                tile_side_b = 1;
                            }
                    }
            }
        if tile_side_b = 1
            {
                if point_in_rectangle(parent.px,parent.py,x-16,y+72,x+48,y+96)
                or point_in_triangle(parent.px,parent.py,x-16,y+6,x-16,y+72,x+48,y+72)
                    {
                        if tile_background_id = mu_ramp_18
                            {
                                tile_set_background(tile_surface_id,mu_ramp_6);
                                tile_background_id = mu_ramp_6;
                                tile_side_a = 1; 
                                tile_side_b = 0;
                            }
                        if tile_background_id = cs_ramp_18
                            {
                                tile_set_background(tile_surface_id,cs_ramp_6);
                                tile_background_id = cs_ramp_6;
                                tile_side_a = 1; 
                                tile_side_b = 0;
                            }
                    }
            }
    }

if room = rm_editor
    {
        if !tile_exists(tile_surface_id) or delete_self = 1 instance_destroy();
        if (obj_level_editor.use_debug_hud_mode = 1 and visible = false) visible = true;
        if (obj_level_editor.use_debug_hud_mode = 0 and visible = true) visible = false;
        if obj_level_editor.use_write_delay &gt; 0 tile_set_depth(tile_surface_id,surface_slopes);
    }
else
    {
        if (obj_game_logic.debug_hud != 1 and visible = false) visible = true;
        if (obj_game_logic.debug_hud = 1  and visible = true) visible = false;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Sprites And Trigger Boundaries
if visible = true
    {
        //Draw Tile Boundary Box
        draw_set_alpha(alpha)
        if tile_side_a = 1
            {
                draw_rectangle_colour(x-16,y-40,x+48,y,c_red,c_red,c_yellow,c_red,false)
                draw_triangle_colour(x-16,y,x+48,y,x+48,y+56,c_red,c_red,c_yellow,false)
                
            }
        if tile_side_b = 1
            {
                draw_rectangle_colour(x-16,y+72,x+48,y+96,c_red,c_red,c_yellow,c_red,false)
                draw_triangle_colour(x-16,y+6,x-16,y+72,x+48,y+72,c_red,c_red,c_yellow,false)
            }
        draw_set_color(c_white)
        if tile_side_a = 1
            {
                draw_rectangle(x-16,y-40,x+48,y,true)
                draw_triangle(x-16,y,x+48,y,x+48,y+56,true)
            }
        if tile_side_b = 1
            {
                draw_rectangle(x-16,y+72,x+48,y+96,true)
                draw_triangle(x-16,y+6,x-16,y+72,x+48,y+72,true)
            }
        draw_set_alpha(1)
        draw_sprite_ext(sprite_index,0,x,y,0.5,0.5,0,c_white,1)

        var string_side = "Side A"
        draw_set_font(parent.text_font_academy)
        if tile_side_b = 1 string_side = "Side B";
        draw_text(x+18,y+2,string_side)
        //Boundary Boxes Highlights
        alpha = lerp(alpha,alpha_lerp,0.025)
        if alpha &gt; 0.3 alpha_lerp = 0;
        if alpha &lt; 0.1 alpha_lerp = 1;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
