<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_flood_balls</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-7</depth>
  <persistent>0</persistent>
  <parentName>obj_ignore</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Are We Allowed To Hold Items?
give_item = 0
item = 0
attacked = 0
attacked_damage = 4
attacked_allow = 0
gravity_cap = 16
gravity_speed = 4
gravity_slope = 0
gravity_accel = 0.24
ground = 0
angle = 0
flood_splatter_frame = 0
flood_direction = -1
flood_timer = 0
flood_iterate = 0
flood_taper_timer = 0
flood_particle_iterate = 0
flood_particle_sprites = spr_flood_pools
if obj_game_logic.use_weather_direction = 0
    flood_direction = -1;
if obj_game_logic.use_weather_direction = 1
    flood_direction = 1;

main_sprite_visible = false

if room = rm_editor
    {
        if obj_level_editor.use_debug_hud_mode = 0
            main_sprite_visible = false;
        if obj_level_editor.use_debug_hud_mode = 1
            main_sprite_visible = true;
    }
flood_visible[0] = false
flood_x[0] = 0
flood_y[0] = 0
flood_frame[0] = 0
flood_angle[0] = 0

flood_visible[1] = false
flood_x[1] = 0
flood_y[1] = 0
flood_frame[1] = 0
flood_angle[1] = 0

flood_visible[2] = false
flood_x[2] = 0
flood_y[2] = 0
flood_frame[2] = 0
flood_angle[2] = 0

flood_visible[3] = false
flood_x[3] = 0
flood_y[3] = 0
flood_frame[3] = 0
flood_angle[3] = 0

flood_visible[4] = false
flood_x[4] = 0
flood_y[4] = 0
flood_frame[4] = 0
flood_angle[4] = 0

flood_visible[5] = false
flood_x[5] = 0
flood_y[5] = 0
flood_frame[5] = 0
flood_angle[5] = 0

flood_visible[6] = false
flood_x[6] = 0
flood_y[6] = 0
flood_frame[6] = 0
flood_angle[6] = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//----------------------------------//
//       Basic Gravity System       //
//----------------------------------//

if obj_game_logic.pause = 0

{

var floor_center = tile_layer_find(surface_flats,x,y);

//If we are not at the speed cap, apply acceleration.
if !tile_exists(floor_center) and gravity_speed&lt;gravity_cap
    gravity_speed+=gravity_accel;

if gravity_speed &gt; gravity_cap
    gravity_speed = gravity_cap;
    
if tile_exists(floor_center)
    {
        y = tile_get_y(floor_center);
        ground = 1
        gravity_speed = 0
        angle = 0
    }
else
    {
        ground = 0;
    }

//Sloped Floor Collisions
var tile_ramp_id = tile_layer_find(surface_slopes,x,y);

//If we are colliding with a slope tile, clip to its surface based on X position
if tile_exists(tile_ramp_id)
    {
        //Collect Background ID of the Tile
        var tile_ramp_asset = obj_game_logic.enemy_slopes[tile_get_background(tile_ramp_id)];

        //Get Gem Coordinates Relative to the Tile's Origins
        var tile_ramp_pos_0=abs(tile_get_x(tile_ramp_id)-x)   //Get X
        var tile_ramp_pos_1=abs(tile_get_y(tile_ramp_id)-y)   //Get Y

                //If tile was not flagged as "ignore", read its collision data
                if tile_ramp_asset != -1
                    {
                        //Check If Gem Y is Greater Than Slope's Current Height
                        if tile_ramp_pos_1 &gt;= obj_game_logic.orig_clip[tile_ramp_asset,tile_ramp_pos_0]
                            {
                                gravity_slope=1
                            }
                        if obj_game_logic.orig_clip[tile_ramp_asset,tile_ramp_pos_0] = -1
                            gravity_slope = 0;
                        if gravity_slope = 1
                            {
                                //If We Are Colliding with Slope, Clip to its Y Coordinates
                                y = floor(tile_get_y(tile_ramp_id))+obj_game_logic.orig_clip[tile_ramp_asset,tile_ramp_pos_0]
                                gravity_speed=0
                                angle = obj_game_logic.orig_clip[tile_ramp_asset+obj_game_logic.scr_local_angles,tile_ramp_pos_0]
                            }
                    }
    }
else
    {
        gravity_slope = 0
        angle = 90
        if sprite_index = spr_flood_pools
            sprite_index = spr_flood_droplets;
        if ground = 1
            angle = 0;
    }

//Clean slope tile variables when collisions are done
if !tile_exists(tile_ramp_id)
    gravity_slope = 0;

//Apply Gravity Speed to Y Coordinates
if gravity_slope = 0 and ground = 0
    {
        y+=gravity_speed;
    }

//Animate flood particles
flood_frame[0] += 0.25
if flood_frame[0] &gt; 2
    {
        flood_frame[0] = 0;
    }
flood_splatter_frame += 0.40
if flood_splatter_frame &gt; 3.8
    {
        flood_splatter_frame = 0;
    }

if gravity_speed = 0
    {
        sprite_index = spr_flood_pools
        main_sprite_visible = true
        flood_timer += 2
        if flood_iterate &lt;= 24
            {
                if gravity_slope = 1 or ground = 1
                    {
                        x += 2*flood_direction
                    }
            }
        if flood_timer = 8
            {
                scr_set_flood_balls(self,flood_particle_iterate);
                flood_timer = 0
                flood_iterate += 1
                flood_particle_iterate += 1
                if flood_particle_iterate &gt; 6
                    flood_particle_iterate = 0;
            }
        if !audio_is_playing(snd_water_trickle)
            audio_play_sound(snd_water_trickle,50,false);
    }
else
    {
        if flood_iterate &gt; 0 flood_iterate = 25;
    }
if flood_iterate &gt; 24
    {
        if gravity_speed = 0
            main_sprite_visible = false;
        flood_taper_timer += 1
        if flood_taper_timer = 30
            flood_visible[6] = false
        if flood_taper_timer = 38
            flood_visible[5] = false
        if flood_taper_timer = 46
            flood_visible[4] = false
        if flood_taper_timer = 54
            flood_visible[3] = false
        if flood_taper_timer = 62
            flood_visible[2] = false
        if flood_taper_timer = 70
            flood_visible[1] = false
        if flood_taper_timer = 78
            flood_visible[0] = false
        if flood_taper_timer = 86
            instance_destroy();
    }

if flood_visible[0] = true
    {
        var circle_ID = collision_circle(flood_x[0],flood_y[0],16,obj_enemy_parent,false,true);
        if instance_exists(circle_ID)
            {
                circle_ID.slip_timer = 16
                circle_ID.weather_slip_target = 2*flood_direction
            }
        var circle_ID = collision_circle(flood_x[0],flood_y[0],16,obj_mega_crate,false,true);
        if instance_exists(circle_ID)
            {
                circle_ID.slip_timer = 16
                circle_ID.weather_slip_target = 2*flood_direction
            }
    }


if y &gt; obj_game_logic.water_height
or y &gt; room_height
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if main_sprite_visible = true
    {
        draw_sprite_ext(sprite_index,0,x,y,1,1,angle,c_white,1)
    }

var it = 0;
while(it &lt;= 6)
    {
        if flood_visible[it] = true
            {
                draw_sprite_ext(flood_particle_sprites,flood_frame[0],flood_x[it],flood_y[it],1,1,flood_angle[it],c_white,1)
                draw_sprite_ext(spr_rain_particles,flood_splatter_frame,flood_x[it],flood_y[it],1,1,flood_angle[it],c_white,1)
            }
        it += 1
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
