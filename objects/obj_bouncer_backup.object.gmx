<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bouncer_thumbnail</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy_explode</parentName>
  <maskName>spr_bouncer_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup Variables
event_inherited()
body_x = x
body_y = y-72
body_angle = 0
body_timer = 0
body_target = 0
body_wiggle = 0
angle_offset = 0
jump_speed = 0
jump_target = 10
death_type = 5
ground_timer = 0
gravity_max = 10
hp_offset = -128
xdir = 1
phase = 0
timer = 0
boss_enemy = 1
heart = 192                          //Enemy Health
heartmax = 192                       //Enemy Health
hp_mod = 0.26041667
hp_target = heart
heart_bar_target = ((heart/2)-(heartmax/4))+2
heart_bar_target_2 = heart/2
death_timer = 0
slowdown_timer = 0
editor_mode_timer = 0
can_draw_sprite = 0
can_die_upon_impact = 0
flash_palette = spr_bouncer_palette
sprite_index = spr_bouncer_body
mask_width = sprite_get_width(spr_bouncer_thumbnail)/2
mask_height = sprite_get_height(spr_bouncer_thumbnail)

//Left Foot
foot_x_0 = x
foot_y_0 = y
foot_angle = 0
//Right Foot
foot_x_1 = x+32
foot_y_1 = y

//Left Leg
leg_x[0] = x
leg_y[0] = y
leg_attach_point_0 = 52.4
var count = 0;
while(count &lt; 256)
    {
        leg_x[count] = x
        leg_y[count] = y
        count += 1
    }
//Right Leg
leg_x_1[0] = x
leg_y_1[0] = y
leg_attach_point_1 = 47.3
var count = 0;
while(count &lt; 256)
    {
        leg_x_1[count] = x
        leg_y_1[count] = y
        count += 1
    }

//Lantern
lantern_x[0] = x
lantern_y[0] = y
var count = 0;
while(count &lt; 8)
    {
        lantern_x[count] = x
        lantern_y[count] = y
        count += 1
    }
lantern_distance = 120
lantern_angle = 0
lantern_attach_point = 63.2
lantern_frame = 0
//Lantern Mount Points
lantern_mount_distance[0] = 0
lantern_mount_distance[1] = 16.3
lantern_mount_distance[2] = 32.2
lantern_mount_distance[3] = 48.00
lantern_mount_distance[4] = 63.2
lantern_mount_distance[5] = 78.4
lantern_mount_distance[6] = 94
lantern_mount_distance[7] = 0
lantern_mount_angle[0] = 0
lantern_mount_angle[1] = 10.62
lantern_mount_angle[2] = 7.13
lantern_mount_angle[3] = 1.19
lantern_mount_angle[4] = -4.54
lantern_mount_angle[5] = -11.02
lantern_mount_angle[6] = -16.7
lantern_mount_angle[7] = -24
target_x = x
target_y = y
target_frame = 0
target_distance = 0
target_offset = 0
target_lerp = 0
target_timer = 0
target_speed = 16
hitbox_x = x
hitbox_y = y
turn = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if o.targets_mode = spr_hud_target_boss and room != rm_editor and room != rm_cutscene
    {
        o.targets_ready = 3;
        audio_play_sound(snd_explosion,50,false)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()

if room = rm_editor
    {
        editor_mode_timer += 1

        if editor_mode_timer = 30
            {
                if o.user_cursor_mode = 1
                    mask_index = spr_bouncer_thumbnail;
                else
                    {
                        if xdir = -1
                            mask_index = spr_bouncer_mask_left;
                        if xdir = 1
                            mask_index = spr_bouncer_mask;
                    }
            }
        //Prevent Certain Mod Chips From Activating
        if instance_number(obj_bouncer) &gt; 1
            {
                scr_set_message("There can only be one Bouncer per stage!")
                instance_destroy();
            }
        if item = spr_mod_chip_extra_large
            {
                item = 0
                scr_set_message("Bouncer is big enough to take you on!")
            }
    }

if o.pause = 0 and heart &gt;= 0
    {
        image_angle = body_angle+angle_offset
        lantern_frame += 0.20
        if lantern_frame &gt; 2.8
            lantern_frame = 0;
        //Animate Lantern Segments
        if target_frame &gt; 0
            {
                target_frame += 0.15
                if target_frame &gt; 4.8
                    target_frame = 0;
            }
        //Bobble Lantern When Attacked
        if attacked = 1 and target_timer &lt; 16
            {
                target_timer = 31
                target_speed = abs(o.hsp)*2
            }
        if target_timer &gt; 0
            {
                target_timer -= 1
                switch(target_timer)
                    {
                        case 0: {target_lerp = 0; break;}
                        case 1: {target_lerp = 0; break;}
                        case 15: {target_lerp = -target_speed; break;}
                        case 30: {target_lerp = target_speed; break;}
                    }
            }
        target_offset = lerp(target_offset,target_lerp,0.25)
        //Turn Around
        if turn = 1
            {
                if xdir = -1
                    {
                        body_angle = 180
                        lantern_angle = 69.5
                        leg_attach_point_0 = 47.3
                        leg_attach_point_1 = 52.4
                        lantern_mount_angle[0] = -0
                        lantern_mount_angle[1] = -10.62
                        lantern_mount_angle[2] = -7.13
                        lantern_mount_angle[3] = -1.19
                        lantern_mount_angle[4] = 4.54
                        lantern_mount_angle[5] = 11.02
                        lantern_mount_angle[6] = 16.7
                        lantern_mount_angle[7] = 24
                        mask_index = spr_bouncer_mask_left
                    }
                if xdir = 1
                    {
                        body_angle = 0
                        lantern_angle = 0
                        leg_attach_point_0 = 52.4
                        leg_attach_point_1 = 47.3
                        lantern_mount_angle[0] = 0
                        lantern_mount_angle[1] = 10.62
                        lantern_mount_angle[2] = 7.13
                        lantern_mount_angle[3] = 1.19
                        lantern_mount_angle[4] = -4.54
                        lantern_mount_angle[5] = -11.02
                        lantern_mount_angle[6] = -16.7
                        lantern_mount_angle[7] = -24
                        mask_index = spr_bouncer_mask
                    }
                turn = 0
                target_offset = 0
            }

        if (phase &gt; 0)
            {
                //Attack Scanning//
                //---------------//

                //Hurt The Player If They've Been Punched By The Boxing Glove
                if (o.hurt[0] = 0 and o.hurt[1] = 0
                and o.shield_invuln = 32
                and (point_in_circle(hitbox_x,hitbox_y,o.universal_player_x,o.universal_player_y,64))
                or point_in_circle(x,y,o.universal_player_x,o.universal_player_y,32))
                    {
                        //Deal one life petal of damage
                        o.hurt[0] = 1;
                        switch(o.user_enemy_level)
                            {
                                case 0: {o.hurt[3] = 0.4; break;}
                                case 1: {o.hurt[3] = 0.4; break;}
                                case 2: {o.hurt[3] = 1; break;}
                            }
                        o.hsp = 8*sign(o.hsp)
                        target_frame = 0.1
                        audio_play_sound(snd_enemy_sword,50,false)
                    }
                //Mega Items
                var instance_ID = collision_circle(hitbox_x,hitbox_y,64,obj_mega_item_parent,false,true);
                if instance_ID != noone
                    {
                        instance_ID.attacked = 2
                    }
                //Items
                var instance_ID = collision_circle(hitbox_x,hitbox_y,64,obj_destructible,false,true);
                if instance_ID != noone
                    {
                        instance_ID.attacked = 1
                    }
                //Attack other enemies within range of the boxing glove
                instance_ID = collision_circle(hitbox_x,hitbox_y,64,obj_enemy_parent,false,true);
                if instance_exists(instance_ID)
                    {
                        if instance_ID.attacked = 0 and instance_ID.alpha = 0
                            {
                                instance_ID.attacked = 1
                                instance_ID.attacked_damage = 2
                            }
                    }
            }

        //Movement System
        switch(phase)
            {
                //Idle Phase
                case 0:
                    {
                        timer += 1
                        body_timer+= 1
                        switch(body_timer)
                            {
                                case 0:  {body_target = 0;  body_wiggle = 4; break;}
                                case 15: {body_target = -8; body_wiggle = 0; break;}
                                case 30: {body_target = 0;  body_wiggle = 8; break;}
                                case 45: {body_target = 32; body_wiggle = 4; break;}
                                case 60: {body_target = 16; body_wiggle = 0; body_timer = 0; break;}
                            }
                        if (ground = 1 or gravity_slope = 1)
                            {
                                body_x = lerp(body_x,x+body_target,0.1)
                                body_y = lerp(body_y,y-82-body_wiggle,0.1)
                                foot_angle = tile_angle
                                ground_timer += 1
                                if tile_angle &gt; 45 and tile_angle &lt; 180
                                or tile_angle &gt; 225 and tile_angle &lt; 315
                                    turn = 1;
                            }
                        else
                            {
                                body_x = lerp(body_x,x+8,0.1)
                                body_y = lerp(body_y,y-72,0.1)
                                foot_angle = body_angle
                                ground_timer = 0
                            }
                        //Shake the ground when landing
                        if ground_timer = 1
                            {
                                target_timer = 31
                                target_speed = 8
                                //Hurt The Player If They've Been Punched By The Boxing Glove
                                if (o.hurt[0] = 0 and o.hurt[1] = 0
                                and o.shield_invuln = 32
                                and point_in_circle(x,y,o.universal_player_x,o.universal_player_y,64))
                                    {
                                        //Deal one life petal of damage
                                        o.hurt[0] = 1;
                                        switch(o.user_enemy_level)
                                            {
                                                case 0: {o.hurt[3] = 0.4; break;}
                                                case 1: {o.hurt[3] = 1; break;}
                                                case 2: {o.hurt[3] = 2; break;}
                                            }
                                        o.hsp = 8*sign(o.hsp)
                                    }
                                //Mega Items
                                var instance_ID = collision_circle(x,y,64,obj_mega_item_parent,false,true);
                                if instance_exists(instance_ID)
                                    {
                                        instance_ID.attacked = 2
                                    }
                                //Items
                                var instance_ID = collision_circle(x,y,64,obj_destructible,false,true);
                                if instance_exists(instance_ID)
                                    {
                                        instance_ID.attacked = 1
                                    }
                                //Attack other enemies within range of the boxing glove
                                instance_ID = collision_circle(x,y,64,obj_enemy_parent,false,true);
                                if instance_exists(instance_ID)
                                    {
                                        if instance_ID.attacked = 0 and instance_ID.alpha = 0
                                            {
                                                instance_ID.attacked = 1
                                                instance_ID.attacked_damage = 2
                                            }
                                    }
                                audio_play_sound(snd_heavy_drop,50,false);
                                scr_set_screen_shake(24,3)
                            }
                        if timer = 90
                            {
                                var character_angle = point_direction(body_x,body_y,o.px,o.py);

                                //Leap Forwards
                                if (((character_angle &gt;= 270 or character_angle &lt;= 45) and xdir = -1)
                                or (character_angle &gt; 135 and character_angle &lt; 270 and xdir = 1))
                                and (point_distance(x+16,y,o.universal_player_x,o.universal_player_y) &lt; 72)
                                    phase = 3;
                                else
                                    {
                                        if body_x &gt; o.px
                                            xdir = -1;
                                        if body_x &lt;= o.px
                                            xdir = 1;
                                        turn = 1
                                    }
                            }
                        //Rotation lag
                        if xdir = -1
                            {
                                if body_angle &lt; 180 body_angle += 4;
                                if body_angle &gt; 180 body_angle -= 4;
                            }
                        if xdir = 1
                            {
                                if body_angle &lt; 0 body_angle += 4;
                                if body_angle &gt; 0 body_angle -= 4;
                            }
                        //Assess which direction to attack the player
                        if timer = 120
                            {
                                var character_angle = point_direction(body_x,body_y,o.px,o.py);
                                if o.user_cursor_mode = 0
                                    {
                                        //Leap Forwards
                                        if ((character_angle &gt;= 270 or character_angle &lt;= 45) and xdir = 1)
                                        or ((character_angle &gt; 135 and character_angle &lt; 270) and xdir = -1)
                                            phase = 2;
                                        //Leap Upwards
                                        if character_angle &gt; 45 and character_angle &lt;= 135
                                            phase = 1;
                                    }
                                timer = 0
                            }
                        break;
                    }
                //Upwards Leaping Phase
                case 1:
                    {
                        timer += 1
                        if timer = 1
                            {
                                jump_speed = 0
                                jump_target = 10
                                ground_timer = 0
                            }
                        if timer &gt;= 0 and timer &lt; 15
                            {
                                body_y += 5
                                body_angle += 2*-xdir
                            }
                        if timer &gt;= 15 and timer &lt; 45
                            {
                                if (timer = 15)
                                    {
                                        scr_set_screen_shake(12,3)
                                        audio_play_sound(snd_bouncy_cube,50,false);
                                    }
                                if (timer = 20 or timer = 25 or timer = 30)
                                    audio_play_sound(snd_heavy_skidding,50,false);
                                jump_speed = lerp(jump_speed,jump_target,1)

                                if timer &gt;= 20
                                    {
                                        y -= jump_speed;
                                        gravity_slope = 0
                                    }
                                body_y -= jump_speed

                                body_angle += 2*xdir
                            }
                        if timer = 45
                            {
                                timer = 0
                                phase = 0
                            }
                        break;
                    }
                //Fowards Leaping Phase
                case 2:
                    {
                        timer += 1
                        if timer = 1
                            {
                                jump_speed = 0
                                jump_target = 10
                                ground_timer = 0
                            }
                        if timer &gt;= 0 and timer &lt; 15
                            {
                                body_y += 5
                                body_angle += 2*-xdir
                            }
                        if timer &gt;= 15 and timer &lt; 45
                            {
                                if (timer = 15)
                                    {
                                        scr_set_screen_shake(12,3)
                                        audio_play_sound(snd_bouncy_cube,50,false);
                                    }
                                if (timer = 20 or timer = 25 or timer = 30)
                                    audio_play_sound(snd_heavy_skidding,50,false);
                                jump_speed = lerp(jump_speed,jump_target,1)

                                if timer &gt;= 20
                                    {
                                        y -= jump_speed;
                                        gravity_slope = 0
                                    }
                                var wall_id = tile_layer_find(surface_flats,x+(32*xdir),y);
                                var forward_speed = jump_speed;
                                if tile_exists(wall_id)
                                    {
                                        if xdir = 1
                                            forward_speed = -abs(jump_speed);
                                        if xdir = -1
                                            forward_speed = abs(jump_speed);
                                    }
                                if x &lt; o.camera_boundary_left     x = o.camera_boundary_left + 32;
                                if x &gt; o.camera_boundary_right-32 x = o.camera_boundary_right - 32;
                                x += forward_speed*xdir
                                body_x = x+8
                                body_y -= jump_speed

                                body_angle += 2*xdir
                            }
                        if timer = 45
                            {
                                timer = 0
                                phase = 0
                            }
                        break;
                    }
                //Backwards Bouncing Phase
                case 3:
                    {
                        timer += 1
                        if timer = 1
                            {
                                jump_speed = 0
                                jump_target = 10
                                ground_timer = 0
                                target_timer = 31
                                target_speed = 4
                            }
                        body_x = lerp(body_x,x+(96*-xdir),0.20)
                        body_y = lerp(body_y,y,0.15)
                        body_angle += 3*xdir
                        if body_y &gt; y - 16
                            {
                                //Hurt The Player If They've Been Punched By The Boxing Glove
                                if (o.hurt[0] = 0 and o.hurt[1] = 0
                                and o.shield_invuln = 32
                                and (point_in_circle(body_x,body_y,o.universal_player_x,o.universal_player_y,64)))
                                    {
                                        //Deal one life petal of damage
                                        o.hurt[0] = 1;
                                        switch(o.user_enemy_level)
                                            {
                                                case 0: {o.hurt[3] = 0.4; break;}
                                                case 1: {o.hurt[3] = 1; break;}
                                                case 2: {o.hurt[3] = 2; break;}
                                            }
                                    }
                                //Mega Items
                                var instance_ID = collision_circle(body_x,body_y,64,obj_mega_item_parent,false,true);
                                if instance_ID != noone
                                    {
                                        instance_ID.attacked = 2
                                    }
                                //Items
                                var instance_ID = collision_circle(body_x,body_y,64,obj_destructible,false,true);
                                if instance_ID != noone
                                    {
                                        instance_ID.attacked = 1
                                    }
                                //Attack other enemies within range of the boxing glove
                                instance_ID = collision_circle(body_x,body_y,64,obj_enemy_parent,false,true);
                                if instance_exists(instance_ID)
                                    {
                                        if instance_ID.attacked = 0 and instance_ID.alpha = 0
                                            {
                                                instance_ID.attacked = 1
                                                instance_ID.attacked_damage = 2
                                            }
                                    }
                                scr_set_screen_shake(24,3)
                                audio_play_sound(snd_heavy_skidding,50,false);
                                timer = 0
                                phase = 0
                            }
                        break;
                    }
            }
    }
if heart &lt; 0 and o.pause = 0
    {
        if o.timer_stop = 0
            {
                o.timer_stop = 1
                depth = 0
                death = 5
                timer = 0
                x = body_x
                y = body_y
                body_x = 0
                body_y = 0
                body_angle = 0
                scr_stop_boss_music()
            }
        if slowdown_timer = 1 or room = rm_editor
            {
                x += 5*xdir
                y += 2
                body_angle += 2*-xdir
                body_x += 3
                body_y += 1
            }
        gravity_speed = 0
        timer += 1
        death_timer += 1
        if timer = 2
            {
                alpha = 1
                audio_play_sound(snd_enemy_explosion,50,false)
            }
        if timer &gt;= 8
            {
                timer = 0
                alpha = 1
            }
        slowdown_timer += 1
        if slowdown_timer = 2 and room != rm_editor
            {
                o.pause_logic = 2
                slowdown_timer = 0
            }
        if death_timer &gt; 180
            {
                if room != rm_editor
                    instance_destroy();
                if room = rm_editor
                    {
                        var obj_id = instance_create(start_x,start_y,object_index);
                        obj_id.item = item
                        instance_destroy()
                    }
            }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if o.user_cursor_mode = 0
    {
        draw_sprite(spr_boss_hud,0,internal_res_width,internal_res_height-8)
        var timer_scaling = 120;
        var timer_cap = timer;
        if timer &gt; 120
            timer_cap = 120;
        if heart &lt;= 0
            timer_scaling = 240;
        if heart &gt; 0 and heart &lt;= heartmax/2
            {
                heart_bar_target_2 = lerp(heart_bar_target_2,heart/2,0.15);
                draw_sprite_part_ext(spr_boss_health,0,0,0,heart_bar_target_2,3,405,213,-1,1,c_white,1)
                timer_scaling = 240
            }
        if heart &gt; heartmax/2
            {
                draw_sprite_part(spr_boss_health,0,0,0,48,3,356,213)
                var heart_scale = ((heart/2)-(heartmax/4))+2;
                heart_bar_target = lerp(heart_bar_target,heart_scale,0.15);
                draw_sprite_part_ext(spr_boss_health,0,0,0,heart_bar_target,3,353,213,-1,1,c_white,1)
            }
        draw_sprite_ext(spr_boss_stamina,0,405,221,-(timer_cap/timer_scaling),1,0,c_white,1);
        draw_set_color(c_white)
        draw_set_font(o.text_font)
        draw_set_halign(fa_right)
        draw_text(406,192,"Bouncer")
        draw_set_halign(fa_left)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>angle_offset = 0;
if xdir = -1
    angle_offset = 180;

var pal_alpha = 0;
if (alpha &gt; 0.5) pal_alpha = 1;
script_execute(o.pal_swap_script,flash_palette,pal_alpha,false)

if heart &gt;= 0
    {
        //Update Feet
        foot_x_0 = x
        foot_y_0 = y
        foot_x_1 = x+32
        foot_y_1 = y
        
        //Interior
        draw_sprite_ext(spr_bouncer_body,1,body_x,body_y,xdir,1,body_angle+angle_offset,c_white,1)
        
        //Anchor Points For Legs
        var left_hip_socket_x  = body_x+lengthdir_x(leg_attach_point_0,body_angle-(113.63+angle_offset));
        var left_hip_socket_y  = body_y+lengthdir_y(leg_attach_point_0,body_angle-(113.63+angle_offset));
        var right_hip_socket_x = body_x+lengthdir_x(leg_attach_point_1,body_angle-(83.93+angle_offset));
        var right_hip_socket_y = body_y+lengthdir_y(leg_attach_point_1,body_angle-(83.93+angle_offset));
        
        //Anchor Points For Lantern
        var lantern_socket_x = body_x+lengthdir_x(lantern_attach_point,body_angle+(55.30+angle_offset)+lantern_angle);
        var lantern_socket_y = body_y+lengthdir_y(lantern_attach_point,body_angle+(55.30+angle_offset)+lantern_angle);
        var lantern_socket_target_x = lantern_socket_x+lengthdir_x(112,body_angle+lantern_mount_angle[7]);
        var lantern_socket_target_y = lantern_socket_y+lengthdir_y(112,body_angle+lantern_mount_angle[7]);
        
        //Left Leg
        var leg_count = 0;
        var leg_distance  = floor(point_distance(foot_x_0,foot_y_0,left_hip_socket_x,left_hip_socket_y)/16);
        var leg_direction = point_direction(foot_x_0,foot_y_0,left_hip_socket_x,left_hip_socket_y);
        
        while(leg_count &lt; leg_distance+1)
            {
                leg_x[leg_count] = foot_x_0+lengthdir_x(leg_distance+(16*leg_count),leg_direction)
                leg_y[leg_count] = foot_y_0+lengthdir_y(leg_distance+(16*leg_count),leg_direction)
                draw_sprite(spr_bouncer_segment,0,leg_x[leg_count],leg_y[leg_count])
                leg_count += 1
            }
        
        //Right Leg
        var leg_count = 0;
        var leg_distance  = floor(point_distance(foot_x_1,foot_y_1,right_hip_socket_x,right_hip_socket_y)/16);
        var leg_direction = point_direction(foot_x_1,foot_y_1,right_hip_socket_x,right_hip_socket_y);
        
        while(leg_count &lt; leg_distance+2)
            {
                leg_x_1[leg_count] = foot_x_1+lengthdir_x(leg_distance+(16*leg_count),leg_direction)
                leg_y_1[leg_count] = foot_y_1+lengthdir_y(leg_distance+(16*leg_count),leg_direction)
                draw_sprite(spr_bouncer_segment,0,leg_x_1[leg_count],leg_y_1[leg_count])
                leg_count += 1
            }
        
        //Main Body
        draw_sprite_ext(spr_bouncer_body,0,body_x,body_y,xdir,1,body_angle+angle_offset,c_white,1)
        //Main Body Thinking
        if (timer &gt; 60 and phase = 0)
            draw_sprite_ext(spr_bouncer_body,2,body_x,body_y,xdir,1,body_angle+angle_offset,c_white,1);
        //Main Body Leaping
        if (phase = 2)
            draw_sprite_ext(spr_bouncer_body,4,body_x,body_y,xdir,1,body_angle+angle_offset,c_white,1);
        //Main Body Backwards Bouncing
        if (phase = 3)
            draw_sprite_ext(spr_bouncer_body,3,body_x,body_y,xdir,1,body_angle+angle_offset,c_white,1);

        if room = rm_editor
            {
                var parent = obj_level_editor;
                if (point_in_rectangle(parent.use_cursor_x,parent.use_cursor_y,x-mask_width,y-mask_height,x+mask_width,y)
                    and parent.user_cursor_mode = 0 and parent.use_tile_menu = 0 and parent.side_bar_allow = 0)
                or (scale &gt; 1)
                    {
                        draw_set_blend_mode(bm_add)
                        draw_sprite_ext(spr_bouncer_body,0,body_x,body_y,xdir*scale,scale,body_angle+angle_offset,c_yellow,user_tile_boundary_alpha)
                        draw_set_blend_mode(bm_normal)
                    }
            }

        //Lantern
        var leg_count = 0;
        
        while(leg_count &lt; 7)
            {
                lantern_x[leg_count] = lantern_socket_x+lengthdir_x(lantern_mount_distance[leg_count],body_angle+lantern_mount_angle[leg_count])+(target_offset*leg_count)
                lantern_y[leg_count] = lantern_socket_y+lengthdir_y(lantern_mount_distance[leg_count],body_angle+lantern_mount_angle[leg_count])
                draw_sprite(spr_bouncer_lantern_segment,target_frame,lantern_x[leg_count],lantern_y[leg_count])
                if leg_count = 3
                    {
                        hitbox_x = lantern_x[leg_count]
                        hitbox_y = lantern_y[leg_count]
                    }
                leg_count += 1
            }
        //Target
        draw_sprite(spr_bouncer_target,lantern_frame,lantern_socket_target_x+(target_offset*7),lantern_socket_target_y)
        target_x = lantern_socket_target_x+(target_offset*7);
        target_y = lantern_socket_target_y;
        
        draw_sprite_ext(spr_bouncer_feet,0,foot_x_1-32,foot_y_0,xdir,1,foot_angle,c_white,1)
        draw_sprite_ext(spr_bouncer_feet,0,foot_x_1,foot_y_1,xdir,1,foot_angle,c_white,1)
    }
else
    {
        //Main Body
        draw_sprite_ext(spr_bouncer_body,1,x,y,xdir,1,body_angle,c_white,1)
        draw_sprite_ext(spr_bouncer_body,0,x,y,xdir,1,body_angle,c_white,1)
        draw_sprite_ext(spr_bouncer_body,4,x,y,xdir,1,body_angle,c_white,1)

        draw_sprite(spr_bouncer_segment,0,x+body_x,y+body_y)
        draw_sprite(spr_bouncer_segment,0,x-body_x,y+body_y)
        draw_sprite(spr_bouncer_segment,0,x-body_x,y-body_y)
        draw_sprite(spr_bouncer_segment,0,x+body_x,y-body_y)

        draw_sprite(spr_bouncer_lantern_segment,0,x+(body_x/2),y+(body_y-32/2))
        draw_sprite(spr_bouncer_lantern_segment,1,x-(body_x/8),y+(body_y-32))
        draw_sprite(spr_bouncer_lantern_segment,0,x-(body_x/2),y-(body_y-32))
        draw_sprite(spr_bouncer_lantern_segment,1,x+(body_x/4),y-(body_y-32/2))
        draw_sprite(spr_bouncer_lantern_segment,0,x+(body_x/2),y-(body_y-32))
        draw_sprite(spr_bouncer_lantern_segment,0,x+(body_x/8),y-(body_y-32/4))
        draw_sprite(spr_bouncer_lantern_segment,0,x+(body_x/2),y-(body_y-32/4))

        draw_sprite_ext(spr_bouncer_feet,0,x+(body_x/2),y-body_y+16,xdir,1,body_angle*2,c_white,1)
        draw_sprite_ext(spr_bouncer_feet,0,x-(body_x/8),y+body_y-48,xdir,1,body_angle*2,c_white,1)
    }
shader_reset();
event_inherited()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
