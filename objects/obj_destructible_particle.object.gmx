<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_gem</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-7</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics and Animation Variables

//Tile Surface Sensors
tile_surface_id = 0         //Floor Surface Collision Sensor

//Gravity Variables
gravity_speed   = 0         //Gravity Speed
gravity_accel   = 0.4375    //Gravity Acceleration
gravity_cap     = 8         //Gravity Maximum Speed
gravity_fof     = 0         //Gravity FOF Activation
gravity_slope   = 0         //Gravity Deactivation For Slopes

//State Trigger Variables
is_collected    = 0         //Has the Player Taken the Item?
is_confirmed    = 0         //Have We Confirmed Which Item We Are?
is_floating     = 1         //Were We Told to Float By Another Object?
is_sound        = 0         //Are We Playing A Sound?
is_speed        = 0         //Do We Have A Speed?
is_hor_speed    = 0         //Do We Have A Horizontal Speed? (Orb)
is_time         = 8         //Timer For Upwards Floating
is_hor_time     = 0         //Timer For Horizontal Movement (Orb)
is_an_orb       = 0         //Are We An Elemental Orb?
is_collectable  = 0         //Are We Allowed To Be Attracted By Shields?
is_shield_part  = 0         //Are We A Shield Particle?
is_follow_speed = 6         //How Fast Are We Following The Player?
is_following    = 0         //Have We Gotten Close To The Player?
is_item         = spr_gem   //What Item Are We? Arguments: spr_gem
//                                                         spr_petal_flower
//                                                         spr_gem_stone
//                                                         spr_sparkle
//                                                         spr_hearts
//                                                         spr_hud_gem_plus
//                                                         spr_shield_broken

//Partical Variables
ispeed          = 1         //Direction of speed (Hearts Particles)
gem_visible     = 1         //Are We Visible?

//Particle Landing Variables
particle_landing_visible = 0
particle_landing_frame   = 0
particle_delay_scanning  = 0

//Are We Allowed To Hold Items?
give_item = 0
item = 0
attacked = 0

//Animation Variables
frame = 0                   //Current Frame
anim_frame = 5              //Maximum Number of Frames
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics and Animations

//Pause Safety Check
if obj_game_logic.pause = 0
{
//  Flat Surface Collisions and Gravity  //
//---------------------------------------//

particle_delay_scanning += 1

//Floor Surface Collision Sensor
tile_surface_id = tile_layer_find(surface_flats,x,y)

//If we are colliding with a flat surface, stop gravity
if tile_exists(tile_surface_id) and particle_delay_scanning &gt; 16
    {
        //Reset gravity speed
        gravity_speed=0
        //Reset horizontal speed
        is_speed=0
        gem_visible=0
        particle_landing_visible = 1
    }

//Slope Surface Collision Sensor
tile_ramp_id = tile_layer_find(surface_slopes,x,y)

//If we are colliding with a slope tile, clip to its surface based on X position
if (tile_exists(tile_ramp_id) and gravity_slope = 0 and particle_delay_scanning &gt; 16)
    {
        //Collect Background ID of the Tile
        tile_ramp_asset=tile_get_background(tile_ramp_id)
    
        //Get Gem Coordinates Relative to the Tile's Origins
        tile_ramp_pos[0]=abs(tile_get_x(tile_ramp_id)-x)   //Get X
        tile_ramp_pos[1]=abs(tile_get_y(tile_ramp_id)-y)   //Get Y
    
        //Check If Gem Y is Greater Than Slope's Current Height
        if tile_ramp_pos[1] &gt;= obj_game_logic.orig_clip[tile_ramp_asset,tile_ramp_pos[0]]
            {
                //If Gem is Colliding with Slope, Disable Gravity
                gravity_slope=1
                gravity_speed=0
                gem_visible = 0
                particle_landing_visible = 1
            }
    }

if particle_delay_scanning &lt; 16
    {
        gravity_slope = 0
        tile_surface_id = -1
    }

//Apply horizontal speed if we are not interacting with flat surfaces or slopes
if (tile_surface_id=-1 and gravity_slope=0 and is_collected=0) x += is_speed;

//       Basic Gravity System       //
//----------------------------------//

//If we are not at the speed cap, apply acceleration.
if gravity_slope=0 and tile_surface_id=-1
    {
        //Apply Gravity Speed to Y Coordinates
        y+=gravity_speed

        gravity_speed+=gravity_accel
    }

//Iterate Animation Frames
image_speed=0.12

if particle_landing_visible = 1
    {
        //Iterate Animations Timer
        particle_landing_frame  += 0.15
        //Destroy Self
        if particle_landing_frame &gt; 7.9
            {
                particle_landing_visible = 0
                instance_destroy();
            }
    }

//Deal damage on harder difficulties
if obj_game_logic.user_enemy_level &gt;= 4 and particle_landing_visible = 0
    {
        if sprite_index = spr_rock_broken_0
        or sprite_index = spr_brick_broken_0
        or sprite_index = spr_brick_broken_1
            {
                if (obj_game_logic.hurt[0] = 0 and obj_game_logic.hurt[1] = 0
                and obj_game_logic.shield_invuln = 32
                and point_distance(x,y,obj_game_logic.universal_player_x,obj_game_logic.universal_player_y) &lt; 8)
                    {
                        //Reset gravity speed
                        gravity_speed=0
                        //Reset horizontal speed
                        is_speed=0
                        gem_visible=0
                        particle_landing_visible = 1
                        scr_enemy_deal_damage(0.2,0.4,1)
                        audio_stop_sound(snd_balloon_pop)
                        audio_play_sound(snd_balloon_pop,50,false);
                    }
            }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Main Sprite
if gem_visible = 1 draw_sprite(sprite_index,image_index,x,y);
//Shield Particle Drawing
if is_shield_part = 1 and particle_landing_visible = 0
    {
        draw_set_blend_mode(bm_add)
        draw_sprite_ext(sprite_index,0,x,y,1,1,0,c_white,1)
        draw_set_blend_mode(bm_normal)
    }
//Particle Landing Drawing
if particle_landing_visible = 1 draw_sprite(spr_particle_landing,particle_landing_frame,x,y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
