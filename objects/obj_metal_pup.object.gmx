<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_metal_pup</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy_dropper</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics and Animation Variables
event_inherited()
scr_enemy_hp(15)
hp_offset = -52
death_frame = 16
turn  = 0                           //Sprite Turning
xdir_previous = 0                   //Previous Facing Direction
flash_palette = spr_metal_pup_palette
hp_hor_offset = (sprite_width/2)-8
tile_scanner_timer = 0
dropped_goodies = obj_gold_gem

//Editor Mode Variables
start_x = x
start_y = y
width_x = sprite_width/2
height_y = sprite_height/2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Logic and Animations
event_inherited();
if o.pause = 0 and freeze = 0
    {
        //Reduce Turning If It Is Applied
        if turn &gt; 0 turn -= 0.2;

        //Check If Our Direction Has Changed, And Turn Around, Before Copying What Our Current Direction Is
        if xdir_previous!=xdir turn = 1;
        //Copy Current Direction
        xdir_previous = xdir

        if captured = 1 and object_index = obj_metal_pup and state &lt; 2
            instance_change(obj_metal_pup_child,true);

        //Animation Loops
        if state &lt; 2 and death = 0
            {
                if state = 0
                    {
                        //Iterate Animations
                        if turn = 0 frame += 0.24;
                        if turn = 1 frame = 10;
                        if frame &gt; 9.8 and turn = 0 frame = 0;
                        //Enemy Movement
                        var var_speed = 2;
                        if item = spr_mod_chip_speed var_speed = 4;
                        if scale = 1 x += var_speed*xdir;
                        //Sideways Collisions
                        tile_scanner_timer += 1
                        if tile_scanner_timer &gt;= 5
                            {
                                if xdir = 1
                                    {
                                        if tile_layer_find(surface_flats,x+36,y-18) xdir=-1;
                                    }
                                else
                                    {
                                        if tile_layer_find(surface_flats,x-36,y-18) xdir=1;
                                    }
                                //Directional Switching Tiles
                                var tile_flag = tile_layer_find(surface_flags,x,y-18);
                                var turn_on_tile = 0;
                                if tile_exists(tile_flag)
                                    {
                                        var tile_flag_bg = tile_get_background(tile_flag);
                                        if tile_flag_bg = tile_layer_changer
                                            {
                                                if xdir = 1  and turn_on_tile = 0 {xdir = -1; x -= 4; turn_on_tile = 1;}
                                                if xdir = -1 and turn_on_tile = 0 {xdir =  1; x += 4; turn_on_tile = 1;}
                                            }
                                    }
                                tile_scanner_timer = 0
                            }
                        //Floor Collisions
                        var floor_left   = tile_layer_find(surface_flats,x-36,y+2)
                        var floor_right  = tile_layer_find(surface_flats,x+36,y+2)
                        var floor_center = tile_layer_find(surface_flats,x,y+2)

                        //---Turning System---//

                        //Turn Around If There Are No Floors Ahead
                        if gravity_slope = 0
                            {
                                if tile_exists(floor_left) and tile_exists(floor_center) and !tile_exists(floor_right) xdir=-1;
                                if !tile_exists(floor_left) and tile_exists(floor_center) and !tile_exists(floor_right) xdir=1;
                            }
                        
                        //Clip To Slope
                        if gravity_slope = 1
                            {
                                //Edge Detection For Slopes
                                var tile_check_id = tile_layer_find(surface_slopes,x+(16*xdir),y);
                                var tile_already_turned = 0;
                                if (!tile_exists(tile_check_id) and xdir = 1 and tile_already_turned = 0 and !tile_exists(floor_right)) {xdir = -1; tile_already_turned = 1;}
                                if (!tile_exists(tile_check_id) and xdir = -1 and tile_already_turned = 0 and !tile_exists(floor_left)) {xdir = 1; tile_already_turned = 1;}
                            }

                        //If the Player Is Nearby, Bite Them
                        if point_distance(o.px,o.py,x,y) &lt; 32 and o.use_editor = 0 {state = 1; frame = 11;}
                    }
                //Attacking
                if state = 1
                    {
                        //Do not attack if the player is invisible
                        if o.user_cursor_mode = 1 state = 0;
                        //Iterate Animations
                        frame += 0.24
                        if frame &lt; 11   frame = 11;
                        if frame &gt; 15.8 {frame = 0; being += 1;}
                        if being = 3    {state = 0; being = 0;}
                        //Search For Positions To Deal Damage, If the Player Is Not Hurt
                        if point_distance(o.px,o.py,x,y) &lt; 32 and frame &gt; 14
                        and o.hurt[0] = 0 and o.hurt[1] = 0
                        and o.shield_invuln = 32
                        and not (o.shield_active = 1 and o.shield=spr_shield_metal)
                            scr_enemy_deal_damage(0.4,1,2);
                    }
            }
    } //End of pause check
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Sprite
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
