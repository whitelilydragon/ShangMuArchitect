<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_logic_processor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_npc_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
npc_skin = spr_lilac
npc_name = "Lilac"
npc_speed = 0.12
npc_dialog_string_p1 = ""
npc_dialog_string_p2 = ""
npc_dialog_string = npc_dialog_string_p1
npc_emotion_idle  = spr_lilac_cs_talking_neutral
npc_emotion_happy = spr_lilac_cs_talking_happy
npc_emotion_angry = spr_lilac_cs_angry
npc_emotion_sad   = spr_lilac_cs_worried
npc_emotion_sus   = spr_lilac_cs_concerned
npc_emotion_omg   = spr_lilac_cs_surprised
npc_emotion_mad   = spr_lilac_cs_mad_head_turn
npc_emotion_lmao   = spr_lilac_cs_laugh_out_loud
npc_emotion_scared = spr_lilac_cs_scared
npc_emotion_range = 8
npc_emotion_label_idle   = "Idle"
npc_emotion_label_happy  = "Happy"
npc_emotion_label_angry  = "Angry"
npc_emotion_label_sad    = "Worried"
npc_emotion_label_sus    = "Concerned"
npc_emotion_label_omg    = "Surprised"
npc_emotion_label_mad    = "Upset"
npc_emotion_label_lmao   = "Laughing"
npc_emotion_label_scared = "Scared"
npc_talk_while_idle = 1
npc_talk_voice = snd_text_female
sprite_index = npc_emotion_idle
npc_emotion_selected = spr_lilac_cs_talking_neutral

//if (room != rm_editor and obj_game_logic.skin = spr_lilac)
//    instance_destroy();

sheet = 2
frame = 0                           //Animation Frame
angle = 0                           //Angle of Rotation
xdir = 1                            //Facing Direction
alpha = 0                           //Sprite Flash Alpha
ground = 0
subangle = 0
boss_enemy = 0
o = obj_game_logic
//Physics
enemy_speed = 0                     //Movement Speed
enemy_direction = 0                 //Direction of Movement
enemy_direction_speed = 0.5         //Modifier For Directional Speed
user_tile_boundary_alpha = 0
user_tile_boundary_fade_direction = 1
weather_rain_particles_frame = 0
weather_slip = 0
weather_slip_target = 0
slip_timer = 0
gravity_slope = 0
gravity_speed = 0
gravity_cap = 4
gravity_max = 4
gravity_accel = 0.21875

//Editor Mode Variables
start_x = x
start_y = y
width_x = sprite_width/2
height_y = sprite_height/2
ground = 0
death = 0
captured = 0
play_sound = 1
tile_angle = 0

run_enable = 0
run_sprite = spr_lilac
run_speed = 4
run_direction = 1
frame_min   = o.anim_lilac[3,0]
frame_max   = o.anim_lilac[3,1]
frame_speed = o.anim_lilac[3,3]

idle_min = o.anim_lilac[0,0]
idle_max = o.anim_lilac[0,1]
idle_speed = o.anim_lilac[0,3]

run_frame = idle_min
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change to alt text based on characters
if npc_normal_npc = 1 and room != rm_west_district_0
    scr_dialog_string_character();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
if o.pause = 0
    {
        if room = rm_editor
            {
                var op = obj_level_editor
                if op.use_write_delay &gt; 0
                or (point_in_rectangle(op.use_cursor_x,op.use_cursor_y,start_x-sprite_get_width(run_sprite),start_y-sprite_get_height(run_sprite),start_x+sprite_get_width(run_sprite),start_y+sprite_get_height(run_sprite))
                and op.user_cursor_mode = 0 and op.use_tile_menu = 0)
                    {
                        x = start_x
                        y = start_y
                        scr_npc_running_reset()
                    }
            }

        var floor_center = tile_layer_find(surface_flats,x,y);

        //---------------------------//
        //       Running Logic       //
        //---------------------------//

        if run_enable = 0
            {
                if run_frame &lt; idle_min
                    run_frame = idle_min;
                run_frame += idle_speed
                if run_frame &gt; idle_max+0.8
                    run_frame = idle_min;

                if o.px &lt; x
                    xdir = -1;
                if o.px &gt; x
                    xdir = 1;

                if point_in_rectangle(o.px,o.py,x-64,y-128,x+64,y+32)
                and o.user_cursor_mode = 0
                    {
                        run_enable = 1
                        runaway_npc_prompt = 1
                        if o.px &lt; x
                            run_direction = 1;
                        if o.px &gt; x
                            run_direction = -1;
                        run_frame = frame_min
                    }
                state = 0
            }
        if run_enable = 1
            {
                run_speed += 0.24
                if run_speed &gt; 20
                    run_speed = 20;

                x += run_speed*run_direction
                xdir = run_direction

                if run_frame &lt; frame_min
                    run_frame = frame_min;
                run_frame += frame_speed
                if run_frame &gt; frame_max+0.8
                    run_frame = frame_min;

                if !point_in_rectangle(x,y,view_xview[view_port]-128,view_yview[view_port]-128,view_xview[view_port]+view_wview[view_port]+128,view_yview[view_port]+view_hview[view_port]+128)
                or o.user_cursor_mode = 1
                    {
                        if room = rm_editor
                            {
                                x = start_x
                                y = start_y
                                scr_npc_running_reset()
                            }
                        else
                            instance_destroy();
                    }
            }

        
        //----------------------------------//
        //       Basic Gravity System       //
        //----------------------------------//
        
        if tile_exists(floor_center)
            {
                y = tile_get_y(floor_center);
                ground = 1
                gravity_speed = 0
            }
        else
            ground = 0;

        //Sloped Floor Collisions
        var tile_ramp_id = tile_layer_find(surface_slopes,x,y);
        
        //If we are colliding with a slope tile, clip to its surface based on X position
        if tile_exists(tile_ramp_id)
            {
                //Collect Background ID of the Tile
                var tile_ramp_asset = o.enemy_slopes[tile_get_background(tile_ramp_id)];
        
                //Get Gem Coordinates Relative to the Tile's Origins
                var tile_ramp_pos_0=abs(tile_get_x(tile_ramp_id)-x)   //Get X
                var tile_ramp_pos_1=abs(tile_get_y(tile_ramp_id)-y)   //Get Y
        
                tile_angle = 0;
        
                //If tile was not flagged as "ignore", read its collision data
                if background_exists(tile_ramp_asset)
                    {
                        //Check If Gem Y is Greater Than Slope's Current Height
                        if tile_ramp_pos_1 &gt;= o.orig_clip[tile_ramp_asset,tile_ramp_pos_0]
                            gravity_slope=1;
                        if o.orig_clip[tile_ramp_asset,tile_ramp_pos_0] = -1
                            gravity_slope = 0;
                    
                        //Clip
                        if gravity_slope = 1
                            {
                                y = floor(tile_get_y(tile_ramp_id))+o.orig_clip[tile_ramp_asset,tile_ramp_pos_0]
                                tile_angle = o.orig_clip[tile_ramp_asset+o.scr_local_angles,tile_ramp_pos_0]
                                gravity_speed=0
                            }
                    }
            }
        else
            {
                gravity_slope = 0;
                tile_angle = 0;
            }
        
        //Apply Gravity Speed to Y Coordinates
        if gravity_slope = 0 and ground = 0
            {
                //If we are not at the speed cap, apply acceleration.
                if gravity_speed&lt;gravity_cap
                    gravity_speed+=gravity_accel;
                
                if gravity_speed &gt; gravity_cap
                    gravity_speed = gravity_cap;
        
                y+=gravity_speed;
            }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
if room = rm_editor
    draw_sprite_ext(run_sprite,0,start_x,start_y,xdir,1,0,c_white,0.5);
draw_sprite_ext(run_sprite,run_frame,x,y,xdir,1,tile_angle,c_white,1)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
