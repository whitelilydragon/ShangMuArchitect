<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_pulley</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>obj_pulley_rope_hor</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Startup
event_inherited()

node_timer = 0
node_timer_enable = 0
node_id_0 = noone
node_id_1 = noone
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cleanup Triggers If Node Is Deleted
if (instance_exists(node_id_0)) instance_destroy(node_id_0);
if (instance_exists(node_id_1)) instance_destroy(node_id_1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Node Placement Logic
if o.pause = 0
    {
        image_speed = 0.35;
    
        if node_timer_enable = 0
            node_timer += 1;
        
        if (node_timer &gt;= 60 and room != rm_editor)
        or (node_timer &gt;= 120 and room = rm_editor)
            {
                //Check for skipping over extensive scanning/logic
                var yes = 1;

                //Check for Horizontal Ropes on each side
                var node_left  = collision_rectangle(x-16,y-8,x-4,y+8,obj_pulley_rope_hor,false,true);
                var node_right = collision_rectangle(x+4,y-8,x+16,y+8,obj_pulley_rope_hor,false,true);
        
                //Check for Vertical Ropes on tops and bottoms
                var node_up   = collision_rectangle(x-8,y-16,x+8,y-4,obj_pulley_rope_ver,false,true);
                var node_down = collision_rectangle(x-8,y+4,x+8,y+16,obj_pulley_rope_ver,false,true);

                //------------------------------//
                //         Delete Nodes         //
                //------------------------------//

                //Cleanup nodes and only replace them based on new contexts
                if (instance_exists(node_id_0)) instance_destroy(node_id_0);
                if (instance_exists(node_id_1)) instance_destroy(node_id_1);

                //----------------------------//
                //         Skip Check         //
                //----------------------------//

                //Confirm if the current context allows for placement of nodes
                //----------------------------------------------------------//

                //Do nothing, if nothing is detected
                if (!instance_exists(node_left)
                and !instance_exists(node_right)
                and !instance_exists(node_up)
                and !instance_exists(node_down))
                    {
                        yes = 0;
                        //show_debug_message("Do nothing")
                    }
                //Do nothing if current rope configuration uses pulley as a bridge
                if (instance_exists(node_left) and instance_exists(node_right)
                and !instance_exists(node_up)  and !instance_exists(node_down))
                or (instance_exists(node_up)   and instance_exists(node_down)
                and !instance_exists(node_left) and !instance_exists(node_right))
                    {
                        yes = 0;
                        //show_debug_message("Bridge Found")
                    }

                //Do nothing if current rope configuration leads to a dead-end (Horizontal)
                if (!instance_exists(node_up)  and !instance_exists(node_down))
                    {
                        if (instance_exists(node_left) and !instance_exists(node_right)
                        and !instance_exists(node_down) and !instance_exists(node_up))
                            {
                                yes = 0
                                node_id_0 = instance_create(x+32,y,obj_pulley_trigger_4)
                                //show_debug_message("Horizontal Dead-End")
                            }
                        if (!instance_exists(node_left) and instance_exists(node_right)
                        and !instance_exists(node_down) and !instance_exists(node_up))
                            {
                                yes = 0
                                node_id_0 = instance_create(x-32,y,obj_pulley_trigger_4)
                                //show_debug_message("Horizontal Dead-End")
                            }
                    }
                //Do nothing if current rope configuration leads to a dead-end (Vertical)
                if (!instance_exists(node_left) and !instance_exists(node_right))
                    {
                        if (instance_exists(node_up) and !instance_exists(node_down)
                        and !instance_exists(node_left) and !instance_exists(node_right))
                            {
                                yes = 0
                                node_id_0 = instance_create(x,y+40,obj_pulley_trigger_5)
                                //show_debug_message("Vertical Dead-End")
                            }
                        if (!instance_exists(node_up) and instance_exists(node_down)
                        and !instance_exists(node_left) and !instance_exists(node_right))
                            {
                                yes = 0
                                node_id_0 = instance_create(x,y-16,obj_pulley_trigger_5)
                                //show_debug_message("Vertical Dead-End")
                            }
                    }

                //------------------------------//
                //         Create Nodes         //
                //------------------------------//

                //Decide which of two node placements should be made, based on provided/scanned contexts
                if yes = 1
                    {
                        //--------------------------------//
                        //         Inside Corners         //
                        //--------------------------------//

                        //Bottom Left
                        if instance_exists(node_right) and instance_exists(node_up)
                        and !instance_exists(node_left) and !instance_exists(node_down)
                            {
                                node_id_0 = instance_create(x-32,y,obj_pulley_trigger_2)
                                node_id_1 = instance_create(x,y+40,obj_pulley_trigger_1)
                                //show_debug_message("Bottom-Left Inside Corner Found!")
                            }
                        //Bottom Right
                        if instance_exists(node_left) and instance_exists(node_up)
                        and !instance_exists(node_right) and !instance_exists(node_down)
                            {
                                node_id_0 = instance_create(x+32,y,obj_pulley_trigger_2)
                                node_id_1 = instance_create(x,y+40,obj_pulley_trigger_3)
                                //show_debug_message("Bottom-Right Inside Corner Found!")
                            }
                        //Up Right
                        if instance_exists(node_left) and instance_exists(node_down)
                        and !instance_exists(node_right) and !instance_exists(node_up)
                            {
                                node_id_0 = instance_create(x+32,y,obj_pulley_trigger_0)
                                node_id_1 = instance_create(x,y-16,obj_pulley_trigger_3)
                                //show_debug_message("Up-Right Inside Corner Found!")
                            }
                        //Up Left
                        if instance_exists(node_right) and instance_exists(node_down)
                        and !instance_exists(node_left) and !instance_exists(node_up)
                            {
                                node_id_0 = instance_create(x-32,y,obj_pulley_trigger_0)
                                node_id_1 = instance_create(x,y-16,obj_pulley_trigger_1)
                                //show_debug_message("Up-Left Inside Corner Found!")
                            }
                    }                
                node_timer = 0;
            }
    }
else
    image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
