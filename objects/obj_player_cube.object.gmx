<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cube</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-7</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Cube Object
image = spr_cube
frame = 6
angle = 0
xdir = 1
offset_x = 0
offset_y = 42
cube_visible = 1
cube_speed = 0
cube_gravity = 0
cube_collided = 0
cube_attack_timer = 0

//Attack Variables
attack = 0
damage = 4
unkillable = 0
attack_range = 48               //Horizontal Hitbox Range
attack_width = 359              //Angular Hitbox Range
travel_length = 0               //Horizontal offset for Hitbox
travel_height = 0               //Vertical offset for Hitbox
attack_shape  = 0               //Shape of the hitbox (Elliptical)
attack_offset = 0               //Attack offset

//Initialize Cube Particles
particle_frame = -1
particle_frame_1 = -128
particle_frame_2 = -128
particle_frame_3 = -128
particle_frame_4 = -128
particle_frame_5 = -128
particle_x_1 = x
particle_y_1 = y-16
particle_x_2 = random_range(-18,18)
particle_y_2 = random_range(-24,12)
particle_x_3 = random_range(-18,18)
particle_y_3 = random_range(-24,12)
particle_x_4 = random_range(-18,18)
particle_y_4 = random_range(-24,12)
particle_x_5 = random_range(-18,18)
particle_y_5 = random_range(-24,12)

//Play sound
audio_play_sound(milla_throw,50,false)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics &amp; Movement

if obj_game_logic.pause = 0

{

//-----Remotely Thrown Cube-----//
//------------------------------//

//If we have collided with any surfaces, explode the cube
if cube_collided = 0
    {
        //Throw cube forward
        x += cube_speed
        //Modify cube's gravity
        y += cube_gravity
        //Provide cube's gravitational acceleration
        cube_gravity += 0.24

        //Check for Tiles on Layer 0. (Flat Surface Collisions)
        var cube_surface_id_top    = tile_layer_find(surface_flats,x,y-32)
        var cube_surface_id_bottom = tile_layer_find(surface_flats,x,y)
        //Slope Collision Sensor
        var cube_ramp_id           = tile_layer_find(surface_slopes,x,y)
        //Enemy Collision Sensor
        var cube_enemy_id_bottom = tile_layer_find(surface_enemy_flags,x,y)
        
        //Invalidate detection of hangbars and ladders
        var cube_item_bg_bottom = tile_flat_24;
        
        if tile_exists(cube_ramp_id) cube_item_bg_bottom = tile_get_background(cube_ramp_id);
        
        if cube_item_bg_bottom = spr_ladder_0
        or cube_item_bg_bottom = spr_ladder_1
        or cube_item_bg_bottom = spr_ladder_2
        or cube_item_bg_bottom = spr_ladder_3
        or cube_item_bg_bottom = spr_ladder_4
        or cube_item_bg_bottom = spr_ladder_5
        or cube_item_bg_bottom = spr_ladder_6
        or cube_item_bg_bottom = spr_hangbar_0
        or cube_item_bg_bottom = spr_hangbar_1
        or cube_item_bg_bottom = spr_hangbar_2
        or cube_item_bg_bottom = spr_hangbar_3
        or cube_item_bg_bottom = spr_hangbar_4
        or cube_item_bg_bottom = spr_hangbar_ignore
            cube_ramp_id = -1;
        
        //---------Collisions---------//
        //----------------------------//

        if tile_exists(cube_surface_id_top) or tile_exists(cube_surface_id_bottom)
        or tile_exists(cube_enemy_id_bottom)
        //If we have collided with the boundaries of the room, explode the cube
        or x &gt; obj_game_logic.camera_boundary_right
        or x &lt; obj_game_logic.camera_boundary_left
        or y &gt; obj_game_logic.camera_boundary_bottom
        or point_distance(x,y,obj_game_logic.px,obj_game_logic.py) &gt; 768
            cube_collided = 1;
        //If we are colliding with a slope tile, clip to its surface based on X position and explode
        if tile_exists(cube_ramp_id)
            {    
                var cube_ramp_id_debug = obj_game_logic.enemy_slopes[tile_get_background(cube_ramp_id)];
        
                //Get Player Coordinates Relative to the Tile's Origins
                var cube_ramp_pos_x=abs(tile_get_x(cube_ramp_id)-x)   //Get X
                var cube_ramp_pos_y=abs(tile_get_y(cube_ramp_id)-y)   //Get Y

                //If tile was not flagged as "ignore", read its collision data
                if background_exists(cube_ramp_id_debug)
                    {
                        //If we are clipping to the slope's Y height, explode
                        if (obj_game_logic.orig_clip[cube_ramp_id_debug,0]!=-1)
                            {
                                //Check If Player Y is Greater Than Slope's Current Height
                                if cube_ramp_pos_y &gt;= obj_game_logic.orig_clip[cube_ramp_id_debug,cube_ramp_pos_x] cube_collided = 1;
                            }
                        if obj_game_logic.orig_clip[cube_ramp_id_debug,cube_ramp_pos_x] = -1
                            cube_collided = 0;
                    }
            }
        var attack_ID = collision_rectangle(x-24,y-48,x+24,y,obj_enemy_parent,false,true);
        if instance_exists(attack_ID)
            {
                attack_ID.attacked = 1
                attack_ID.attacked_damage = 4
                cube_collided = 1
            }
        var attack_ID = collision_rectangle(x-24,y-48,x+24,y,obj_destructible,false,true);
        if instance_exists(attack_ID)
            {
                var yes = 1;
                if attack_ID.object_index = obj_crystal_gem_float
                    {
                        if attack_ID.destroyed = -1
                            yes = 0;
                    }
                if yes = 1
                    {
                        attack_ID.attacked = 1
                        cube_collided = 1
                    }
            }
        var attack_ID = collision_rectangle(x-24,y-48,x+24,y,obj_player_cube_alt,false,true);
        if instance_exists(attack_ID)
            {
                attack_ID.cube_health += 1
                attack_ID.cube_jiggle_timer = 10
                cube_collided = 1
            }
    }
//Explode if we have registered a collision with either flat surfaces, slopes, or items
if cube_collided = 1
    {
        cube_gravity  = 0
        cube_visible = 0
        cube_collided = 2
        if image = spr_cube
            {
                //Setup Thrown Cube Particles
                //Setup Particle Effects
                particle_frame_1  = 0       //Animation Frame for Particle 1
                particle_frame_2  = -7      //Animation Frame for Particle 2
                particle_frame_3  = -10     //Animation Frame for Particle 3
                particle_frame_4  = -14     //Animation Frame for Particle 4
                particle_frame_5  = -18     //Animation Frame for Particle 5
                particle_x_1=x; particle_y_1=y-16;
                particle_x_2=x+random_range(-18,18); particle_y_2=y+random_range(-24,12);
                particle_x_3=x+random_range(-18,18); particle_y_3=y+random_range(-24,12);
                particle_x_4=x+random_range(-18,18); particle_y_4=y+random_range(-24,12);
                particle_x_5=x+random_range(-18,18); particle_y_5=y+random_range(-24,12);
                audio_play_sound(milla_cube_destroyed,50,false)
            }
    }
if cube_collided = 2
    {
        cube_collided = 3
        if image != spr_cube
            {
                var spr_crystal_confirm = 0;
                var spr_crystal_sprite = spr_shield_wood;
                switch(image)
                    {
                        case spr_crate_0_copy :
                            {
                                //Create Gem Particles If Our Performance Profile Is Set To "Normal"
                                if obj_game_logic.performance_profile = 1 and instance_number(obj_destructible_particle) &lt; 16
                                    {
                                        scr_attack_shield_ext(x,y-16,obj_destructible_particle,0,spr_crate_broken_0,-4  ,1,1,-4)
                                        scr_attack_shield_ext(x,y-16,obj_destructible_particle,0,spr_crate_broken_1,-2,1,1,-5.25)
                                        scr_attack_shield_ext(x,y-16,obj_destructible_particle,0,spr_crate_broken_2,-1  ,1,1,-5.625)
                                        scr_attack_shield_ext(x,y-16,obj_destructible_particle,0,spr_crate_broken_3,0   ,1,1,-7.5)
                                        scr_attack_shield_ext(x,y-16,obj_destructible_particle,0,spr_crate_broken_4,2,1,1,-6)
                                    }
                                if instance_number(obj_gem) &lt; 16
                                    {
                                        //Create Gems
                                        scr_attack_tile(x,y-16,obj_gem,0,spr_gem,0)
                                        scr_attack_tile(x,y-16,obj_gem,0,spr_gem,-0.5)
                                        scr_attack_tile(x,y-16,obj_gem,0,spr_gem,-1)
                                        scr_attack_tile(x,y-16,obj_gem,0,spr_gem,-1.5)
                                        scr_attack_tile(x,y-16,obj_gem,0,spr_gem,0.5)
                                        scr_attack_tile(x,y-16,obj_gem,0,spr_gem,1)
                                        scr_attack_tile(x,y-16,obj_gem,0,spr_gem,1.5)
                                    }
                                if instance_number(obj_gem) &gt;= 16
                                    scr_attack_tile(x,y-16,obj_red_gem,0,spr_red_gem,0);
                                audio_stop_sound(snd_crate_broken)
                                audio_play_sound(snd_crate_broken,50,false)
                                instance_destroy();
                                break;
                            }
                        case spr_crystal_gem_flower:
                            {
                                //Create Gem Particles If Our Performance Profile Is Set To "Normal"
                                if obj_game_logic.performance_profile = 1 and instance_number(obj_destructible_particle) &lt; 16
                                    {
                                        scr_attack_shield_ext(x,y-16,obj_destructible_particle,0,spr_shield_broken_0,-4  ,1,1,-4)
                                        scr_attack_shield_ext(x,y-16,obj_destructible_particle,0,spr_shield_broken_1,-2,1,1,-5.25)
                                        scr_attack_shield_ext(x,y-16,obj_destructible_particle,0,spr_shield_broken_2,-1  ,1,1,-5.625)
                                        scr_attack_shield_ext(x,y-16,obj_destructible_particle,0,spr_shield_broken_3,0   ,1,1,-7.5)
                                        scr_attack_shield_ext(x,y-16,obj_destructible_particle,0,spr_shield_broken_4,2,1,1,-6)
                                    }
                                if instance_number(obj_gem) &lt; 16
                                    {
                                        //Create Gems
                                        scr_attack_tile(x,y-16,obj_gem,0,spr_gem,0)
                                        scr_attack_tile(x,y-16,obj_gem,0,spr_gem,-0.5)
                                        scr_attack_tile(x,y-16,obj_gem,0,spr_gem,-1)
                                        scr_attack_tile(x,y-16,obj_gem,0,spr_gem,-1.5)
                                        scr_attack_tile(x,y-16,obj_gem,0,spr_gem,0.5)
                                        scr_attack_tile(x,y-16,obj_gem,0,spr_gem,1)
                                        scr_attack_tile(x,y-16,obj_gem,0,spr_gem,1.5)
                                    }
                                if instance_number(obj_gem) &gt;= 16
                                    scr_attack_tile(x,y-16,obj_red_gem,0,spr_red_gem,0);
                                audio_stop_sound(flower_destroy)
                                audio_stop_sound(snd_petal_shatter)
                                audio_play_sound(flower_destroy,50,false)
                                audio_play_sound(snd_petal_shatter,50,false)
                                instance_destroy();
                                break;
                            }
                        case spr_crystal_gold_flower:
                            {
                                //Create Gem Particles If Our Performance Profile Is Set To "Normal"
                                if obj_game_logic.performance_profile = 1 and instance_number(obj_destructible_particle) &lt; 16
                                    {
                                        scr_attack_shield_ext(x,y-16,obj_destructible_particle,0,spr_shield_broken_0,-4  ,1,1,-4)
                                        scr_attack_shield_ext(x,y-16,obj_destructible_particle,0,spr_shield_broken_1,-2,1,1,-5.25)
                                        scr_attack_shield_ext(x,y-16,obj_destructible_particle,0,spr_shield_broken_2,-1  ,1,1,-5.625)
                                        scr_attack_shield_ext(x,y-16,obj_destructible_particle,0,spr_shield_broken_3,0   ,1,1,-7.5)
                                        scr_attack_shield_ext(x,y-16,obj_destructible_particle,0,spr_shield_broken_4,2,1,1,-6)
                                    }
                                if instance_number(obj_gem) &lt; 16
                                    {
                                        //Create Gems
                                        scr_attack_tile(x,y-16,obj_gold_gem,0,spr_gold_gem,0)
                                        scr_attack_tile(x,y-16,obj_gold_gem,0,spr_gold_gem,-0.5)
                                        scr_attack_tile(x,y-16,obj_gold_gem,0,spr_gold_gem,-1)
                                        scr_attack_tile(x,y-16,obj_gold_gem,0,spr_gold_gem,-1.5)
                                        scr_attack_tile(x,y-16,obj_gold_gem,0,spr_gold_gem,0.5)
                                        scr_attack_tile(x,y-16,obj_gold_gem,0,spr_gold_gem,1)
                                        scr_attack_tile(x,y-16,obj_gold_gem,0,spr_gold_gem,1.5)
                                    }
                                if instance_number(obj_gem) &gt;= 16
                                    scr_attack_tile(x,y-16,obj_gold_gem,0,spr_gold_gem,0);
                                audio_stop_sound(flower_destroy)
                                audio_stop_sound(snd_petal_shatter)
                                audio_play_sound(flower_destroy,50,false)
                                audio_play_sound(snd_petal_shatter,50,false)
                                instance_destroy();
                                break;
                            }
                        case spr_crystal_green_flower:
                            {
                                //Create Gem Particles If Our Performance Profile Is Set To "Normal"
                                if obj_game_logic.performance_profile = 1 and instance_number(obj_destructible_particle) &lt; 16
                                    {
                                        scr_attack_shield_ext(x,y-16,obj_destructible_particle,0,spr_shield_broken_0,-4  ,1,1,-4)
                                        scr_attack_shield_ext(x,y-16,obj_destructible_particle,0,spr_shield_broken_1,-2,1,1,-5.25)
                                        scr_attack_shield_ext(x,y-16,obj_destructible_particle,0,spr_shield_broken_2,-1  ,1,1,-5.625)
                                        scr_attack_shield_ext(x,y-16,obj_destructible_particle,0,spr_shield_broken_3,0   ,1,1,-7.5)
                                        scr_attack_shield_ext(x,y-16,obj_destructible_particle,0,spr_shield_broken_4,2,1,1,-6)
                                    }
                                if instance_number(obj_red_gem) &lt; 16
                                    {
                                        //Create Gems
                                        scr_attack_tile(x,y-16,obj_red_gem,0,spr_gold_gem,0)
                                        scr_attack_tile(x,y-16,obj_red_gem,0,spr_gold_gem,-0.5)
                                        scr_attack_tile(x,y-16,obj_red_gem,0,spr_gold_gem,-1)
                                        scr_attack_tile(x,y-16,obj_red_gem,0,spr_gold_gem,-1.5)
                                        scr_attack_tile(x,y-16,obj_red_gem,0,spr_gold_gem,0.5)
                                        scr_attack_tile(x,y-16,obj_red_gem,0,spr_gold_gem,1)
                                        scr_attack_tile(x,y-16,obj_red_gem,0,spr_gold_gem,1.5)
                                    }
                                if instance_number(obj_red_gem) &gt;= 16
                                    scr_attack_tile(x,y-16,obj_red_gem,0,spr_gold_gem,0);
                                audio_stop_sound(flower_destroy)
                                audio_stop_sound(snd_petal_shatter)
                                audio_play_sound(flower_destroy,50,false)
                                audio_play_sound(snd_petal_shatter,50,false)
                                instance_destroy();
                                break;
                            }
                        case spr_health_petal_flower:
                            {
                                //Create Petals
                                scr_attack_tile(x,y-16,obj_petal,0,spr_petal_flower,0)
                                scr_attack_tile(x,y-16,obj_petal,0,spr_petal_flower,-0.5)
                                scr_attack_tile(x,y-16,obj_petal,0,spr_petal_flower,-1)
                                scr_attack_tile(x,y-16,obj_petal,0,spr_petal_flower,0.5)
                                scr_attack_tile(x,y-16,obj_petal,0,spr_petal_flower,1)
                                scr_attack_tile(x,y-16,obj_petal,0,spr_petal_flower,1.5)
                                audio_play_sound(flower_destroy,50,false)
                                break;
                            }
                        case spr_flower_2_copy:
                            {
                                spr_crystal_confirm = 1;
                                spr_crystal_sprite = spr_shield_wood;
                                break;
                            }
                        case spr_flower_3_copy:
                            {
                                spr_crystal_confirm = 1;
                                spr_crystal_sprite = spr_shield_water;
                                break;
                            }
                        case spr_flower_4_copy:
                            {
                                spr_crystal_confirm = 1;
                                spr_crystal_sprite = spr_shield_earth;
                                break;
                            }
                        case spr_flower_5_copy:
                            {
                                spr_crystal_confirm = 1;
                                spr_crystal_sprite = spr_shield_fire_front;
                                break;
                            }
                        case spr_flower_6_copy:
                            {
                                spr_crystal_confirm = 1;
                                spr_crystal_sprite = spr_shield_metal;
                                break;
                            }
                        case spr_flower_7_copy:
                            {
                                //Create Crate Particles
                                if instance_number(obj_destructible_particle) &lt; 16
                                    {
                                        //Create Gem Particles If Our Performance Profile Is Set To "Normal"
                                        if obj_game_logic.performance_profile = 1
                                            {
                                                scr_attack_shield_ext(x,y-16,obj_destructible_particle,0,spr_shield_broken_1,-4  ,1,1,-5.25)
                                                scr_attack_shield_ext(x,y-16,obj_destructible_particle,0,spr_shield_broken_4,-2,1,1,-6)
                                                scr_attack_shield_ext(x,y-16,obj_destructible_particle,0,spr_shield_broken_3,-1  ,1,1,-7.5)
                                                scr_attack_shield_ext(x,y-16,obj_destructible_particle,0,spr_shield_broken_0,0   ,1,1,-4)
                                                scr_attack_shield_ext(x,y-16,obj_destructible_particle,0,spr_shield_broken_2,2,1,1,-5.625)
                                            }
                                    }
                                obj_game_logic.invuln_hud_time = 1800
                                audio_stop_sound(flower_destroy)
                                audio_stop_sound(snd_petal_shatter)
                                audio_play_sound(shield_break,50,false)
                                audio_play_sound(snd_petal_shatter,50,false)
                                break;
                            }
                        case spr_flower_10_copy:
                            {
                                spr_crystal_confirm = 1;
                                spr_crystal_sprite = spr_shield_rock;
                                break;
                            }
                        case spr_bomb_flower:
                            {
                                var bomb_ID = instance_create(x,y,obj_bomb);
                                bomb_ID.detonate_for_milla = 1;
                                break;
                            }
                        case spr_chibimilla_cage:
                            {
                                //Create a chibi child
                                chibi_baby = instance_create(x,y-8,obj_1up)
                                //Determine the child's skin from the player's skin
                                chibi_baby.is_item=spr_chibimilla
                                //Tell the child not to leave a decoration tile behind
                                chibi_baby.is_dec = 1
                                //Set the child's collection state to "SQUEEEEEEEEEEE I'M FREEEEEE"
                                chibi_baby.is_collected=1
                                break;
                            }
                        case spr_gascan_0_copy:
                            {
                                var bomb_ID = instance_create(x,y,obj_bomb);
                                bomb_ID.detonate_for_milla = 1;
                                break;
                            }
                        case spr_potion_chest:
                            {
                                var random_obj = obj_potion_petal;
                                var random_spr = spr_potion_petal;
                                var random_item = floor(random_range(0,2.9));
                                switch(random_item)
                                    {
                                        case 0: {random_obj = obj_potion_petal_core; random_spr = spr_potion_petal_core; break;}
                                        case 1: {random_obj = obj_potion_stamina_core; random_spr = spr_potion_stamina_core; break;}
                                        case 2: {random_obj = obj_potion_mystery; random_spr = spr_potion_mystery; break;}
                                    }
                                //Create Potion
                                scr_attack_tile(x,y-16,random_obj,0,random_spr,0)
                                var random_item = floor(random_range(0,3.9));
                                switch(random_item)
                                    {
                                        case 0: {random_obj = obj_potion_petal; random_spr = spr_potion_petal; break;}
                                        case 1: {random_obj = obj_potion_stamina; random_spr = spr_potion_stamina; break;}
                                        case 2: {random_obj = obj_potion_feather; random_spr = spr_potion_feather; break;}
                                        case 3: {random_obj = obj_potion_mystery; random_spr = spr_potion_mystery; break;}
                                    }
                                scr_attack_tile(x,y-16,random_obj,0,random_spr,-1.5)
                                var random_item = floor(random_range(0,1.9));
                                switch(random_item)
                                    {
                                        case 0: {random_obj = obj_potion_stamina; random_spr = spr_potion_stamina; break;}
                                        case 1: {random_obj = obj_potion_mystery; random_spr = spr_potion_mystery; break;}
                                    }
                                scr_attack_tile(x,y-16,random_obj,0,random_spr,1.5)
                                audio_stop_sound(target_hit)
                                audio_play_sound(target_hit,50,false)
                                break;
                            }
                        case spr_treasure_chest:
                            {
                                var random_obj = obj_gem;
                                var random_spr = spr_gem;
                                var random_item = floor(random_range(0,2.9));
                                switch(random_item)
                                    {
                                        case 0: {random_obj = obj_gem; random_spr = spr_gem; break;}
                                        case 1: {random_obj = obj_petal; random_spr = spr_petal_flower; break;}
                                        case 2: {random_obj = obj_gold_gem; random_spr = spr_gold_gem; break;}
                                    }
                                //Create Potion
                                scr_attack_tile(x,y,random_obj,0,random_spr,0)
                                var random_item = floor(random_range(0,3.9));
                                switch(random_item)
                                    {
                                        case 0: {random_obj = obj_petal; random_spr = spr_petal_flower; break;}
                                        case 1: {random_obj = obj_gem; random_spr = spr_gem; break;}
                                        case 2: {random_obj = obj_petal_shard; random_spr = spr_petal_shard; break;}
                                        case 3: {random_obj = obj_gem; random_spr = spr_gem; break;}
                                    }
                                scr_attack_tile(x-2,y-16,random_obj,0,random_spr,-1.0)
                                scr_attack_tile(x,y-16,random_obj,0,random_spr,-1.5)
                                scr_attack_tile(x+2,y-16,random_obj,0,random_spr,1.0)
                                scr_attack_tile(x-4,y-12,random_obj,0,random_spr,-2.0)
                                scr_attack_tile(x+4,y-12,random_obj,0,random_spr,2.0)
                                var random_item = floor(random_range(0,1.9));
                                switch(random_item)
                                    {
                                        case 0: {random_obj = obj_gem; random_spr = spr_gem; break;}
                                        case 1: {random_obj = obj_petal; random_spr = spr_petal_flower; break;}
                                    }
                                scr_attack_tile(x,y,random_obj,0,random_spr,1.5)
                                scr_attack_tile(x+4,y-4,random_obj,0,random_spr,2.0)
                                audio_stop_sound(target_hit)
                                audio_play_sound(target_hit,50,false)
                                break;
                            }
                    }
                if spr_crystal_confirm = 1
                    {
                        //Create Crate Particles
                        if instance_number(obj_destructible_particle) &lt; 16
                            {
                                //Create Gem Particles If Our Performance Profile Is Set To "Normal"
                                if obj_game_logic.performance_profile = 1
                                    {
                                        scr_attack_shield_ext(x,y-16,obj_destructible_particle,0,spr_shield_broken_1,-4  ,1,1,-5.25)
                                        scr_attack_shield_ext(x,y-16,obj_destructible_particle,0,spr_shield_broken_4,-2,1,1,-6)
                                        scr_attack_shield_ext(x,y-16,obj_destructible_particle,0,spr_shield_broken_3,-1  ,1,1,-7.5)
                                        scr_attack_shield_ext(x,y-16,obj_destructible_particle,0,spr_shield_broken_0,0   ,1,1,-4)
                                        scr_attack_shield_ext(x,y-16,obj_destructible_particle,0,spr_shield_broken_2,2,1,1,-5.625)
                                    }
                            }
                        obj_game_logic.shield_flash_trigger = 1
                        obj_game_logic.shield_flash_frame   = 8 
                        obj_game_logic.shield_flash_x       = x
                        obj_game_logic.shield_flash_y       = y-16
                        scr_set_shield(spr_crystal_sprite)
                        audio_stop_sound(shield_break)
                        audio_stop_sound(snd_petal_shatter)
                        audio_play_sound(shield_break,50,false)
                        audio_play_sound(snd_petal_shatter,50,false)
                        instance_destroy();
                    }
            }
    }
if cube_collided = 3
    {
        if image != spr_cube
            {
                var attack_ID = collision_rectangle(x-24,y-48,x+24,y+24,obj_enemy_parent,false,true);
                if attack_ID != noone
                    {
                        attack_ID.attacked = 1;
                        attack_ID.attacked_damage = 4;
                    }

                var attack_ID = collision_rectangle(x-24,y-48,x+24,y+24,obj_destructible,false,true);
                if attack_ID != noone attack_ID.attacked = 1;

                instance_destroy();
            }
        else
            {
                cube_attack_timer += 1
                if cube_attack_timer = 5
                    {
                        var attack_ID = collision_rectangle(x-24,y-48,x+24,y+24,obj_enemy_parent,false,true);
                        if attack_ID != noone and obj_game_logic.pause_logic = 0
                            {
                                attack_ID.attacked = 1;
                                attack_ID.attacked_damage = 4;
                            }
                        cube_attack_timer = 0
                    }

                var attack_ID = collision_rectangle(x-24,y-24,x+24,y+24,obj_destructible,false,true);
                if attack_ID != noone and obj_game_logic.pause_logic = 0
                    attack_ID.attacked = 1;
            }
    }

//----------Thrown Cube----------//
//-----------Particles-----------//

//   Particle System   //
//=====================//
//Iterate Particle Animation Frames
if particle_frame_1!=-128 particle_frame_1+=1;
if particle_frame_2!=-128 particle_frame_2+=1;
if particle_frame_3!=-128 particle_frame_3+=1;
if particle_frame_4!=-128 particle_frame_4+=1;
if particle_frame_5!=-128 particle_frame_5+=1;
//Reset Particle Animation Frames
if particle_frame_1&gt;18.8 instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Sprites &amp; Particles
if cube_visible = 1
    {
        var milla_shield_skin = image;
        if image = spr_cube
            {
                script_execute(obj_game_logic.pal_swap_script,obj_game_logic.my_pal_sprite,obj_game_logic.current_pal,false);
                if obj_game_logic.alt_skin = 1
                    milla_shield_skin = spr_cube_new;
            }
        draw_sprite_ext(milla_shield_skin,frame,x,y,1,1,angle,c_white,1)
        shader_reset();
    }

//Draw Explosion Particles
if particle_frame &gt; -1 draw_sprite(spr_explosion_1,particle_frame,x,y);
//Draw Phantom Cube Particles
if particle_frame_1&gt;=0 and particle_frame_1&lt;=13.8 draw_sprite(spr_cube_pop_large,particle_frame_1,particle_x_1,particle_y_1);
if particle_frame_2&gt;=0 and particle_frame_2&lt;=9.8 draw_sprite(spr_cube_pop_small,particle_frame_2,particle_x_2,particle_y_2);
if particle_frame_3&gt;=0 and particle_frame_3&lt;=9.8 draw_sprite(spr_cube_pop_small,particle_frame_3,particle_x_3,particle_y_3);
if particle_frame_4&gt;=0 and particle_frame_4&lt;=9.8 draw_sprite(spr_cube_pop_small,particle_frame_4,particle_x_4,particle_y_4);
if particle_frame_5&gt;=0 and particle_frame_5&lt;=9.8 draw_sprite(spr_cube_pop_small,particle_frame_5,particle_x_5,particle_y_5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
