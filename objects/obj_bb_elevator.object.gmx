<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bb_elevator</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_delete_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check for Tiles on Layer 1.
tile_surface_id = tile_add(bb_fof_3_ignore,0,0,128,40,x,y,surface_slopes)
//Physics Variables
px=x            //Tile's X
py=y            //Tile's Y
p_speed=0       //Tile's Speed
y_speed=0       //Tile's Speed (Held)
fof_trigger=0   //Player FOF Trigger
fof_fofset=0    //Player Y Clip Offset
dir_toggle=-1   //Direction Toggle
click = 0
move = 0
start_x = x
start_y = y
//Relative Tile FOF Positions
tile_ramp_pos[0]=0
tile_ramp_pos[1]=0
//Validate our trajectory
validate_x_1 = 0
validate_y_1 = -128
validate_x_2 = 0
validate_y_2 = -128
origin_x_1 = 0
origin_y_1 = -128
origin_x_2 = 0
origin_y_2 = -128
validate_timer = 0
validate_tile_id_left = -1
validate_tile_id_right = -1
validate_tile_id_number_left = -1
validate_tile_id_number_right = -1
//FOF Overlay
fof_overlay_enable = 0
fof_overlay_scroll = 16
fof_overlay_alpha = 0
fof_tile_set = 0
//Are We Allowed To Hold Items?
give_item = 0
item = 0
if !tile_exists(tile_surface_id)
    {
        scr_set_message("No platform tile was found at "+string(x)+"; "+string(y))
        tile_surface_id = tile_add(bb_fof_3_ignore,0,0,background_get_width(bb_fof_3_ignore),background_get_height(bb_fof_3_ignore),x,y,surface_slopes);
    }
//If we have found a FOF tile, setup our startup variables
if tile_exists(tile_surface_id)
    {
        //Collect Tile Background ID
        tile_surface_id_asset = tile_get_background(tile_surface_id)

        tile_set_visible(tile_surface_id,false)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cleanup Tiles
if tile_exists(tile_surface_id)
    tile_delete(tile_surface_id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set our tile's coordinates
if tile_exists(tile_surface_id)
    {
        //Pause Safety Check
        if obj_game_logic.pause = 0
            {
                //Check if the player is on top of us
                if move = 0
                    {
                        if (obj_game_logic.px &gt;= x and obj_game_logic.px &lt;= x + 128
                        and obj_game_logic.py &gt; y - 16 and obj_game_logic.py &lt; y + 16)
                            {
                                if obj_game_logic.gravity_slope = 1
                                    {
                                        move = 1
                                        audio_play_sound(snd_door_open,50,false)
                                    }
                            }
                    }

                //Check for stopper
                if click = 0
                    {
                        if move = 1
                            y += (dir_toggle * 6);

                        var stopper_id = collision_rectangle(x,y+8,x+128,y+40,obj_elevator_stopper,false,true);
                        
                        //Click to the tops or bottoms of stoppers
                        if instance_exists(stopper_id)
                            {
                                if (dir_toggle = 1)
                                    y = obj_elevator_stopper.y-40;
                                if (dir_toggle = -1)
                                    y = obj_elevator_stopper.y+24;
                                click = 1
                                audio_play_sound(snd_switch,50,false)
                                audio_stop_sound(snd_door_open)
                            }
                    }
                //Clean the sub-pixels from our movement, so the player's movement on the platform is smoother
                //if dir_toggle =  1 y = floor(y);
                //if dir_toggle = -1 y = ceil(y);

                //Validate our trajectory and tile-set
                validate_timer += 1
                if validate_timer &gt;= 60
                    {
                        var egg_timer_left = 0;
                        while(egg_timer_left &lt; 512)
                            {
                                validate_tile_id_left = collision_point(x+4,y-egg_timer_left,obj_elevator_stopper,false,true);
                                if instance_exists(validate_tile_id_left)
                                    {
                                        validate_x_1 = x
                                        validate_y_1 = validate_tile_id_left.y
                                        origin_y_1 = y
                                        validate_tile_id_number_left = validate_tile_id_left
                                        dir_toggle = -1
                                    }
                                else
                                    egg_timer_left += 4;
                                if instance_exists(validate_tile_id_left) break;
                            }
                        var egg_timer_right = 0;
                        while(egg_timer_right &lt; 512)
                            {
                                validate_tile_id_right = collision_point(x+4,y+egg_timer_right,obj_elevator_stopper,false,true);
                                if instance_exists(validate_tile_id_right)
                                    {
                                        validate_x_2 = x
                                        validate_y_2 = validate_tile_id_right.y
                                        origin_y_2 = y
                                        validate_tile_id_number_right = validate_tile_id_right
                                        dir_toggle = 1
                                    }
                                else
                                    egg_timer_right += 4;
                                if instance_exists(validate_tile_id_right) break;
                            }
                        validate_timer = 0
                    }

            } //End of Pause Safety Check
    }
//Destroy ourselves if the tile does not exist
else instance_destroy();

if room = rm_editor
    {
        //Hold onto the tile during the saving process
        if obj_level_editor.use_write_delay &gt; 0 y = start_y;
        var parent = obj_level_editor;
        if (point_in_rectangle(parent.use_cursor_x,parent.use_cursor_y,start_x-48,start_y-20,start_x+48,start_y+20)
        and parent.user_cursor_mode = 0 and parent.use_tile_menu = 0 and parent.side_bar_allow = 0)
        or obj_game_logic.user_cursor_mode = 1
            {
                x = start_x
                y = start_y
                move = 0
                click = 0
            }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw Sprites and Projection Lines
if tile_exists(tile_surface_id)
    {
        tile_set_position(tile_surface_id,x,y);
        if room = rm_editor
            {
                //draw_sprite(sprite_index,0,x,y)
                draw_line_width_colour(x+16,validate_y_1+16,x+16,origin_y_1+16,4,c_yellow,c_orange)
                draw_line_width_colour(x+16,validate_y_1+16,x+16,origin_y_1+16,2,c_orange,c_yellow)
                draw_line_width_colour(x+16,validate_y_2+16,x+16,origin_y_2+16,4,c_yellow,c_orange)
                draw_line_width_colour(x+16,validate_y_2+16,x+16,origin_y_2+16,2,c_orange,c_yellow)
                draw_background_ext(tile_surface_id_asset,x,start_y,1,1,0,c_white,0.5)
            }
        draw_background(tile_surface_id_asset,x,y)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
