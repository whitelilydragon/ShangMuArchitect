<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_keycard_terminal</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>obj_delete_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Set Keycard Terminal Variables
has_key = 0
debug_visible = 0
//Are We Allowed To Hold Items?
give_item = 0
item = 0
attacked = 0
//Check If We Have A Detectable Door 8 Frames After Spawning
door_check = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>obj = obj_game_logic

//Check If We Have A Detectable Door 8 Frames After Spawning
if door_check &lt; 12
    {
        door_check += 1;
        if door_check = 8
            {
                var sprite_x = x+24;
                var sprite_y = y+24;
                
                door_id = collision_rectangle(sprite_x-64,sprite_y-64,sprite_x+64,sprite_y+64,obj_keycard_door,false,true);
                
                if door_id = noone
                    {
                        scr_set_message("No nearby doors were found!")
                        instance_destroy()
                    }
                
                //Make Ourselves Visible If We Are In Editor Mode
                if room = rm_editor
                    {
                        if (obj_level_editor.use_debug_hud_mode = 1 and debug_visible = false) debug_visible = true;
                        if (obj_level_editor.use_debug_hud_mode = 0 and debug_visible = true) debug_visible = false;
                    }
                else
                    {
                        if (obj_game_logic.debug_hud != 1 and debug_visible = false) debug_visible = true;
                        if (obj_game_logic.debug_hud = 1  and debug_visible = true) debug_visible = false;
                    }
            }
    }
else
    {
        if obj.px &gt;= x and obj.px &lt;= x+48
        and obj.py &gt;= y and obj.py &lt;= y+48
        and obj.key_has &gt; 0 and has_key = 0
            {
                //Collect the keycard and place it in the keycard slot
                obj.key_has -= 1
                has_key = 1
                image_index = 1
                image_speed = 0
                audio_play_sound(snd_key_door_activated,50,false)
                if room = rm_editor
                    {
                        if instance_exists(door_id)
                            {
                                tile_set_depth(door_id.tile_2,100)
                                door_id.laser_visible = 0
                            }
                        else
                            instance_destroy();
                    }
                else
                    {
                        if instance_exists(door_id)
                            {
                                instance_destroy(door_id,true);
                            }
                        //else
                            //instance_destroy();
                    }
            }
        //Make Ourselves Visible If We Are In Editor Mode
        if room = rm_editor
            {
                if (obj_level_editor.use_debug_hud_mode = 1 and debug_visible = false) debug_visible = true;
                if (obj_level_editor.use_debug_hud_mode = 0 and debug_visible = true) debug_visible = false;
                //Reset door state if we have left playtest mode
                if instance_exists(door_id)
                    {
                        if obj.user_cursor_mode = 1 and tile_get_depth(door_id.tile_2) = 100
                            {
                                tile_set_depth(door_id.tile_2,0)
                                door_id.laser_visible = 1
                                has_key = 0
                                image_index = 0
                                image_speed = 1
                            }
                    }
                else
                    instance_destroy();
            }
        else
            {
                if (obj.debug_hud != 1 and debug_visible = false) debug_visible = true;
                if (obj.debug_hud = 1  and debug_visible = true) debug_visible = false;
            }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Sprite And Door Detection Radius In Editor Mode
draw_sprite(sprite_index,image_index,x,y)


if debug_visible = true and door_check &gt; 12
    {
        draw_set_color(c_yellow)
        draw_set_alpha(0.4)
        draw_rectangle(door_id.x,door_id.y,door_id.x+64,door_id.y+96,false)
        draw_set_alpha(1)
        draw_set_color(c_white)
        draw_rectangle(door_id.x,door_id.y,door_id.x+64,door_id.y+96,true)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
