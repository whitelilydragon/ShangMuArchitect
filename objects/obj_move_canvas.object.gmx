<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>ui_move_tool</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-6</depth>
  <persistent>0</persistent>
  <parentName>obj_activate_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Copy Some Values From The Editor
op = obj_level_editor
og = obj_game_logic
font = op.editor_font

//Set Ourselves As A New Popup GUI Element
//(Outside Of The Range Of The Editor's Built-In GUI Elements)
op.use_tile_menu = 10
op.use_tile_menu_cool_down = 8

//GUI Drawing Variables
gui_achor_x = 244
gui_achor_y = 145
gui_alpha = 0
gui_close = 0
gui_timer = 0
gui_indicator_x = ""
gui_indicator_y = ""

//GUI Interaction Variables
gui_active = 0
gui_tool_param_0 = 0
gui_tool_param_1 = 0
gui_string_x = "0"
gui_string_y = "0"

//Tool Parameters
gui_tool_active = 0
gui_tool_timer = 0
gui_tool_message = "Moving All Objects/Tiles!"
gui_count = 0
gui_move_x = 0
gui_move_y = 0

use_write_array[0] = 0
use_write_length = 0
use_write_position = 0
use_write_obj_position = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GUI Logic
if gui_close = 0
    {
        gui_achor_x -= 3;
        if (gui_achor_x &lt; 218) gui_achor_x = 218;
        gui_alpha = lerp(gui_alpha,0.4,0.15)
    }
if op.use_tile_menu_cool_down = 0
    {
        if gui_close = 0
            {        
                //GUI Interface Interations
                if (mouse_check_button_pressed(op.joy_mouse_button_left) or op.use_put_here = 1)
                    {
                        //Param Input Box 1
                        if  device_mouse_x_to_gui(0) &gt;= gui_achor_x+20 and device_mouse_x_to_gui(0) &lt;= gui_achor_x+67
                        and device_mouse_y_to_gui(0) &gt;= gui_achor_y+33 and device_mouse_y_to_gui(0) &lt;= gui_achor_y+48
                            {
                                gui_active = 1
                                gui_string_x = ""
                                keyboard_string = ""
                                op.use_tile_menu_cool_down = 8
                                audio_play_sound(pause_select,50,false)
                                scr_set_highlighter(gui_achor_x+20,gui_achor_y+33,gui_achor_x+67,gui_achor_y+48)
                            }
                        //Param Input Box 2
                        if  device_mouse_x_to_gui(0) &gt;= gui_achor_x+20 and device_mouse_x_to_gui(0) &lt;= gui_achor_x+67
                        and device_mouse_y_to_gui(0) &gt;= gui_achor_y+50 and device_mouse_y_to_gui(0) &lt;= gui_achor_y+65
                            {
                                gui_active = 2
                                gui_string_y = ""
                                keyboard_string = ""
                                op.use_tile_menu_cool_down = 8
                                audio_play_sound(pause_select,50,false)
                                scr_set_highlighter(gui_achor_x+20,gui_achor_y+50,gui_achor_x+67,gui_achor_y+65)
                            }
                        //Disable Param Input Boxes
                        if (device_mouse_x_to_gui(0) &gt; gui_achor_x+67 or device_mouse_x_to_gui(0) &lt; gui_achor_x+23)
                        or (device_mouse_y_to_gui(0) &lt; gui_achor_y+33 or device_mouse_y_to_gui(0) &gt; gui_achor_y+65)
                            {
                                gui_active = 0;
                            }
                        //Activate Tool
                        if  device_mouse_x_to_gui(0) &gt;= gui_achor_x+20 and device_mouse_x_to_gui(0) &lt;= gui_achor_x+66
                        and device_mouse_y_to_gui(0) &gt;= gui_achor_y+67 and device_mouse_y_to_gui(0) &lt;= gui_achor_y+81
                            {
                                gui_tool_param_0 = real(gui_string_x)
                                gui_tool_param_1 = real(gui_string_y)
                                gui_active = 0
        
                                //Activate Tool If One Of Our Inputted Values Are Above Zero
                                if (gui_tool_param_0 != 0 or gui_tool_param_1 != 0)
                                    {
                                        gui_tool_active = 1
                                        op.use_tile_menu_cool_down = 8
                                        scr_set_message(gui_tool_message)
                                        audio_play_sound(pause_select,50,false)
                                    }
                                //Do Not Activate Tool If All Of Our Inputted Vales Are Zeroed
                                if (gui_tool_param_0 = 0 and gui_tool_param_1 = 0)
                                    {
                                        gui_tool_active = 0
                                        op.use_tile_menu_cool_down = 8
                                        scr_set_message("No Inputs Detected!")
                                    }
                                scr_set_highlighter(gui_achor_x+20,gui_achor_y+66,gui_achor_x+67,gui_achor_y+81)
                            }
                        //Exit Move Tool (Button)
                        if  device_mouse_x_to_gui(0) &gt;= gui_achor_x+69 and device_mouse_x_to_gui(0) &lt;= gui_achor_x+80
                        and device_mouse_y_to_gui(0) &gt;= gui_achor_y+68 and device_mouse_y_to_gui(0) &lt;= gui_achor_y+79
                            {
                                audio_play_sound(pause_select,50,false)
                                gui_active = 0
                                gui_close = 1
                                op.use_tile_menu_cool_down = 8
                                scr_set_highlighter(gui_achor_x+69,gui_achor_y+68,gui_achor_x+80,gui_achor_y+79)
                            }
                        //Exit Move Tool (Clicking Outside GUI Box)
                        if (device_mouse_x_to_gui(0) &gt;= gui_achor_x+96 or device_mouse_x_to_gui(0) &lt; gui_achor_x)
                        or (device_mouse_y_to_gui(0) &gt;= gui_achor_y+88 or device_mouse_y_to_gui(0) &lt; gui_achor_y)
                            {
                                audio_play_sound(pause_select,50,false)
                                op.use_tile_menu_cool_down = 8
                                gui_active = 0
                                gui_close = 1
                            }
                    }
            }
    }

//Keyboard Inputs
if gui_active = 0
    {
        if gui_string_x = ""
            gui_string_x = "0";
        if gui_string_y = ""
            gui_string_y = "0";
        gui_indicator_x = ""
        gui_indicator_y = ""
    }
if gui_active &gt; 0
    {
        //Pixel X Parameter
        if gui_active = 1
            {
                if keyboard_check_pressed(vk_anykey)
                    {
                        var check_key = string_char_at(keyboard_string,string_length(keyboard_string));
        
                        if  check_key != "0"
                        and check_key != "1"
                        and check_key != "2"
                        and check_key != "3"
                        and check_key != "4"
                        and check_key != "5"
                        and check_key != "6"
                        and check_key != "7"
                        and check_key != "8"
                        and check_key != "9"
                        and check_key != "-"
                        and !keyboard_check_pressed(8)
                            {
                                scr_set_message("Only numbered characters allowed!")
                                gui_string_x = string_delete(gui_string_x,string_length(gui_string_x),1);
                                keyboard_string = string_delete(keyboard_string,string_length(keyboard_string),1);
                            }
                        gui_string_x = keyboard_string
        
                        //Enforce Strict Character Limit
                        if string_length(gui_string_x) &gt; 5
                            {
                                gui_string_x = string_copy(gui_string_x,1,5);
                                keyboard_string = string_copy(keyboard_string,1,5);
                            }
                    }
                //Increment Flash Timer
                gui_timer += 1
                //Reset Flash Timer
                if gui_timer &gt; 32 gui_timer = 0;
                if gui_timer &lt; 16 gui_indicator_x = "|";
                else              gui_indicator_x = "";
            }
        //Pixel Y Parameter
        if gui_active = 2
            {
                if keyboard_check_pressed(vk_anykey)
                    {
                        var check_key = string_char_at(keyboard_string,string_length(keyboard_string));
        
                        if  check_key != "0"
                        and check_key != "1"
                        and check_key != "2"
                        and check_key != "3"
                        and check_key != "4"
                        and check_key != "5"
                        and check_key != "6"
                        and check_key != "7"
                        and check_key != "8"
                        and check_key != "9"
                        and check_key != "-"
                        and !keyboard_check_pressed(8)
                            {
                                scr_set_message("Only numbered characters allowed!")
                                gui_string_y = string_delete(gui_string_y,string_length(gui_string_y),1);
                                keyboard_string = string_delete(keyboard_string,string_length(keyboard_string),1);
                            }
                        gui_string_y = keyboard_string
        
                        //Enforce Strict Character Limit
                        if string_length(gui_string_y) &gt; 5
                            {
                                gui_string_y = string_copy(gui_string_y,1,5);
                                keyboard_string = string_copy(keyboard_string,1,5);
                            }
                    }
                //Increment Flash Timer
                gui_timer += 1
                //Reset Flash Timer
                if gui_timer &gt; 32 gui_timer = 0;
                if gui_timer &lt; 16 gui_indicator_y = "|";
                else              gui_indicator_y = "";
            }
        //Exit Input Scanning
        if keyboard_check(vk_enter)
            {
                gui_active = 0
                audio_play_sound(pause_select,50,false)
            }
    }

//Tool Actions
if gui_tool_active = 1
    {
        gui_tool_timer += 1

        if gui_tool_timer = 1
             scr_set_message("Moving pieces in-progress!");

        var gui_x_input = real(gui_string_x);
        var gui_y_input = real(gui_string_y);

        op.use_write_delay = 4
        instance_activate_all()

        if gui_tool_timer = 8
            {
                //Write Tile Data
                use_write_array = tile_get_ids()
                use_write_length = array_length_1d(use_write_array)
                use_write_position = 0
                while(use_write_position &lt;= use_write_length)
                    {
                        //show_debug_message("Tile loop confirm "+string(use_write_position)+" "+string(use_write_array[use_write_position]))
                        var tile_x = tile_get_x(use_write_array[use_write_position]);
                        var tile_y = tile_get_y(use_write_array[use_write_position]);
                        tile_set_position(use_write_array[use_write_position],tile_x+gui_x_input,tile_y+gui_y_input)
                        //Iterate Write Position
                        use_write_position += 1
                        //Exit Loop Once We Have Finished Writing
                        if use_write_position = use_write_length break;
                    }
                //Write Object Data
                use_write_obj_position = 0
                var use_conversion_counter = 0;
                //Activate All Objects For Reading
                instance_activate_all()
                while(use_write_obj_position &lt;= instance_count)
                    {
                        var obj = instance_id[use_write_obj_position];
                        //show_debug_message("Object loop confirm "+string(use_write_obj_position)+" "+string(instance_id[use_write_obj_position]))
                        //Arbitrary Asset Definition Table
                        var use_conversion = 1;
                        if (obj.object_index = obj_ignore)
                        or (obj.object_index = obj_game_logic)
                        or (obj.object_index = obj_level_editor)
                        or (obj.object_index = obj_bg_parent)
                        or (obj.object_index = self)
                            use_conversion = -1;
                        //Write Collected Object Data
                        if use_conversion = 1
                            {
                                //Reset Respawn Position
                                if variable_instance_exists(obj,"start_x")
                                    obj.start_x = obj.x+gui_x_input;
                                if variable_instance_exists(obj,"start_y")
                                    obj.start_y = obj.y+gui_y_input;
                                //Help Update Boundary Box Positions For Slope Controllers
                                if obj.object_index = obj_2D_tile_logic
                                    {
                                        obj.tile_trigger_top_left_x_1      += gui_x_input
                                        obj.tile_trigger_top_right_x_1     += gui_x_input
                                        obj.tile_trigger_top_left_x_2      += gui_x_input
                                        obj.tile_trigger_top_right_x_2     += gui_x_input
                                        obj.tile_trigger_bottom_left_x_1   += gui_x_input
                                        obj.tile_trigger_bottom_right_x_1  += gui_x_input
                                        obj.tile_trigger_bottom_left_x_2   += gui_x_input
                                        obj.tile_trigger_bottom_right_x_2  += gui_x_input

                                        obj.tile_trigger_top_left_y_1      += gui_y_input
                                        obj.tile_trigger_top_right_y_1     += gui_y_input
                                        obj.tile_trigger_top_left_y_2      += gui_y_input
                                        obj.tile_trigger_top_right_y_2     += gui_y_input
                                        obj.tile_trigger_bottom_left_y_1   += gui_y_input
                                        obj.tile_trigger_bottom_right_y_1  += gui_y_input
                                        obj.tile_trigger_bottom_left_y_2   += gui_y_input
                                        obj.tile_trigger_bottom_right_y_2  += gui_y_input
                                    }
                                if obj.object_index = obj_loop_logic
                                or obj.object_index = obj_loop_exit
                                    {
                                        obj.collision_region_1_x_1 += gui_x_input
                                        obj.collision_region_1_x_2 += gui_x_input
                                        obj.collision_region_2_x_1 += gui_x_input
                                        obj.collision_region_2_x_2 += gui_x_input
                                        obj.collision_region_3_x_1 += gui_x_input
                                        obj.collision_region_3_x_2 += gui_x_input
                                        obj.collision_region_4_x_1 += gui_x_input
                                        obj.collision_region_4_x_2 += gui_x_input

                                        obj.collision_region_1_y_1 += gui_y_input
                                        obj.collision_region_1_y_2 += gui_y_input
                                        obj.collision_region_2_y_1 += gui_y_input
                                        obj.collision_region_2_y_2 += gui_y_input
                                        obj.collision_region_3_y_1 += gui_y_input
                                        obj.collision_region_3_y_2 += gui_y_input
                                        obj.collision_region_4_y_1 += gui_y_input
                                        obj.collision_region_4_y_2 += gui_y_input
                                    }
                                if obj.object_index = obj_waterheight
                                    {
                                        obj_game_logic.water_height += gui_y_input
                                        obj_game_logic.water_line   += gui_y_input
                                        if obj_game_logic.water_height &gt; 4436
                                            {
                                                obj_game_logic.water_height = 4436
                                                obj_game_logic.water_line   = 4436
                                            }
                                    }
                                if obj.object_index = obj_platform_hor
                                or obj.object_index = obj_platform_ver
                                    {
                                        obj.px += gui_x_input
                                        obj.py += gui_y_input
                                    }
                                //Update All Camera Boundary Objects
                                if obj.object_index = obj_boss_boundary_top
                                or obj.object_index = obj_boss_boundary_left
                                or obj.object_index = obj_boss_boundary_right
                                or obj.object_index = obj_boss_boundary_bottom
                                or obj.object_index = obj_lock_boundary_left
                                or obj.object_index = obj_lock_boundary_right
                                or obj.object_index = obj_lock_boundary_top
                                or obj.object_index = obj_lock_boundary_bottom
                                    {
                                        obj.alarm[0] = 1;
                                    }
                                //Update Object Position
                                obj.x += gui_x_input
                                obj.y += gui_y_input
                            }
                        //Iterate Write Position
                        use_write_obj_position += 1
                        //Exit Loop Once We Have Finished Writing
                        if use_write_obj_position = instance_count break;
                    }
                scr_set_message("Moving complete!")
                //Exit Actions
                gui_tool_active = 0
                gui_tool_timer = 0
                op.use_write_delay = 0
            }
    }

//Exit Tool Transition
if gui_close = 1
    {
        gui_achor_x += 3
        gui_alpha = lerp(gui_alpha,0,0.35)

        op.use_tile_menu = 0
        op.use_tile_menu_cool_down = 8

        if gui_achor_x &gt;= 244
            instance_destroy();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw GUI
//Draw File Menu's GUI
if op.use_tile_menu = 10
    scr_draw_file_menu();
//Fade Other GUI elements for increased GUI clarity for this tool
draw_sprite_ext(spr_transition,0,0,0,internal_res_width,internal_res_height,0,c_white,gui_alpha)

//GUI Main Sprite
draw_sprite(sprite_index,0,gui_achor_x,gui_achor_y)

//Draw Text
draw_set_font(op.editor_menu_font)
draw_set_color(c_white)
draw_set_halign(fa_middle)
draw_text_ext(gui_achor_x+43,gui_achor_y+7,op.lang_gui[og.user_language_mode,21],12,55)
draw_text_ext(gui_achor_x+42,gui_achor_y+69,op.lang_gui[og.user_language_mode,22],12,55)
draw_set_halign(fa_left)

//GUI Text
draw_set_color(c_white)
draw_set_font(font)
    draw_text(gui_achor_x+22,gui_achor_y+36,string(gui_string_x)+gui_indicator_x)
    draw_text(gui_achor_x+22,gui_achor_y+53,string(gui_string_y)+gui_indicator_y)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dummy Code Block To Prevent Normal Drawing
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
