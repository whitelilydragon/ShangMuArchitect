<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>star_flounder</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy_dropper</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics and Animation Variables
event_inherited()
scr_enemy_hp(2)
hp_offset = -52
death_frame = 20
flash = star_flounder
flash_palette = spr_star_flounder_palette
turn = 0
offset_dir = 0.24                   //Sprite Offset Direction
xdir_previous = 0                   //Previous Facing Direction
is_timer = 0
dropped_goodies = obj_gold_gem
//Editor Mode Variables
start_x = x
start_y = y
width_x = sprite_width/2
height_y = sprite_height/2
floor_offset = 10
hp_target = heart
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Logic and Animations
event_inherited()
if o.pause = 0 and freeze = 0
    {
        //Reduce Turning If It Is Applied
        if turn &gt; 0 turn -= 0.2;

        //Check If Our Direction Has Changed, And Turn Around, Before Copying What Our Current Direction Is
        if xdir_previous!=xdir turn = 1;
        //Copy Current Direction
        xdir_previous = xdir
        
        //Animation Loops
        if state = 0 and death = 0
            {
                var water_ID = collision_point(x,y,obj_smart_pools,false,true);
                //Iterate Animations
                if y &gt;= obj_game_logic.water_height+16 or instance_exists(water_ID)
                    {
                        if turn = 0 frame += 0.36;
                        if turn = 1 frame = 18;
                        if frame &gt; 17.8 and turn = 0 frame = 0;
                        gravity_speed = 0;
                        gravity_accel = 0;
                        //Enemy Movement
                        var var_speed = 1;
                        if item = spr_mod_chip_speed var_speed = 2;
                        if scale = 1 x += var_speed*xdir;
                    }
                else
                    {
                        gravity_accel = 0.21875
                    }
                //Commence tears
                if gravity_slope = 1 or ground = 1
                    {
                        if frame &lt; 21 or frame &gt; 22.8 frame = 21;
                        frame += 0.24
                        is_timer += 1
                        if is_timer &gt; 128
                            {
                                flounder_ID = instance_create(x,y,obj_star_flounder_explode);
                                flounder_ID.start_x = start_x
                                flounder_ID.start_y = start_y
                                instance_destroy()
                            }
                    }
                if gravity_slope = 0 and ground = 0
                    {
                        //Sideways Collisions
                        if tile_layer_find(surface_flats,x+36,y) xdir=-1;
                        if tile_layer_find(surface_flats,x-36,y) xdir=1;
                        //Directional Switching Tiles
                        var tile_flag = tile_layer_find(surface_flags,x,y);
                        var turn_on_tile = 0;
                        if tile_flag != -1
                            {
                                var tile_flag_bg = tile_get_background(tile_flag);
                                if tile_flag_bg = tile_layer_changer
                                    {
                                        if xdir = 1  and turn_on_tile = 0 {xdir = -1; x -= 4; turn_on_tile = 1;}
                                        if xdir = -1 and turn_on_tile = 0 {xdir =  1; x += 4; turn_on_tile = 1;}
                                    }
                            }
                        //If the Player Is Nearby, Bite Them
                        if point_distance(o.universal_player_x,o.universal_player_y,x,y) &lt; o.player_hitbox_radius/2
                        and o.use_editor = 0
                        and o.hurt[0] = 0 and o.hurt[1] = 0
                        and o.shield_invuln = 32
                        and y &gt;= o.water_height+64
                        and not (o.shield_active = 1 and o.shield=spr_shield_metal)
                            scr_enemy_deal_damage(0.4,1,2);
                    }
            }
    } //End of pause check
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
