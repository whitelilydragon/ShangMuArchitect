<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_saw_flounder</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy_explode</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics and Animation Variables
event_inherited()
frame_accel = 0
frame = 0                           //Animation Frame
angle = 0                           //Angle of Rotation
scr_enemy_hp(14)
flash_palette = spr_saw_flounder_palette
timer = 0
turn  = 0                           //Sprite Turning
offset = 0                          //Sprite Offset Y
offset_dir = 0.24                   //Sprite Offset Direction
xdir_previous = 0                   //Previous Facing Direction
tile_scan_timer = 0
dropped_goodies = obj_petal
//Bubble Particles
bubble_x[0] = 0
bubble_y[0] = -10000
bubble_s[0] = 0
bubble_d[0] = 1
bubble_x[1] = 0
bubble_y[1] = -10000
bubble_s[1] = 0
bubble_d[1] = 1
bubble_x[2] = 0
bubble_y[2] = -10000
bubble_s[2] = 0
bubble_d[2] = 1
bubble_x[3] = 0
bubble_y[3] = -10000
bubble_s[3] = 0
bubble_d[3] = 1
bubble_timer = 0
bubble_dir_timer = 0
boat_sound_id[0] = -1
boat_sound_id[1] = -1
//Editor Mode Variables
start_x = x
start_y = y
width_x = sprite_width/2
height_y = sprite_height/2
death_frame_start = 4
death_frame_end = 4
death_particles = spr_shark_torpedo_death_particles

//Bullet
bullet_x = 0
bullet_y = 0
bullet_timer = 0
bullet_frame = 0
bullet_speed = 0
bullet_active = 0
bullet_slide = 0
bullet_slide_timer = 0
bullet_cooldown = 0
bullet_scan_timer = 0

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Disable Looping Sounds
audio_stop_sound(snd_bouncer_boating)
audio_stop_sound(snd_bouncer_idle)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Logic and Animations
event_inherited()
if o.pause = 0 and freeze = 0
    {

        //Check If Our Direction Has Changed, And Turn Around, Before Copying What Our Current Direction Is
        if xdir_previous!=xdir turn = 1;
        //Copy Current Direction
        xdir_previous = xdir
        
        //Animation Loops
        if state = 0
            {
                var water_ID = collision_point(x,y,obj_smart_pools,false,true);
                if y &gt;= o.water_height+16 or instance_exists(water_ID)
                    {
                        //
                        if point_distance(x,y,o.px,o.py) &lt; 96 and o.user_cursor_mode = 0
                            {
                                //Iterate Animations
                                frame += 0.50
                                if frame &gt; 3.8 frame = 0;
                                bubble_timer += 1
                                bob += 1
                                if bob &gt; 1 bob = -1;
                                if point_in_rectangle(o.universal_player_x,o.universal_player_y,x-48,y-24,x+48,y+24)
                                and o.hurt[0] = 0 and o.hurt[1] = 0 and o.use_cursor_mode = 0 and o.shield_invuln = 32
                                and not (o.shield_active = 1 and o.shield=spr_shield_metal)
                                    scr_enemy_deal_damage(0.4,1,2);
                            }
                        else
                            {
                                bob = 0
                                bubble_timer = 0
                                audio_stop_sound(boat_sound_id[0])
                                audio_stop_sound(boat_sound_id[1])
                            }

                        if bubble_timer = 1
                            {
                                boat_sound_id[0] = audio_play_sound(snd_bouncer_boating,50,true)
                                boat_sound_id[1] = audio_play_sound(snd_bouncer_idle,50,true)
                            }
                        gravity_speed = 0;
                        gravity_accel = 0;
                        //Enemy Movement
                        var var_speed = 2;
                        if item = spr_mod_chip_speed var_speed = 4;
                        if scale = 1 x += var_speed*xdir;
                    }
                //Sideways Collisions
                if xdir = 1
                    {
                        if tile_layer_find(surface_flats,x+36,y) xdir=-1;
                    }
                else
                    {
                        if tile_layer_find(surface_flats,x-36,y) xdir=1;
                    }
                //Directional Switching Tiles
                tile_scan_timer += 1
                if tile_scan_timer &gt;= 5
                    {
                        var tile_flag = tile_layer_find(surface_flags,x,y);
                        var turn_on_tile = 0;
                        if tile_exists(tile_flag)
                            {
                                var tile_flag_bg = tile_get_background(tile_flag);
                                if tile_flag_bg = tile_layer_changer
                                    {
                                        if xdir = 1  and turn_on_tile = 0 {xdir = -1; x -= 4; turn_on_tile = 1;}
                                        if xdir = -1 and turn_on_tile = 0 {xdir =  1; x += 4; turn_on_tile = 1;}
                                    }
                            }
                        tile_scan_timer = 0
                    }
                if y &lt; o.water_height+16 and !instance_exists(water_ID)
                    {
                        if gravity_slope = 1 or ground = 1
                            {
                                frame = 5;
                                death = 3;
                            }
                        if gravity_speed &lt; 0
                            gravity_speed = 3;
                    }
                
                switch(bubble_timer)
                    {
                        case 1:  {bubble_x[0] = random_range(x+(-xdir*8),x+(-xdir*12)); bubble_y[0] = y; break;}
                        case 4:  {bubble_x[0] = random_range(x+(-xdir*1),x+(-xdir*12)); bubble_y[0] = y; break;}
                        case 8: {bubble_x[0] = random_range(x+(-xdir*2),x+(-xdir*24)); bubble_y[0] = y; break;}
                        case 12: {bubble_x[0] = random_range(x+(-xdir*4),x+(-xdir*12)); bubble_y[0] = y; break;}
                    }
                if (bubble_y[0]) &lt; y-32 {bubble_x[0] = random_range(x+(-xdir*8),x+(-xdir*12)); bubble_y[0] = y; if bubble_timer = 0 bubble_y[0] = -10000;}
                if (bubble_y[1]) &lt; y-32 {bubble_x[0] = random_range(x+(-xdir*1),x+(-xdir*12)); bubble_y[1] = y; if bubble_timer = 0 bubble_y[1] = -10000;}
                if (bubble_y[2]) &lt; y-32 {bubble_x[0] = random_range(x+(-xdir*2),x+(-xdir*24)); bubble_y[2] = y; if bubble_timer = 0 bubble_y[2] = -10000;}
                if (bubble_y[3]) &lt; y-32 {bubble_x[0] = random_range(x+(-xdir*4),x+(-xdir*12)); bubble_y[3] = y; if bubble_timer = 0 bubble_y[3] = -10000;}

                bubble_y[0] -= 3
                bubble_y[1] -= 3
                bubble_y[2] -= 3
                bubble_y[3] -= 3
            }
    } //End of pause check
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Disable Looping Sounds
audio_stop_sound(snd_bouncer_boating)
audio_stop_sound(snd_bouncer_idle)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Sprites
event_inherited();

//Draw Particles
draw_sprite(spr_bubbles,0,bubble_x[0],bubble_y[0])
draw_sprite(spr_bubbles,0,bubble_x[1],bubble_y[1])
draw_sprite(spr_bubbles,0,bubble_x[2],bubble_y[2])
draw_sprite(spr_bubbles,0,bubble_x[3],bubble_y[3])
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
