<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_bomb_flower_modifier</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
tile_angle = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collisions and Physics
event_inherited();

if o.pause = 0 and freeze = 0
{

var death_offset = 0;
if death &gt; 0 and death_type = 1 death_offset = -16;
var floor_center = tile_layer_find(surface_flats,x,y+death_offset+floor_offset);
var water_ID = collision_point(x,y+floor_offset,obj_smart_pools,false,true);
        
//----------------------------------//
//       Basic Gravity System       //
//----------------------------------//

if (y &gt; o.water_height or instance_exists(water_ID)) gravity_cap = 2;
else gravity_cap = gravity_max;

if tile_exists(floor_center)
    {
        if death = 0
            y = tile_get_y(floor_center)-floor_offset;
        ground = 1
        gravity_speed = 0
    }
else
    ground = 0;

//Sloped Floor Collisions
var tile_ramp_id = tile_layer_find(surface_slopes,x,y+death_offset+floor_offset);

//If we are colliding with a slope tile, clip to its surface based on X position
if tile_exists(tile_ramp_id)
    {
        //Collect Background ID of the Tile
        var tile_ramp_asset = o.enemy_slopes[tile_get_background(tile_ramp_id)];

        //Get Gem Coordinates Relative to the Tile's Origins
        var tile_ramp_pos_0=abs(tile_get_x(tile_ramp_id)-x)                //Get X
        var tile_ramp_pos_1=abs(tile_get_y(tile_ramp_id)-y-floor_offset)   //Get Y

        tile_angle = 0;

        //If tile was not flagged as "ignore", read its collision data
        if background_exists(tile_ramp_asset)
            {
                //Check If Gem Y is Greater Than Slope's Current Height
                if tile_ramp_pos_1 &gt;= o.orig_clip[tile_ramp_asset,tile_ramp_pos_0]
                    gravity_slope=1;
                if o.orig_clip[tile_ramp_asset,tile_ramp_pos_0] = -1
                    gravity_slope = 0;
            
                //Clip
                if gravity_slope = 1 and death = 0
                    {
                        y = floor(tile_get_y(tile_ramp_id))+o.orig_clip[tile_ramp_asset,tile_ramp_pos_0]-floor_offset
                        tile_angle = o.orig_clip[tile_ramp_asset+o.scr_local_angles,tile_ramp_pos_0]
                        gravity_speed=0
                        if tile_angle &gt; 45 and tile_angle &lt; 180 xdir = -1;
                        if tile_angle &gt; 225 and tile_angle &lt; 315 xdir = 1;
                    }
            }
    }
else
    {
        gravity_slope = 0;
        tile_angle = 0;
    }

if captured = 1
    gravity_speed = 0;

//Apply Gravity Speed to Y Coordinates
if gravity_slope = 0 and ground = 0
    {
        //If we are not at the speed cap, apply acceleration.
        if gravity_speed&lt;gravity_cap
            gravity_speed+=gravity_accel;
        
        if gravity_speed &gt; gravity_cap
            gravity_speed = gravity_cap;

        y+=gravity_speed;

        if y &gt; room_height
            heart = -1;
    }

if death = 1
    {
        //Explode If We Are On A Moving Platform
        if captured = 1 death = 2;
        //Fly through the air
        x += lengthdir_x(enemy_speed,enemy_direction)
        y += lengthdir_y(enemy_speed,enemy_direction)
        //Rotate sprite
        angle += enemy_speed*xdir;
        //Reset rotation beyond the 0-360 range
        if enemy_direction &gt; 359 enemy_direction = 0;
        if enemy_direction &lt; 0 enemy_direction = 360;
        //Slowly fall towards the floor
        if enemy_direction &gt;= 315 or enemy_direction &lt;= 90 enemy_direction -= enemy_direction_speed;
        if enemy_direction &gt; 90 and enemy_direction &lt; 225  enemy_direction += enemy_direction_speed;
        //Fall faster if we have a downward angle
        if enemy_direction_speed &lt; 8 enemy_direction_speed += 0.05;
        if enemy_speed &lt; 8           enemy_speed += 0.05;
        if gravity_slope = 1 or ground = 1 or captured = 1
        or y &gt; room_height
            {
                death = 2;
                scr_enemy_drop_petal_shard(x,y-16,object_index)
                if play_sound = 1 audio_play_sound(snd_enemy_destroyed,50,false);
            }
    }
if death = 2
    {
        //Iterate Explosion Animations
        enemy_explosion_frame += 0.24
        //Destroy Ourselves Once Animation Has Completed
        if enemy_explosion_frame &gt; 7.4
            {
                if room = rm_editor or o.user_enemy_level &gt;= 4
                    {
                        var obj_id = instance_create(start_x,start_y,object_index);
                        obj_id.item = item
                        instance_destroy()
                    }
                else instance_destroy();
            }
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
