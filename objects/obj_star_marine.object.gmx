<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_star_marine_base_1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy_floater</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
start_x = x
start_y = y
width_x = sprite_width/2
height_y = sprite_height/2
previous_x = x
death_type = 1
    slowdown_timer = 0
    white_transition_alpha = 0
    can_die_upon_impact = 0
flash_palette = spr_star_marine_palette
    frame = 0
    frame_timer = 0
hsp = 0
bob = 0
    bob_dir = 1
    bob_target = 0
    bob_speed = 1
    bob_pause = 0
angle = 0
    angle_target = 0
player_offset = y
phase = 0
    state = 0
    timer = 0
    phase_timer = 0
    phase_flash = 0
    death_timer = 0
    lock_position = 0
    slowdown_timer = 0
cannon_offset_x = 72
cannon_offset_y = -14
    cannon_timer = 0
    cannon_frame = 0
    cannon_firing_frame = 0
    cannon_firing_particles_frame = 0
splash_frame = 0
    splash_x = x
    splash_y = y
warning_frame = 0
    warning_x = -10000
    warning_y = y
    warning_x_1 = -10000
bubble_release_timer = 0
xdir  = 1
angle = 0
boss_enemy = 1
heart = 192
    heartmax = 192
    hp_mod = 0.26041667
    hp_target = heart
heart_bar_target = ((heart/2)-(heartmax/4))+2
heart_bar_target_2 = heart/2
stamina = 120
can_draw_healthbar = 0
white_transition_alpha = 0
rocket_frames = 0
    rocket_angles = 360
    rocket_target = 360
midsection_x[0] = 0
    midsection_target[0] = 8
    midsection_x[1] = 0
    midsection_target[1] = 0
    midsection_x[2] = 0
    midsection_target[2] = 0
    midsection_direction = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy(obj_star_marine_bubble)
instance_destroy(obj_rna_particles)
if state = 1 and timer &gt; 0
    o.water_line += 64;
if o.targets_mode = spr_hud_target_boss and room != rm_editor
    o.targets_ready = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if o.pause = 0
    {
        event_inherited()
        if heart &gt;= 0
            {
                //Bobbing Effects
                if midsection_x[0] &gt;= midsection_target[0]-1 and midsection_x[0] &gt; 0
                    midsection_target[0] = -9;
                if midsection_x[0] &lt;= midsection_target[0]+1 and midsection_x[0] &lt; 0
                    midsection_target[0] = 9;
                midsection_x[0] = lerp(midsection_x[0],midsection_target[0],0.10*bob_speed)
                midsection_x[1] = lerp(midsection_x[1],midsection_x[0],0.20*bob_speed)
                midsection_x[2] = lerp(midsection_x[2],midsection_x[1],0.25*bob_speed)
                bob   = midsection_x[0]/2
                bob_x = midsection_x[0]/2
                //Rockets (Agnostic of State)
                rocket_frames += 0.5
                if rocket_frames &gt; 2.8
                    rocket_frames = 0;
                rocket_angles = lerp(rocket_angles,rocket_target,0.25)
                //Rocket Directions
                if xdir = 1
                    {
                        if x &gt; previous_x
                            rocket_target = 325;
                        if x &lt; previous_x
                            rocket_target = 390;
                    }
                previous_x = x
                //Water Splash
                if splash_frame &gt; 0
                    {
                        splash_frame += 0.25
                        if splash_frame &gt; 8.8
                            splash_frame = 0;
                    }
                if phase = 0 and heart &lt; heartmax/2
                    {
                        audio_play_sound(snd_boss_phase_transition,50,false);
                        phase_timer = 1;
                        phase = 1;
                    }
                if o.user_cursor_mode = 0
                    {
                        //Flying Phase
                        if state = 0
                            {
                                //Reset variables
                                if timer = 0
                                    {
                                        if x &gt; o.px xdir = 1;
                                        if x &lt; o.px xdir = -1;
                                        cannon_frame = 0
                                        cannon_firing_frame = 0
                                        rocket_frames = 0
                                        lock_position = 0
                                        x = view_xview[view_port]+view_wview[view_port]+128
                                        y = view_yview[view_port]-128
                                        if xdir = -1
                                            x = view_xview[view_port]-128;
                                        player_offset = o.py-108
                                    }
                                timer += 1
                                var pursuit_speed = 5;
                                if point_distance(o.px+(128*xdir),o.py-108,x,y) &gt; 128
                                    pursuit_speed = 9;
                                if lock_position = 0
                                    {
                                        if timer &lt;= 96
                                            {
                                                move_towards_point(o.px+(128*xdir),o.py-108,pursuit_speed)
                                                bob_speed = 2
                                            }
                                        else
                                            move_towards_point(o.px+(128*xdir),o.py-108,0);

                                        if point_distance(o.px+(128*xdir),o.py-108,x,y) &lt; 32
                                            {
                                                lock_position = 1
                                                bob_speed = 1
                                            }
                                    }
                                if lock_position = 1
                                    {
                                        if point_distance(o.px+(128*xdir),o.py-108,x,y) &gt; 16
                                            move_towards_point(o.px+(128*xdir),o.py-108,pursuit_speed/2);
                                        else
                                            move_towards_point(o.px+(128*xdir),o.py-108,0);
                                    }
                                //If the Player Is Nearby, Bite Them
                                var hitbox_x1 = x;
                                var hitbox_x2 = x+68;
                                if xdir = -1
                                    {
                                        hitbox_x1 = x-68
                                        hitbox_x2 = x
                                    }
                                if point_in_rectangle(o.universal_player_x,o.universal_player_y,hitbox_x1,y-35,hitbox_x2,y+35)
                                and o.use_editor = 0
                                and o.hurt[0] = 0 and o.hurt[1] = 0
                                and o.shield_invuln = 32
                                    {
                                        scr_enemy_deal_damage(0.4,1,2);
                                        audio_play_sound(snd_enemy_sword,50,false)
                                    }
                                //Prevent phase iteration if the Star Marine isn't on-screen yet
                                if timer = 15 and lock_position = 0
                                    timer = 1;
                                if timer &gt; 16
                                    {
                                        //Open Cannon
                                        if timer = 17
                                            {
                                                audio_play_sound(snd_boss_metal,50,false);
                                                scr_set_screen_shake(24,3)
                                            }
                                        //Animate Cannon
                                        cannon_frame += 0.35
                                        if cannon_frame &gt; 8.8 cannon_frame = 4.8;
                                    }
                                if timer &gt; 48 and timer &lt; 212
                                    {
                                        cannon_firing_frame += 0.5
                                        if cannon_firing_frame &gt; 3.8
                                            cannon_firing_frame = 0;
                                        if timer = 49
                                            audio_play_sound(snd_boss_charging,50,false);
                                        if timer = 168
                                            audio_play_sound(snd_rna_cannon,50,false);
                                        if timer &gt; 168
                                            {
                                                cannon_timer += 1
                                                cannon_firing_particles_frame += 0.5
                                                if cannon_firing_particles_frame &gt; 8.8
                                                    cannon_firing_particles_frame = 0;
                                                if cannon_timer = 4
                                                    {
                                                        var rna_cannon_id = instance_create(x+(cannon_offset_x*-xdir),y+cannon_offset_y,obj_rna_particles);
                                                        if xdir = 1
                                                            rna_cannon_id.direction = 225;
                                                        if xdir = -1
                                                            rna_cannon_id.direction = 315;
                                                        scr_set_screen_shake(24,3)
                                                        cannon_timer = 0
                                                    }
                                            }
                                    }
                                if timer &gt; 248
                                    {
                                        var move_direction = view_xview[view_port]+view_wview[view_port]+128;
                                        if xdir = 1
                                            move_direction = view_xview[view_port]-128;
                                        if phase = 1 pursuit_speed = 12;
                                        move_towards_point(move_direction,view_yview[view_port]-128,pursuit_speed)
                                    }
                                if y &lt; view_yview[view_port]-128
                                    {
                                        timer = 0
                                        state = 1
                                        if phase = 1 state = 2;
                                        sprite_index = spr_star_marine_base_0
                                    }
                            }
                        if state = 1
                            {
                                //Reset variables
                                if timer = 0
                                    {
                                        rocket_frames = 0
                                        lock_position = 0
                                        x = view_xview[view_port]+view_wview[view_port]
                                        if xdir = -1
                                            x = view_xview[view_port];
                                        y = o.water_height
                                        if o.py &gt; o.water_height + 64
                                        or o.py &lt; o.water_height - 128
                                            y = o.py;
                                        move_towards_point(x,y,0)
                                        speed = 0
                                        splash_frame = 0.1
                                        splash_x = x
                                        splash_y = o.water_height
                                        bob_speed = 3
                                        o.water_line -= 64
                                        audio_play_sound(snd_heavy_splash,50,false)
                                        audio_play_sound(snd_heavy_splash,50,false)
                                        scr_set_screen_shake(24,3)
                                    }
                                timer += 1
                                bubble_release_timer += 1
                                if bubble_release_timer = 6
                                    {
                                        bubble_release_timer = 0
                                        if y &gt; o.water_height
                                            instance_create(x+random_range(-64,64),y+random_range(-32,64),obj_star_marine_bubble);
                                    }
                                x += 10*-xdir
                                if (xdir = -1 and x &gt; view_xview[view_port]+view_wview[view_port]+128)
                                or (xdir = 1  and x &lt; view_xview[view_port]-128)
                                    {
                                        timer = 0
                                        state = 0
                                        o.water_line += 64
                                        sprite_index = spr_star_marine_base_1
                                    }
                                //If the Player Is Nearby, Bite Them
                                if point_distance(o.universal_player_x,o.universal_player_y,x,y) &lt; 64
                                and o.use_editor = 0
                                and o.hurt[0] = 0 and o.hurt[1] = 0
                                and o.shield_invuln = 32
                                    {
                                        scr_enemy_deal_damage(0.4,1,2)
                                        scr_set_screen_shake(24,3)
                                    }
                                //Bomb Cube
                                var instance_ID = collision_circle(x,y,64,obj_player_cube_alt,false,true);
                                if instance_exists(instance_ID)
                                    {
                                        if instance_ID.cube_jiggle_timer = 0
                                            {
                                                instance_ID.cube_jiggle_timer = 10
                                                instance_ID.cube_health += 0.50
                                            }
                                    }
                                //Mega Items
                                var instance_ID = collision_circle(x,y,64,obj_mega_item_parent,false,true);
                                if instance_exists(instance_ID)
                                    {
                                        instance_ID.attacked = 2
                                    }
                                if room = rm_player
                                    {
                                        var crate_ID = collision_circle(x,y,64,obj_destructible,false,true);
                                        if instance_exists(crate_ID)
                                            {
                                                crate_ID.attacked = 1
                                            }
                                    }
                                //Attack other enemies within range of the boxing glove
                                instance_ID = collision_circle(x,y,64,obj_enemy_parent,false,true);
                                if instance_exists(instance_ID)
                                    {
                                        if instance_ID.attacked = 0 and instance_ID.alpha = 0
                                            {
                                                instance_ID.attacked = 1
                                                instance_ID.attacked_damage = 2
                                            }
                                    }
                            }
                        if state = 2
                            {
                                if timer = 0
                                    {
                                        move_towards_point(x,y,0)
                                        x = view_xview[view_port]+(view_wview[view_port]/2)
                                        y = view_yview[view_port]+view_hview[view_port]+64
                                        speed = 0
                                        depth = 99
                                        cannon_timer = 0
                                        splash_frame = 0.1
                                        splash_x = x
                                        splash_y = o.water_height
                                        warning_x = view_xview[view_port]+(view_wview[view_port]/2)+random_range(0,128)
                                        warning_x_1 = view_xview[view_port]+(view_wview[view_port]/2)+random_range(-128,0)
                                        audio_play_sound(snd_heavy_splash,50,false)
                                        audio_play_sound(snd_heavy_splash,50,false)
                                        audio_play_sound(snd_boss_charging,50,false)
                                        scr_set_screen_shake(32,6)
                                        sprite_index = spr_star_marine_base_2
                                    }
                                timer += 1
                                warning_frame += 1
                                if warning_frame &gt; 2.8
                                    warning_frame = 0;
                                warning_y = view_yview[view_port]+(view_hview[view_port]/2)
                                if view_hview[view_port] &gt; internal_res_height
                                    y -= 8;
                                else
                                    y -= 4;
                                if timer = 120
                                    audio_play_sound(snd_rna_cannon,50,false);
                                if timer &gt; 120 and timer &lt; 164
                                    {
                                        cannon_timer += 1
                                        if cannon_timer = 4
                                            {
                                                var rna_cannon_id = instance_create(warning_x,view_yview[view_port],obj_rna_particles);
                                                rna_cannon_id.direction = 270
                                                rna_cannon_id.scale = 2
                                                var rna_cannon_id = instance_create(warning_x_1,view_yview[view_port],obj_rna_particles);
                                                rna_cannon_id.direction = 270
                                                rna_cannon_id.scale = 2
                                                scr_set_screen_shake(24,3)
                                                cannon_timer = 0
                                            }
                                    }
                                if y &lt; view_yview[view_port]-640
                                    {
                                        timer = 0
                                        state = 0
                                        depth = -5
                                        warning_x = -10000
                                        warning_x_1 = -10000
                                        sprite_index = spr_star_marine_base_1
                                    }
                            }
                    }
            }
        if room != rm_editor
            {
                if heart &lt; 0 and o.targets_mode = spr_hud_target_boss
                    {
                        if o.timer_stop = 0
                            {
                                o.timer_stop = 1
                                depth = 0
                                death = 1
                                timer = 0
                                state = 3
                                sprite_index = spr_star_marine_base_3
                                scr_stop_boss_music()
                            }
                        move_towards_point(x,y,0);
                        angle = 0
                        timer += 1
                        death_timer += 1
                        enemy_speed = 0
                        rocket_frames = 0
                        o.death[0] = 0
                        y += 3
                        if timer = 2
                            audio_play_sound(snd_enemy_explosion,50,false);
                        if timer &gt;= 8
                            {
                                if o.story_mode = 0
                                    {
                                        if instance_number(obj_star_flounder) &lt; 8
                                            instance_create(x+random_range(-64,64),y+random_range(-64,64),obj_star_flounder);
                                    }
                                else
                                    {
                                        if instance_number(obj_star_flounder_dont_explode) &lt; 8
                                            instance_create(x+random_range(-64,64),y+random_range(-64,64),obj_star_flounder_dont_explode);
                                    }
                                timer = 0
                            }
                        slowdown_timer += 1
                        if slowdown_timer = 2 and death_timer &lt; 240
                            {
                                o.pause_logic = 2
                                slowdown_timer = 0
                            }
                        if death_timer &gt; 300
                            instance_destroy();
                    }
            }
        else
            {
                if instance_number(object_index) &gt; 1
                    {
                        scr_set_message("There can only be one Star Marine per stage!")
                        instance_destroy();
                    }
                if point_distance(o.px,o.py,x,y) &gt; 1024
                    move_towards_point(x,y,0);
                if heart &lt; 0
                    {
                        death = 1
                        death_timer += 1
                        if death_timer &gt; 299
                            {
                                var obj_id = instance_create(start_x,start_y,object_index);
                                obj_id.item = item
                                instance_destroy()
                            }
                        timer += 1
                        if timer = 2
                            audio_play_sound(snd_enemy_explosion,50,false);
                        if timer &gt;= 8
                            timer = 0;
                        angle = 0
                        enemy_speed = 0
                        rocket_frames = 0
                        y += 3
                        sprite_index = spr_star_marine_base_3
                    }
            }
    }
else
    move_towards_point(x,y,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if o.user_cursor_mode = 0
    {
        draw_sprite(spr_boss_hud,0,159,224)
        if heart &gt; 0
            {
                var heart_scale = heart*0.5208333333333333;
                heart_bar_target = lerp(heart_bar_target,heart_scale,0.15);
                draw_sprite_part_ext(spr_boss_health,0,0,0,heart_bar_target,3,164,226,1,1,c_white,1)
            }
        draw_set_color(c_white)
        draw_set_font(o.text_font)
        draw_set_halign(fa_middle)
        draw_text(213,208,"Star Marine")
        draw_set_halign(fa_left)
        if heart &lt; 0 and room != rm_editor and o.pause = 0
        and o.targets_mode = spr_hud_target_boss
            {
                if white_transition_alpha &lt; 1 white_transition_alpha += 0.0025;
                draw_sprite_stretched_ext(spr_thunder,0,0,0,internal_res_width,internal_res_height,c_white,white_transition_alpha)
            }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Background Elements of Star Marine
var pal_alpha = 0;
if alpha &gt; 0.5 pal_alpha = 1;
if phase_timer &gt; 0
    {
        phase_flash += 1
        phase_timer += 1

        if phase_flash &gt; 1 pal_alpha = 1;
        if phase_flash &gt; 2
            phase_flash = 0;
        if phase_timer &gt; 30
            phase_timer = 0;
    }
script_execute(o.pal_swap_script,flash_palette,pal_alpha,false)
if alpha &gt; 0.5 and o.pal_swap_script = pal_swap_dummy
    d3d_set_fog(true,c_yellow,0,0);
if (state = 0 or state = 3)
    {
        draw_sprite_ext(spr_star_marine_rocket_nozzles,rocket_frames,x+(16*-xdir),y+24,1,1,rocket_angles,c_white,1)
        draw_sprite_ext(spr_star_marine_rocket_nozzles,rocket_frames,x+(12*-xdir),y+32,1,1,rocket_angles,c_white,1)
        draw_sprite_ext(spr_star_marine_tail_1,0,x+midsection_x[2],y,xdir,1,0,c_white,1)
        draw_sprite_ext(spr_star_marine_midsection_1,1,x+midsection_x[1],y,xdir,1,0,c_white,1)
        draw_sprite_ext(spr_star_marine_midsection_1,0,x+midsection_x[0],y,xdir,1,0,c_white,1)
    }
if state = 1
    {
        draw_sprite_ext(spr_star_marine_rocket_nozzles,rocket_frames,x+(16*-xdir),y+16,1,1,rocket_angles,c_white,1)
        draw_sprite_ext(spr_star_marine_rocket_nozzles,rocket_frames,x+(12*-xdir),y+24,1,1,rocket_angles,c_white,1)
        draw_sprite_ext(spr_star_marine_tail_0,0,x+midsection_x[2],y,xdir,1,0,c_white,1)
        draw_sprite_ext(spr_star_marine_midsection_0,1,x+midsection_x[1],y,xdir,1,0,c_white,1)
        draw_sprite_ext(spr_star_marine_midsection_0,0,x+midsection_x[0],y,xdir,1,0,c_white,1)
    }
shader_reset();
d3d_set_fog(false,0,0,0)

event_inherited()

script_execute(o.pal_swap_script,flash_palette,pal_alpha,false)
if alpha &gt; 0.5 and o.pal_swap_script = pal_swap_dummy
    d3d_set_fog(true,c_yellow,0,0);
//Foreground Elements of Star Marine
if phase_timer &gt; 0
    {
        draw_sprite_ext(sprite_index,frame,x,y+bob,xdir*(scale+spring_jiggle+enemy_growth),scale+enemy_growth-(spring_jiggle/3),angle+subangle,c_yellow,1);
    }
if state = 0
    {
        draw_sprite_ext(spr_star_marine_rna_cannon,cannon_frame,x+bob_x,y+bob,xdir,1,0,c_white,1)
        if timer &gt; 48
            draw_sprite_ext(spr_star_marine_rna_cannon_warming_up,cannon_firing_frame,x+bob_x,y+bob,xdir,1,0,c_white,1);
        if timer &gt; 128 and timer &lt; 168
            draw_sprite_ext(spr_star_marine_rna_cannon_firing,cannon_firing_frame,x+bob_x,y+bob,xdir,1,0,c_white,1);
        if timer &gt; 168 and timer &lt; 212
            {
                draw_sprite(spr_explosion_2,cannon_firing_particles_frame,x+(cannon_offset_x*-xdir),y+cannon_offset_y)
                draw_sprite(spr_explosion_2,cannon_firing_particles_frame+0.2,x+(16*-xdir)+(cannon_offset_x*-xdir),y+16+cannon_offset_y)
            }
        draw_sprite_ext(spr_star_marine_flipper_1,0,x,y+bob,xdir,1,0,c_white,1)
    }
if state = 1
    {
        draw_sprite_ext(spr_star_marine_flipper_0,0,x,y+bob,xdir,1,0,c_white,1)
    }
d3d_set_fog(false,0,0,0)
shader_reset();

if splash_frame &gt; 0 draw_sprite(spr_water_splash_2x,splash_frame,splash_x,splash_y);
draw_sprite(spr_hazard_warning,warning_frame,warning_x,warning_y);
draw_sprite(spr_hazard_warning,warning_frame,warning_x_1,warning_y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
