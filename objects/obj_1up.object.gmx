<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_chibililac_cage</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_destructible</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics and Animation Variables

//Tile Surface Sensors
tile_surface_id[0] = 0         //Floor Surface Collision Sensor
tile_surface_id[1] = 0         //Wall  Surface Collision Sensor (Left)
tile_surface_id[2] = 0         //Wall  Surface Collision Sensor (Right)

//State Trigger Variables
is_collected    = 0                     //Has the Player Taken the Item?
is_confirmed    = 0                     //Have We Confirmed Which Item We Are?
is_floating     = 1                     //Were We Told to Float By Another Object?
is_visible      = 1                     //Are We Visible?
is_sound        = 0                     //Are We Playing A Sound?
is_speed        = 0                     //Do We Have A Speed?
is_time         = 16                    //Timer For Upwards Floating
is_dec          = 0                     //Are we allowed to draw a decoration tile?
is_mask         = 1                     //Are we allowed to spawn a collision tile?
is_item         = spr_chibililac_cage   //What Item Are We? Arguments: spr_chibililac_cage
//                                                                     spr_chibicarol_cage
//                                                                     spr_chibimilla_cage

//Gravity And Movement Variables
idirection      = 1         //Facing Direction
icounting       = 0         //Counter Variable For Flying
x_offset        = 0         //Offset  Variable For Player Clipping
y_offset        = 0         //Offset  Variable For Player Clipping
gravity_speed   = 0         //Gravity Speed
gravity_cap     = 4         //Gravity Speed Cap
gravity_accel   = 0.21875   //Gravity Acceleration
gravity_slope   = 0         //Gravity Slope Check

//Particle Variables
p_frame[0] = 0              //Frame of Animation (Particle 1)
p_frame[1] = 0              //Frame of Animation (Particle 2)
p_timer    = 0              //Timer for Particle Attachment
px[0]=random_range(-12,12)  //X Position of Particle 1
py[0]=random_range(-12,12)  //Y Position of Particle 1
px[1]=random_range(-16,16)  //X Position of Particle 2
py[1]=random_range(-16,16)  //Y Position of Particle 2
particle1  = 6.10           //Visibility for Particle 1 
particle2  = 6.20           //Visibility for Particle 2
particle3  = 6.30           //Visibility for Particle 3
particle4  = 6.40           //Visibility for Particle 4
particle5  = 6.50           //Visibility for Particle 5
particle6  = 6.60           //Visibility for Particle 6
particle7  = 6.70           //Visibility for Particle 7
particle8  = 6.80           //Visibility for Particle 8
particle9  = 6.90           //Visibility for Particle 9
particle10 = 7              //Visibility for Particle 10
particle_frame_1  = 0       //Animation Frame for Particle 1
particle_frame_2  = 0       //Animation Frame for Particle 2
particle_frame_3  = 0       //Animation Frame for Particle 3
particle_frame_4  = 0       //Animation Frame for Particle 4
particle_frame_5  = 0       //Animation Frame for Particle 5
particle_frame_6  = 0       //Animation Frame for Particle 6
particle_frame_7  = 0       //Animation Frame for Particle 7
particle_frame_8  = 0       //Animation Frame for Particle 8
particle_frame_9  = 0       //Animation Frame for Particle 9
particle_frame_10 = 0       //Animation Frame for Particle 10
//Particle X/Y Positions
particle_x_1  = x particle_y_1  = y
particle_x_2  = x particle_y_2  = y
particle_x_3  = x particle_y_3  = y
particle_x_4  = x particle_y_4  = y
particle_x_5  = x particle_y_5  = y
particle_x_6  = x particle_y_6  = y
particle_x_7  = x particle_y_7  = y
particle_x_8  = x particle_y_8  = y
particle_x_9  = x particle_y_9  = y
particle_x_10 = x particle_y_10 = y

//Animation Variables
frame = 0                   //Current Frame
anim_frame = 5              //Maximum Number of Frames

//Tile Mask
tile_mask = -1
tile_flat = -1

//Are We Allowed To Hold Items?
give_item = 0
item = 0
attacked = 0
weather_rain_particles_frame = 0

//Get Current Sparkle Particle Based on Performance Profile
lilac_sparkle_sprite = spr_sparkle

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delete Tile Mask If We Have Been Destroyed Prematurely
if tile_exists(tile_flat) tile_delete(tile_flat);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Flat and Sloped Surface Collisions

//Only execute physics logic if we are uncaged, and uncollected
if (obj_game_logic.pause=0 and is_collected=2)

{

//  Flat and Sloped Surface Collisions  //
//--------------------------------------//

//------------------------------//
//Floor Surface Collision Sensor//
//------------------------------//
tile_surface_id[0] = tile_layer_find(surface_flats,x,y)          //Floor Surface Sensor
tile_surface_id[1] = tile_layer_find(surface_flats,x-15,y-20)    //Wall Surface Sensor (Left)
tile_surface_id[2] = tile_layer_find(surface_flats,x+15,y-20)    //Wall Surface Sensor (Right)

//If we are colliding with a floor surface, stop gravity
if (tile_surface_id[0]!=-1)
    {
        if y &gt;= tile_get_y(tile_surface_id[0])
        y=floor(tile_get_y(tile_surface_id[0]));
    }

//------------------------------//
//Wall Surfaces Collision Sensor//
//------------------------------//

//Check for the wall. (Left)
if tile_surface_id[1]!=-1
    {
        if x &lt;= tile_get_x(tile_surface_id[1])+tile_get_width(tile_surface_id[1])+17-2
        x=floor(tile_get_x(tile_surface_id[1])+tile_get_width(tile_surface_id[1])+17-2)
        //Change Facing Direction
        idirection=1
    }
//Check for the wall. (Right)
if tile_surface_id[2]!=-1
    {
        if x &gt;= tile_get_x(tile_surface_id[2])-17
        x=floor(tile_get_x(tile_surface_id[2])-17)
        //Change Facing Direction
        idirection=-1
    }

//------------------------------//
//Slope Surface Collision Sensor//
//------------------------------//

tile_ramp_id = tile_layer_find(surface_slopes,x,y)

//If we are colliding with a slope tile, clip to its surface based on X position
if tile_ramp_id!=-1

{
    //Collect Background ID of the Tile
    tile_ramp_asset=tile_get_background(tile_ramp_id)

    //Get Gem Coordinates Relative to the Tile's Origins
    tile_ramp_pos[0]=abs(tile_get_x(tile_ramp_id)-x)   //Get X
    tile_ramp_pos[1]=abs(tile_get_y(tile_ramp_id)-y)   //Get Y

    //Check If Gem Y is Greater Than Slope's Current Height
    if tile_ramp_pos[1] &gt;= obj_game_logic.orig_clip[tile_ramp_asset,tile_ramp_pos[0]]
        {
            //If Gem is Colliding with Slope, Clip to its Y Coordinates
            y = floor(tile_get_y(tile_ramp_id))+obj_game_logic.orig_clip[tile_ramp_asset,tile_ramp_pos[0]]
            gravity_speed=0
            gravity_slope=1
        }
}

//Clean slope tile variables when collisions are done
if (tile_ramp_id=-1)

{

    tile_ramp_pos[0]    = 0
    tile_ramp_pos[1]    = 0
    gravity_slope       = 0

}

} //End of Pause Safety Check
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Basic Gravity System

if (obj_game_logic.pause = 0 and is_collected=2)

{

    //----------------------------------//
    //       Basic Gravity System       //
    //----------------------------------//
    
    //Apply Gravity Speed to Y Coordinates
    y+=gravity_speed
    //If we are not at the speed cap, apply acceleration.
    if tile_surface_id[0]=-1 and gravity_speed&lt;gravity_cap
        gravity_speed+=gravity_accel;
    //Leap slightly upwards upon spawning.
    if is_time&gt;-8 is_time -= 1;
    if is_time&gt;8  gravity_speed=-2.5;

} //End of Pause Safety Check
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Asset Switching

//Change Chibi 1up's Skin To Match The Player's
switch(obj_game_logic.skin)
    {
        case spr_lilac:
            {
                if is_collected=0 {is_item = spr_chibililac_cage}
                else              {is_item = spr_chibililac}
                break;
            }
        case spr_carol:
            {
                if obj_game_logic.alt_skin = 0
                    {
                        if is_collected=0 {is_item = spr_chibicarol_cage}
                        else              {is_item = spr_chibicarol}
                    }
                else
                    {
                        if is_collected=0 {is_item = spr_chibicarrie_cage}
                        else              {is_item = spr_chibicarrie}
                    }
                break;
            }
        case spr_milla:
            {
                if is_collected=0 {is_item = spr_chibimilla_cage}
                else              {is_item = spr_chibimilla}
                break;
            }
        case spr_spade:
            {
                if is_collected=0 {is_item = spr_chibispade_cage}
                else              {is_item = spr_chibispade}
                break;
            }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Basic Animation System

//----------------------------------//
//      Basic Animation System      //
//----------------------------------//

//Iterate Animation Frames
if obj_game_logic.pause = 0
    {
        frame+=0.2
        
        //Reset Animation (Caged)
        if (frame&gt;=7 and is_collected=0)
            {
                frame=0
            }
        
        //Reset Animation (Movement)
        if (frame&gt;=10 and is_collected=2)
            {
                frame=0
            }
        //Reset Animation (Collected)
        if (frame&gt;=13 and is_collected=3)
            {
                frame=11
            }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Basic Movement System

//Pause Safety Check
if (obj_game_logic.pause = 0 and is_collected=2)
and (tile_surface_id[0]!=-1 or gravity_slope=1)
    {
        //Move Right
        if idirection = 1
            {
                x+=0.5
            }
        //Move Left
        else
            {
                x-=0.5
            }
    } //End of Pause Safety Check
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Floating Movement System
if (obj_game_logic.pause = 0 and is_collected=3)
    {
        //Clip to the player
        x=obj_game_logic.px+x_offset; y=obj_game_logic.py+y_offset;
        //Fly upward
        y_offset -= 0.5
        //Change direction based on distance from the player
        if (x_offset&lt;-24 or x_offset&gt;24) {icounting+=1}
        
        //Float around the player at least three times
        switch(icounting)
            {
                //First  Pass Around the Player
                case 0: {x_offset-=2; idirection = -1; depth=-4; break;}
                case 1: {x_offset+=2; idirection =  1; depth=-7; break;}
                //Second Pass Around the Player
                case 2: {x_offset-=3; idirection = -1; depth=-4; break;}
                case 3: {x_offset+=3; idirection =  1; depth=-7; break;}
                //Third  Pass Around the Player
                case 4: {x_offset-=4; idirection = -1; depth=-4; break;}
                case 5: {x_offset+=4; idirection =  1; depth=-7; break;}
                //Time to Fly!
                case 6: {x_offset-=8; y_offset-=8; depth=-4; break;}
            }
        //Destroy Particle Objects Upon Reaching the HUD
        if icounting=7
            {
                //Destroy Particles
                particle_frame_6=-1
                particle_frame_7=-1
                particle_frame_8=-1
                particle_frame_9=-1
                particle_frame_10=-1
                //Create Five More Temporary Particles
                particle_x_1=x+random_range(-8,8); particle_y_1=y+random_range(-8,8); particle_frame_1=7;
                particle_x_2=x+random_range(-8,8); particle_y_2=y+random_range(-8,8); particle_frame_2=7;
                particle_x_3=x+random_range(-8,8); particle_y_3=y+random_range(-8,8); particle_frame_3=7;
                particle_x_4=x+random_range(-8,8); particle_y_4=y+random_range(-8,8); particle_frame_4=7;
                particle_x_5=x+random_range(-8,8); particle_y_5=y+random_range(-8,8); particle_frame_5=7;
                //Set Our Visibility to 0
                is_visible=0
                //Add To The Lives Counter
                lives+=1
                depth=-7
                //Enable 1up Particle On The HUD
                obj_game_logic.one_up=1
                //Play Sound
                if obj_game_logic.music_mute = 0
                    {
                        audio_play_sound(petal_grab,50,false)
                        scr_adjust_music_extra_life(obj_game_logic.music_volume/100,2750,0)
                    }
            }
        //Destroy Self After Animations Have Completed
        if obj_game_logic.one_up = 1
            {
                //Advance Timer
                obj_game_logic.one_up_offset+=1

                //After 24 Pixels Cease Drawing Particle
                if obj_game_logic.one_up_offset &gt; 24
                or obj_game_logic.user_cursor_mode = 1
                    {
                        obj_game_logic.one_up = 0
                        obj_game_logic.one_up_offset = 0
                        instance_destroy();
                    }
                //Iterate Animation Timers
                particle_frame_1-=0.32 particle_frame_2-=0.32
                particle_frame_3-=0.32 particle_frame_4-=0.32
                particle_frame_5-=0.32
            }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Particle Behavior System

if obj_game_logic.pause=0

{
//Walking Stage
if (is_collected=2)
    {
        //Advance Frames
        p_frame[0]+=0.32
        p_frame[1]+=0.12
        //Reset Frames of Animation
        if p_frame[0] &gt; 8
            {
                p_frame[0] = 0
                //Modify Offset Positions
                px[0]=random_range(-8,8)
                py[0]=random_range(-8,8)
            }
        //Reset Frames of Animation
        if p_frame[1] &gt; 8
            {
                p_frame[1] = 0
                //Modify Offset Positions
                px[1]=random_range(-16,16)
                py[1]=random_range(-16,16)
            }
    }

//Floating Stage
if (is_collected=3)
    {
        //Iterate Timer
        p_timer+=0.5
        //Reset Timer
        if p_timer&gt;9 {p_timer=0}
        //Iterate Particle Animation Frames
        particle_frame_1+=0.35 particle_frame_2+=0.35
        particle_frame_3+=0.35 particle_frame_4+=0.35
        particle_frame_5+=0.35 particle_frame_6+=0.35
        particle_frame_7+=0.35 particle_frame_8+=0.35
        particle_frame_9+=0.35 particle_frame_10+=0.35
        if particle_frame_1&gt;7 {particle_frame_1 = 7}
        if particle_frame_2&gt;7 {particle_frame_2 = 7}
        if particle_frame_3&gt;7 {particle_frame_3 = 7}
        if particle_frame_4&gt;7 {particle_frame_4 = 7}
        if particle_frame_5&gt;7 {particle_frame_5 = 7}
        if particle_frame_6&gt;7 {particle_frame_6 = 7}
        if particle_frame_7&gt;7 {particle_frame_7 = 7}
        if particle_frame_8&gt;7 {particle_frame_8 = 7}
        if particle_frame_9&gt;7 {particle_frame_9 = 7}
        if particle_frame_10&gt;7 {particle_frame_10 = 7}
        //Attach Particle Objects Based on Certain Times
        switch(p_timer)
            {
                case 0: {particle_x_1=x+random_range(-16,16); particle_y_1=y-16+random_range(-16,16); particle_frame_1 = 0; break;}
                case 1: {particle_x_2=x+random_range(-16,16); particle_y_2=y-16+random_range(-16,16); particle_frame_2 = 0; break;}
                case 2: {particle_x_3=x+random_range(-16,16); particle_y_3=y-16+random_range(-16,16); particle_frame_3 = 0; break;}
                case 3: {particle_x_4=x+random_range(-16,16); particle_y_4=y-16+random_range(-16,16); particle_frame_4 = 0; break;}
                case 4: {particle_x_5=x+random_range(-16,16); particle_y_5=y-16+random_range(-16,16); particle_frame_5 = 0; break;}
                case 5: {particle_x_6=x+random_range(-16,16); particle_y_6=y-16+random_range(-16,16); particle_frame_6 = 0; break;}
                case 6: {particle_x_7=x+random_range(-16,16); particle_y_7=y-16+random_range(-16,16); particle_frame_7 = 0; break;}
                case 7: {particle_x_8=x+random_range(-16,16); particle_y_8=y-16+random_range(-16,16); particle_frame_8 = 0; break;}
                case 8: {particle_x_9=x+random_range(-16,16); particle_y_9=y-16+random_range(-16,16); particle_frame_9 = 0; break;}
                case 9: {particle_x_10=x+random_range(-16,16); particle_y_10=y-16+random_range(-16,16); particle_frame_10 = 0; break;}
            }
    }

} //End of Pause Safety Check
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collection and Transitions

//Tile Mask (This is the part that the player collides with)
if is_mask=1
    {
        tile_flat = tile_add(spr_1up_collision_box,0,0,32,32,x-16,y-32,surface_flats)
        //Set Visibility of Tile Mask
        tile_set_visible(tile_flat,false)
        //Disable Spawning of Additional Tile Masks
        is_mask = 0
    }

//If the player has destroyed our tile collision box,
//release ourselves from the cage
if attacked = 1 and is_collected = 0 and room != rm_editor
    {
        is_collected = 1;
    }

//If the player has broken the cage, change sprites
if (is_collected=1)
    {
        //If the tile mask has not been deleted yet, delete it
        if tile_exists(tile_flat) tile_delete(tile_flat);
        if is_item=spr_chibililac_cage is_item=spr_chibililac;
        if is_item=spr_chibicarol_cage is_item=spr_chibicarol;
        if is_item=spr_chibimilla_cage is_item=spr_chibimilla;
        sprite_index = spr_chibililac
        if is_dec = 0
            {
                //Leave a scenery tile of the broken cage
                if room != rm_editor tile_add(spr_cage_broken,0,0,34,7,x-17,y-7,-3);
                //Play Sound
                audio_stop_sound(flower_destroy)
                audio_play_sound(flower_destroy,50,false)
            }
        //Set our collection stage
        is_collected=2
    }

//If We Are Within Range Of The Player, Consider Ourselves Collected
if point_distance(x,y,obj_game_logic.px,obj_game_logic.py) &lt;= 24 and is_collected=2
and obj_game_logic.anim_current!=obj_game_logic.anim_hurt and obj_game_logic.anim_current!=obj_game_logic.anim_death
//Alternatively we were spawned by the player, as a result of collecting 200 gems,
//consider ourselves collected
or (is_collected=4)
    {
        //Modify collection state
        is_collected=3
        frame=11
        if obj_game_logic.music_mute = 0 and !audio_is_playing(ost_extra_life_stringtunes)
        and !audio_is_playing(ost_invincibility_theme_bob)
            {
                audio_play_sound(ost_extra_life_stringtunes,50,false)
                scr_adjust_music_extra_life(0,100,obj_game_logic.music_volume/100)
            }
        //Play Sound Jingle
        audio_play_sound(snd_chibi_jingle,50,false)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if obj_game_logic.one_up = 1
    draw_sprite(spr_hud_1up,0,149,12+obj_game_logic.one_up_offset);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Sprite (Needed For Sprite Mirroring)
if is_visible = 1
    {
        draw_sprite_ext(is_item,frame,x,y,idirection,1,0,c_white,1)
        if obj_game_logic.use_weather_conditions &gt; 0 and y &lt; obj_game_logic.water_height
            scr_item_draw_rain_particles(self);
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Particle Effects

//Draw two main particles during walking stage
if (is_collected=2 and p_frame[0]&lt;=8)
    {
        draw_sprite(lilac_sparkle_sprite,p_frame[0],x+px[0],y-20+py[0])
    }
if (is_collected=2 and p_frame[1]&lt;=8)
    {
        draw_sprite(lilac_sparkle_sprite,p_frame[1],x+px[1],y-20+py[1])
    }

//Draw ten particles during floating stage
if (is_collected=3)
    {
        if particle_frame_1&gt;0  = 1 draw_sprite(lilac_sparkle_sprite,particle_frame_1,particle_x_1,particle_y_1)
        if particle_frame_2&gt;0  = 1 draw_sprite(lilac_sparkle_sprite,particle_frame_2,particle_x_2,particle_y_2)
        if particle_frame_3&gt;0  = 1 draw_sprite(lilac_sparkle_sprite,particle_frame_3,particle_x_3,particle_y_3)
        if particle_frame_4&gt;0  = 1 draw_sprite(lilac_sparkle_sprite,particle_frame_4,particle_x_4,particle_y_4)
        if particle_frame_5&gt;0  = 1 draw_sprite(lilac_sparkle_sprite,particle_frame_5,particle_x_5,particle_y_5)
        //Only draw more particles if our performance profile is set to "normal"
        if obj_game_logic.performance_profile = 1
            {
                if particle_frame_6&gt;0  = 1 draw_sprite(lilac_sparkle_sprite,particle_frame_6,particle_x_6,particle_y_6)
                if particle_frame_7&gt;0  = 1 draw_sprite(lilac_sparkle_sprite,particle_frame_7,particle_x_7,particle_y_7)
                if particle_frame_8&gt;0  = 1 draw_sprite(lilac_sparkle_sprite,particle_frame_8,particle_x_8,particle_y_8)
                if particle_frame_9&gt;0  = 1 draw_sprite(lilac_sparkle_sprite,particle_frame_9,particle_x_9,particle_y_9)
                if particle_frame_10&gt;0 = 1 draw_sprite(lilac_sparkle_sprite,particle_frame_10,particle_x_10,particle_y_10)
            }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
