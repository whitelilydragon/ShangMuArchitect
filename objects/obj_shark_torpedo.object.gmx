<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_shark_torpedo_unloaded</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy_explode</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics and Animation Variables
event_inherited()
frame = 0                           //Animation Frame
angle = 0                           //Angle of Rotation
scr_enemy_hp(14)
flash_palette = spr_shark_torpedo_palette
timer = 0
turn  = 0                           //Sprite Turning
offset = 0                          //Sprite Offset Y
offset_dir = 0.24                   //Sprite Offset Direction
xdir_previous = 0                   //Previous Facing Direction
tile_scan_timer = 0
dropped_goodies = obj_petal
//Bullet
bullet_x = 0
bullet_y = 0
bullet_timer = 0
bullet_frame = 0
bullet_speed = 0
bullet_active = 0
bullet_slide = 0
bullet_slide_timer = 0
bullet_cooldown = 0
bullet_scan_timer = 0
//Editor Mode Variables
start_x = x
start_y = y
width_x = sprite_width/2
height_y = sprite_height/2
death_frame_start = 5
death_frame_end = 5
death_particles = spr_shark_torpedo_death_particles

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Logic and Animations
event_inherited()
if o.pause = 0 and freeze = 0
    {

        //Check If Our Direction Has Changed, And Turn Around, Before Copying What Our Current Direction Is
        if xdir_previous!=xdir turn = 1;
        //Copy Current Direction
        xdir_previous = xdir
        
        //Animation Loops
        if state = 0
            {
                var water_ID = collision_point(x,y,obj_smart_pools,false,true);
                if y &gt;= o.water_height+16 or instance_exists(water_ID)
                    {
                        //Iterate Animations
                        if being = 0 {if frame &gt; 0.35 frame-= 0.25;}
                        if being = 1 {if frame &lt; 5.75 frame+= 0.25;}
                        gravity_speed = 0;
                        gravity_accel = 0;
                        timer += 1;
                        if timer &gt; 148
                            {
                                timer = 0
                                if o.py &lt; y being = 1;
                                if o.py &gt;= y being = 0;
                            }
                        //Enemy Movement
                        var var_speed = 2;
                        if item = spr_mod_chip_speed var_speed = 4;
                        if scale = 1 x += var_speed*xdir;
                    }
                //Sideways Collisions
                if xdir = 1
                    {
                        if tile_layer_find(surface_flats,x+36,y) xdir=-1;
                    }
                else
                    {
                        if tile_layer_find(surface_flats,x-36,y) xdir=1;
                    }
                //Directional Switching Tiles
                tile_scan_timer += 1
                if tile_scan_timer &gt;= 5
                    {
                        var tile_flag = tile_layer_find(surface_flags,x,y);
                        var turn_on_tile = 0;
                        if tile_exists(tile_flag)
                            {
                                var tile_flag_bg = tile_get_background(tile_flag);
                                if tile_flag_bg = tile_layer_changer
                                    {
                                        if xdir = 1  and turn_on_tile = 0 {xdir = -1; x -= 4; turn_on_tile = 1;}
                                        if xdir = -1 and turn_on_tile = 0 {xdir =  1; x += 4; turn_on_tile = 1;}
                                    }
                            }
                        tile_scan_timer = 0
                    }
                if y &lt; o.water_height+16 and !instance_exists(water_ID)
                    {
                        if gravity_slope = 1 or ground = 1
                            {
                                frame = 5;
                                death = 3;
                            }
                        if gravity_speed &lt; 0
                            gravity_speed = 3;
                    }
                //Bullet Checks
                if (bullet_active = 0 and bullet_cooldown = 0) and (o.px &gt; x-16 and o.px &lt; x+16 and o.user_cursor_mode = 0)
                and (frame &lt;= 0.35 or frame &gt;= 5.75)
                    {
                        bullet_x = x-9
                        bullet_y = y
                        if item = spr_mod_chip_extra_large
                            bullet_x = x-18;
                        bullet_timer = 0
                        bullet_frame = 0
                        if being = 0 bullet_speed = 2;
                        if being = 1
                            {
                                bullet_speed = -2;
                                bullet_y = y-18
                                if item = spr_mod_chip_extra_large
                                    bullet_y = y-36;
                            }
                        bullet_slide = 2*xdir
                        bullet_slide_timer = 12
                        bullet_active = 1
                    }
                if bullet_cooldown &gt; 0 bullet_cooldown -= 1;
            }
       //Bullet Projectile
        if bullet_active = 1
            {
                if bullet_timer = 0 bullet_y += bullet_speed;
                bullet_frame += 0.5
                if bullet_frame &gt; 1.5 bullet_frame = 0;
                if bullet_slide_timer &gt; 0
                    {
                        bullet_slide_timer -= 1
                        bullet_x += bullet_slide
                    }

                //Check for Tiles on Layer 0. (Flat Surface Collisions)
                var enemy_surface_id = -1;
                //Slope Collision Sensor
                var enemy_ramp_id    = -1;
                //Check For Edges Of Smart Pools
                var water_ID = noone;

                bullet_scan_timer += 1
                if bullet_scan_timer &gt;= 5
                    {
                        //Check for Tiles on Layer 0. (Flat Surface Collisions)
                        enemy_surface_id        = tile_layer_find(surface_flats,bullet_x,bullet_y)
                        //Slope Collision Sensor
                        enemy_ramp_id           = tile_layer_find(surface_slopes,bullet_x,bullet_y)
                        //Check For Edges Of Smart Pools
                        water_ID = collision_point(bullet_x,bullet_y,obj_smart_pools,false,true);
                        //If we are colliding with a slope tile, check its surface based on X position and explode
                        if tile_exists(enemy_ramp_id)
                            {    
                                //Collect Background ID of the Tile
                                var enemy_ramp_id_debug=o.enemy_slopes[tile_get_background(enemy_ramp_id)];
                
                                //Get Coordinates Relative to the Tile's Origins
                                var enemy_ramp_pos_x=abs(tile_get_x(enemy_ramp_id)-bullet_x)   //Get X
                                var enemy_ramp_pos_y=abs(tile_get_y(enemy_ramp_id)-bullet_y)   //Get Y
                
                                //If tile was not flagged as "ignore", read its collision data
                                if enemy_ramp_id_debug != -1
                                    {
                                        //Check If Y is Greater Than Slope's Current Height
                                        if enemy_ramp_pos_y &gt;= o.orig_clip[enemy_ramp_id_debug,enemy_ramp_pos_x]
                                        and bullet_timer = 0
                                            {
                                                bullet_timer = 1
                                                enemy_explosion_x = bullet_x+9
                                                enemy_explosion_y = bullet_y+9
                                                enemy_explosion_frame = 0
                                                if play_sound = 1 audio_play_sound(snd_enemy_defeated,50,false);
                                            }
                                    }
                            }
                        bullet_scan_timer = 0
                    }

                //---------Collisions---------//
                //----------------------------//
        
                //If we have collided with any flat surfaces, explode
                if (bullet_timer = 0) and (tile_exists(enemy_surface_id)
                //If we have collided with the boundaries of the room, explode
                or bullet_x &lt; 0 or x &gt; room_width
                or bullet_y &gt; room_height
                or point_distance(bullet_x+9,bullet_y+9,o.universal_player_x,o.universal_player_y) &gt; 256)
                or (!instance_exists(water_ID) and bullet_y &lt; o.water_height+16 and bullet_timer = 0)
                    {
                        bullet_timer = 1
                        enemy_explosion_x = bullet_x+9
                        enemy_explosion_y = bullet_y+9
                        enemy_explosion_frame = 0
                        if play_sound = 1 audio_play_sound(snd_enemy_defeated,50,false);
                    }
                if (bullet_timer = 0
                and o.hurt[0] = 0 and o.hurt[1] = 0
                and o.shield_invuln = 32
                and point_distance(bullet_x+9,bullet_y+9,obj_game_logic.universal_player_x,obj_game_logic.universal_player_y) &lt; 32)
                    {
                        bullet_timer = 1
                        enemy_explosion_x = bullet_x+9
                        enemy_explosion_y = bullet_y+9
                        enemy_explosion_frame = 0
                        //Deal one life petal of damage
                        if not (o.shield_active = 1 and o.shield=spr_shield_earth)
                            {
                                scr_enemy_deal_damage(0.4,1,2)
                                if play_sound = 1 audio_play_sound(snd_enemy_defeated,50,false);
                            }
                        else
                            audio_play_sound(snd_enemy_dead,50,false);
                        
                    }
                if (obj_game_logic.milla_special_attack &gt; 0 and obj_game_logic.milla_special_attack &lt;= 2 and bullet_timer = 0)
                    {
                        if point_distance(bullet_x,bullet_y,obj_game_logic.milla_special_length_x2,obj_game_logic.milla_special_length_y2) &lt; 32*obj_game_logic.milla_special_attack
                            {
                                bullet_timer = 1
                                enemy_explosion_x = bullet_x+9
                                enemy_explosion_y = bullet_y+9
                                enemy_explosion_frame = 0
                                if play_sound = 1 audio_play_sound(snd_enemy_projectile,50,false);
                            }
                    }
                if obj_game_logic.user_enemy_level &lt; 2
                    {
                        if room != rm_editor
                            {
                                var crate_ID = collision_point(bullet_x,bullet_y,obj_destructible,false,true);
                                if instance_exists(crate_ID)
                                    {
                                        bullet_timer = 1
                                        crate_ID.attacked = 1
                                        enemy_explosion_x = bullet_x+9
                                        enemy_explosion_y = bullet_y+9
                                        enemy_explosion_frame = 0
                                    }
                            }
                        //Attack other enemies within range of the bullet
                        if bullet_scan_timer &gt; 3
                            {
                                instance_ID = collision_point(bullet_x,bullet_y,obj_enemy_parent,false,true);
                                if instance_exists(instance_ID)
                                    {
                                        if instance_ID.attacked = 0 and instance_ID.alpha = 0
                                            {
                                                bullet_timer = 1
                                                instance_ID.attacked = 1
                                                instance_ID.attacked_damage = 2
                                                enemy_explosion_x = bullet_x+9
                                                enemy_explosion_y = bullet_y+9
                                                enemy_explosion_frame = 0
                                            }
                                    }
                            }
                    }
                //Bullet Explosion
                if bullet_timer = 1
                    {
                        enemy_explosion_frame += 1
                        if enemy_explosion_frame &gt; 13.8
                            {
                                bullet_x = 0
                                bullet_y = 0
                                bullet_timer = 0
                                bullet_frame = 0
                                bullet_speed = 0
                                bullet_active = 0
                                bullet_cooldown = 120
                                enemy_explosion_frame = 0
                            }
                    }
            }
    } //End of pause check
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Sprite
if death = 0
    {
        if frame &gt;= 5 draw_sprite_ext(sprite_index,6,x,y,xdir*(scale+enemy_growth),scale+enemy_growth,0,c_white,1);
        if bullet_active = 1 and bullet_timer = 0
            draw_sprite_ext(shark_torpedo_gem,bullet_frame,bullet_x,bullet_y,scale+enemy_growth,scale+enemy_growth,0,c_white,1);
        if bullet_active = 0
            draw_sprite_ext(spr_shark_torpedo_loaded,frame,x,y,xdir*(scale+enemy_growth),scale+enemy_growth,0,c_white,1);
    }
event_inherited()
//Draw Bullet Explosion Particle
if enemy_explosion_frame &gt; 0
    draw_sprite(spr_cube_pop_large,enemy_explosion_frame,enemy_explosion_x,enemy_explosion_y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
