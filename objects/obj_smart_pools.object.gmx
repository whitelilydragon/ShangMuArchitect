<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_smart_pool</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-7</depth>
  <persistent>0</persistent>
  <parentName>obj_delete_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>item = 0
give_item = 0
spray_frame = 0
spray_timer = 0
splash_x = x
splash_frame = 0
splash_confirm = 0
bubble_visibility = 0
bubble_offset_x = 0
bubble_offset_y = 0
bubble_frame = 0
timer = 0
active = 1
a = -1
b = -1
c = -1
d = -1
tile_b = -1
tile_c = -1
tile_d = -1
o = obj_game_logic
if (room != rm_editor)
    depth = -8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if tile_exists(tile_b) tile_delete(tile_b);
if tile_exists(tile_c) tile_delete(tile_c);
if tile_exists(tile_d) tile_delete(tile_d);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if obj_game_logic.pause = 0

{
a = collision_point(x,y-8,obj_smart_pools,false,true);
b = collision_point(x-8,y+8,obj_smart_pools,false,true);
c = collision_point(x+136,y+8,obj_smart_pools,false,true);
d = collision_point(x+64,y+136,obj_smart_pools,false,true);
e = collision_rectangle(x,y,x+128,y+128,obj_game_logic,false,true)

spray_frame += 0.25
spray_timer += 1

if spray_frame &gt; 4.8
    spray_frame = 1;

if spray_timer = 30
    {
        //Left
        if instance_exists(b)
            {
                if tile_exists(tile_b)
                    {
                        tile_delete(tile_b)
                        tile_b = -1
                    }
            }
        else
            {
                if !tile_exists(tile_b)
                        {
                            tile_b = tile_add(mu_door_1,0,0,16,128,x-8,y,surface_flats);
                            tile_set_visible(tile_b,false)
                        }
            }
        //Right
        if instance_exists(c)
            {
                if tile_exists(tile_c)
                    {
                        tile_delete(tile_c)
                        tile_c = -1
                    }
            }
        else
            {
                if !tile_exists(tile_c)
                    {
                        tile_c = tile_add(mu_door_1,0,0,16,128,x+120,y,surface_flats);
                        tile_set_visible(tile_c,false)
                    }
            }
        //Bottom
        if instance_exists(d)
            {
                if tile_exists(tile_d)
                    {
                        tile_delete(tile_d)
                        tile_d = -1
                    }
            }
        else
            {
                if !tile_exists(tile_d)
                    {
                        tile_d = tile_add(mu_door_1,0,0,128,16,x,y+120,surface_flats);
                        tile_set_visible(tile_d,false)
                    }
            }
        spray_timer = 0
    }

if active = 1
    {
        if !instance_exists(a)
            {
                if o.px &gt;= x and o.px &lt; x+128
                and o.py &gt; y and o.py &lt; y+16 and splash_confirm=0 and o.gravity_speed!=0 and o.user_cursor_mode = 0
                    {
                        splash_x = o.px
                        splash_confirm = 1
                        audio_play_sound(character_splash,50,false)
                    }
            }
        if instance_exists(e)
            {
                if bubble_visibility = 0
                    {
                        bubble_offset_x = o.universal_player_x;
                        bubble_offset_y = o.universal_player_y+32;
                        bubble_visibility = 1;
                    }
            }
        if splash_confirm = 1 and o.user_cursor_mode = 0
            {
                //Iterate animation frames
                splash_frame += 0.25
                //If we have completed the animation, reset variables
                if splash_frame&gt;8.8 {splash_frame=0; splash_confirm=0;}
                if bubble_visibility = 0
                    {
                        bubble_offset_x = o.universal_player_x;
                        bubble_offset_y = o.universal_player_y+32;
                        bubble_visibility = 1;
                    }
                //If we have not completed the animation, and the player has resurfaced already,
                //restart the animation
                if (splash_frame&gt;4) and (o.py &gt; y and o.py &lt; y+16) and o.user_cursor_mode = 0
                    {
                        splash_frame = 0
                        splash_x = o.px
                        audio_play_sound(character_splash,50,false)
                    }
            }
    }
if x != xprevious
or y != yprevious
    {
        if tile_exists(tile_b) tile_set_position(tile_b,x-8,y);
        if tile_exists(tile_c) tile_set_position(tile_c,x+120,y);
        if tile_exists(tile_d) tile_set_position(tile_d,x,y+120);
    }
if bubble_visibility &gt; 0
    {
        //Iterate bubble timer
        bubble_visibility += 1

        if bubble_visibility = 180
            {
                bubble_offset_x = o.universal_player_x;
                bubble_offset_y = o.universal_player_y;
            }
        //Raise the bubble upward
        bubble_offset_y -= 1
        //If the bubble is above the surface of the water, reset its position at the player's mouth
        var f = collision_point(bubble_offset_x,bubble_offset_y,obj_smart_pools,false,false);
        if !instance_exists(f)
            {
                bubble_offset_x = o.universal_player_x;
                bubble_offset_y = o.universal_player_y;
                //If the player is also above the water, disable visibility of the bubble
                if o.above_water = 1 bubble_visibility = 0;
            }
    }
}

timer += 1
if timer = 30
    {
        if (y &gt; o.water_height or y+128 &gt; o.water_height)
            active = 0;
        else
            active = 1;
        timer = 0
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_stretched_ext(spr_water,0,x,y,128,128,c_white,0.25)
if obj_game_logic.performance_profile = 1 draw_set_blend_mode(bm_add);
if !instance_exists(a) draw_sprite_part(spr_waterline,obj_game_logic.water_timer,0,0,128,15,x,y-2);
draw_set_blend_mode(bm_normal)
draw_background(wd_scenery_4,x,y)
if obj_game_logic.user_cursor_mode = 0
    {
        if bubble_visibility &gt; 0
            draw_sprite(spr_bubbles,bubble_frame,bubble_offset_x,bubble_offset_y);
        if splash_confirm = 1
            draw_sprite(spr_water_splash,splash_frame,splash_x,y);
    }
if room = rm_editor
    {
        if (obj_level_editor.use_debug_hud_mode = 1 and o.user_cursor_mode = 0)
        or (o.user_cursor_mode = 1)
            draw_sprite_part(sprite_index,0,0,0,32,32,x,y);
    }
else
    {
        if (o.debug_hud_mode &gt; 0)
            draw_sprite_part(sprite_index,0,0,0,32,32,x,y);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
