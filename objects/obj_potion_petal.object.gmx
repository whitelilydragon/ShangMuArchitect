<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_potion_petal</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-7</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics and Animation Variables

//Tile Surface Sensors
tile_surface_id = 0         //Floor Surface Collision Sensor
tile_surface_lf = 0         //Left Surface Collision Sensor
tile_surface_rt = 0         //Right Surface Collision Sensor
tile_item_id    = 0         //Item Tile Sensor
item_asset_id   = 0         //Item Tile Asset

//Gravity Variables
gravity_speed   = 0         //Gravity Speed
gravity_accel   = 0.2499    //Gravity Acceleration
gravity_cap     = 8         //Gravity Maximum Speed
gravity_fof     = 0         //Gravity FOF Activation
gravity_slope   = 0         //Gravity Deactivation For Slopes

//State Trigger Variables
is_collected    = 0         //Has the Player Taken the Item?
is_floating     = 1         //Were We Told to Float By Another Object?
is_sound        = 0         //Are We Playing A Sound?
is_speed        = 0         //Do We Have A Speed?
is_time         = 8         //Timer For Upwards Floating
is_collectable  = 0         //Are We Allowed To Be Attracted By Shields?
is_follow_speed = 6         //How Fast Are We Following The Player?
is_following    = 0         //Have We Gotten Close To The Player?

//Partical Variables
ispeed          = 1         //Direction of speed (Hearts Particles)
itimer          = 0         //Timer for changing directions (Hearts Particles)
y_offset        = 0         //Offset value (Gems Particle)
iterate_x       = 0         //Cycle Through X Positions in Rotation Map Data
iterate_y       = 0         //Cycle Through Y Positions in Rotation Map Data
iterate_gen     = 0         //General Iteration Timer
px              = x         //X Rotation Offset
py              = y         //Y Rotation Offset
destruction     = 0         //Are We A Self-Destructing Particle?
gem_visible     = 1         //Are We Visible?

//Sparkle Particle Variables 1
sparkle_frame_0   = 0       //Sparkle Animated Frame
sparkle_visible_0 = 0       //Sparkle Visibility
sparkle_x_0       = x       //Sparkle X Position
sparkle_y_0       = y       //Sparkle Y Position
//Sparkle Particle Variables 2
sparkle_frame_1   = 0       //Sparkle Animated Frame
sparkle_visible_1 = 0       //Sparkle Visibility
sparkle_x_1       = x       //Sparkle X Position
sparkle_y_1       = y       //Sparkle Y Position
//Sparkle Particle Variables 3 (Used Exclusively For Orb Particles)
sparkle_frame_2   = 0       //Sparkle Animated Frame
sparkle_visible_2 = 0       //Sparkle Visibility
sparkle_x_2       = x       //Sparkle X Position
sparkle_y_2       = y       //Sparkle Y Position

//Are We Allowed To Hold Items?
give_item = 0
item = 0
attacked = 0

//Animation Variables
frame = 0                   //Current Frame
anim_frame = 5              //Maximum Number of Frames
image_speed = 0.24
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics and Animations

//Pause Safety Check
if obj_game_logic.pause = 0

{

//If We Are Within Range Of The Player, Consider Ourselves Collected
if point_distance(x,y,obj_game_logic.universal_player_x,obj_game_logic.universal_player_y) &lt;= 32 and is_collectable&gt;24
and obj_game_logic.anim_current!=obj_game_logic.anim_hurt and obj_game_logic.anim_current!=obj_game_logic.anim_death
and obj_game_logic.user_cursor_mode = 0 and is_collected = 0
    {
        is_collected = 1
        is_floating = 1
        audio_stop_sound(snd_potion_use)
        audio_play_sound(snd_potion_use,50,false)
        //Add Potions To Player
        switch(object_index)
            {
                case obj_potion_petal:        {obj_game_logic.potion_petal_potion += 1; break;}
                case obj_potion_stamina:      {obj_game_logic.potion_stamina_drink += 1; break;}
                case obj_potion_feather:      {obj_game_logic.potion_feather_potion += 1; break;}
                case obj_potion_petal_core:   {obj_game_logic.potion_petal_core += 1; break;}
                case obj_potion_stamina_core: {obj_game_logic.potion_stamina_core += 1; break;}
                case obj_potion_mystery:      {obj_game_logic.potion_mystery_potion += 1; break;}
            }
        //Create Sparkle Particle
        sparkle_x_0       = x
        sparkle_y_0       = y
        sparkle_visible_0 = 1
        //Modify Rotation Offset Variables
        px = x
        py = y
        //Alter Our Sprite To Be A Particle
        sprite_index = spr_potion_particle;
    }

//Iterate is_collectable timer
is_collectable += 1

//  Flat Surface Collisions and Gravity  //
//---------------------------------------//

if is_floating = 0
    {
        //Floor Surface Collision Sensor
        tile_surface_id = tile_layer_find(surface_flats,x,y)
        
        //If we are colliding with a flat surface, stop gravity
        if tile_exists(tile_surface_id)
            {
                //Reset gravity speed
                gravity_speed=0
                //Reset horizontal speed
                is_speed=0
                is_floating = 1
            }
        
        //Apply horizontal speed if we are not interacting with flat surfaces or slopes
        if (!tile_exists(tile_surface_id) and gravity_slope=0 and is_collected=0)
            x += is_speed
        
        //  Slope Surface Collisions  //
        //----------------------------//
        
        //Slope Surface Collision Sensor
        tile_ramp_id = tile_layer_find(surface_slopes,x,y)
        
        //If we are colliding with a slope tile, clip to its surface based on X position
        if (tile_exists(tile_ramp_id) and gravity_slope = 0)
            {
                //Collect Background ID of the Tile
                tile_ramp_asset=tile_get_background(tile_ramp_id)
            
                //Get Gem Coordinates Relative to the Tile's Origins
                tile_ramp_pos[0]=abs(tile_get_x(tile_ramp_id)-x)   //Get X
                tile_ramp_pos[1]=abs(tile_get_y(tile_ramp_id)-y)   //Get Y
            
                //Check If Gem Y is Greater Than Slope's Current Height
                if tile_ramp_pos[1] &gt;= obj_game_logic.orig_clip[tile_ramp_asset,tile_ramp_pos[0]]
                    {
                        //If Gem is Colliding with Slope, Disable Gravity
                        gravity_slope=1
                        gravity_speed=0
                        is_floating = 1
                    }
            }
        
        //       Basic Gravity System       //
        //----------------------------------//
        
        //If we are not at the speed cap, apply acceleration.
        if gravity_fof=0 and gravity_slope=0 and !tile_exists(tile_surface_id)
            {
                //Apply Gravity Speed to Y Coordinates
                y+=gravity_speed
        
                gravity_speed+=gravity_accel
            }
        //Leap slightly upwards upon spawning.
        if is_time!=0 {gravity_speed=-2 is_time=0}

        if y &gt; obj_game_logic.water_height and depth = -7
            depth = -5;
    }

//      Static Particle System      //
//----------------------------------//

//If we are a gem, produce a particle effect before disappearing
if (is_collected &gt;= 1)
    {
        //Iterate Through Data Points in the Rotation Map
        iterate_x+=3    //X Posit Iteration
        iterate_y+=3    //Y Posit Iteration
        iterate_gen+=3  //General Iteration

        //Iterate Sparkle Particle Sprite's Animations
        if sparkle_visible_0 = 1 sparkle_frame_0 += 0.32;
        if sparkle_visible_1 = 1 sparkle_frame_1 += 0.32;
        //Toggle Visibility of First Particle Off After Animations Completes
        if sparkle_frame_0 &gt;= 7 sparkle_visible_0 = 0;
        //Refer To Self Destruction Code Below For Second Particle's Visibility Toggle

        //Once We've Completed A Rotation, Restart Rotation
        if iterate_x&gt;=51
            {
                iterate_x=0
                iterate_y=0
            }
        //Reference Rotation Map Data
        x = px + obj_game_logic.orig_rotate[spr_gem_particle+2000,iterate_x]
        y = py - 19 + obj_game_logic.orig_rotate[spr_gem_particle+3000,iterate_y]
        //Once We've Rotated For Long Enough, Create Second Sparkle Particle
        if iterate_gen&gt;51+random_range(14,28) and sparkle_visible_1 = 0
            {
                //Create Sparkle Particle
                sparkle_x_1       = x
                sparkle_y_1       = y
                sparkle_visible_1 = 1
                //Disable Visibility Of Main Sprite
                gem_visible = 0
            }
        //Destroy Self
        if sparkle_frame_1 &gt;= 7.9
            {
                sparkle_visible_1 = 0
                instance_destroy();
            }    
    } //End of Collected Safety Check
    
} //End of Pause Safety Check
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Main Sprite
if gem_visible = 1 draw_sprite(sprite_index,image_index,x,y);

//Sparkle Particle Drawing 1
if sparkle_visible_0 = 1 draw_sprite(spr_sparkle,sparkle_frame_0,sparkle_x_0,sparkle_y_0);
//Sparkle Particle Drawing 2
if sparkle_visible_1 = 1 draw_sprite(spr_sparkle,sparkle_frame_1,sparkle_x_1,sparkle_y_1);
//Sparkle Particle Drawing 3
if sparkle_visible_2 = 1 draw_sprite(spr_sparkle,sparkle_frame_2,sparkle_x_2,sparkle_y_2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
