<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_pinwheel_pulley</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>obj_delete_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create New Tiles

//Platform Tiles
tile_id_1 = tile_add(spr_hangbar_ignore,0,0,background_get_width(spr_hangbar_ignore),32,x,y,surface_slopes)
tile_id_2 = tile_add(spr_hangbar_ignore,0,0,background_get_width(spr_hangbar_ignore),32,x,y,surface_slopes)
tile_id_3 = tile_add(spr_hangbar_ignore,0,0,background_get_width(spr_hangbar_ignore),32,x,y,surface_slopes)
tile_id_4 = tile_add(spr_hangbar_ignore,0,0,background_get_width(spr_hangbar_ignore),32,x,y,surface_slopes)

tile_set_visible(tile_id_1,false)
tile_set_visible(tile_id_2,false)
tile_set_visible(tile_id_3,false)
tile_set_visible(tile_id_4,false)

//Platform Tiles' IDs
//Make them all the same as the first platform's ID, so they can steal the tile collision data
//from it, instead of wasting RAM on multiple copies of the same tile collision data &gt;:^P
tile_index_1 = spr_hangbar_ignore
tile_index_2 = spr_hangbar_ignore
tile_index_3 = spr_hangbar_ignore
tile_index_4 = spr_hangbar_ignore

tile_index = spr_hangbar_ignore
tile_link = spr_hangbar_ignore
tile_base = spr_hangbar_ignore
tile_validate_timer = 0
tile_validate_time = 8

//Set Platforms Positions
px_1 = x
py_1 = y
px_2 = x
py_2 = y
px_3 = x
py_3 = y
px_4 = x
py_4 = y

//Set Angle And FOF Offsets
angle=0
fof_fofset=0
wheel_angle = 0
timer = 0
state = 0
jump_lock = 0
user_attached = 0

//Relative FOF Tile Positions
tile_ramp_pos[0]=0
tile_ramp_pos[1]=0

//Are We Allowed To Hold Items?
give_item = 0
item = 0
o = obj_game_logic
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delete Tiles If We Were Destroyed In Editor Mode

//Platform Tiles
tile_delete(tile_id_1)
tile_delete(tile_id_2)
tile_delete(tile_id_3)
tile_delete(tile_id_4)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Pause Safety Check
if o.pause = 0
    {
        //Iterate Rotation Angles
        angle -= 1
        wheel_angle -= 1
        //Reset Rotation Angles
        if angle &lt; -359 angle = 0;

        //Rotate Tiles
        px_1 = x+lengthdir_x(88,angle);
        py_1 = y+lengthdir_y(88,angle);
        px_2 = x+lengthdir_x(88,angle+90);
        py_2 = y+lengthdir_y(88,angle+90);
        px_3 = x+lengthdir_x(88,angle+180);
        py_3 = y+lengthdir_y(88,angle+180);
        px_4 = x+lengthdir_x(88,angle+270);
        py_4 = y+lengthdir_y(88,angle+270);
        //Set Tile Offsets
        px_1 -= 24
        px_2 -= 24
        px_3 -= 24
        px_4 -= 24
        py_1 -= 16
        py_2 -= 16
        py_3 -= 16
        py_4 -= 16

        //Update Tile Positions
        tile_set_position(tile_id_1,px_1,py_1)
        tile_set_position(tile_id_2,px_2,py_2)
        tile_set_position(tile_id_3,px_3,py_3)
        tile_set_position(tile_id_4,px_4,py_4)

        if point_in_rectangle(obj_game_logic.universal_player_x,obj_game_logic.universal_player_y,px_1,py_1,px_1+tile_get_width(tile_id_1),py_1+tile_get_height(tile_id_1)+32)
        or point_in_rectangle(obj_game_logic.universal_player_x,obj_game_logic.universal_player_y,px_2,py_2,px_2+tile_get_width(tile_id_2),py_2+tile_get_height(tile_id_2)+32)
        or point_in_rectangle(obj_game_logic.universal_player_x,obj_game_logic.universal_player_y,px_3,py_3,px_3+tile_get_width(tile_id_3),py_3+tile_get_height(tile_id_3)+32)
        or point_in_rectangle(obj_game_logic.universal_player_x,obj_game_logic.universal_player_y,px_4,py_4,px_4+tile_get_width(tile_id_4),py_4+tile_get_height(tile_id_4)+32)
            {
                //Attach
                if (user_attached = 0 and jump_lock = 0 and o.ground = 0 and o.gravity_speed &gt; 0)
                    {
                        o.ladder_moving = 1
                        jump_lock = 1
                        user_attached = 1
                        audio_play_sound(snd_hangbar,50,false)
                    }
                //Exit
                if (o.gravity_ladder = 0 and o.joy_input[0,3] = 0 and o.joy_input[0,1] = 1)
                    {
                        o.ladder_moving = 0
                        jump_lock = 0
                        user_attached = 0
                        audio_stop_sound(snd_hangbar)
                    }
            }
        else
            user_attached = 0;
        //Exit Condition   
        if jump_lock &gt; 0
            {
                if o.joy_input[1,2] = 1
                    jump_lock = 2;
                if o.joy_input[1,2] = 0
                    jump_lock = 0;
            }
    } //End of Pause Safety Check
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Carasol Hangbars

//Draw Decorative Backplate
draw_sprite_ext(sprite_index,0,x,y,1,1,wheel_angle,c_white,1)

//Draw Carasol Platforms
draw_background_part(spr_hangbar_4,0,6,48,32,px_1,py_1+6)
draw_background_part(spr_hangbar_4,0,6,48,32,px_2,py_2+6)
draw_background_part(spr_hangbar_4,0,6,48,32,px_3,py_3+6)
draw_background_part(spr_hangbar_4,0,6,48,32,px_4,py_4+6)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
