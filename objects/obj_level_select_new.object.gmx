<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_logic_processor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_activate_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
o = obj_game_logic
use_menu_scroll = 0
use_menu_x = 100
use_menu_y = 48
use_menu_allowed = 30
use_menu_lock = 0
use_hide_sub_menu = 1
use_lilac_anim = 0
use_carol_anim = 0
use_milla_anim = 0
use_spade_anim = 0
use_boop = 0
use_click_yes = 0
use_click_timer = 0
use_click_check = 0
use_click_confirm = 0
use_lightened_anim = 0
use_character_shake = 0
use_character_shake_left = 0
use_character_shake_right = 0
use_character_sound_timer = 0
title_item_shake[0] = 0
title_item_shake[1] = 0
title_item_shake[2] = 0
title_item_shake[3] = 0
title_item_shake[4] = 0
title_item_shake[5] = 0
title_item_shake_y[0] = 0
title_item_shake_y[1] = 0
title_item_shake_y[2] = 0
title_item_shake_y[3] = 0
title_item_shake_y[4] = 0
title_item_shake_y[5] = 0
title_item_shake_cur = 0

music_index = ost_shang_mu_white_alestance
music_play_timer = 30
o.joy_input[2,6] = 30
title_room_timer = 0

//Camera Shake Variables
view_shake = 0
view_shake_iterations = 0
view_shake_mod = 0

//Maps Directory Storage For File Listings
use_maps_file       = 0
use_maps_page       = 0
use_maps_pages      = 0
use_maps_select     = "..."
use_maps_files[0,0] = "..."
use_maps_files[0,1] = "..."
use_maps_files[0,2] = "..."
use_maps_files[0,3] = "..."
use_maps_files[0,4] = "..."

//Currently Displayed Maps For Navigating File Listings
use_maps_map[0] = 0
use_maps_map[1] = 0
use_maps_map[2] = 0
use_maps_map[3] = 0
use_maps_map[4] = 0

//Currently Displayed Map Metadata
use_display_name = "..."
use_display_author = "..."
use_display_description = "..."
use_display_character = "All"
use_display_objective = 0

use_display_sidebar_page = ui_level_select_sidebar
use_display_sidebar_page_iterate = 0

//Characters On The Sidelines
use_character_left = spr_npc_chiasa_happy
use_character_right = spr_carol_old
use_character_left_frame = 0
use_character_right_frame = 0
use_character_right_tail = spr_carols_tail_idle
use_character_right_tail_frame = 0

//Change Characters
if o.skin = spr_lilac {scr_spawn_lilac(); o.ui_selected_name = "Lilac";}
if o.skin = spr_carol and o.alt_skin = 0 {scr_spawn_carol(); o.ui_selected_name = "Carol";}
if o.skin = spr_milla {scr_spawn_milla(); o.ui_selected_name = "Milla";}
if o.skin = spr_spade {scr_spawn_spade(); o.ui_selected_name = "Spade";}
if o.skin = spr_carol and o.alt_skin = 1 {scr_spawn_carrie(); o.ui_selected_name = "Carrie";}
if o.skin = spr_carol and o.alt_skin = 2 {scr_spawn_chiasa(); o.ui_selected_name = "Chiasa";}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load Stage File Lists

nsfs_init()

//Create The Maps Directory If It Doesn't Already Exist
if nsfs_is_available = true
    {
        if !directory_exists_ns(program_directory + "\Maps") directory_create_ns(program_directory + "\Maps");
    }
else
    scr_set_message("Invalid Directory Path!")
//Clear Map Listings Array So Junk Entries Don't Bleed Into Refreshed Listings
use_maps_files[0,0] = "..."
use_maps_files[0,1] = "..."
use_maps_files[0,2] = "..."
use_maps_files[0,3] = "..."
use_maps_files[0,4] = "..."
use_maps_map[0] = "..."
use_maps_map[1] = "..."
use_maps_map[2] = "..."
use_maps_map[3] = "..."
use_maps_map[4] = "..."
use_maps_iterate = 0
use_maps_page_builder = 0
use_maps_pages = 0
use_maps_timer = 0
use_maps_file = ""
if o.user_changed_files = 1 and nsfs_is_available = true
    {
        //Clear Maps List Array
        o.use_maps_files = 0
        //Call It As An Array Again
        o.use_maps_files[0,0] = "..."
        o.use_maps_files[0,1] = "..."
        o.use_maps_files[0,2] = "..."
        o.use_maps_files[0,3] = "..."
        o.use_maps_files[0,4] = "..."
        //Create A List Of Every Map File In The Folder
        use_maps_file = file_find_first_ns(program_directory + "\Maps\*.map")
        while(use_maps_file != "")
            {
                //Create a new page after writing five entries into the current page
                if use_maps_page_builder = 5
                    {
                        use_maps_iterate = 0
                        use_maps_pages += 1
                        use_maps_page_builder = 0
                    }
                //Store current map file name
                o.use_maps_files[use_maps_pages,use_maps_iterate] = use_maps_file;
                //Find the next file in the list
                use_maps_file = file_find_next_ns()
                if file_find_attributes_ns() &amp; fa_directory
                    scr_set_message("File search failed! Folders not supported yet!")
                //Iterate loop counters
                use_maps_iterate += 1
                use_maps_page_builder += 1
                //Exit the loop if we can't find another map file, or have built up enough pages
                if !file_exists_ns(program_directory + "\Maps\" + use_maps_file) or use_maps_pages &gt;= 40 break;
            }
        file_find_close_ns();
        //Create Blanks At The End Of The Last Page, In Case Not All Entries Of The Page Are Filled
        o.use_maps_files[use_maps_pages,use_maps_iterate]   = "..."
        o.use_maps_files[use_maps_pages,use_maps_iterate+1] = "..."
        o.use_maps_files[use_maps_pages,use_maps_iterate+2] = "..."
        o.use_maps_files[use_maps_pages,use_maps_iterate+3] = "..."
        o.use_maps_files[use_maps_pages,use_maps_iterate+4] = "..."
        o.use_maps_pages = use_maps_pages
        o.user_changed_files = 0
    }

//Update Currently Listed Maps
use_maps_map[0] = o.use_maps_files[0,0]
use_maps_map[1] = o.use_maps_files[0,1]
use_maps_map[2] = o.use_maps_files[0,2]
use_maps_map[3] = o.use_maps_files[0,3]
use_maps_map[4] = o.use_maps_files[0,4]
use_maps_page = 0
use_maps_pages = o.use_maps_pages

//Read The First Map's Name, Author, And Description
ini_open_ns(program_directory + "\Maps\" + o.use_maps_files[0,0])
use_display_name = ini_read_string("lvl_hd","lvl_name","...")
use_display_author = ini_read_string("lvl_hd","lvl_author","...")
use_display_description = ini_read_string("lvl_hd","lvl_description","...")
use_display_character = ini_read_string("lvl_hd","lvl_char","All")
use_display_objective = real(ini_read_string("lvl_hd","lvl_win_condition",0))
use_display_personal_best_time = ini_read_string("lvl_hd","lvl_best_time","600000")
//use_display_name = "..."
//use_display_author = "..."
//use_display_description = "..."
//use_display_character = "All"
//use_display_personal_best_time = "600000"
use_display_personal_best_minutes = string_copy(use_display_personal_best_time,1,2)
use_display_personal_best_seconds = string_copy(use_display_personal_best_time,3,4)
use_display_personal_best_milli   = string_copy(use_display_personal_best_time,5,6)
use_display_personal_best_seconds = string_copy(use_display_personal_best_seconds,1,2)
ini_close_ns()
//Scrollbar Position
use_scrollbar_position = 60
use_scrollbar_speed = 46/use_maps_pages
//Set Default Selected Map
use_maps_select = o.use_maps_files[0,0]
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shang Mu Academy Level Select Menu

//=========================================================//
//------------------Shang Mu Academy Menu------------------//
//=========================================================//

//Reset Breath Meter
o.breath = o.breath_max
o.user_move_list_display = 1

//Play Music
if not audio_is_playing(o.music_index)
    {
        if music_play_timer &gt; 0 music_play_timer-=1;
        if music_play_timer = 0
            {
                var song_current = audio_play_sound(ost_shang_mu_white_alestance,50,true);
                music_play_timer=-1
                //Adjust Current Song's Volume
                if o.music_mute = 0 scr_adjust_music_silent(o.music_volume/100,1000);
                else scr_adjust_music_silent(0,1000);
            }
    }

//Animate Cursor
o.title_animation+=0.1 if o.title_animation&gt;6.8 o.title_animation=0;

//Animate Transition
if o.transition_alpha &gt; 0 o.transition_alpha-=0.0288;

if use_menu_allowed &gt; 0 use_menu_allowed -= 1;

//Go to a different room after the transition
if title_room_timer &gt; 0
    {
        title_room_timer += 1
        //After the iteration timer ends, change rooms
        if title_room_timer = 21
            {
                room_goto(o.title_room_goto)
                o.transition_active = 0
                o.transition_position = 0
                o.title_room_timer = 0
                o.transition_persistence = 12
                title_room_timer = 0
            }
    }

if use_menu_allowed = 0
    {
        //Show/hide sidebar
        if keyboard_check_pressed(vk_f1) {use_hide_sub_menu += 1; audio_play_sound(pause_select,50,false);}
        if use_hide_sub_menu &gt; 1 use_hide_sub_menu = 0;

        var yes = 1;
        if use_display_sidebar_page = ui_level_select_sidebar_palettes
            yes = 0;

        //Only allow inputs after input lock is disabled
        if o.joy_input[2,6] = 0 and o.transition_active = 0
            {
                //D-Pad Movement
                if o.joy_input[0,0] = 1 {o.use_right += 1 if o.use_right = 1 {if yes = 1 audio_play_sound(pause_select,50,false);}} else o.use_right = 0; //Right
                if o.joy_input[0,1] = 1 {o.use_down  += 1 if o.use_down  = 1 {if yes = 1 {use_menu_scroll+=1 audio_play_sound(pause_select,50,false)}}} else o.use_down = 0;  //Down
                if o.joy_input[0,2] = 1 {o.use_left  += 1 if o.use_left  = 1 {if yes = 1 audio_play_sound(pause_select,50,false);}} else o.use_left = 0;  //Left
                if o.joy_input[0,3] = 1 {o.use_up    += 1 if o.use_up    = 1 {if yes = 1 {use_menu_scroll-=1 audio_play_sound(pause_select,50,false)}}} else o.use_up = 0;    //Up
                //Player Actions (Accept/Cancel)
                if o.joy_input[1,2] = 1 o.use_a += 1; else o.use_a = 0;         //A Button (Confirm)
                if o.joy_input[1,0] = 1 o.use_b += 1; else o.use_b = 0;         //B Button (Cancel)
                if o.joy_input[2,0] = 1 o.use_start += 1; else o.use_start = 0; //Start Button (Confirm)
                if o.joy_input[1,4] = 1 o.use_d += 1 else o.use_d = 0;
                //C Button (Change Character)
                if o.joy_input[1,3] = 1
                    {
                        o.use_c += 1
                        //Change character based on skin
                        if (o.use_c = 1 and use_display_character = "All" and yes = 1)
                            {
                                //Iterate current character selection position
                                o.ui_selected_pos += 1
                                //Reset character selection position if it goes beyond the boundaries
                                if o.ui_selected_pos &gt; 3 o.ui_selected_pos = 0;
                                //Set our selected characters parameters and stats
                                switch(o.ui_selected_pos)
                                    {
                                        //Switch To Lilac
                                        case 0: {scr_set_lilac(); o.ui_selected_name = "Lilac"; break;}
                                        //Switch To Carol
                                        case 1: {scr_set_carol(); o.ui_selected_name = "Carol"; break;}
                                        //Switch To Milla
                                        case 2: {scr_set_milla(); o.ui_selected_name = "Milla"; break;}
                                        //Switch To Milla
                                        case 3: {scr_set_spade(); o.ui_selected_name = "Spade"; break;}
                                    }
                                o.alt_skin = 0;
                                if use_hide_sub_menu = 0 audio_play_sound(pause_select,50,false);
                                if use_hide_sub_menu = 1 audio_play_sound(pause_jingle,50,false);
                            }
                    }
                else
                    o.use_c = 0;
                //Change Characters Via Mouse
                if o.joy_mouse_button_switch = 1 and use_display_character = "All"
                and device_mouse_x_to_gui(0) &gt; 362 and device_mouse_x_to_gui(0) &lt; 420
                    {
                        if (mouse_check_button_pressed(mb_left) or mouse_check_button_pressed(mb_right))
                            {
                                //Lilac
                                if device_mouse_y_to_gui(0) &gt; 38 and device_mouse_y_to_gui(0) &lt; 59
                                    {
                                        scr_set_lilac() 
                                        o.ui_selected_name = "Lilac"
                                        o.ui_selected_pos = 0
                                        o.alt_skin = 0
                                        audio_play_sound(pause_select,50,false)
                                    }
                                //Carol
                                if device_mouse_y_to_gui(0) &gt; 61 and device_mouse_y_to_gui(0) &lt; 82
                                    {
                                        scr_set_carol() 
                                        o.ui_selected_name = "Carol"
                                        o.ui_selected_pos = 1
                                        o.alt_skin = 0
                                        audio_play_sound(pause_select,50,false)
                                    }
                                //Milla
                                if device_mouse_y_to_gui(0) &gt; 84 and device_mouse_y_to_gui(0) &lt; 105
                                    {
                                        scr_set_milla() 
                                        o.ui_selected_name = "Milla"
                                        o.ui_selected_pos = 2
                                        o.alt_skin = 0
                                        audio_play_sound(pause_select,50,false)
                                    }
                                //Spade
                                if device_mouse_y_to_gui(0) &gt; 108 and device_mouse_y_to_gui(0) &lt; 128
                                    {
                                        scr_set_spade() 
                                        o.ui_selected_name = "Spade"
                                        o.ui_selected_pos = 3
                                        o.alt_skin = 0
                                        audio_play_sound(pause_select,50,false)
                                    }
                            }
                    }
                if o.use_d = 1 or (o.joy_mouse_button_switch = 1 and device_mouse_x_to_gui(0) &gt; 355 and mouse_wheel_up())
                    {
                        if (o.alt_skin = 0) or (o.skin = spr_carol and o.alt_skin &gt; 0)
                        or (o.skin = spr_lilac and o.alt_skin = 2)
                            {
                                o.current_pal += 1
                                o.current_ui_pal += 1
                                if o.current_pal &gt;= sprite_get_width(o.my_pal_sprite)
                                    {
                                        o.current_pal = 0;
                                        o.current_ui_pal = 0;
                                    }
                                audio_play_sound(pause_select,50,false)
                            }
                        else
                            {
                                scr_set_message("Costume do not support palettes!")
                            }
                    }
                if (o.joy_mouse_button_switch = 1 and device_mouse_x_to_gui(0) &gt; 355 and mouse_wheel_down())
                    {
                        if (o.alt_skin = 0) or (o.skin = spr_carol and o.alt_skin &gt; 0)
                        or (o.skin = spr_lilac and o.alt_skin = 2)
                            {
                                o.current_pal -= 1
                                o.current_ui_pal -= 1
                                if o.current_pal &lt; 0
                                    {
                                        o.current_pal = sprite_get_width(o.my_pal_sprite)-1;
                                        o.current_ui_pal = sprite_get_width(o.my_pal_sprite)-1;
                                    }
                                audio_play_sound(pause_select,50,false)
                            }
                        else
                            {
                                scr_set_message("Costume do not support palettes!")
                            }
                    }
                if o.use_d &gt;= 16
                    {
                        if (o.alt_skin = 0) or (o.skin = spr_carol and o.alt_skin &gt; 0)
                        or (o.skin = spr_lilac and o.alt_skin = 2)
                            {
                                if use_display_sidebar_page = ui_level_select_sidebar
                                    {
                                        use_display_sidebar_page = ui_level_select_sidebar_palettes
                                        audio_play_sound(pause_select,50,false)
                                    }
                            }
                        else
                            {
                                if not audio_is_playing(character_parry)
                                    scr_set_message("Costume do not support palettes!");
                            }
                            
                    }
                if o.use_d = 0 and use_display_sidebar_page = ui_level_select_sidebar_palettes
                    use_display_sidebar_page = ui_level_select_sidebar;

                //Manage Favorite Palettes
                if use_display_sidebar_page = ui_level_select_sidebar_palettes
                    {
                        if o.use_up = 1
                            {
                                o.current_pal = o.use_favorite_palette[o.skin,0]
                                o.current_ui_pal = o.use_favorite_palette[o.skin,0]
                                audio_play_sound(pause_select,50,false)
                            }
                        if o.use_down = 1
                            {
                                o.current_pal = o.use_favorite_palette[o.skin,1]
                                o.current_ui_pal = o.use_favorite_palette[o.skin,1]
                                audio_play_sound(pause_select,50,false)
                            }
                        if o.use_right = 1
                            {
                                o.use_favorite_palette[o.skin,0] = o.current_pal
                                var temp_key = "lilac_0";
                                switch(o.skin)
                                    {
                                        case spr_lilac: {temp_key = "lilac_0"; if o.alt_skin = 2 temp_key = "lilac_new_0"; break;}
                                        case spr_carol: {if o.alt_skin = 0 temp_key = "carol_0"; if o.alt_skin = 1 temp_key = "carrie_0"; if o.alt_skin = 2 temp_key = "chiasa_0"; break;}
                                        case spr_milla: {temp_key = "milla_0"; break;}
                                        case spr_spade: {temp_key = "spade_0"; break;}
                                    }
                                ini_open_ns(program_directory + "gamedata.dat")
                                ini_write_string("main_palettes",temp_key,string(o.current_pal))
                                ini_close_ns();
                                scr_set_message("Saving...!")
                                scr_set_message("Favorite Palette 1 set to "+string(o.current_pal)+"!")
                            }
                        if o.use_left = 1
                            {
                                o.use_favorite_palette[o.skin,1] = o.current_pal
                                var temp_key = "lilac_1";
                                switch(o.skin)
                                    {
                                        case spr_lilac: {temp_key = "lilac_1"; if o.alt_skin = 2 temp_key = "lilac_new_1"; break;}
                                        case spr_carol: {if o.alt_skin = 0 temp_key = "carol_1"; if o.alt_skin = 1 temp_key = "carrie_1";  if o.alt_skin = 2 temp_key = "chiasa_1"; break;}
                                        case spr_milla: {temp_key = "milla_1"; break;}
                                        case spr_spade: {temp_key = "spade_1"; break;}
                                    }
                                ini_open_ns(program_directory + "gamedata.dat")
                                ini_write_string("main_palettes",temp_key,string(o.current_pal))
                                ini_close_ns();
                                scr_set_message("Saving...!")
                                scr_set_message("Favorite Palette 2 set to "+string(o.current_pal)+"!")
                            }
                        if o.use_c = 1
                            {
                                o.current_pal += 1
                                o.current_ui_pal += 1
                                if o.current_pal &gt;= sprite_get_width(o.my_pal_sprite)
                                    {
                                        o.current_pal = 0;
                                        o.current_ui_pal = 0;
                                    }
                                audio_play_sound(pause_select,50,false)
                            }
                    }

                //Change Lilac To Original Lilac
                //Or Carol to Carrie
                if o.use_up = 16 and yes = 1
                    {
                        o.current_pal = 0;
                        o.current_ui_pal = 0;
                        if o.skin = spr_lilac
                            {
                                o.alt_skin += 1
                                if o.alt_skin &gt; 2
                                    o.alt_skin = 0;
                                scr_set_lilac();
                                if o.alt_skin = 2
                                    {
                                        obj_game_logic.my_pal_sprite = spr_lilac_new_palette
                                        obj_game_logic.ui_pal_sprite = spr_lilac_new_palette
                                    }
                                o.ui_selected_name = "Lilac"
                            }
                        if o.skin = spr_carol
                            {
                                o.alt_skin += 1
                                if o.alt_skin &gt; 2
                                    o.alt_skin = 0;
                                if o.alt_skin = 0
                                    {
                                        scr_set_carol();
                                        o.ui_selected_name = "Carol"
                                    }
                                if o.alt_skin = 1
                                    {
                                        scr_set_carrie();
                                        o.ui_selected_name = "Carrie"
                                    }
                                if o.alt_skin = 2
                                    {
                                        scr_set_chiasa();
                                        o.ui_selected_name = "Chiasa"
                                    }
                            }
                        if o.skin = spr_milla
                            {
                                scr_set_milla();
                                o.alt_skin += 1
                                if o.alt_skin &gt; 1
                                    o.alt_skin = 0;
                                o.ui_selected_name = "Milla"
                            }
                        if o.skin = spr_spade
                            alt_skin = 0;
                    }

                //Character Shaking
                if use_hide_sub_menu = 1 and yes = 1
                    {
                        if use_character_shake &gt; 0 use_character_shake -= 1;
        
                        if o.use_left = 1 or o.use_right = 1 use_character_shake += 8;
        
                        if o.user_camera_shake = 1
                            {
                                if use_character_shake &gt; 32
                                    {
                                        view_shake = 14
                                        view_shake_mod= 1.5
                                    }
                
                                if view_shake &gt;= 0
                                    {
                                        //Decrement camera shake length timer
                                        view_shake-=1
                                        //Increment camera shake iteration timer
                                        view_shake_iterations += 1
                                        //Lessen camera shake over time
                                        if view_shake_mod &gt; 0.1 view_shake_mod -= 0.1;
                                        //Reset camera shake iteration timer
                                        if view_shake_iterations &gt; 3 view_shake_iterations = 0;
                                        //Camera x shake
                                        switch(view_shake_iterations)
                                            {
                                                case 0: {view_xview[view_port]+=view_shake_mod;  view_yview[view_port]+=view_shake_mod;  break;}
                                                case 1: {view_xview[view_port]-=view_shake_mod;  view_yview[view_port]-=view_shake_mod;  break;}
                                                case 2: {view_xview[view_port]-=view_shake_mod;  view_yview[view_port]-=view_shake_mod;  break;}
                                                case 3: {view_xview[view_port]+=view_shake_mod;  view_yview[view_port]+=view_shake_mod;  break;}
                                            }
                                        //If the timer has ended, stop camera shake
                                        if view_shake=0
                                            {
                                                view_shake_iterations =  0
                                                view_shake            = -1
                                                view_shake_mod        =  3
                                                view_xview[view_port] = 0
                                                view_yview[view_port] = 0
                                            }
                                    }
                            }
                    }
            }
        //Click items
        if ((mouse_check_button_pressed(mb_left) or mouse_check_button_pressed(mb_right))
        and o.joy_mouse_button_switch = 1
        and device_mouse_x_to_gui(0) &gt;= 98 and device_mouse_x_to_gui(0) &lt;= 311
        and device_mouse_y_to_gui(0) &gt;= 44 and device_mouse_y_to_gui(0) &lt;= 121)
            {
                //Item 1
                if device_mouse_y_to_gui(0) &gt;= 44 and device_mouse_y_to_gui(0) &lt;= 59
                    use_menu_scroll = 0;
                //Item 2
                if device_mouse_y_to_gui(0) &gt;= 60 and device_mouse_y_to_gui(0) &lt;= 73
                    use_menu_scroll = 1;
                //Item 3
                if device_mouse_y_to_gui(0) &gt;= 74 and device_mouse_y_to_gui(0) &lt;= 87
                    use_menu_scroll = 2;
                //Item 4
                if device_mouse_y_to_gui(0) &gt;= 88 and device_mouse_y_to_gui(0) &lt;= 101
                    use_menu_scroll = 3;
                //Item 5
                if device_mouse_y_to_gui(0) &gt;= 102 and device_mouse_y_to_gui(0) &lt;= 121
                    use_menu_scroll = 4;
                use_click_yes = 1
                //Manage double-click mechanic
                use_click_confirm += 1
                if use_click_confirm = 1
                    use_click_check = use_menu_scroll;
                if use_click_confirm = 2
                    {
                        //If previously clicked on item matches the current one, confirm stage selection
                        if use_click_check = use_menu_scroll
                            use_click_confirm = 3;
                        //Otherwise, reset double-click confirm, so that a legitimate confirmation can be attempted again
                        else
                            use_click_confirm = 0;
                    }
                //Do not allow double-click confirming if map name is blank
                if use_maps_select = "..."
                    use_click_confirm = 0;
                audio_play_sound(pause_select,50,false)
            }
        //Shake selected text
        if ((o.use_up = 1 or o.use_down = 1) and o.transition_active = 0
        and yes = 1)
        or
            use_click_yes = 1
            {
                o.title_item_shake_timer = 10
                title_item_shake_cur = use_menu_scroll
                use_click_yes = 0
                //Update currently selected map file
                if use_menu_scroll &gt;= 0 and use_menu_scroll &lt;= 4
                    {
                        use_maps_select = o.use_maps_files[use_maps_page,use_menu_scroll]
                        ini_open_ns(program_directory + "\Maps\" + use_maps_select)
                        use_display_name = ini_read_string("lvl_hd","lvl_name","...")
                        use_display_author = ini_read_string("lvl_hd","lvl_author","...")
                        use_display_description = ini_read_string("lvl_hd","lvl_description","...")
                        use_display_character = ini_read_string("lvl_hd","lvl_char","All")
                        use_display_objective = real(ini_read_string("lvl_hd","lvl_win_condition",0))
                        use_display_personal_best_time = ini_read_string("lvl_hd","lvl_best_time","600000")
                        use_display_personal_best_minutes = string_copy(use_display_personal_best_time,1,2)
                        use_display_personal_best_seconds = string_copy(use_display_personal_best_time,3,4)
                        use_display_personal_best_milli   = string_copy(use_display_personal_best_time,5,6)
                        use_display_personal_best_seconds = string_copy(use_display_personal_best_seconds,1,2)
                        ini_close_ns()
                    }
            }
        if (use_menu_scroll &lt; 0 and o.use_up = 1 and o.transition_active = 0 and use_display_sidebar_page = ui_level_select_sidebar)
        or (o.use_left = 1 and yes = 1)
        or (o.joy_mouse_button_switch = 1 and o.transition_active = 0 and device_mouse_x_to_gui(0) &lt; 355 and mouse_wheel_up())
        //Click top scrollbar button
        or (o.joy_mouse_button_switch = 1 and yes = 1 and o.transition_active = 0
        and (mouse_check_button_pressed(mb_left) or mouse_check_button_pressed(mb_right))
        and device_mouse_x_to_gui(0) &gt;= 317 and device_mouse_x_to_gui(0) &lt;= 326
        and device_mouse_y_to_gui(0) &gt;= 42 and device_mouse_y_to_gui(0) &lt;= 82)
            {
                //Turn back a page
                use_maps_page -= 1
                //Reset cursor position to the bottom of the page
                use_menu_scroll = 4
                o.title_item_shake_timer = 10
                title_item_shake_cur = 4
                use_click_confirm = 1
                use_click_check = use_menu_scroll
                //Move scrollbar upwards
                use_scrollbar_position -= use_scrollbar_speed
                //Keep the boundaries of the scrollbar in check
                scr_set_scrollbar_boundaries(obj_level_select)
                //Exit file select menu
                if use_maps_page &lt; 0
                    {
                        use_maps_page = 0;
                        use_menu_scroll = 5
                        o.title_item_shake_timer = 8
                        title_item_shake_cur = 5
                    }
                if use_menu_scroll &gt;= 0 and use_menu_scroll &lt;= 4
                    {
                        use_maps_select = o.use_maps_files[use_maps_page,use_menu_scroll]
                        ini_open_ns(program_directory + "\Maps\" + use_maps_select)
                        use_display_name = ini_read_string("lvl_hd","lvl_name","...")
                        use_display_author = ini_read_string("lvl_hd","lvl_author","...")
                        use_display_description = ini_read_string("lvl_hd","lvl_description","...")
                        use_display_character = ini_read_string("lvl_hd","lvl_char","All")
                        use_display_objective = real(ini_read_string("lvl_hd","lvl_win_condition",0))
                        use_display_personal_best_time = ini_read_string("lvl_hd","lvl_best_time","600000")
                        use_display_personal_best_minutes = string_copy(use_display_personal_best_time,1,2)
                        use_display_personal_best_seconds = string_copy(use_display_personal_best_time,3,4)
                        use_display_personal_best_milli   = string_copy(use_display_personal_best_time,5,6)
                        use_display_personal_best_seconds = string_copy(use_display_personal_best_seconds,1,2)
                        ini_close_ns()
                    }
                //Update Currently Listed Maps
                use_maps_map[0] = o.use_maps_files[use_maps_page,0]
                use_maps_map[1] = o.use_maps_files[use_maps_page,1]
                use_maps_map[2] = o.use_maps_files[use_maps_page,2]
                use_maps_map[3] = o.use_maps_files[use_maps_page,3]
                use_maps_map[4] = o.use_maps_files[use_maps_page,4]
                if o.joy_mouse_button_switch = 1 audio_play_sound(pause_select,50,false);
            }
        //Reset menu positions if they go beyond the boundaries
        if (use_menu_scroll &gt; 5 and o.transition_active = 0)
            {
                use_menu_scroll = 0
                o.title_item_shake_timer = 10
                title_item_shake_cur = 0
                use_maps_select = o.use_maps_files[use_maps_page,use_menu_scroll]
                ini_open_ns(program_directory + "\Maps\" + use_maps_select)
                use_display_name = ini_read_string("lvl_hd","lvl_name","...")
                use_display_author = ini_read_string("lvl_hd","lvl_author","...")
                use_display_description = ini_read_string("lvl_hd","lvl_description","...")
                use_display_character = ini_read_string("lvl_hd","lvl_char","All")
                use_display_objective = real(ini_read_string("lvl_hd","lvl_win_condition",0))
                use_display_personal_best_time = ini_read_string("lvl_hd","lvl_best_time","600000")
                use_display_personal_best_minutes = string_copy(use_display_personal_best_time,1,2)
                use_display_personal_best_seconds = string_copy(use_display_personal_best_time,3,4)
                use_display_personal_best_milli   = string_copy(use_display_personal_best_time,5,6)
                use_display_personal_best_seconds = string_copy(use_display_personal_best_seconds,1,2)
                ini_close_ns()
            }
        //Reset file menu list position if it goes beyond the boundaries
        if (use_menu_scroll &gt; 4 and o.use_down = 1 and o.transition_active = 0)
        or (o.use_right = 1 and yes = 1)
        or (o.joy_mouse_button_switch = 1 and yes = 1 and o.transition_active = 0
        and mouse_x &lt; 355 and mouse_wheel_down())
        or (o.joy_mouse_button_switch = 1 and yes = 1 and o.transition_active = 0
        and (mouse_check_button_pressed(mb_left) or mouse_check_button_pressed(mb_right))
        and device_mouse_x_to_gui(0) &gt;= 317 and device_mouse_x_to_gui(0) &lt;= 326
        and device_mouse_y_to_gui(0) &gt;= 83 and device_mouse_y_to_gui(0) &lt;= 124)
            {
                //Turn a page forward
                use_maps_page += 1
                //Reset cursor position to the top of the page
                use_menu_scroll = 0
                o.title_item_shake_timer = 10
                title_item_shake_cur = 0
                use_click_confirm = 1
                use_click_check = use_menu_scroll
                //Move scrollbar downwards
                use_scrollbar_position += use_scrollbar_speed
                //Keep the boundaries of the scrollbar in check
                scr_set_scrollbar_boundaries(obj_level_select)
                //Exit file select menu if we have scrolled beyond the last page
                if use_maps_page &gt; use_maps_pages
                    {
                        use_maps_page = use_maps_pages
                        use_menu_scroll = 5
                        o.title_item_shake_timer = 8
                        title_item_shake_cur = 5
                    }
                if use_menu_scroll &gt;= 0 and use_menu_scroll &lt;= 4
                    {
                        use_maps_select = o.use_maps_files[use_maps_page,use_menu_scroll]
                        ini_open_ns(program_directory + "\Maps\" + use_maps_select)
                        use_display_name = ini_read_string("lvl_hd","lvl_name","...")
                        use_display_author = ini_read_string("lvl_hd","lvl_author","...")
                        use_display_description = ini_read_string("lvl_hd","lvl_description","...")
                        use_display_character = ini_read_string("lvl_hd","lvl_char","All")
                        use_display_objective = real(ini_read_string("lvl_hd","lvl_win_condition",0))
                        use_display_personal_best_time = ini_read_string("lvl_hd","lvl_best_time","600000")
                        use_display_personal_best_minutes = string_copy(use_display_personal_best_time,1,2)
                        use_display_personal_best_seconds = string_copy(use_display_personal_best_time,3,4)
                        use_display_personal_best_milli   = string_copy(use_display_personal_best_time,5,6)
                        use_display_personal_best_seconds = string_copy(use_display_personal_best_seconds,1,2)
                        ini_close_ns()
                    }
                //Update Currently Listed Maps
                use_maps_map[0] = o.use_maps_files[use_maps_page,0]
                use_maps_map[1] = o.use_maps_files[use_maps_page,1]
                use_maps_map[2] = o.use_maps_files[use_maps_page,2]
                use_maps_map[3] = o.use_maps_files[use_maps_page,3]
                use_maps_map[4] = o.use_maps_files[use_maps_page,4]
                if o.joy_mouse_button_switch = 1 audio_play_sound(pause_select,50,false);
            }
        //Select Okay if we have pressed the B button
        if ((o.use_b = 1 or o.use_a = 1 or o.use_start = 1) and use_menu_scroll = 5 and o.transition_active = 0
        and yes = 1)
        or (o.joy_mouse_button_switch = 1 and yes = 1 and o.transition_active = 0
        and (mouse_check_button_pressed(mb_left) or mouse_check_button_pressed(mb_right))
        and device_mouse_x_to_gui(0) &gt;= 168 and device_mouse_x_to_gui(0) &lt;= 252
        and device_mouse_y_to_gui(0) &gt;= 221 and device_mouse_y_to_gui(0) &lt;= 235)
            {
                audio_play_sound(pause_exit,50,false)
                o.title_room_goto=rm_title_screen
                o.transition_active = 1
                title_room_timer = 1
                o.joy_input[2,6] = 30
                use_menu_allowed = 30
                //D-Pad Movement
                o.joy_input[0,0] = 0  //Joystick Right
                o.joy_input[0,1] = 0  //Joystick Down
                o.joy_input[0,2] = 0  //Joystick Left
                o.joy_input[0,3] = 0  //JoyStick Up
                //Player Actions
                o.joy_input[1,0] = 0  //Joystick A (Attack)
                o.joy_input[1,2] = 0  //Joystick B (Jump)
                o.joy_input[1,3] = 0  //Joystick C (Special)
                o.joy_input[2,0] = 0  //Joystick "Start"

            }
        //Set cursor to Okay if we have pressed the B button, and the cursor is not already there
        if o.use_b = 1 and use_menu_scroll != 5 and o.transition_active = 0
        and yes = 1
            {
                use_menu_scroll = 5; audio_play_sound(pause_select,50,false);
                o.title_item_shake_timer = 8;
                title_item_shake_cur = 5;
            }

        //Determine selected character based on input
        switch(o.skin)
            {
                case spr_lilac: {o.ui_selected_skin=spr_lilac_bench; o.ui_selected_offset_x = 18; o.ui_selected_offset_y = 133; break;}
                case spr_carol:
                    {
                        if o.alt_skin = 0 o.ui_selected_skin=spr_carol_bench;
                        if o.alt_skin = 1 o.ui_selected_skin=spr_carol_old_bench;
                        if o.alt_skin = 2 o.ui_selected_skin=spr_carol_new_bench;
                        o.ui_selected_offset_x = 19; o.ui_selected_offset_y = 135;
                        break;
                    }
                case spr_milla:
                    {
                        if o.alt_skin = 2
                            o.alt_skin = 0;
                        o.ui_selected_skin=spr_milla_bench;
                        if o.alt_skin = 1
                            o.ui_selected_skin=spr_milla_bench_new;
                        o.ui_selected_offset_x = 18;
                        o.ui_selected_offset_y = 132;
                        break;
                    }
                case spr_spade:
                    {
                        o.ui_selected_skin=spr_spade_bench;
                        o.ui_selected_offset_x = 18;
                        o.ui_selected_offset_y = 132;
                        if o.alt_skin &gt; 0
                            o.alt_skin = 0;
                        break;
                    }
                case spr_lilac_old:
                    {
                        o.ui_selected_skin=spr_lilac_old_bench
                        o.ui_selected_offset_x = 18
                        o.ui_selected_offset_y = 133
                        break;
                    }
            }
        if use_display_character != "All"
            {
                if use_display_character = "Lilac" and o.skin != spr_lilac
                    {
                        o.ui_selected_pos = 0
                        o.skin = spr_lilac
                        scr_set_lilac()
                        o.ui_selected_name = "Lilac"
                    }
                if (use_display_character = "Carol" or use_display_character = "Carol's Bike")
                and o.lives_spr != 4
                    {
                        o.ui_selected_pos = 1
                        o.skin = spr_carol
                        o.alt_skin = 0
                        scr_set_carol()
                        o.ui_selected_name = "Carol"
                    }
                if (use_display_character = "Carrie")
                and o.lives_spr != 9
                    {
                        o.ui_selected_pos = 1
                        o.alt_skin = 1
                        o.skin = spr_carol
                        scr_set_carrie()
                        o.ui_selected_name = "Carrie"
                    }
                if (use_display_character = "Chiasa")
                and o.lives_spr != 10
                    {
                        o.ui_selected_pos = 1
                        o.alt_skin = 2
                        o.skin = spr_carol
                        scr_set_chiasa()
                        o.ui_selected_name = "Chiasa"
                    }
                if use_display_character = "Milla" and o.skin != spr_milla
                    {
                        o.ui_selected_pos = 2
                        o.skin = spr_milla
                        scr_set_milla()
                        o.ui_selected_name = "Milla"
                        if o.alt_skin = 0
                            {
                                scr_set_milla()
                                o.ui_selected_name = "Milla"
                            }
                        else
                            {
                                scr_set_milla()
                                if o.alt_skin = 2
                                    o.alt_skin = 1;
                                o.ui_selected_name = "Milla"
                            }
                    }
                if use_display_character = "Spade" and o.skin != spr_spade
                    {
                        o.ui_selected_pos = 3
                        o.skin = spr_spade
                        scr_set_spade()
                        o.alt_skin = 0
                        o.ui_selected_name = "Spade"
                    }
            }

        //Animate selected character based on skin
        switch(o.ui_selected_skin)
            {
                case spr_lilac_bench:
                    {
                        if o.alt_skin &lt; 2
                            {
                                o.ui_selected_frame += 0.16;
                                if o.ui_selected_frame &gt; 14.8
                                    o.ui_selected_frame = 0;
                            }
                        if o.alt_skin = 2
                            {
                                o.ui_selected_frame += 0.12;
                                if o.ui_selected_frame &gt; 11.8
                                    o.ui_selected_frame = 0;
                            }
                        break;
                    }
                case spr_carol_bench: {o.ui_selected_frame += 0.16; if o.ui_selected_frame &gt; 11.8 o.ui_selected_frame = 0; break;}
                case spr_spade_bench: {o.ui_selected_frame += 0.16; if o.ui_selected_frame &gt; 10.8 o.ui_selected_frame = 0; break;}
                case spr_milla_bench: {o.ui_selected_frame += 0.08; if o.ui_selected_frame &gt; 3.8  o.ui_selected_frame = 0; break;}
                case spr_lilac_old_bench: {o.ui_selected_frame += 0.16; if o.ui_selected_frame &gt; 14.8 o.ui_selected_frame = 0; break;}
                case spr_carol_old_bench: {o.ui_selected_frame += 0.16; if o.ui_selected_frame &gt; 11.8 o.ui_selected_frame = 0; break;}
                case spr_carol_new_bench: {o.ui_selected_frame += 0.10; if o.ui_selected_frame &gt; 11.8 o.ui_selected_frame = 0; break;}
                case spr_milla_bench_new: {o.ui_selected_frame += 0.08; if o.ui_selected_frame &gt; 3.8  o.ui_selected_frame = 0; break;}
            }

        //Determine which stage to enter based on currently selected icon
        if ((o.use_a = 1 or o.use_start = 1) and (use_menu_scroll &gt;= 0 and use_menu_scroll &lt;= 4 and use_maps_select != "...") and o.transition_active = 0
        and yes = 1)
        or (o.joy_mouse_button_switch = 1 and yes = 1 and o.transition_active = 0 and use_maps_select != "..."
        and (mouse_check_button_pressed(mb_left) or mouse_check_button_pressed(mb_right))
        and device_mouse_x_to_gui(0) &gt;= 271 and device_mouse_x_to_gui(0) &lt;= 388
        and device_mouse_y_to_gui(0) &gt;= 221 and device_mouse_y_to_gui(0) &lt;= 235)
        or (o.joy_mouse_button_switch = 1 and yes = 1 and o.transition_active = 0 and use_maps_select != "..."
        and use_click_confirm = 3)
            {
                o.title_room_goto=rm_player
                o.transition_active = 1
                o.use_maps_select = use_maps_select
                o.use_maps_load = 1
                title_room_timer = 1
                o.joy_input[2,6] = 30
                use_menu_allowed = 30
                use_click_confirm = 0
                //D-Pad Movement
                o.joy_input[0,0] = 0  //Joystick Right
                o.joy_input[0,1] = 0  //Joystick Down
                o.joy_input[0,2] = 0  //Joystick Left
                o.joy_input[0,3] = 0  //JoyStick Up
                //Player Actions
                o.joy_input[1,0] = 0  //Joystick A (Attack)
                o.joy_input[1,2] = 0  //Joystick B (Jump)
                o.joy_input[1,3] = 0  //Joystick C (Special)
                o.joy_input[2,0] = 0  //Joystick "Start"
                //Play Sound
                audio_play_sound(pause_exit,50,false)
            }

        //      Cursor Shaking Actions      //
        //----------------------------------//
        
        if o.title_item_shake_timer &gt;= 0
            {
                //Decrement menu item shake length timer
                o.title_item_shake_timer-=1
                //Increment menu item shake iteration timer
                o.title_item_shake_iterations += 1
                //Lessen menu item shake over time
                if o.title_item_shake_mod &gt; 0.1 o.title_item_shake_mod -= 0.05;
                //Reset menu item shake iteration timer
                if o.title_item_shake_iterations &gt; 3 o.title_item_shake_iterations = 0;
                //Menu item x shake
                switch(o.title_item_shake_iterations)
                    {
                        case 0: {title_item_shake[title_item_shake_cur]= 0;  title_item_shake_y[title_item_shake_cur]= 0; break;}
                        case 1: {title_item_shake[title_item_shake_cur]= 0;  title_item_shake_y[title_item_shake_cur]= 1; break;}
                        case 2: {title_item_shake[title_item_shake_cur]= 3;  title_item_shake_y[title_item_shake_cur]= 0; break;}
                        case 3: {title_item_shake[title_item_shake_cur]= 0;  title_item_shake_y[title_item_shake_cur]=-2; break;}
                        case 4: {title_item_shake[title_item_shake_cur]=-3;  title_item_shake_y[title_item_shake_cur]=-1; break;}
                        case 5: {title_item_shake[title_item_shake_cur]=-2;  title_item_shake_y[title_item_shake_cur]= 1; break;}
                        case 6: {title_item_shake[title_item_shake_cur]= 1;  title_item_shake_y[title_item_shake_cur]= 0; break;}
                        case 7: {title_item_shake[title_item_shake_cur]= 2;  title_item_shake_y[title_item_shake_cur]=-1; break;}
                        case 8: {title_item_shake[title_item_shake_cur]= 1;  title_item_shake_y[title_item_shake_cur]=-1; break;}
                        case 9: {title_item_shake[title_item_shake_cur]=-1;  title_item_shake_y[title_item_shake_cur]=-1; break;}
                        case 10: {title_item_shake[title_item_shake_cur]=-1; title_item_shake_y[title_item_shake_cur]= 0; break;}
                    }
                //If the timer has ended, stop menu item shake
                if o.title_item_shake_timer=0
                    {
                        o.title_item_shake_iterations =  0
                        o.title_item_shake_timer      = -1
                        o.title_item_shake_mod        =  1
                        o.title_cursor_shake          =  0
                        title_item_shake[title_item_shake_cur] = 0
                        title_item_shake[0] = 0
                        title_item_shake[1] = 0
                        title_item_shake[2] = 0
                        title_item_shake[3] = 0
                        title_item_shake[4] = 0
                        title_item_shake[5] = 0
                        title_item_shake_y[0] = 0
                        title_item_shake_y[1] = 0
                        title_item_shake_y[2] = 0
                        title_item_shake_y[3] = 0
                        title_item_shake_y[4] = 0
                        title_item_shake_y[5] = 0
                    }
            }
            //Boop action
            if point_in_rectangle(mouse_x,mouse_y,8,116,71,211)
                use_boop = 1;
            else
                use_boop = 0;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Disable Move List Display
o.user_move_list_display = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Shang Mu Academy Menu

//Draw selected character's name
draw_set_font(o.text_font_academy)
draw_set_halign(fa_left)

//Draw Carol's alt separate from the shader's palette swapping
if o.skin = spr_carol and use_display_character = "All"
    {
        switch(o.alt_skin)
            {
                case 0: {use_character_left = spr_npc_chiasa_happy; use_character_right = spr_carol_old; break;}
                case 1: {use_character_left = spr_npc_chiasa_happy; use_character_right = spr_carol_cs_tired; break;}
                case 2: {use_character_left = spr_carol_cs_tired;   use_character_right = spr_carol_old; break;}
            }
        use_character_left_frame += 0.12
        if use_character_left_frame &gt; sprite_get_number(use_character_left)+0.8
            use_character_left_frame = 0;
        use_character_right_tail_frame += 0.16
        if use_character_right_tail_frame &gt; 11.8
            use_character_right_tail_frame = 0;
        use_character_right_frame += 0.12
        if use_character_right != spr_carol_old
            {
                use_character_right_tail = spr_carols_tail_idle
                if use_character_right_frame &gt; sprite_get_number(use_character_right)+0.8
                    use_character_right_frame = 0;
            }
        else
            {
                use_character_right_tail = spr_carols_old_tail_idle
                use_character_right_frame = 261;
            }
        draw_sprite(use_character_left,use_character_left_frame,0,184)
        draw_sprite(use_character_right_tail,use_character_right_tail_frame,69,168)
        draw_sprite(use_character_right,use_character_right_frame,69,184)

        if o.user_move_list_control_type = 0
            {
                draw_sprite(spr_keyboard_font,o.key_up,34,201)
            }
        else
            {
                draw_background(o.user_joystick_up,34,201)
            }
        draw_set_halign(fa_middle)
        draw_text_ext_transformed(41,218,"Hold To Change Character",13,128,0.5,0.5,0)
        draw_set_halign(fa_left)
    }

//Draw Level Select UI Background
draw_background(ui_level_select_menu_bg,74,0)

//Draw Objective
var use_display_objective_bg = ui_hit_the_targets;
switch(use_display_objective)
    {
        case 0: {use_display_objective_bg = ui_hit_the_targets; break;}
        case 1: {use_display_objective_bg = ui_reach_the_target; break;}
        case 2: {use_display_objective_bg = ui_defeat_the_boss; break;}
        default: {use_display_objective_bg = ui_hit_the_targets; break;}
    }
draw_background(use_display_objective_bg,73,0)
//Draw selected character
script_execute(obj_game_logic.pal_swap_script,obj_game_logic.my_pal_sprite,obj_game_logic.current_pal,false)
if o.alt_skin = 0
    {
        draw_sprite(o.ui_selected_skin,o.ui_selected_frame,o.ui_selected_offset_x,o.ui_selected_offset_y)
        if use_boop = 1
            {
                var use_boop_skin = spr_lilac_eyes;
                switch(o.ui_selected_skin)
                    {
                        case spr_lilac_bench: {use_boop_skin = spr_lilac_eyes; break;}
                        case spr_carol_bench: {use_boop_skin = spr_carol_eyes; break;}
                        case spr_milla_bench: {use_boop_skin = spr_milla_eyes; break;}
                        case spr_spade_bench: {use_boop_skin = spr_spade_eyes; break;}
                    }
                draw_sprite(use_boop_skin,o.ui_selected_frame,o.ui_selected_offset_x,o.ui_selected_offset_y)
            }
    }
if o.alt_skin = 1
    {
        if o.skin = spr_lilac
            draw_sprite(spr_lilac_old_bench,o.ui_selected_frame,o.ui_selected_offset_x,o.ui_selected_offset_y);
        if o.skin = spr_carol
            {
                draw_sprite(spr_carol_old_bench,o.ui_selected_frame,o.ui_selected_offset_x,o.ui_selected_offset_y);
                if use_boop = 1
                    {
                        use_character_sound_timer += 1
                        if use_character_sound_timer = 1 and !audio_is_playing(snd_carrie_laugh)
                            audio_play_sound(snd_carrie_laugh,50,false);
                        draw_sprite(spr_carrie_eyes,o.ui_selected_frame,o.ui_selected_offset_x,o.ui_selected_offset_y);
                    }
                else
                    {
                        use_character_sound_timer = 0
                    }
            }
        if o.skin = spr_milla
            draw_sprite(spr_milla_bench_new,o.ui_selected_frame,o.ui_selected_offset_x,o.ui_selected_offset_y);
    }
if o.alt_skin = 2
    {
        if o.skin = spr_lilac
            draw_sprite(spr_lilac_new_bench,o.ui_selected_frame,o.ui_selected_offset_x,o.ui_selected_offset_y);
        else
            draw_sprite(o.ui_selected_skin,o.ui_selected_frame,o.ui_selected_offset_x,o.ui_selected_offset_y);
        if use_boop = 1
            {
                if o.skin = spr_lilac
                    draw_sprite(spr_lilac_new_eyes,o.ui_selected_frame,o.ui_selected_offset_x,o.ui_selected_offset_y);
                else
                    {
                        draw_sprite(spr_chiasa_eyes,o.ui_selected_frame,o.ui_selected_offset_x,o.ui_selected_offset_y);
                        use_character_sound_timer += 1
                        if use_character_sound_timer = 1 and !audio_is_playing(snd_carrie_laugh)
                            audio_play_sound(snd_carrie_laugh,50,false);
                    }
            }
        else
            {
                use_character_sound_timer = 0
            }
    }
shader_reset();

//Draw Scrollbar
draw_background(ui_hud_open_scrollbar,319,use_scrollbar_position)

//Draw Item Listings
var use_maps_draw = 0;
var use_display_name_s = "";
while(use_maps_draw &lt;= 4)
    {
        if use_maps_draw &gt; 4 break;
        if string_length(use_maps_map[use_maps_draw]) &gt; 26
            use_display_name_s = string_copy(use_maps_map[use_maps_draw],1,26);
        else
            use_display_name_s = use_maps_map[use_maps_draw];
        draw_text(123+title_item_shake[use_maps_draw],47+(14*use_maps_draw)+title_item_shake_y[use_maps_draw],use_display_name_s)
        use_maps_draw += 1
    }

//Draw Item Metadata
draw_text(208,198,use_display_author)
draw_text(96,178,use_display_description)

//Draw Stage Name
draw_set_font(o.menu_font)
draw_set_halign(fa_middle)
draw_text_transformed(212,158,use_display_name,0.80,0.80,0)
draw_set_halign(fa_left)

//Draw Start Button (For Mouse Players)
if o.joy_mouse_button_switch = 1
    draw_text(271,221,"Start");
var use_menu_line_y = 60;

//Draw Personal Best Time
draw_set_font(o.number_font_academy)
draw_text(205,130,use_display_personal_best_minutes)
draw_text(230,130,use_display_personal_best_seconds)
draw_text(255,130,use_display_personal_best_milli)

//Draw cursor
switch(use_menu_scroll)
    {
        case 0: {use_menu_x = 100; use_menu_y = 48; use_menu_line_y = 60; break;}
        case 1: {use_menu_x = 100; use_menu_y = 62; use_menu_line_y = 74; break;}
        case 2: {use_menu_x = 100; use_menu_y = 76; use_menu_line_y = 88; break;}
        case 3: {use_menu_x = 100; use_menu_y = 90; use_menu_line_y = 102; break;}
        case 4: {use_menu_x = 100; use_menu_y = 104; use_menu_line_y = 121; break;}
        case 5: {use_menu_x = 145; use_menu_y = 224; use_menu_line_y = -100; break;}
    }
draw_sprite(spr_pause_menu_3,o.title_animation,use_menu_x-title_item_shake[title_item_shake_cur],use_menu_y-title_item_shake_y[title_item_shake_cur])
//Draw item position for mouse cursor 
if o.joy_mouse_button_switch = 1
    {
        use_click_timer += 1
        if use_click_timer &gt; 20 use_click_timer = 0;
        if use_click_timer &lt;= 10
            {
                draw_set_color(c_white)
                draw_line_width(98,use_menu_line_y,311,use_menu_line_y,2)
            }
    }

//Draw "Return" text
draw_set_font(o.menu_font)
draw_text(168+title_item_shake[5],221+title_item_shake_y[5],"Return")

//Draw selected character's name
draw_set_font(o.text_font_academy)
draw_set_halign(fa_left)

//Draw Sidebar
if use_hide_sub_menu = 1
    {
        draw_text(22,187,o.ui_selected_name)
        draw_background(use_display_sidebar_page,355,0)
        draw_background(ui_level_select_characters,360,24)
        draw_set_halign(fa_middle)
        draw_text_transformed(391,27,o.ui_selected_name,0.5,0.5,0)
        draw_set_halign(fa_left)
        if use_display_character = "All"
            {
                if o.skin = spr_lilac script_execute(o.pal_swap_script,o.ui_pal_sprite,o.current_ui_pal,false)
                if o.alt_skin = 0 draw_sprite_stretched(spr_ui_lilac_stats,use_lilac_anim,363,39,57,20);
                if o.alt_skin = 1 and o.skin = spr_lilac
                    {
                        draw_sprite_stretched(spr_ui_lilac_stats_old,use_lilac_anim,363,39,57,20);
                        draw_sprite_stretched(spr_ui_carol_stats,use_carol_anim,363,62,57,20);
                        draw_sprite_stretched(spr_ui_milla_stats,use_milla_anim,363,85,57,20);
                    }
                if o.alt_skin = 2 and o.skin = spr_lilac
                    {
                        draw_sprite_stretched(spr_ui_lilac_stats_new,use_lilac_anim,363,39,57,20);
                        draw_sprite_stretched(spr_ui_carol_stats,use_carol_anim,363,62,57,20);
                        draw_sprite_stretched(spr_ui_milla_stats,use_milla_anim,363,85,57,20);
                    }
                if o.skin = spr_carol
                    script_execute(o.pal_swap_script,o.ui_pal_sprite,o.current_ui_pal,false);
                if o.alt_skin = 0 draw_sprite_stretched(spr_ui_carol_stats,use_carol_anim,363,62,57,20);
                if o.alt_skin = 1 and o.skin = spr_carol
                    {
                        draw_sprite_stretched(spr_ui_lilac_stats,use_lilac_anim,363,39,57,20);
                        draw_sprite_stretched(spr_ui_carrie_stats,use_carol_anim,363,62,57,20);
                        draw_sprite_stretched(spr_ui_milla_stats,use_milla_anim,363,85,57,20);
                    }
                if o.alt_skin = 2 and o.skin = spr_carol
                    {
                        draw_sprite_stretched(spr_ui_lilac_stats,use_lilac_anim,363,39,57,20);
                        draw_sprite_stretched(spr_ui_chiasa_stats,use_carol_anim,363,62,57,20);
                        draw_sprite_stretched(spr_ui_milla_stats,use_milla_anim,363,85,57,20);
                    }
                if o.skin = spr_milla script_execute(o.pal_swap_script,o.ui_pal_sprite,o.current_ui_pal,false)
                if o.alt_skin = 0 draw_sprite_stretched(spr_ui_milla_stats,use_milla_anim,363,85,57,20);
                if o.alt_skin = 1 and o.skin = spr_milla
                    {
                        draw_sprite_stretched(spr_ui_lilac_stats,use_lilac_anim,363,39,57,20);
                        draw_sprite_stretched(spr_ui_carol_stats,use_carol_anim,363,62,57,20);
                        draw_sprite_stretched(spr_ui_milla_stats,use_milla_anim,363,85,57,20);
                    }
                if o.skin = spr_spade script_execute(o.pal_swap_script,o.ui_pal_sprite,o.current_ui_pal,false)
                draw_sprite_stretched(spr_ui_spade_stats,use_spade_anim,363,108,57,20)
                shader_reset();
            }
        else
            {
                if use_display_character = "Lilac"
                    {
                        script_execute(o.pal_swap_script,o.ui_pal_sprite,o.current_ui_pal,false)
                        if o.alt_skin = 0 draw_sprite_stretched(spr_ui_lilac_stats,use_lilac_anim,363,39,57,20);
                        if o.alt_skin = 1 draw_sprite_stretched(spr_ui_lilac_stats_old,use_lilac_anim,363,39,57,20);
                        if o.alt_skin = 2 draw_sprite_stretched(spr_ui_lilac_stats_new,use_lilac_anim,363,39,57,20);
                        shader_reset()
                        draw_sprite_stretched_ext(spr_ui_carol_stats,use_carol_anim,363,62,57,20,c_white,0.5)
                        draw_sprite_stretched_ext(spr_ui_milla_stats,use_milla_anim,363,85,57,20,c_white,0.5)
                        draw_sprite_stretched_ext(spr_ui_spade_stats,use_spade_anim,363,108,57,20,c_white,0.5)
                        draw_text(22,206,"only")
                    }
                if use_display_character = "Carol"
                or use_display_character = "Carol's Bike"
                or use_display_character = "Carrie"
                or use_display_character = "Chiasa"
                    {
                        draw_sprite_stretched_ext(spr_ui_lilac_stats,use_lilac_anim,363,39,57,20,c_white,0.5)
                        script_execute(o.pal_swap_script,o.ui_pal_sprite,o.current_ui_pal,false)
                        if o.alt_skin = 0 draw_sprite_stretched(spr_ui_carol_stats,use_carol_anim,363,62,57,20);
                        if o.alt_skin = 1 draw_sprite_stretched(spr_ui_carrie_stats,use_carol_anim,363,62,57,20);
                        if o.alt_skin = 2 draw_sprite_stretched(spr_ui_chiasa_stats,use_carol_anim,363,62,57,20);
                        shader_reset()
                        draw_sprite_stretched_ext(spr_ui_milla_stats,use_milla_anim,363,85,57,20,c_white,0.5)
                        draw_sprite_stretched_ext(spr_ui_spade_stats,use_spade_anim,363,108,57,20,c_white,0.5)
                        draw_text(22,206,"only")
                    }
                if use_display_character = "Milla"
                    {
                        draw_sprite_stretched_ext(spr_ui_lilac_stats,use_lilac_anim,363,39,57,20,c_white,0.5)
                        draw_sprite_stretched_ext(spr_ui_carol_stats,use_carol_anim,363,62,57,20,c_white,0.5)
                        script_execute(o.pal_swap_script,o.ui_pal_sprite,o.current_ui_pal,false)
                        draw_sprite_stretched(spr_ui_milla_stats,use_milla_anim,363,85,57,20)
                        shader_reset()
                        draw_sprite_stretched_ext(spr_ui_spade_stats,use_spade_anim,363,108,57,20,c_white,0.5)
                        draw_text(22,206,"only")
                    }
                if use_display_character = "Spade"
                    {
                        draw_sprite_stretched_ext(spr_ui_lilac_stats,use_lilac_anim,363,39,57,20,c_white,0.5)
                        draw_sprite_stretched_ext(spr_ui_carol_stats,use_carol_anim,363,62,57,20,c_white,0.5)
                        draw_sprite_stretched_ext(spr_ui_milla_stats,use_milla_anim,363,85,57,20,c_white,0.5)
                        script_execute(o.pal_swap_script,o.ui_pal_sprite,o.current_ui_pal,false)
                        draw_sprite_stretched(spr_ui_spade_stats,use_spade_anim,363,108,57,20)
                        shader_reset()
                        draw_text(22,206,"only")
                    }
            }
        if o.user_move_list_control_type = 0
            {
                if use_display_sidebar_page = ui_level_select_sidebar
                    {
                        draw_sprite(spr_keyboard_font,o.key_c,359,7)
                        draw_sprite(spr_keyboard_font,o.key_b,359,185)
                        draw_sprite(spr_keyboard_font,o.key_a,359,203)
                    }
                else
                    {
                        draw_sprite(spr_keyboard_font,o.key_c,359,7)
                    }
                draw_sprite(spr_keyboard_font,o.key_d,359,221)
            }
        else
            {
                if use_display_sidebar_page = ui_level_select_sidebar
                    {
                        draw_background(o.user_joystick_c,359,7)
                        draw_background(o.user_joystick_b,359,185)
                        draw_background(o.user_joystick_a,359,203)
                    }
                else
                    {
                        draw_background(o.user_joystick_c,359,7)
                    }
                draw_background(o.user_joystick_d,359,221)
            }
        use_lightened_anim += 0.25
        if use_lightened_anim &gt; 1 use_lightened_anim = 0;
        switch(o.skin)
            {
                //Switch To Lilac
                case spr_lilac:
                    {
                        draw_background(ui_level_select_characters_darkened,362,61)
                        draw_background(ui_level_select_characters_darkened,362,84)
                        if use_lightened_anim = 1 draw_background(ui_level_select_characters_lightened,362,38);
                        draw_background(ui_level_select_characters_darkened,362,107)
                        if use_lilac_anim &lt; 4.8 use_lilac_anim += 0.20;
                        use_carol_anim = 0
                        use_milla_anim = 0
                        use_spade_anim = 0
                        if use_character_shake = 32 use_lilac_anim = 0;
                        break;
                    }
                //Switch To Carol
                case spr_carol:
                    {
                        draw_background(ui_level_select_characters_darkened,362,38)
                        draw_background(ui_level_select_characters_darkened,362,84)
                        if use_lightened_anim = 1 draw_background(ui_level_select_characters_lightened,362,61);
                        draw_background(ui_level_select_characters_darkened,362,107)
                        if use_carol_anim &lt; 3.8 use_carol_anim += 0.20;
                        use_lilac_anim = 0
                        use_milla_anim = 0
                        use_spade_anim = 0
                        if use_character_shake = 32 use_carol_anim = 0;
                        break;
                    }
                //Switch To Milla
                case spr_milla:
                    {
                        draw_background(ui_level_select_characters_darkened,362,61)
                        draw_background(ui_level_select_characters_darkened,362,38)
                        if use_lightened_anim = 1 draw_background(ui_level_select_characters_lightened,362,84);
                        draw_background(ui_level_select_characters_darkened,362,107)
                        if use_milla_anim &lt; 5.8 use_milla_anim += 0.20;
                        use_spade_anim = 0
                        use_carol_anim = 0
                        use_lilac_anim = 0
                        if use_character_shake = 32 use_milla_anim = 0;
                        break;
                    }
                //Switch To Spade
                case spr_spade:
                    {
                        draw_background(ui_level_select_characters_darkened,362,61)
                        draw_background(ui_level_select_characters_darkened,362,38)
                        draw_background(ui_level_select_characters_darkened,362,84)
                        if use_lightened_anim = 1 draw_background(ui_level_select_characters_lightened,362,107);
                        if use_spade_anim &lt; 5.8 use_spade_anim += 0.20;
                        use_milla_anim = 0
                        use_carol_anim = 0
                        use_lilac_anim = 0
                        if use_character_shake = 32 use_spade_anim = 0;
                        break;
                    }
            }
        if use_character_shake &gt; 32
            {
                use_lilac_anim = 5
                use_carol_anim = 4
                use_milla_anim = 6
                use_spade_anim = 6
            }
    }
    else
        {
            draw_text(33,188,o.ui_selected_name)
            draw_background(ui_level_select_show_sidebar,359,221)
            if o.user_move_list_control_type = 0
                draw_sprite(spr_keyboard_font,o.key_c,15,186);
            else
                draw_background(o.user_joystick_c,15,186);
            if use_display_character != "All" draw_text(33,206,"only");
        }
draw_set_font(o.text_font_academy)
draw_set_halign(fa_middle)
var ui_string = string(o.current_pal+1)+" of "+string(sprite_get_width(o.my_pal_sprite));
draw_text_transformed(391,130,ui_string,0.5,0.5,0)
script_execute(o.pal_swap_script,o.my_pal_sprite,o.current_pal,false)
draw_sprite_general(o.my_pal_sprite,0,0,0,1,sprite_get_height(o.my_pal_sprite),380,139,1,1,90,c_white,c_white,c_white,c_white,1)
shader_reset()
draw_set_halign(fa_left)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dummy Code Block So The Object's Sprite Doesn't Show
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
