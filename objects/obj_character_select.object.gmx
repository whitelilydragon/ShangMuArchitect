<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_logic_processor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-7</depth>
  <persistent>0</persistent>
  <parentName>obj_activate_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>o = obj_game_logic
o.alt_skin = 0
background_visible[3] = true
background_visible[4] = false
frame[0] = 0
    frame[1] = 0
    frame[2] = 0
    frame[3] = 0
character_frame_lilac = 0
    character_frame_carol = 0
    character_frame_milla = 0
    character_frame_spade = 0
character_selection = 0
    character_select_x = 76
    character_select_y = 72
    character_select_sprite = spr_ui_lilac_stats
    character_select_frame = 0
    character_select_confirm = 0
    character_select_box_frame = 0
palette_box_y = 432
palette_anchor_x = 149
palette_anchor_y = 181
palette_x = 0
palette_y = 0
palette_index = 0
palette_alpha = 0
palette_mouse_x = 0
palette_mouse_y = 0
palette_mouse_confirm = 0
input_cooldown = 0
    input_left = 0
    input_right = 0
    input_up = 0
    input_down = 0
    input_a = 0
    input_b = 0
    input_c = 0
    input_d = 0
    input_start = 0
music_timer = 4
use_character_shake = 0
view_shake = -1
view_shake_mod = 3
view_shake_iterations = 0
transition_active = 0
transition_position = 0
transition_tutorial = 0

scr_lang_character_select()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if input_cooldown &gt; 0 input_cooldown -= 1;

//D-Pad Movement
if o.joy_input[0,0] = 1 input_right += 1 else input_right = 0;
if o.joy_input[0,1] = 1 input_down  += 1 else input_down = 0;
if o.joy_input[0,2] = 1 input_left += 1 else input_left = 0;
if o.joy_input[0,3] = 1 input_up += 1 else input_up = 0;

//Player Actions
if o.joy_input[1,0] = 1  input_a += 1; else input_a = 0; //Joystick A (Cancel/Attack)
if o.joy_input[1,2] = 1  input_b += 1; else input_b = 0; //Joystick B (Accept/Jump)
if o.joy_input[1,3] = 1  input_c += 1; else input_c = 0; //Joystick C (Alt Costumes)
if o.joy_input[1,4] = 1  input_d += 1; else input_d = 0; //Joystick D (Tutorial Stage)
if o.joy_input[2,0] = 1  input_start += 1; else input_start = 0; //Joystick Start (Accept/Jump)

//Select Your Character
if character_select_confirm = 0
    {
        if ((mouse_check_button_pressed(mb_left))
        and o.joy_mouse_button_switch = 1
        and device_mouse_x_to_gui(0) &gt;= 76 and device_mouse_x_to_gui(0) &lt;= 348
        and device_mouse_y_to_gui(0) &gt;= 72 and device_mouse_y_to_gui(0) &lt;= 168)
            {
                //Lilac
                if  device_mouse_x_to_gui(0) &gt;= 76 and device_mouse_x_to_gui(0) &lt;= 211
                and device_mouse_y_to_gui(0) &gt;= 72 and device_mouse_y_to_gui(0) &lt;= 113
                    scr_set_character_select(0);
                //Carol
                if  device_mouse_x_to_gui(0) &gt;= 213 and device_mouse_x_to_gui(0) &lt;= 348
                and device_mouse_y_to_gui(0) &gt;= 84 and device_mouse_y_to_gui(0) &lt;= 125
                    scr_set_character_select(1);
                //Milla
                if  device_mouse_x_to_gui(0) &gt;= 76 and device_mouse_x_to_gui(0) &lt;= 211
                and device_mouse_y_to_gui(0) &gt;= 115 and device_mouse_y_to_gui(0) &lt;= 156
                    scr_set_character_select(2);
                //Spade
                if  device_mouse_x_to_gui(0) &gt;= 213 and device_mouse_x_to_gui(0) &lt;= 348
                and device_mouse_y_to_gui(0) &gt;= 127 and device_mouse_y_to_gui(0) &lt;= 168
                    scr_set_character_select(3);
                input_b = 1
            }
        if input_c = 1
            {
                o.alt_skin += 1;
                if o.alt_skin &gt; 1
                    o.alt_skin = 0;
                audio_play_sound(pause_jingle,50,false)
            }
        //Go to Tutorial Stage
        if input_d = 1
            {
                scr_tutorial_maps_list()
                scr_set_carol();
                obj_game_logic.alt_skin = 1
                scr_set_carrie();
                transition_active = 1
                transition_tutorial = 1
                obj_game_logic.use_cuts_select = "TaishanTutorial.map"
                scr_stop_music()
                audio_play_sound(pause_exit,50,false)
            }
        //Go to Temple Hub (Night)
        if keyboard_check(vk_f1)
            {
                transition_active = 1
                transition_tutorial = 2 //1 = go to stage instead
                obj_game_logic.story_state = 1
                obj_game_logic.campaign_stage_section_limit = 0
                obj_game_logic.use_cuts_select = "cutscene_08.map"
            }
        //Go to Temple Hub (Day)
        if keyboard_check(vk_f5)
            {
                transition_active = 1
                transition_tutorial = 2
                obj_game_logic.story_state = 1
                obj_game_logic.campaign_stage_section_limit = 0
                obj_game_logic.use_cuts_select = "cutscene_14.map"
            }
        //Top-Row (Left/Right Navigation)
        if input_right = 1 and character_selection = 1 scr_set_character_select(0);
        if input_right = 1 and character_selection = 0 scr_set_character_select(1);
        if input_left = 1  and character_selection = 1 scr_set_character_select(0);
        if input_left = 1  and character_selection = 0 scr_set_character_select(1);
        //Bottom-Row (Left/Right Navigation)
        if input_right = 1 and character_selection = 3 scr_set_character_select(2);
        if input_right = 1 and character_selection = 2 scr_set_character_select(3);
        if input_left = 1  and character_selection = 2 scr_set_character_select(3);
        if input_left = 1  and character_selection = 3 scr_set_character_select(2);
        //Both Rows (Up Navigation)
        if input_up = 1 and character_selection = 0 scr_set_character_select(2);
        if input_up = 1 and character_selection = 1 scr_set_character_select(3);
        if input_up = 1 and character_selection = 2 scr_set_character_select(0);
        if input_up = 1 and character_selection = 3 scr_set_character_select(1);
        //Both Rows (Down Navigation)
        if input_down = 1 and character_selection = 0 scr_set_character_select(2);
        if input_down = 1 and character_selection = 1 scr_set_character_select(3);
        if input_down = 1 and character_selection = 2 scr_set_character_select(0);
        if input_down = 1 and character_selection = 3 scr_set_character_select(1);
        switch(character_selection)
            {
                case 0: {character_select_x = 76; character_select_y = 72; character_select_sprite = spr_ui_lilac_stats; frame[1] = 0; frame[2] = 0; frame[3] = 0; break;}
                case 1: {character_select_x = 213; character_select_y = 84; character_select_sprite = spr_ui_carol_stats; frame[0] = 0; frame[2] = 0; frame[3] = 0; break;}
                case 2: {character_select_x = 76; character_select_y = 115; character_select_sprite = spr_ui_milla_stats; frame[1] = 0; frame[0] = 0; frame[3] = 0; break;}
                case 3: {character_select_x = 213; character_select_y = 127; character_select_sprite = spr_ui_spade_stats; frame[0] = 0; frame[2] = 0; frame[1] = 0; break;}
            }
        //Return to Previous Menu
        if (input_a = 1 or mouse_check_button_pressed(mb_right)) and input_cooldown = 0
        and obj_transition.transition_active = 0
            {
                var trans_id = obj_transition;
                trans_id.transition_active = 1

                if trans_id.transition_mode = 0
                    trans_id.transition_index = obj_file_select;
                if trans_id.transition_mode = 1
                    trans_id.transition_index = obj_classic_file_select;
                if trans_id.transition_mode = 2
                    {
                        trans_id.transition_index = obj_campaign_mode_select;
                        trans_id.transition_active = 2
                    }
                trans_id.destroy_id = id

                audio_play_sound(pause_exit,50,false)
            }
        //Select Your Palette
        if input_b = 1 or input_start = 1
            {
                input_cooldown = 8
                character_select_confirm = 1
                if o.alt_skin = 0
                    {
                        switch(character_selection)
                            {
                                case 0: {scr_set_lilac(); audio_play_sound(lilac_yes,50,false); break;}
                                case 1: {scr_set_carol(); audio_play_sound(carol_sweet,50,false); break;}
                                case 2: {scr_set_milla(); audio_play_sound(milla_yay,50,false); break;}
                                case 3:
                                    {
                                        if obj_transition.transition_mode &gt; 0
                                            {
                                                scr_set_spade();
                                                audio_play_sound(spade_smart_move,50,false);
                                            }
                                        else
                                            {
                                                character_select_confirm = 0
                                                scr_set_message("Spade is not yet available for story mode!")
                                            }
                                        break;
                                    }
                            }
                        audio_play_sound(pause_jingle,50,false)
                    }
                if o.alt_skin = 1
                    {
                        switch(character_selection)
                            {
                                case 0: {scr_set_lilac(); audio_play_sound(lilac_yes,50,false); break;}
                                case 1: {scr_set_carrie(); character_select_sprite = spr_ui_carrie_stats; audio_play_sound(snd_carrie_lets_do_this,50,false); break;}
                                case 2: {scr_set_milla(); audio_play_sound(milla_yay,50,false); break;}
                                case 3:
                                    {
                                        if obj_transition.transition_mode &gt; 0
                                            {
                                                scr_set_spade();
                                                audio_play_sound(spade_smart_move,50,false);
                                            }
                                        else
                                            {
                                                character_select_confirm = 0
                                                scr_set_message("Spade is not yet available for story mode!")
                                            }
                                        break;
                                    }
                            }
                        if character_selection != 1
                            {
                                obj_transition.transition_active = 1
                                obj_transition.transition_index = obj_file_select
                                obj_transition.destroy_id = id
                                audio_play_sound(pause_exit,50,false)
                            }
                        else audio_play_sound(pause_jingle,50,false);
                    }
            }
        //Character Shaking
        if use_character_shake &gt; 0 use_character_shake -= 1;

        if input_left = 1 or input_right = 1 use_character_shake += 8;

        if o.user_camera_shake = 1
            {
                if use_character_shake &gt; 32
                    {
                        view_shake = 6
                        view_shake_mod= 1
                        character_frame_lilac = 5;
                        character_frame_carol = 4;
                        character_frame_milla = 6;
                        character_frame_spade = 6;
                    }

                if view_shake &gt;= 0
                    {
                        //Decrement camera shake length timer
                        view_shake-=1
                        //Increment camera shake iteration timer
                        view_shake_iterations += 1
                        //Lessen camera shake over time
                        if view_shake_mod &gt; 0.1 view_shake_mod -= 0.1;
                        //Reset camera shake iteration timer
                        if view_shake_iterations &gt; 3 view_shake_iterations = 0;
                        //Camera x shake
                        switch(view_shake_iterations)
                            {
                                case 0: {view_xview[view_port]+=view_shake_mod;  view_yview[view_port]+=view_shake_mod;  break;}
                                case 1: {view_xview[view_port]-=view_shake_mod;  view_yview[view_port]-=view_shake_mod;  break;}
                                case 2: {view_xview[view_port]-=view_shake_mod;  view_yview[view_port]-=view_shake_mod;  break;}
                                case 3: {view_xview[view_port]+=view_shake_mod;  view_yview[view_port]+=view_shake_mod;  break;}
                            }
                        //If the timer has ended, stop camera shake
                        if view_shake=0
                            {
                                view_shake_iterations =  0
                                view_shake            = -1
                                view_shake_mod        =  3
                                character_frame_lilac = 0;
                                character_frame_carol = 0;
                                character_frame_milla = 0;
                                character_frame_spade = 0;
                                view_xview[view_port] = 0
                                view_yview[view_port] = 0
                            }
                    }
            }
    }
if character_select_confirm = 1
    {
        if ((mouse_check_button_pressed(mb_left))
        and o.joy_mouse_button_switch = 1
        and not (device_mouse_x_to_gui(0) &gt;= 76 and device_mouse_x_to_gui(0) &lt;= 348
        and device_mouse_y_to_gui(0) &gt;= 72 and device_mouse_y_to_gui(0) &lt;= 230))
        or mouse_check_button_pressed(mb_right)
            {
                input_cooldown = 8
                character_select_frame = 0
                character_select_confirm = 0
                o.current_pal = 0
                o.current_ui_pal = 0
                palette_x = 0
                palette_y = 0
                palette_index = 0
                audio_play_sound(pause_select,50,false)
            }
        character_select_frame += 0.20
        character_select_box_frame += 0.5;
        if character_select_box_frame &gt; 33.8
            character_select_box_frame = 0;
        var character_select_palette = spr_ui_lilac_palette;
        switch(character_select_sprite)
            {
                case spr_ui_lilac_stats: {character_select_palette = spr_ui_lilac_palette; if character_select_frame &gt; 4.8 character_select_frame = 4.8; break;}
                case spr_ui_carol_stats: {character_select_palette = spr_ui_carol_palette; if character_select_frame &gt; 3.8 character_select_frame = 3.8; break;}
                case spr_ui_carrie_stats: {character_select_palette = spr_carrie_palette; if character_select_frame &gt; 3.8 character_select_frame = 3.8; break;}
                case spr_ui_milla_stats: {character_select_palette = spr_ui_milla_palette; if character_select_frame &gt; 5.8 character_select_frame = 5.8; break;}
                case spr_ui_spade_stats: {character_select_palette = spr_spade_palette;    if character_select_frame &gt; 5.8 character_select_frame = 5.8; break;}
            }
        //Cursor Navigation
        if input_left  = 1 {palette_x -= 1; audio_play_sound(pause_select,50,false);}
        if input_right = 1 {palette_x += 1; audio_play_sound(pause_select,50,false);}
        if input_up    = 1 {palette_y -= 1; audio_play_sound(pause_select,50,false);}
        if input_down  = 1 {palette_y += 1; audio_play_sound(pause_select,50,false);}
        //Mouse Cursor Navigation
        if mouse_check_button_pressed(mb_left)
            {
                var mouse_anchor_x = 149;
                var mouse_anchor_y = 181;
                palette_mouse_confirm += 1
                if device_mouse_x_to_gui(0) &gt;= 149 and device_mouse_x_to_gui(0) &lt;= 276
                    palette_x = floor(abs(mouse_x - mouse_anchor_x)/8);
                else
                    palette_x = 0;
                if device_mouse_y_to_gui(0) &gt;= 181 and device_mouse_y_to_gui(0) &lt;= 228
                    palette_y = floor(abs(mouse_y - mouse_anchor_y)/8);
                else
                    palette_y = 0;
                if palette_mouse_confirm &gt; 1
                    {
                        if palette_mouse_x = palette_x and palette_mouse_y = palette_y
                            input_b = 1;
                        else
                            {
                                palette_mouse_x = 0
                                palette_mouse_y = 0
                            }
                        palette_mouse_confirm = 0
                    }
                palette_mouse_x = palette_x
                palette_mouse_y = palette_y
            }
        //Bounds Checking
        if palette_x &lt; 0  palette_x = 15;
        if palette_x &gt; 15 palette_x = 0;
        if palette_y &lt; 0  palette_y = 5;
        if palette_y &gt; 5  palette_y = 0;
        //Applying Palettes
        palette_index = palette_x+(palette_y*16)
        //Bounds Checking
        if palette_index &lt; 0
            palette_index = 0;
        if palette_index &gt; sprite_get_width(character_select_palette)
            palette_index = sprite_get_width(character_select_palette);
        o.current_pal =    palette_index
        o.current_ui_pal = palette_index

        //Select Your Palette
        if input_a = 1 and input_cooldown = 0
            {
                input_cooldown = 8
                character_select_frame = 0
                character_select_confirm = 0
                o.current_pal = 0
                o.current_ui_pal = 0
                palette_x = 0
                palette_y = 0
                palette_index = 0
                audio_play_sound(pause_select,50,false)
            }

        if (input_b = 1 or input_start = 1) and input_cooldown = 0
        and obj_transition.transition_active = 0
            {
                obj_transition.transition_active = 1
                //Start a new save file or resume it for story/classic mode
                if obj_transition.transition_mode &lt; 2
                    {
                        //Story
                        if o.player_bosses[o.player_current] = 0
                            obj_transition.transition_new_file = 1;
                        //Classic
                        if obj_transition.transition_mode = 1
                            {
                                if o.player_bosses[o.player_current] = 0
                                    obj_transition.transition_new_file = 3;
                            }
                    }
                //Go to the stage select screen for time attack mode
                if obj_transition.transition_mode = 2
                    obj_transition.transition_index = obj_stage_select;
                obj_transition.destroy_id = id
                audio_play_sound(pause_exit,50,false)
            }
    }
frame[character_selection] += 0.25;
if frame[character_selection] &gt; 1
    frame[character_selection] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(o.stage_title_font)
draw_set_color(c_white)
draw_set_halign(fa_middle)
draw_text(213,16,lang_gui[o.user_language_mode,0])
draw_set_halign(fa_left)
if o.alt_skin = 0
    {
        draw_sprite(spr_ui_character_box,frame[0],76,72)
            draw_sprite(spr_ui_lilac_stats,character_frame_lilac,79,73)
        draw_sprite(spr_ui_character_box,frame[1],213,84)
            draw_sprite(spr_ui_carol_stats,character_frame_carol,216,85)
        draw_sprite(spr_ui_character_box,frame[2],76,115)
            draw_sprite(spr_ui_milla_stats,character_frame_milla,79,116)
        draw_sprite(spr_ui_character_box,frame[3],213,127)
        //Keep Spade Locked In Campaign Mode (For now)
        //draw_sprite(spr_ui_spade_stats,character_frame_spade,216,128)
        var spade_trans = 0.5;
        if obj_transition.transition_mode &gt; 0
            spade_trans = 1;
        draw_sprite_ext(spr_ui_spade_stats,character_frame_spade,216,128,1,1,0,c_white,spade_trans)
    }
if o.alt_skin = 1
    {
        draw_sprite(spr_ui_character_box,frame[0],76,72)
            draw_sprite(spr_ui_lilac_stats_old,character_frame_lilac,79,73)
        draw_sprite(spr_ui_character_box,frame[1],213,84)
            draw_sprite(spr_ui_carrie_stats,character_frame_carol,216,85)
        draw_sprite(spr_ui_character_box,frame[2],76,115)
            draw_sprite(spr_ui_milla_stats,character_frame_milla,79,116)
        draw_sprite(spr_ui_character_box,frame[3],213,127)
        //Keep Spade Locked In Campaign Mode (For now)
        //draw_sprite(spr_ui_spade_stats,character_frame_spade,216,128)
        var spade_trans = 0.5;
        if obj_transition.transition_mode &gt; 0
            spade_trans = 1;
        draw_sprite_ext(spr_ui_spade_stats,character_frame_spade,216,128,1,1,0,c_white,spade_trans)
    }
if palette_alpha &gt; 0 draw_sprite_ext(spr_water,0,0,0,426,240,0,c_white,palette_alpha);
draw_sprite_tiled(spr_ui_stage_list_prompts,0,0,0)
if character_select_confirm = 1
    {
        draw_sprite(spr_ui_character_box,frame[0],character_select_x,character_select_y)
        script_execute(o.pal_swap_script,o.ui_pal_sprite,o.current_ui_pal,false)
        draw_sprite(character_select_sprite,character_select_frame,character_select_x+3,character_select_y+1)
        shader_reset();

        palette_box_y = lerp(palette_box_y,169,0.1)
        palette_alpha = lerp(palette_alpha,0.4,0.05)
    }
else
    {
        palette_box_y = lerp(palette_box_y,432,0.1)
        palette_alpha = lerp(palette_alpha,0,0.1)
    }
//Force movelist display so we can draw the appropriate graphics for the menu's buttons
o.user_move_list_display = 1
if o.user_move_list_control_type = 0
    {
        draw_sprite(spr_keyboard_font,o.key_a,354,215)
        draw_sprite(spr_keyboard_font,o.key_b,282,215)
        if character_select_confirm = 0 draw_sprite(spr_keyboard_font,o.key_c,200,215);
        draw_sprite(spr_keyboard_font,o.key_d,8,215)
    }
else
    {
        draw_background(o.user_joystick_a,354,215)
        draw_background(o.user_joystick_b,282,215)
        if character_select_confirm = 0 draw_background(o.user_joystick_b,200,215);
        draw_background(o.user_joystick_d,8,215)
    }
draw_sprite(spr_ui_palette_box,o.user_language_mode,147,palette_box_y)
palette_anchor_y = palette_box_y+12
//Override expected palette selections if alt skins are picked
var character_selection_offset = character_selection;
if character_select_sprite = spr_ui_carrie_stats
    character_selection_offset = 4;
draw_sprite_ext(spr_ui_palette_menu,character_selection_offset,149,palette_anchor_y,8,8,0,c_white,1)
draw_sprite(spr_ui_palette_cursor,character_select_box_frame,palette_anchor_x+(palette_x*8),palette_anchor_y+(palette_y*8))
draw_set_font(o.text_font_academy)
draw_set_color(c_white)
draw_text(299,217,lang_gui[o.user_language_mode,3])
draw_text(25,217,lang_gui[o.user_language_mode,1])
if character_select_confirm = 0
    {
        draw_text(217,217,lang_gui[o.user_language_mode,2])
        draw_text(371,217,lang_gui[o.user_language_mode,5])
    }
if character_select_confirm = 1 draw_text(371,217,lang_gui[o.user_language_mode,4]);
//Draw Skewed Slice Transitions
if transition_active = 1
    {
        //Slide the skewed slice across the screen
        transition_position += 23.67;
        //Warp to the new screen
        if transition_position &gt;= 530.33
            {
                if transition_tutorial = 0
                    room_goto(rm_title_screen);
                if transition_tutorial = 1
                    room_goto(rm_campaign);
                if transition_tutorial = 2
                    room_goto(rm_cutscene);
            }
        draw_sprite(spr_transition_skewed,0,view_xview[view_port]+transition_position,view_yview[view_port]);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
