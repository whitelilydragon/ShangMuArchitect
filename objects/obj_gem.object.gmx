<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_gem</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-7</depth>
  <persistent>0</persistent>
  <parentName>obj_delete_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics and Animation Variables

//Tile Surface Sensors
tile_surface_id = 0         //Floor Surface Collision Sensor
tile_surface_lf = 0         //Left Surface Collision Sensor
tile_surface_rt = 0         //Right Surface Collision Sensor
tile_item_id    = 0         //Item Tile Sensor
item_asset_id   = 0         //Item Tile Asset

//Gravity Variables
gravity_speed   = 0         //Gravity Speed
gravity_accel   = 0.2499    //Gravity Acceleration
gravity_cap     = 8         //Gravity Maximum Speed
gravity_fof     = 0         //Gravity FOF Activation
gravity_slope   = 0         //Gravity Deactivation For Slopes

//State Trigger Variables
is_collected    = 0         //Has the Player Taken the Item?
is_collected_r  = 32        //How Far Should We Check For The Player?
is_floating     = 1         //Were We Told to Float By Another Object?
is_sound        = 0         //Are We Playing A Sound?
is_speed        = 0         //Do We Have A Speed?
is_time         = 8         //Timer For Upwards Floating
is_collectable  = 0         //Are We Allowed To Be Attracted By Shields?
is_follow_speed = 6         //How Fast Are We Following The Player?
is_following    = 0         //Have We Gotten Close To The Player?

//Partical Variables
ispeed          = 1         //Direction of speed (Hearts Particles)
itimer          = 0         //Timer for changing directions (Hearts Particles)
y_offset        = 0         //Offset value (Gems Particle)
iterate_x       = 0         //Cycle Through X Positions in Rotation Map Data
iterate_y       = 0         //Cycle Through Y Positions in Rotation Map Data
iterate_gen     = 0         //General Iteration Timer
px              = x         //X Rotation Offset
py              = y         //Y Rotation Offset
destruction     = 0         //Are We A Self-Destructing Particle?
gem_visible     = 1         //Are We Visible?

//Sparkle Particle Variables 1
sparkle_frame_0   = 0       //Sparkle Animated Frame
sparkle_visible_0 = 0       //Sparkle Visibility
sparkle_x_0       = x       //Sparkle X Position
sparkle_y_0       = y       //Sparkle Y Position
//Sparkle Particle Variables 2
sparkle_frame_1   = 0       //Sparkle Animated Frame
sparkle_visible_1 = 0       //Sparkle Visibility
sparkle_x_1       = x       //Sparkle X Position
sparkle_y_1       = y       //Sparkle Y Position
//Sparkle Particle Variables 3 (Used Exclusively For Orb Particles)
sparkle_frame_2   = 0       //Sparkle Animated Frame
sparkle_visible_2 = 0       //Sparkle Visibility
sparkle_x_2       = x       //Sparkle X Position
sparkle_y_2       = y       //Sparkle Y Position

sheet_anim = 0
sheet_page = 0
sheet_speed = 0
sheet_anim_speed = 0.12
sheet_frame_pos_x = 1
sheet_frame_pos_y = 0
sheet_frame_width  = 11
sheet_frame_height = 21
sheet_frame_offset = 1 //1 pixel by default
sheet_row_offset   = 1 //1 pixel by default
sheet_orig_x = -6
sheet_orig_y = -20

//Are We Allowed To Hold Items?
give_item = 0
item = 0
attacked = 0

//Animation Variables
frame = 0                   //Current Frame
anim_frame = 5              //Maximum Number of Frames
anim_index = spr_gem_particle
anim_x = x                  //Sprite X of Collectable Particle
anim_y = y                  //Sprite Y of Collectable Particle
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if object_index = obj_gem instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics and Animations

//Pause Safety Check
if obj_game_logic.pause = 0

{

//Universal animation code can be found inside player object (HUD Management)

//If We Are Within Range Of The Player, Consider Ourselves Collected
if point_distance(x,y,obj_game_logic.universal_player_x,obj_game_logic.universal_player_y) &lt;= is_collected_r
and is_collectable &gt; 24
and obj_game_logic.anim_current!=obj_game_logic.anim_hurt and obj_game_logic.anim_current!=obj_game_logic.anim_death
and obj_game_logic.user_cursor_mode = 0 and is_collected = 0
    {
        is_collected = 1
        var value = 1;
        if (sprite_index = spr_red_gem or sprite_index = spr_lv5_gem) value = 5;
        if sprite_index = spr_petal_shard value = 0;
        audio_stop_sound(gem_sound)
        audio_play_sound(gem_sound,50,false)
        //Add Gems To Player
        obj_game_logic.gems -= value
        obj_game_logic.player_best_crystals_count += value
        obj_game_logic.player_gems[obj_game_logic.player_current] += value
        obj_game_logic.hud_gem_value += 1
        //Add Petals To Player (If Lv5 Red Gems)
        if sprite_index = spr_lv5_gem
            {
                //Give the player a health petal.
                if obj_game_logic.petals &lt; 0 petals = 0;
                if obj_game_logic.petals &lt; obj_game_logic.petalsmax obj_game_logic.petals += 0.25;
                //obj_game_logic.petals = ceil(obj_game_logic.petals)
                obj_game_logic.accident_forgiveness = 1
            }
        //Add Gems To Petal Counter
        if (obj_game_logic.shield_active = 1 and obj_game_logic.shield = spr_shield_wood)
            obj_game_logic.petals_count += 1;
        //Increase Stamina Gains and Our Gem Count While In Turbo Mode
        if obj_game_logic.user_turbo_mode = 1
            {
                obj_game_logic.gems -= value
                obj_game_logic.player_gems[obj_game_logic.player_current] += value
                obj_game_logic.stamina += 5
            }
        //Add Energy to the Stamina Bar
        if sprite_index != spr_gold_gem
            {
                if obj_game_logic.stamina &lt; 100
                    {
                        obj_game_logic.stamina += 5*value
                        obj_game_logic.milla_flutter_stamina_bar += 4.3333333333333333333333333333334
                        obj_game_logic.stamina_boosted = 0
                    }
            }
        if sprite_index = spr_gold_gem
            {
                obj_game_logic.stamina += 7.5
                obj_game_logic.milla_flutter_stamina_bar += 6.5000000000000000000000000000001
                obj_game_logic.stamina_boosted = 1
                //Cull Stamina Bar if Added Energy is Too Much
                if obj_game_logic.stamina &gt; 150 obj_game_logic.stamina = 150;
                if obj_game_logic.milla_flutter_stamina_bar &gt; 97.5 obj_game_logic.milla_flutter_stamina_bar = 97.5;
            }
        if sprite_index = spr_petal_shard
            {
                obj_game_logic.player_shards[obj_game_logic.player_current] += 1
            }
        //Stamina Bar Flash
        obj_game_logic.stamina_gem = 0
        obj_game_logic.stamina_gem_con = 1
        //Create Sparkle Particle
        sparkle_x_0       = x
        sparkle_y_0       = y
        sparkle_visible_0 = 1
        //Reset Gem Counter (And Spawn 1up Faerie) If It's Below 0
        scr_gem_reset_counter()
        //Alter Our Sprite To Be A Particle
        anim_index = spr_gem_particle;
        if sprite_index = spr_red_gem
            anim_index = spr_red_gem_particle;
        if (sprite_index = spr_gold_gem or sprite_index = spr_petal_shard
        or  sprite_index = spr_lv5_gem)
            anim_index = spr_gold_gem_particle;
    }

//Iterate is_collectable timer
is_collectable += 1

//  Flat Surface Collisions and Gravity  //
//---------------------------------------//

if is_floating = 0
    {
        //Floor Surface Collision Sensor
        tile_surface_id = tile_layer_find(surface_flats,x,y)
        
        //If we are colliding with a flat surface, stop gravity
        if tile_exists(tile_surface_id)
            {
                //Reset gravity speed
                gravity_speed=0
                //Reset horizontal speed
                is_speed=0
                if room != rm_editor
                    {
                        if sprite_index = spr_gem instance_change(obj_gem_float,true);
                        if sprite_index = spr_red_gem instance_change(obj_red_gem_float,true);
                        if sprite_index = spr_gold_gem instance_change(obj_gold_gem_float,true);
                        if sprite_index = spr_petal_shard instance_change(obj_petal_shard_float,true);
                    }
                else instance_destroy();
            }
        
        //Apply horizontal speed if we are not interacting with flat surfaces or slopes
        if (tile_surface_id=-1 and gravity_slope=0 and is_collected=0)
            x += is_speed
        
        //  Slope Surface Collisions  //
        //----------------------------//
        
        //Slope Surface Collision Sensor
        tile_ramp_id = tile_layer_find(surface_slopes,x,y)
        
        //If we are colliding with a slope tile, clip to its surface based on X position
        if (tile_exists(tile_ramp_id) and gravity_slope = 0)
            {
                //Collect Background ID of the Tile
                tile_ramp_asset=tile_get_background(tile_ramp_id)
            
                //Get Gem Coordinates Relative to the Tile's Origins
                tile_ramp_pos[0]=abs(tile_get_x(tile_ramp_id)-x)   //Get X
                tile_ramp_pos[1]=abs(tile_get_y(tile_ramp_id)-y)   //Get Y
            
                //Check If Gem Y is Greater Than Slope's Current Height
                if tile_ramp_pos[1] &gt;= obj_game_logic.orig_clip[tile_ramp_asset,tile_ramp_pos[0]]
                    {
                        //If Gem is Colliding with Slope, Disable Gravity
                        gravity_slope=1
                        gravity_speed=0
                        is_floating = 1
                        if room != rm_editor
                            {
                                if sprite_index = spr_gem instance_change(obj_gem_float,true);
                                if sprite_index = spr_red_gem instance_change(obj_red_gem_float,true);
                                if sprite_index = spr_gold_gem instance_change(obj_gold_gem_float,true);
                                if sprite_index = spr_petal_shard instance_change(obj_petal_shard_float,true);
                            }
                        else instance_destroy();
                    }
            }
        
        //       Basic Gravity System       //
        //----------------------------------//
        
        //If we are not at the speed cap, apply acceleration.
        if gravity_fof=0 and gravity_slope=0 and tile_surface_id=-1
            {
                gravity_speed+=gravity_accel

                if gravity_speed &gt; 4 gravity_speed = 4;

                //Apply Gravity Speed to Y Coordinates
                y+=gravity_speed
            }
        //Leap slightly upwards upon spawning.
        if is_time!=0 {gravity_speed=-2 is_time=0}

        if y &gt; obj_game_logic.water_height and depth = -7
            depth = -5;
    }

//Follow player based on their passive effect
if  (is_collected = 0 and obj_game_logic.user_cursor_mode = 0 and is_collectable &gt; 32)
and (point_distance(x,y,obj_game_logic.universal_player_x,obj_game_logic.universal_player_y) &lt; 128 and obj_game_logic.shield_active = 1)
and ((obj_game_logic.shield = spr_shield_earth) or (obj_game_logic.shield = spr_shield_rock and sprite_index = spr_gold_gem))
    is_following = 1;

if is_following = 1
    {
        move_towards_point(obj_game_logic.universal_player_x,obj_game_logic.universal_player_y,is_follow_speed)
        is_follow_speed += 0.25
        if obj_game_logic.user_cursor_mode = 1 event_perform(ev_other,ev_user0);
    }

//      Static Particle System      //
//----------------------------------//

//If we are a gem, produce a particle effect before disappearing
if (is_collected &gt;= 1)
    {
        //Reference Rotation Map Data
        if gem_visible = 1
            {
                //Iterate Through Data Points in the Rotation Map
                iterate_x+=3    //X Posit Iteration
                iterate_y+=3    //Y Posit Iteration
                iterate_gen += 3
                if iterate_x &gt;= 51
                    {
                        iterate_x = 0
                        iterate_y = 0
                    }
                anim_x = x + obj_game_logic.orig_rotate[spr_gem_particle+2000,iterate_x]
                anim_y = y - 19 + obj_game_logic.orig_rotate[spr_gem_particle+3000,iterate_y]
            }
        //Once We've Rotated For Long Enough, Create Second Sparkle Particle
        if iterate_gen &gt; 51+random_range(14,28)
            {
                //Create Sparkle Particle
                sparkle_x_1       = anim_x
                sparkle_y_1       = anim_y
                anim_x = -64
                anim_y = -64
                iterate_gen = 0
                sparkle_visible_1 = 1
                //Disable Visibility Of Main Sprite
                gem_visible = 0
            }
        //Iterate Sparkle Particle Sprite's Animations
        if sparkle_visible_0 = 1 sparkle_frame_0 += 0.32;
        if sparkle_visible_1 = 1 sparkle_frame_1 += 0.32;
        //Toggle Visibility of First Particle Off After Animations Completes
        if sparkle_frame_0 &gt;= 7.9 sparkle_visible_0 = 0;

        //Destroy Self
        if sparkle_frame_1 &gt;= 7.9
            {
                if room != rm_editor
                    {
                        sparkle_visible_1 = 0
                        instance_destroy();
                    }
                //Reset variables instead of destroying ourselves, if we are in editor mode
                else
                    {
                        event_perform(ev_other,ev_user0)
                    }
            }    
    } //End of Collected Safety Check
    
} //End of Pause Safety Check

else
    {
        //Freeze Movement Speed And Animations If We Are Paused
        move_towards_point(x,y,0)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//State Trigger Variables
is_collected    = 0         //Has the Player Taken the Item?
is_sound        = 0         //Are We Playing A Sound?
is_speed        = 0         //Do We Have A Speed?
is_time         = 8         //Timer For Upwards Floating
is_collectable  = 0         //Are We Allowed To Be Attracted By Shields?
is_follow_speed = 6         //How Fast Are We Following The Player?
is_following = 0

//Partical Variables
ispeed          = 1         //Direction of speed (Hearts Particles)
itimer          = 0         //Timer for changing directions (Hearts Particles)
y_offset        = 0         //Offset value (Gems Particle)
iterate_x       = 0         //Cycle Through X Positions in Rotation Map Data
iterate_y       = 0         //Cycle Through Y Positions in Rotation Map Data
iterate_gen     = 0         //General Iteration Timer
px              = sx        //X Rotation Offset
py              = sy        //Y Rotation Offset
x               = sx
y               = sy
destruction     = 0         //Are We A Self-Destructing Particle?
gem_visible     = 1         //Are We Visible?

//Sparkle Particle Variables 1
sparkle_frame_0   = 0       //Sparkle Animated Frame
sparkle_visible_0 = 0       //Sparkle Visibility
sparkle_x_0       = sx      //Sparkle X Position
sparkle_y_0       = sy      //Sparkle Y Position
//Sparkle Particle Variables 2
sparkle_frame_1   = 0       //Sparkle Animated Frame
sparkle_visible_1 = 0       //Sparkle Visibility
sparkle_x_1       = sx      //Sparkle X Position
sparkle_y_1       = sy      //Sparkle Y Position
//Sparkle Particle Variables 3 (Used Exclusively For Orb Particles)
sparkle_frame_2   = 0       //Sparkle Animated Frame
sparkle_visible_2 = 0       //Sparkle Visibility
sparkle_x_2       = sx      //Sparkle X Position
sparkle_y_2       = sy      //Sparkle Y Position
speed = 0

//Animation Variables
frame = 0                   //Current Frame
anim_frame = 5              //Maximum Number of Frames
anim_index = spr_gem_particle
anim_x = x                  //Sprite X of Collectable Particle
anim_y = y                  //Sprite Y of Collectable Particle

//Reset Our Sprite
sprite_index = spr_gem;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Main Sprite
if is_collected &gt;= 1 draw_sprite(anim_index,0,anim_x,anim_y);
else draw_sprite_part(sprite_index,1,sheet_frame_pos_x,sheet_frame_pos_y,
     sheet_frame_width,sheet_frame_height,x+sheet_orig_x,y+sheet_orig_y);
//draw_sprite(sprite_index,obj_game_logic.crystal_gem_frame,x,y);

//Sparkle Particle Drawing 1
if sparkle_visible_0 = 1 draw_sprite(spr_sparkle,sparkle_frame_0,sparkle_x_0,sparkle_y_0);
//Sparkle Particle Drawing 2
if sparkle_visible_1 = 1 draw_sprite(spr_sparkle,sparkle_frame_1,sparkle_x_1,sparkle_y_1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
