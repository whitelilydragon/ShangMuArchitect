<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_boss_runaway_bouncer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-9</depth>
  <persistent>0</persistent>
  <parentName>obj_bouncer</parentName>
  <maskName>spr_bouncer_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup Variables
event_inherited()

if instance_exists(parry_box)
    instance_destroy(parry_box);

start_x = x
start_y = y
cutscene_command = 0
cutscene_direction = -1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Blank Code Block to Prevent Premature Stage Completion
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var death_offset = 0;
if death &gt; 0 and death_type = 1 death_offset = -16;
var floor_center = tile_layer_find(surface_flats,x,y+death_offset+floor_offset);
var water_ID = collision_point(x,y+floor_offset,obj_smart_pools,false,true);
        
//----------------------------------//
//       Basic Gravity System       //
//----------------------------------//

if (y &gt; o.water_height or instance_exists(water_ID)) gravity_cap = 2;
else gravity_cap = gravity_max;

if tile_exists(floor_center)
    {
        if death = 0
            y = tile_get_y(floor_center)-floor_offset;
        ground = 1
        gravity_speed = 0
    }
else
    ground = 0;

//Sloped Floor Collisions
var tile_ramp_id = tile_layer_find(surface_slopes,x,y+death_offset+floor_offset);

//If we are colliding with a slope tile, clip to its surface based on X position
if tile_exists(tile_ramp_id)
    {
        //Collect Background ID of the Tile
        var tile_ramp_asset = o.enemy_slopes[tile_get_background(tile_ramp_id)];

        //Get Gem Coordinates Relative to the Tile's Origins
        var tile_ramp_pos_0=abs(tile_get_x(tile_ramp_id)-x)                //Get X
        var tile_ramp_pos_1=abs(tile_get_y(tile_ramp_id)-y-floor_offset)   //Get Y

        tile_angle = 0;

        //If tile was not flagged as "ignore", read its collision data
        if background_exists(tile_ramp_asset)
            {
                //Check If Gem Y is Greater Than Slope's Current Height
                if tile_ramp_pos_1 &gt;= o.orig_clip[tile_ramp_asset,tile_ramp_pos_0]
                    gravity_slope=1;
                if o.orig_clip[tile_ramp_asset,tile_ramp_pos_0] = -1
                    gravity_slope = 0;
            
                //Clip
                if gravity_slope = 1 and death = 0
                    {
                        y = floor(tile_get_y(tile_ramp_id))+o.orig_clip[tile_ramp_asset,tile_ramp_pos_0]-floor_offset
                        tile_angle = o.orig_clip[tile_ramp_asset+o.scr_local_angles,tile_ramp_pos_0]
                        gravity_speed=0
                        if tile_angle &gt; 45 and tile_angle &lt; 180 xdir = -1;
                        if tile_angle &gt; 225 and tile_angle &lt; 315 xdir = 1;
                    }
            }
    }
else
    {
        gravity_slope = 0;
        tile_angle = 0;
    }

if captured = 1
    gravity_speed = 0;

//Apply Gravity Speed to Y Coordinates
if gravity_slope = 0 and ground = 0
    {
        //If we are not at the speed cap, apply acceleration.
        if gravity_speed&lt;gravity_cap
            gravity_speed+=gravity_accel;
        
        if gravity_speed &gt; gravity_cap
            gravity_speed = gravity_cap;

        y+=gravity_speed;

        if y &gt; room_height
            heart = -1;
    }

if o.pause = 0
    {
        image_angle = body_angle+angle_offset
        //Animate Lantern Segments
        if target_frame &gt; 0
            {
                target_frame += 0.15
                if target_frame &gt; 4.8
                    target_frame = 0;
            }
        if target_timer &gt; 0
            {
                target_timer -= 1
                switch(target_timer)
                    {
                        case 0: {target_lerp = 0; break;}
                        case 1: {target_lerp = 0; break;}
                        case 15: {target_lerp = -target_speed; break;}
                        case 30: {target_lerp = target_speed; break;}
                    }
            }
        target_offset = lerp(target_offset,target_lerp,0.25)
        //Turn Around
        if turn = 1
            {
                if xdir = -1
                    {
                        body_angle = 180
                        lantern_angle = 69.5
                        leg_attach_point_0 = 47.3
                        leg_attach_point_1 = 52.4
                        lantern_mount_angle[0] = -0
                        lantern_mount_angle[1] = -10.62
                        lantern_mount_angle[2] = -7.13
                        lantern_mount_angle[3] = -1.19
                        lantern_mount_angle[4] = 4.54
                        lantern_mount_angle[5] = 11.02
                        lantern_mount_angle[6] = 16.7
                        lantern_mount_angle[7] = 24
                        mask_index = spr_bouncer_mask_left
                    }
                if xdir = 1
                    {
                        body_angle = 0
                        lantern_angle = 0
                        leg_attach_point_0 = 52.4
                        leg_attach_point_1 = 47.3
                        lantern_mount_angle[0] = 0
                        lantern_mount_angle[1] = 10.62
                        lantern_mount_angle[2] = 7.13
                        lantern_mount_angle[3] = 1.19
                        lantern_mount_angle[4] = -4.54
                        lantern_mount_angle[5] = -11.02
                        lantern_mount_angle[6] = -16.7
                        lantern_mount_angle[7] = -24
                        mask_index = spr_bouncer_mask
                    }
                turn = 0
                target_offset = 0
            }

        //Movement System
        switch(phase)
            {
                //Idle Phase
                case 0:
                    {
                        //Run if the player sees us
                        if  (obj_game_logic.px &gt; x-200
                        and obj_game_logic.px &lt; x+200
                        and obj_game_logic.py &gt; y-200
                        and obj_game_logic.py &lt; y+16
                        or attacked = 1)
                        and obj_game_logic.user_cursor_mode = 0
                            {
                                cutscene_command = 1;
                                cutscene_direction = 1;
                                if obj_game_logic.px &gt; x
                                    cutscene_direction = -1;
                            }
                        timer += 1
                        body_timer+= 1
                        switch(body_timer)
                            {
                                case 0:  {body_target = 0;  body_wiggle = 4; break;}
                                case 15: {body_target = -8; body_wiggle = 0; break;}
                                case 30: {body_target = 0;  body_wiggle = 8; break;}
                                case 45: {body_target = 32; body_wiggle = 4; break;}
                                case 60: {body_target = 16; body_wiggle = 0; body_timer = 0; break;}
                            }
                        if (ground = 1 or gravity_slope = 1)
                            {
                                body_x = lerp(body_x,x+body_target,0.1)
                                body_y = lerp(body_y,y-82-body_wiggle,0.1)
                                foot_angle = tile_angle
                                ground_timer += 1
                                if tile_angle &gt; 45 and tile_angle &lt; 180
                                or tile_angle &gt; 225 and tile_angle &lt; 315
                                    turn = 1;
                            }
                        else
                            {
                                body_x = lerp(body_x,x+8,0.1)
                                body_y = lerp(body_y,y-72,0.1)
                                foot_angle = body_angle
                                ground_timer = 0
                            }
                        if timer = 8
                            {
                                xdir = cutscene_direction
                                turn = 1
                            }
                        //Shake the ground when landing
                        if ground_timer = 1
                            {
                                target_timer = 31
                                target_speed = 8

                                //Mega Items
                                var instance_ID = collision_circle(x,y,32,obj_mega_item_parent,false,true);
                                if instance_exists(instance_ID)
                                    {
                                        if instance_ID.object_index = obj_cutscene_05_car
                                            {
                                                var bomb_ID = instance_create(instance_ID.x,instance_ID.y,obj_mega_bomb);
                                                bomb_ID.cube_health = -800;
                                                if instance_exists(obj_cutscene_05)
                                                    {
                                                        obj_cutscene_05.view_shake = 12
                                                        obj_cutscene_05.view_shake_mod = 6
                                                    }
                                                instance_destroy(instance_ID)
                                            }
                                    }
                                //Items
                                var instance_ID = collision_circle(x,y,32,obj_destructible,false,true);
                                if instance_exists(instance_ID)
                                    {
                                        instance_ID.attacked = 1
                                    }
                                //Attack other enemies within range of the boxing glove
                                instance_ID = collision_circle(x,y,32,obj_enemy_parent,false,true);
                                if instance_exists(instance_ID)
                                    {
                                        if instance_ID.attacked = 0 and instance_ID.alpha = 0
                                            {
                                                instance_ID.attacked = 1
                                                instance_ID.attacked_damage = 2
                                            }
                                    }
                                audio_play_sound(snd_heavy_drop,50,false);
                                scr_set_screen_shake(24,3)
                            }
                        //Rotation lag
                        if xdir = -1
                            {
                                if body_angle &lt; 180 body_angle += 4;
                                if body_angle &gt; 180 body_angle -= 4;
                            }
                        if xdir = 1
                            {
                                if body_angle &lt; 0 body_angle += 4;
                                if body_angle &gt; 0 body_angle -= 4;
                            }
                        //Assess which direction to attack the player
                        if cutscene_command = 1
                        and obj_game_logic.user_cursor_mode = 0
                            {
                                phase = 2
                                timer = 0
                                turn = 1
                                xdir = cutscene_direction
                                turn = 1
                                cutscene_command = 0
                            }
                        break;
                    }
                //Fowards Leaping Phase
                case 2:
                    {
                        if obj_game_logic.user_cursor_mode = 1
                        and room = rm_editor
                            {
                                phase = 0
                                timer = 0
                                x = start_x
                                y = start_y
                            }
                        timer += 1
                        if timer = 1
                            {
                                jump_speed = 0
                                jump_target = 10
                                ground_timer = 0
                            }
                        if timer &gt;= 0 and timer &lt; 15
                            {
                                body_y += 5
                                body_angle += 2*-xdir
                            }
                        if timer &gt;= 15 and timer &lt; 45
                            {
                                if (timer = 15)
                                    {
                                        scr_set_screen_shake(12,3)
                                        audio_play_sound(snd_bouncy_cube,50,false);
                                    }
                                if (timer = 20 or timer = 25 or timer = 30)
                                    audio_play_sound(snd_heavy_skidding,50,false);
                                jump_speed = lerp(jump_speed,jump_target,1)

                                if timer &gt;= 20
                                    {
                                        y -= 8;
                                        gravity_slope = 0
                                    }
                                if x &lt; o.camera_boundary_left     x = o.camera_boundary_left + 32;
                                if x &gt; o.camera_boundary_right-32 x = o.camera_boundary_right - 32;
                                var forward_speed = jump_speed;
                                x += 12*xdir
                                body_x = x+8
                                body_y -= jump_speed

                                body_angle += 2*xdir
                                //Bouncer Doors
                                var instance_ID = collision_point(x,y,obj_bouncer_door,false,true);
                                if instance_exists(instance_ID)
                                    {
                                        if x &gt; instance_ID.x
                                            {
                                                var bomb_ID = instance_create(instance_ID.x,instance_ID.y,obj_mega_bomb);
                                                bomb_ID.cube_health = -800
                                                bomb_ID.broken_particles_0 = spr_brick_broken_0
                                                bomb_ID.broken_particles_1 = spr_brick_broken_1
                                                bomb_ID.broken_particles_2 = spr_brick_broken_0
                                                bomb_ID.broken_particles_3 = spr_brick_broken_1
                                                bomb_ID.broken_particles_4 = spr_brick_broken_0
                                                var bomb_ID = instance_create(instance_ID.x-64,instance_ID.y-64,obj_mega_bomb);
                                                bomb_ID.cube_health = -800
                                                bomb_ID.broken_particles_0 = spr_brick_broken_0
                                                bomb_ID.broken_particles_1 = spr_brick_broken_1
                                                bomb_ID.broken_particles_2 = spr_brick_broken_0
                                                bomb_ID.broken_particles_3 = spr_brick_broken_1
                                                bomb_ID.broken_particles_4 = spr_brick_broken_0
                                                var bomb_ID = instance_create(instance_ID.x+48,instance_ID.y-32,obj_mega_bomb);
                                                bomb_ID.cube_health = -800
                                                bomb_ID.broken_particles_0 = spr_brick_broken_0
                                                bomb_ID.broken_particles_1 = spr_brick_broken_1
                                                bomb_ID.broken_particles_2 = spr_brick_broken_0
                                                bomb_ID.broken_particles_3 = spr_brick_broken_1
                                                bomb_ID.broken_particles_4 = spr_brick_broken_0
                                                instance_ID.image_index = 1
                                                instance_destroy()
                                            }
                                    }
                            }
                        if timer = 45
                            {
                                if room = rm_editor
                                    {
                                        timer = 0
                                        phase = 0
                                        instance_create(start_x,start_y,obj_bouncer_flee)
                                        instance_destroy()
                                    }
                                else
                                    {
                                        timer = 0
                                        phase = 0
                                        instance_destroy()
                                    }
                            }
                        break;
                    }
            }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Dummy out this HUD element because cutscenes won't need it
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if room = rm_editor
    {
        if (obj_level_editor.use_debug_hud_mode = 1 and obj_game_logic.user_cursor_mode = 0)
        or (obj_game_logic.user_cursor_mode = 1)
            draw_sprite(spr_boss_runaway_bouncer,0,start_x,start_y);
    }
else
    {
        if (obj_game_logic.debug_hud_mode &gt; 0)
            draw_sprite(spr_boss_runaway_bouncer,0,start_x,start_y);
    }
event_inherited()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
