<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ghetto_blaster</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy_explode</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics and Animation Variables
event_inherited()
scr_enemy_hp(25)
timer = 0                           //Enemy State Timer
legframe = 0
legoffset = 0
legdir = 1
xdir = 1                            //Walking Direction
ydir = 1                            //Facing Direction
zdir = 1                            //Blast Direction
whatdir = 1
turn  = 0                           //Sprite Turning
offset = 0                          //Sprite Offset Y
offset_dir = 0.24                   //Sprite Offset Direction
xdir_previous = 0                   //Previous Facing Direction
tile_scanner_timer = 0
dropped_goodies = obj_petal
//Bullet
bullet_x = 0
bullet_y = 0
bullet_timer = 0
bullet_frame = 0
bullet_speed = 0
bullet_active = 0
bullet_slide = 0
bullet_slide_timer = 0
bullet_cooldown = 0
blast_timer = 0
blast_x[0] = -10000
blast_y[0] = y
blast_scale[0] = 0.5
blast_x[1] = -10000
blast_y[1] = y
blast_scale[1] = 0.5
blast_x[2] = -10000
blast_y[2] = y
blast_scale[2] = 0.5
blast_x[3] = -10000
blast_y[3] = y
blast_scale[3] = 0.5
blast_x[4] = -10000
blast_y[4] = y
blast_scale[4] = 0.5
//Editor Mode Variables
start_x = x
start_y = y
width_x = sprite_width/2
height_y = sprite_height/2
flash_palette = spr_ghetto_blaster_palette
death_particles = spr_gettho_blaster_death_particles
death_frame_start = 8
death_frame_end = 8
death_type = 3
can_draw_sprite = 0
hp_offset = -78
item_offset = 88
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Logic and Animations
event_inherited()
if o.pause = 0 and freeze = 0
    {
        if captured = 1 and object_index = obj_ghetto_blaster and state &lt; 2
            instance_change(obj_ghetto_blaster_child,true);

        if death = 0
            {
                if obj_game_logic.px &gt;  x ydir =  1;
                if obj_game_logic.px &lt;= x ydir = -1;
            }

        //Sideways Collisions
        tile_scanner_timer += 1
        if tile_scanner_timer &gt;= 5
            {
                if xdir=1
                    {
                        if tile_layer_find(surface_flats,x+36,y-18) xdir=-1;
                    }
                else
                    {
                        if tile_layer_find(surface_flats,x-36,y-18) xdir=1;
                    }
                //Directional Switching Tiles
                var tile_flag = tile_layer_find(surface_flags,x,y-18);
                var turn_on_tile = 0;
                if tile_exists(tile_flag)
                    {
                        var tile_flag_bg = tile_get_background(tile_flag);
                        if tile_flag_bg = tile_layer_changer
                            {
                                if xdir = 1  and turn_on_tile = 0 {xdir = -1; x -= 4; turn_on_tile = 1;}
                                if xdir = -1 and turn_on_tile = 0 {xdir =  1; x += 4; turn_on_tile = 1;}
                            }
                    }
                tile_scanner_timer = 0
            }

        //Floor Collisions
        var floor_left   = tile_layer_find(surface_flats,x-36,y+2)
        var floor_right  = tile_layer_find(surface_flats,x+36,y+2)
        var floor_center = tile_layer_find(surface_flats,x,y+2)

        //---Turning System---//

        //Turn Around If There Are No Floors Ahead
        if gravity_slope = 0
            {
                if tile_exists(floor_left) and tile_exists(floor_center) and !tile_exists(floor_right) xdir=-1;
                if !tile_exists(floor_left) and tile_exists(floor_center) and tile_exists(floor_right) xdir=1;
            }
        
        //Clip To Slope
        if gravity_slope = 1
            {
                //Edge Detection For Slopes
                var tile_check_id = tile_layer_find(surface_slopes,x+(16*xdir),y);
                var tile_already_turned = 0;
                if (!tile_exists(tile_check_id) and xdir = 1 and tile_already_turned = 0 and !tile_exists(floor_right)) {xdir = -1; tile_already_turned = 1;}
                if (!tile_exists(tile_check_id) and xdir = -1 and tile_already_turned = 0 and !tile_exists(floor_left)) {xdir = 1; tile_already_turned = 1;}
            }

        //Animation Loops
        switch(state)
            {
                //Idle
                case 0:
                    {
                        //Iterate Animations
                        timer += 1
                        var var_speed = 1.25;
                        if item = spr_mod_chip_speed
                            {
                                timer += 1;
                                var_speed = 2.5;
                            }
                        frame += 0.32
                        if frame &gt; 7.8
                            {
                                frame = 0;
                                if timer &gt; 156
                                    {
                                        state = 1
                                        frame = 9
                                        if ydir = 1  zdir = 0;
                                        if ydir = -1 zdir = 1;
                                        whatdir = ydir
                                        if o.user_cursor_mode = 0
                                            {
                                                blast_timer = 1;
                                                if play_sound = 1
                                                    {
                                                        audio_play_sound(snd_enemy_ghetto_blaster,50,false)
                                                        scr_set_screen_shake(24,3)
                                                    }
                                            }
                                    }
                            }
                        //Enemy Movement
                        if frame &lt; 4 and scale = 1 x += var_speed*xdir;
                        break;
                    }
                //Attacking
                case 1:
                    {
                        frame += 0.32
                        if frame &gt; 13.8
                            {
                                frame = 0
                                state = 0
                                timer = 0
                            }
                        break;
                    }
            }
       //Wave Blast Particles
       if blast_timer &gt;= 1
        {
            var var_scale = 1;
            if item = spr_mod_chip_extra_large
                var_scale = 2;
            blast_timer += 1
            //Spawn Blast Particles
            switch(blast_timer)
                {
                    case 2:  {blast_x[0] = x; blast_y[0] = y-(32*var_scale); blast_scale[0] = 0.5*var_scale; break;}
                    case 5:  {blast_x[1] = x; blast_y[1] = y-(32*var_scale); blast_scale[1] = 0.5*var_scale; break;}
                    case 8:  {blast_x[2] = x; blast_y[2] = y-(32*var_scale); blast_scale[2] = 0.5*var_scale; break;}
                    case 11: {blast_x[3] = x; blast_y[3] = y-(32*var_scale); blast_scale[3] = 0.5*var_scale; break;}
                    case 14: {blast_x[4] = x; blast_y[4] = y-(32*var_scale); blast_scale[4] = 0.5*var_scale; break;}
                    case 20: {blast_x[0] = -10000; blast_y[0] = y-(32*var_scale); break;}
                    case 23: {blast_x[1] = -10000; blast_y[1] = y-(32*var_scale); break;}
                    case 26: {blast_x[2] = -10000; blast_y[2] = y-(32*var_scale); break;}
                    case 27: {blast_x[3] = -10000; blast_y[3] = y-(32*var_scale); break;}
                    case 29: {blast_x[4] = -10000; blast_y[4] = y-(32*var_scale); blast_timer = 0; break;}
                }
            //Position Blast Particles
            var blast_counter = 0;
            while(blast_counter &lt;= 4)
                {
                    if blast_x[blast_counter] != 10000
                        {
                            blast_x[blast_counter] += 5*whatdir
                            blast_y[blast_counter] -= 4
                            if blast_scale[blast_counter] &lt; 1 blast_scale[blast_counter] += 0.025;
                        }
                    blast_counter += 1
                }
            //Search for damage
            var hitbox_x1 = x+24;
            var hitbox_x2 = x+148;
            if ydir = -1
                {
                    hitbox_x1 = x-148
                    hitbox_x2 = x-24
                }
            var hitbox_bottom = 0;
            if +obj_game_logic.player_hitbox_radius = 32 hitbox_bottom = 20;
            if point_in_rectangle(obj_game_logic.universal_player_x,obj_game_logic.universal_player_y,hitbox_x1,y-178,hitbox_x2,y-24-hitbox_bottom)
            and obj_game_logic.hurt[0] = 0 and obj_game_logic.shield_invuln = 32
            and not (obj_game_logic.shield_active = 1 and obj_game_logic.shield=spr_shield_fire_front)
                scr_enemy_deal_damage(0.4,1,2);
            if tile_scanner_timer &gt; 3
                {
                    //Bomb Cube
                    var instance_ID = collision_circle(hitbox_x2,y-24,64,obj_player_cube_alt,false,true);
                    if instance_exists(instance_ID)
                        {
                            if instance_ID.cube_jiggle_timer = 0
                                {
                                    instance_ID.cube_jiggle_timer = 10
                                    instance_ID.cube_health += 0.75
                                }
                        }
                    if obj_game_logic.user_enemy_level &lt; 2
                        {
                            //Mega Items
                            var instance_ID = collision_circle(hitbox_x2,y-24,64,obj_mega_item_parent,false,true);
                            if instance_exists(instance_ID)
                                {
                                    instance_ID.attacked = 2
                                }
                            if room != rm_editor
                                {
                                    var crate_ID = collision_rectangle(hitbox_x1,y-178,hitbox_x2,y-24-hitbox_bottom,obj_destructible,false,true);
                                    if instance_exists(crate_ID)
                                        {
                                            crate_ID.attacked = 1
                                        }
                                }
                            //Attack other enemies within range of the boxing glove
                            instance_ID = collision_rectangle(hitbox_x1,y-178,hitbox_x2,y-24-hitbox_bottom,obj_enemy_parent,false,true);
                            if instance_exists(instance_ID)
                                {
                                    if instance_ID.attacked = 0 and instance_ID.alpha = 0
                                        {
                                            instance_ID.attacked = 1
                                            instance_ID.attacked_damage = 2
                                        }
                                }
                        }
                }
        }
    } //End of pause check
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Sprite
event_inherited()
if death = 0
    {
        var pal_alpha = 0;
        if alpha &gt; 0.5 pal_alpha = 1;
        script_execute(o.pal_swap_script,flash_palette,pal_alpha,false)
        draw_sprite_ext(sprite_index,frame,x,y,ydir*(scale+spring_jiggle+enemy_growth),scale+enemy_growth-(spring_jiggle/3),0,c_white,1)
        shader_reset();
        if alpha &gt; 0.5 and o.pal_swap_script = pal_swap_dummy
            {
                d3d_set_fog(true, c_yellow, 0, 0)
                draw_sprite_ext(sprite_index,frame,x,y,ydir*(scale+spring_jiggle+enemy_growth),scale+enemy_growth-(spring_jiggle/3),0,c_white,0.65)
                d3d_set_fog(false, 0, 0, 0)
            }
        //Draw Bomb Chip Flash
        if mod_bomb_flash &gt; 0.5
            {
                draw_set_blend_mode(bm_add)
                draw_sprite_ext(sprite_index,frame,x,y,ydir*(scale+spring_jiggle+enemy_growth),scale+enemy_growth-(spring_jiggle/3),0,c_red,1)
                draw_set_blend_mode(bm_normal)
            }
        if gravity_speed = 0 and obj_game_logic.use_weather_conditions &gt; 0 and y &lt; obj_game_logic.water_height
            {
                //Splatter Animations
                weather_rain_particles_frame += o.use_weather_conditions*0.20
                if weather_rain_particles_frame &gt; 3.8
                    weather_rain_particles_frame = 0;
                draw_sprite_ext(spr_rain_particles,weather_rain_particles_frame,x,y+y_offset,1,1,0,c_white,1)
            }
        if room = rm_editor
            {
                var parent = obj_level_editor;
                if (point_in_rectangle(parent.use_cursor_x,parent.use_cursor_y,x-38,y-64,x+38,y)
                    and parent.user_cursor_mode = 0 and parent.use_tile_menu = 0 and parent.side_bar_allow = 0)
                or (scale &gt; 1)
                    {
                        draw_set_blend_mode(bm_add)
                        draw_sprite_ext(sprite_index,frame,x,y,ydir*scale,scale,0,c_yellow,user_tile_boundary_alpha)
                        draw_set_blend_mode(bm_normal)
                    }
            }
        //Draw Blast Particles
        draw_sprite_ext(spr_gettho_blaster_blast,zdir,blast_x[0],blast_y[0],blast_scale[0],blast_scale[0],0,c_white,1)
        draw_sprite_ext(spr_gettho_blaster_blast,zdir,blast_x[1],blast_y[1],blast_scale[1],blast_scale[1],0,c_white,1)
        draw_sprite_ext(spr_gettho_blaster_blast,zdir,blast_x[2],blast_y[2],blast_scale[2],blast_scale[2],0,c_white,1)
        draw_sprite_ext(spr_gettho_blaster_blast,zdir,blast_x[3],blast_y[3],blast_scale[3],blast_scale[3],0,c_white,1)
        draw_sprite_ext(spr_gettho_blaster_blast,zdir,blast_x[4],blast_y[4],blast_scale[4],blast_scale[4],0,c_white,1)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
