<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_platform_modifier_circular</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>obj_delete_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create New Tiles

//Platform Tiles
tile_id_1 = tile_add(mu_fof_3,0,0,64,40,x,y,surface_slopes)
tile_id_2 = tile_add(mu_fof_3,0,0,64,40,x,y,surface_slopes)
tile_id_3 = tile_add(mu_fof_3,0,0,64,40,x,y,surface_slopes)
tile_id_4 = tile_add(mu_fof_3,0,0,64,40,x,y,surface_slopes)

tile_set_visible(tile_id_1,false)
tile_set_visible(tile_id_2,false)
tile_set_visible(tile_id_3,false)
tile_set_visible(tile_id_4,false)

DNA_Cannon_ID_1 = noone
enemy_capture_1 = 0
enemy_capture_offset_1 = 0
DNA_Cannon_ID_2 = noone
enemy_capture_2 = 0
enemy_capture_offset_2 = 0
DNA_Cannon_ID_3 = noone
enemy_capture_3 = 0
enemy_capture_offset_3 = 0
DNA_Cannon_ID_4 = noone
enemy_capture_4 = 0
enemy_capture_offset_4 = 0

//Platform Tiles' IDs
//Make them all the same as the first platform's ID, so they can steal the tile collision data
//from it, instead of wasting RAM on multiple copies of the same tile collision data &gt;:^P
tile_index_1 = mu_fof_3
tile_index_2 = mu_fof_3
tile_index_3 = mu_fof_3
tile_index_4 = mu_fof_3

tile_index = mu_fof_3
tile_link = mu_fof_7
tile_base = mu_fof_8
tile_validate_timer = 0
tile_validate_time = 8

//Set Platforms Positions
px_1 = x
py_1 = y
px_2 = x
py_2 = y
px_3 = x
py_3 = y
px_4 = x
py_4 = y

//Set Angle And FOF Offsets
angle=0
fof_fofset=0

//Relative FOF Tile Positions
tile_ramp_pos[0]=0
tile_ramp_pos[1]=0

//Are We Allowed To Hold Items?
give_item = 0
item = 0

//Check If We Are Overlapping With Other Rotating Platforms
/*var ID_check = collision_ellipse(x-256,y-256,x+256,y+256,obj_platform_cir,false,true)
//If So, Destroy Ourselves
if instance_exists(ID_check)
    {
        scr_set_message("Carasol Platform Is Overlapping With Another!")
        instance_destroy()
    }
var ID_check = collision_ellipse(x-256,y-256,x+256,y+256,obj_platform_half_cir,false,true)
//If So, Destroy Ourselves
if instance_exists(ID_check)
    {
        scr_set_message("Carasol Platform Is Overlapping With Pendulum!")
        instance_destroy()
    }*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Delete Tiles If We Were Destroyed In Editor Mode

//Platform Tiles
tile_delete(tile_id_1)
tile_delete(tile_id_2)
tile_delete(tile_id_3)
tile_delete(tile_id_4)

if DNA_Cannon_ID_1 != noone DNA_Cannon_ID_1.captured = 0;
if DNA_Cannon_ID_2 != noone DNA_Cannon_ID_2.captured = 0;
if DNA_Cannon_ID_3 != noone DNA_Cannon_ID_3.captured = 0;
if DNA_Cannon_ID_4 != noone DNA_Cannon_ID_4.captured = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Pause Safety Check
if obj_game_logic.pause = 0
    {
        //Iterate Rotation Angles
        angle -= 1
        //Reset Rotation Angles
        if angle &lt; -359 angle = 0;

        //Rotate Tiles
        px_1 = x+lengthdir_x(96,angle);
        py_1 = y+lengthdir_y(96,angle);
        px_2 = x+lengthdir_x(96,angle+90);
        py_2 = y+lengthdir_y(96,angle+90);
        px_3 = x+lengthdir_x(96,angle+180);
        py_3 = y+lengthdir_y(96,angle+180);
        px_4 = x+lengthdir_x(96,angle+270);
        py_4 = y+lengthdir_y(96,angle+270);
        //Set Tile Offsets
        px_1 -= 28
        px_2 -= 28
        px_3 -= 28
        px_4 -= 28
        py_1 -= 20
        py_2 -= 20
        py_3 -= 20
        py_4 -= 20

        //Update Tile Positions
        tile_set_position(tile_id_1,px_1,py_1)
        tile_set_position(tile_id_2,px_2,py_2)
        tile_set_position(tile_id_3,px_3,py_3)
        tile_set_position(tile_id_4,px_4,py_4)

        if point_in_rectangle(obj_game_logic.px,obj_game_logic.py,px_1,py_1,px_1+tile_get_width(tile_id_1),py_1+tile_get_height(tile_id_1))
        or point_in_rectangle(obj_game_logic.px,obj_game_logic.py,px_2,py_2,px_2+tile_get_width(tile_id_2),py_2+tile_get_height(tile_id_2))
        or point_in_rectangle(obj_game_logic.px,obj_game_logic.py,px_3,py_3,px_3+tile_get_width(tile_id_3),py_3+tile_get_height(tile_id_3))
        or point_in_rectangle(obj_game_logic.px,obj_game_logic.py,px_4,py_4,px_4+tile_get_width(tile_id_4),py_4+tile_get_height(tile_id_4))
            {
                obj_game_logic.gravity_fof_validation = 2
            }

        //Asset-Switching Timer
        if (tile_validate_timer &lt; tile_validate_time)
            tile_validate_timer += 1

        if room = rm_editor
            {
                if obj_level_editor.use_write_delay &gt; 0 angle = 0;
                tile_validate_time = 60
            }
        if tile_validate_timer = tile_validate_time
            {
                if instance_exists(obj_bg_city)                 {tile_index = wd_fof_4;  tile_link = wd_fof_5; tile_base = wd_fof_6;}
                if instance_exists(obj_bg_city_day)             {tile_index = wd_fof_4;  tile_link = wd_fof_5; tile_base = wd_fof_6;}
                if instance_exists(obj_bg_sushi_bar)            {tile_index = wd_fof_4;  tile_link = wd_fof_5; tile_base = wd_fof_6;}
                if instance_exists(obj_bg_logic_night)          {tile_index = mu_fof_3;  tile_link = mu_fof_7; tile_base = mu_fof_8;}
                if instance_exists(obj_bg_logic)                {tile_index = mu_fof_3;  tile_link = mu_fof_7; tile_base = mu_fof_8;}
                if instance_exists(obj_bg_logic_nighttime)      {tile_index = mu_fof_3;  tile_link = mu_fof_7; tile_base = mu_fof_8;}
                if instance_exists(obj_bg_logic_alt)            {tile_index = mu_fof_3;  tile_link = mu_fof_7; tile_base = mu_fof_8;}
                if instance_exists(obj_bg_logic_lagoon)         {tile_index = ll_fof_1;  tile_link = ll_fof_5; tile_base = ll_fof_6;}
                if instance_exists(obj_bg_logic_lagoon_sunrise) {tile_index = ll_fof_1;  tile_link = ll_fof_5; tile_base = ll_fof_6;}
                if instance_exists(obj_bg_jiang_cruise)         {tile_index = ll_fof_1;  tile_link = ll_fof_5; tile_base = ll_fof_6;}
                if instance_exists(obj_bg_jiang_cruise_storm)   {tile_index = ll_fof_1;  tile_link = ll_fof_5; tile_base = ll_fof_6;}
                if instance_exists(obj_bg_logic_mnt)            {tile_index = mnt_fof_2; tile_link = mnt_fof_5; tile_base = mnt_fof_6;}
                if instance_exists(obj_bg_logic_mnt_nite)       {tile_index = mnt_fof_2; tile_link = mnt_fof_5; tile_base = mnt_fof_6;}
                if instance_exists(obj_bg_logic_mnt_nighttime)  {tile_index = mnt_fof_2; tile_link = mnt_fof_5; tile_base = mnt_fof_6;}
                if instance_exists(obj_bg_city_sewers)          {tile_index = wd_fof_4;  tile_link = wd_fof_5; tile_base = wd_fof_6;}
                if instance_exists(obj_bg_city_sewers_slime)    {tile_index = wd_fof_4;  tile_link = wd_fof_5; tile_base = wd_fof_6;}
                if instance_exists(obj_bg_mnt_cave)             {tile_index = mnt_fof_2; tile_link = mnt_fof_5; tile_base = mnt_fof_6;}
                if instance_exists(obj_bg_mnt_cave_dark)        {tile_index = mnt_fof_2; tile_link = mnt_fof_5; tile_base = mnt_fof_6;}
                if instance_exists(obj_bg_beihai_bay)           {tile_index = bb_fof_0; tile_link = ll_fof_6; tile_base = ll_fof_6;}
                if instance_exists(obj_bg_beihai_bay_sunset)    {tile_index = bb_fof_0; tile_link = ll_fof_6; tile_base = ll_fof_6;}
            }

        //Capture Enemy Objects Onto Tiles Within The Boundaries Of The Tile
        if enemy_capture_1 = 0 DNA_Cannon_ID_1 = collision_rectangle(px_1,py_1,px_1+tile_get_width(tile_id_1),py_1+tile_get_height(tile_id_1),obj_enemy_parent,false,true)
        if enemy_capture_1 = 1 DNA_Cannon_ID_1 = collision_rectangle(px_1,py_1-32,px_1+tile_get_width(tile_id_1),py_1+8,obj_enemy_parent,false,true);
        //Check For Capturable Objects
        if instance_exists(DNA_Cannon_ID_1) and enemy_capture_1 = 0
            {
                switch(DNA_Cannon_ID_1.sprite_index)
                    {
                        case spr_metal_pup:      {enemy_capture_1 = 1; enemy_capture_offset_1 = 8; break;}
                        case spr_dna_cannon:     {enemy_capture_1 = 1; enemy_capture_offset_1 = -36; break;}
                        case spr_turretus:       {enemy_capture_1 = 1; enemy_capture_offset_1 = 8; break;}
                        case spr_fire_spitter:   {enemy_capture_1 = 1; enemy_capture_offset_1 = 8; break;}
                        case spr_ghetto_blaster: {enemy_capture_1 = 1; enemy_capture_offset_1 = 8; break;}
                        case spr_rna_cannon:     {enemy_capture_1 = 1; enemy_capture_offset_1 = 8; break;}
                        case spr_rocket_puncher: {enemy_capture_1 = 1; enemy_capture_offset_1 = 8; break;}
                        case spr_bullfrag:       {if not audio_is_playing(character_parry) scr_set_message("Bullfrag Is Too Heavy!"); break;}
                        default:                 {enemy_capture_1 = 0; enemy_capture_offset_1 = 0; break;}
                    }
            }
        //Capture And Maintain Enemy At Tile's Current X/Y Position
        if enemy_capture_1 = 1 and instance_exists(DNA_Cannon_ID_1)
            {
                DNA_Cannon_ID_1.x = px_1+(tile_get_width(tile_id_1)/2)
                DNA_Cannon_ID_1.y = py_1+enemy_capture_offset_1
                DNA_Cannon_ID_1.captured = 1
                DNA_Cannon_ID_1.start_x = x+96
                DNA_Cannon_ID_1.start_y = y-28+enemy_capture_offset_1
                instance_activate_object(DNA_Cannon_ID_1)
            }
        //When Enemy Is No Longer Attached, Re-Enable Capturing For Future Enemy Objects
        if enemy_capture_1 = 1 and !instance_exists(DNA_Cannon_ID_1) enemy_capture_1 = 0;

        if enemy_capture_2 = 0 DNA_Cannon_ID_2 = collision_rectangle(px_2,py_2,px_2+tile_get_width(tile_id_2),py_2+tile_get_height(tile_id_2),obj_enemy_parent,false,true)
        if enemy_capture_2 = 1 DNA_Cannon_ID_2 = collision_rectangle(px_2,py_2-32,px_2+tile_get_width(tile_id_2),py_2+8,obj_enemy_parent,false,true);
        if instance_exists(DNA_Cannon_ID_2) and enemy_capture_2 = 0
            {
                switch(DNA_Cannon_ID_2.sprite_index)
                    {
                        case spr_metal_pup:      {enemy_capture_2 = 1; enemy_capture_offset_2 = 8; break;}
                        case spr_dna_cannon:     {enemy_capture_2 = 1; enemy_capture_offset_2 = -36; break;}
                        case spr_turretus:       {enemy_capture_2 = 1; enemy_capture_offset_2 = 8; break;}
                        case spr_fire_spitter:   {enemy_capture_2 = 1; enemy_capture_offset_2 = 8; break;}
                        case spr_ghetto_blaster: {enemy_capture_2 = 1; enemy_capture_offset_2 = 8; break;}
                        case spr_rna_cannon:     {enemy_capture_2 = 1; enemy_capture_offset_2 = 8; break;}
                        case spr_rocket_puncher: {enemy_capture_2 = 1; enemy_capture_offset_2 = 8; break;}
                        case spr_bullfrag:       {if not audio_is_playing(character_parry) scr_set_message("Bullfrag Is Too Heavy!"); break;}
                        default:                 {enemy_capture_2 = 0; enemy_capture_offset_2 = 0; break;}
                    }
            }
        if enemy_capture_2 = 1 and instance_exists(DNA_Cannon_ID_2)
            {
                DNA_Cannon_ID_2.x = px_2+(tile_get_width(tile_id_2)/2)
                DNA_Cannon_ID_2.y = py_2+enemy_capture_offset_2
                DNA_Cannon_ID_2.captured = 1
                DNA_Cannon_ID_2.start_x = x
                DNA_Cannon_ID_2.start_y = y-96-20+enemy_capture_offset_2
                instance_activate_object(DNA_Cannon_ID_2)
            }
        if enemy_capture_2 = 1 and !instance_exists(DNA_Cannon_ID_2) enemy_capture_2 = 0;

        if enemy_capture_3 = 0 DNA_Cannon_ID_3 = collision_rectangle(px_3,py_3,px_3+tile_get_width(tile_id_3),py_3+tile_get_height(tile_id_3),obj_enemy_parent,false,true)
        if enemy_capture_3 = 1 DNA_Cannon_ID_3 = collision_rectangle(px_3,py_3-32,px_3+tile_get_width(tile_id_3),py_3+8,obj_enemy_parent,false,true);
        if instance_exists(DNA_Cannon_ID_3) and enemy_capture_3 = 0
            {
                switch(DNA_Cannon_ID_3.sprite_index)
                    {
                        case spr_metal_pup:      {enemy_capture_3 = 1; enemy_capture_offset_3 = 8; break;}
                        case spr_dna_cannon:     {enemy_capture_3 = 1; enemy_capture_offset_3 = -36; break;}
                        case spr_turretus:       {enemy_capture_3 = 1; enemy_capture_offset_3 = 8; break;}
                        case spr_fire_spitter:   {enemy_capture_3 = 1; enemy_capture_offset_3 = 8; break;}
                        case spr_ghetto_blaster: {enemy_capture_3 = 1; enemy_capture_offset_3 = 8; break;}
                        case spr_rna_cannon:     {enemy_capture_3 = 1; enemy_capture_offset_3 = 8; break;}
                        case spr_rocket_puncher: {enemy_capture_3 = 1; enemy_capture_offset_3 = 8; break;}
                        case spr_bullfrag:       {if not audio_is_playing(character_parry) scr_set_message("Bullfrag Is Too Heavy!"); break;}
                        default:                 {enemy_capture_3 = 0; enemy_capture_offset_3 = 0; break;}
                    }
            }
        if enemy_capture_3 = 1 and instance_exists(DNA_Cannon_ID_3)
            {
                DNA_Cannon_ID_3.x = px_3+(tile_get_width(tile_id_3)/2)
                DNA_Cannon_ID_3.y = py_3+enemy_capture_offset_3
                DNA_Cannon_ID_3.captured = 1
                DNA_Cannon_ID_3.start_x = x-96
                DNA_Cannon_ID_3.start_y = y-28+enemy_capture_offset_3
                instance_activate_object(DNA_Cannon_ID_3)
            }
        if enemy_capture_3 = 1 and !instance_exists(DNA_Cannon_ID_3) enemy_capture_3 = 0;

        if enemy_capture_4 = 0 DNA_Cannon_ID_4 = collision_rectangle(px_4,py_4,px_4+tile_get_width(tile_id_4),py_4+tile_get_height(tile_id_4),obj_enemy_parent,false,true)
        if enemy_capture_4 = 1 DNA_Cannon_ID_4 = collision_rectangle(px_4,py_4-32,px_4+tile_get_width(tile_id_4),py_4+8,obj_enemy_parent,false,true);
        if instance_exists(DNA_Cannon_ID_4) and enemy_capture_4 = 0
            {
                switch(DNA_Cannon_ID_4.sprite_index)
                    {
                        case spr_metal_pup:      {enemy_capture_4 = 1; enemy_capture_offset_4 = 8; break;}
                        case spr_dna_cannon:     {enemy_capture_4 = 1; enemy_capture_offset_4 = -36; break;}
                        case spr_turretus:       {enemy_capture_4 = 1; enemy_capture_offset_4 = 8; break;}
                        case spr_fire_spitter:   {enemy_capture_4 = 1; enemy_capture_offset_4 = 8; break;}
                        case spr_ghetto_blaster: {enemy_capture_4 = 1; enemy_capture_offset_4 = 8; break;}
                        case spr_rna_cannon:     {enemy_capture_4 = 1; enemy_capture_offset_4 = 8; break;}
                        case spr_rocket_puncher: {enemy_capture_4 = 1; enemy_capture_offset_4 = 8; break;}
                        case spr_bullfrag:       {if not audio_is_playing(character_parry) scr_set_message("Bullfrag Is Too Heavy!"); break;}
                        default:                 {enemy_capture_4 = 0; enemy_capture_offset_4 = 0; break;}
                    }
            }
        if enemy_capture_4 = 1 and instance_exists(DNA_Cannon_ID_4)
            {
                DNA_Cannon_ID_4.x = px_4+(tile_get_width(tile_id_4)/2)
                DNA_Cannon_ID_4.y = py_4+enemy_capture_offset_4
                DNA_Cannon_ID_4.captured = 1
                DNA_Cannon_ID_4.start_x = x
                DNA_Cannon_ID_4.start_y = y+82+enemy_capture_offset_4
                instance_activate_object(DNA_Cannon_ID_4)
            }
        if enemy_capture_4 = 1 and !instance_exists(DNA_Cannon_ID_4) enemy_capture_4 = 0;
    } //End of Pause Safety Check
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Carasol Platforms

//Draw Decorative Backplate
draw_background(mu_fof_9,x-24,y-24)

//Draw Decorative Bolt
draw_background(tile_base,x-10,y-10)

//Draw Decoration Tiles
draw_background(tile_link,x-10+lengthdir_x(80,angle),y-10+lengthdir_y(80,angle))
draw_background(tile_link,x-10+lengthdir_x(60,angle),y-10+lengthdir_y(60,angle))
draw_background(tile_link,x-10+lengthdir_x(40,angle),y-10+lengthdir_y(40,angle))
draw_background(tile_link,x-10+lengthdir_x(20,angle),y-10+lengthdir_y(20,angle))

draw_background(tile_link,x-10+lengthdir_x(80,angle+90),y-10+lengthdir_y(80,angle+90))
draw_background(tile_link,x-10+lengthdir_x(60,angle+90),y-10+lengthdir_y(60,angle+90))
draw_background(tile_link,x-10+lengthdir_x(40,angle+90),y-10+lengthdir_y(40,angle+90))
draw_background(tile_link,x-10+lengthdir_x(20,angle+90),y-10+lengthdir_y(20,angle+90))

draw_background(tile_link,x-10+lengthdir_x(80,angle+180),y-10+lengthdir_y(80,angle+180))
draw_background(tile_link,x-10+lengthdir_x(60,angle+180),y-10+lengthdir_y(60,angle+180))
draw_background(tile_link,x-10+lengthdir_x(40,angle+180),y-10+lengthdir_y(40,angle+180))
draw_background(tile_link,x-10+lengthdir_x(20,angle+180),y-10+lengthdir_y(20,angle+180))

draw_background(tile_link,x-10+lengthdir_x(80,angle+270),y-10+lengthdir_y(80,angle+270))
draw_background(tile_link,x-10+lengthdir_x(60,angle+270),y-10+lengthdir_y(60,angle+270))
draw_background(tile_link,x-10+lengthdir_x(40,angle+270),y-10+lengthdir_y(40,angle+270))
draw_background(tile_link,x-10+lengthdir_x(20,angle+270),y-10+lengthdir_y(20,angle+270))

//Draw Carasol Platforms
draw_background(tile_index,px_1,py_1)
draw_background(tile_index,px_2,py_2)
draw_background(tile_index,px_3,py_3)
draw_background(tile_index,px_4,py_4)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Ghost Tiles

if room = rm_editor
    {
        draw_set_alpha(0.25)

        //Red
        draw_background(tile_index,x-lengthdir_x(96,180)-28,y-lengthdir_y(96,180)-28)
        draw_background(tile_link,x-10+lengthdir_x(80,180),y-10+lengthdir_y(80,180))
        draw_background(tile_link,x-10+lengthdir_x(60,180),y-10+lengthdir_y(60,180))
        draw_background(tile_link,x-10+lengthdir_x(40,180),y-10+lengthdir_y(40,180))
        draw_background(tile_link,x-10+lengthdir_x(20,180),y-10+lengthdir_y(20,180))

        //Blue
        draw_background(tile_index,x-lengthdir_x(90,270)-28,y-lengthdir_y(90,270)-28)
        draw_background(tile_link,x-10+lengthdir_x(80,270),y-10+lengthdir_y(80,270))
        draw_background(tile_link,x-10+lengthdir_x(60,270),y-10+lengthdir_y(60,270))
        draw_background(tile_link,x-10+lengthdir_x(40,270),y-10+lengthdir_y(40,270))
        draw_background(tile_link,x-10+lengthdir_x(20,270),y-10+lengthdir_y(20,270))

        //Green
        draw_background(tile_index,x-lengthdir_x(96,0)-28,y-lengthdir_y(96,0)-28)
        draw_background(tile_link,x-10+lengthdir_x(80,0),y-10+lengthdir_y(80,0))
        draw_background(tile_link,x-10+lengthdir_x(60,0),y-10+lengthdir_y(60,0))
        draw_background(tile_link,x-10+lengthdir_x(40,0),y-10+lengthdir_y(40,0))
        draw_background(tile_link,x-10+lengthdir_x(20,0),y-10+lengthdir_y(20,0))

        //Purple
        draw_background(tile_index,x-lengthdir_x(96,90)-28,y-lengthdir_y(96,90)-14)
        draw_background(tile_link,x-10+lengthdir_x(80,90),y-10+lengthdir_y(80,90))
        draw_background(tile_link,x-10+lengthdir_x(60,90),y-10+lengthdir_y(60,90))
        draw_background(tile_link,x-10+lengthdir_x(40,90),y-10+lengthdir_y(40,90))
        draw_background(tile_link,x-10+lengthdir_x(20,90),y-10+lengthdir_y(20,90))

        draw_set_alpha(1)

        if (obj_level_editor.use_debug_hud_mode = 1 and obj_game_logic.user_cursor_mode = 0)
        or (obj_game_logic.user_cursor_mode = 1)
            draw_sprite(sprite_index,0,x,y);
    }
else
    {
        if (obj_game_logic.debug_hud_mode &gt; 0)
            draw_sprite(sprite_index,0,x,y);
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
