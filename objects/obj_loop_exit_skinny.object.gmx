<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_loop_exit_brick</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_loop_exit</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check for Tiles on Layer 2.
obj = obj_game_logic
edit = obj_level_editor
alpha = 0.1
alpha_lerp = 1
tile_surface_id = -1
flat_surface_tile_1_id = -1
flat_surface_tile_2_id = -1
flat_surface_tile_3_id = -1
slope_surface_id_1 = -1
slope_surface_id_2 = -1
tile_compass = 0
use_exit_controller_timer = 0
//Are We Allowed To Hold Items?
give_item = 0
item = 0

tile_surface_id = tile_layer_find(surface_slopes,x,y)

//If the slope tile was on a decoartion layer instead, search there for the slope tile
if tile_surface_id = -1 tile_surface_id = tile_layer_find(5,x,y);

//If we have found a slope tile, setup our startup variables
if tile_surface_id!=-1
    {
        x = tile_get_x(tile_surface_id)
        y = tile_get_y(tile_surface_id)

        //Get Tile ID
        tile_surface_id_asset = tile_get_background(tile_surface_id)

        //Create flat surface tile masks
        if tile_surface_id_asset = mu_slope_11 or tile_surface_id_asset = mu_slope_15
            {
                flat_surface_tile_1_id = tile_add(mu_door_0,0,0,24,128,x+12,y,5)
                flat_surface_tile_2_id = tile_add(mu_door_0,0,0,128,32,x+37,y+103,surface_flats)
                flat_surface_tile_3_id = tile_add(mu_door_0,0,0,128,32,x+132,y+103,surface_flats)

                //Collision Region 1 (Enter from left)
                collision_region_1_x_1 = x-32
                collision_region_1_y_1 = y
                collision_region_1_x_2 = x+11
                collision_region_1_y_2 = y+128

                //Collision Region 2 (Enter from above)
                collision_region_2_x_1 = x+32
                collision_region_2_y_1 = y-24
                collision_region_2_x_2 = x+140
                collision_region_2_y_2 = y

                //Collision Region 3 (Enter from below)
                collision_region_3_x_1 = x+32
                collision_region_3_y_1 = y+127
                collision_region_3_x_2 = x+140
                collision_region_3_y_2 = y+192

                //Collision Region 4 (Enter from right)
                collision_region_4_x_1 = x+140
                collision_region_4_y_1 = y
                collision_region_4_x_2 = x+172
                collision_region_4_y_2 = y+128

                //Convert the slope tile into a scenery tile
                tile_set_depth(tile_surface_id,5)
                tile_compass = 0
                tile_set_visible(flat_surface_tile_1_id,false)
                tile_set_visible(flat_surface_tile_2_id,false)
                tile_set_visible(flat_surface_tile_3_id,false)

                var ID_check = instance_place(x,y,obj_2D_tile_logic);
                if instance_exists(ID_check)
                    {
                        ID_check.delete_self = 1
                        ID_check.dont_delete_tile = 1
                        //Top-right loop piece
                        //var ID_check = instance_place(x+128,y-128,obj_2D_tile_logic);
                        //if instance_exists(ID_check)
                        //    {
                        //        ID_check.delete_self = 1
                        //        ID_check.dont_delete_tile = 1
                        //    }
                    }
            }
        if tile_surface_id_asset = mu_slope_13 or tile_surface_id_asset = mu_slope_17
            {
                flat_surface_tile_1_id = tile_add(mu_door_0,0,0,24,128,x+104,y,5)
                flat_surface_tile_2_id = tile_add(mu_door_0,0,0,128,32,x,y+104,surface_flats)
                flat_surface_tile_3_id = tile_add(mu_door_0,0,0,128,32,x-132,y+104,surface_flats)

                //Collision Region 1 (Enter from right)
                collision_region_1_x_1 = x+128
                collision_region_1_y_1 = y
                collision_region_1_x_2 = x+160
                collision_region_1_y_2 = y+128

                //Collision Region 2 (Enter from above)
                collision_region_2_x_1 = x
                collision_region_2_y_1 = y-24
                collision_region_2_x_2 = x+108
                collision_region_2_y_2 = y

                //Collision Region 3 (Enter from below)
                collision_region_3_x_1 = x
                collision_region_3_y_1 = y+127
                collision_region_3_x_2 = x+107
                collision_region_3_y_2 = y+192

                //Collision Region 4 (Enter from left)
                collision_region_4_x_1 = x-32
                collision_region_4_y_1 = y
                collision_region_4_x_2 = x
                collision_region_4_y_2 = y+127

                //Convert the slope tile into a scenery tile
                tile_set_depth(tile_surface_id,5)
                tile_compass = 0
                tile_set_visible(flat_surface_tile_1_id,false)
                tile_set_visible(flat_surface_tile_2_id,false)
                tile_set_visible(flat_surface_tile_3_id,false)

                var ID_check = instance_place(x,y,obj_2D_tile_logic);
                if instance_exists(ID_check)
                    {
                        ID_check.delete_self = 1
                        ID_check.dont_delete_tile = 1
                        //Top-left loop piece
                        //var ID_check = instance_place(x-128,y-128,obj_2D_tile_logic);
                        //if instance_exists(ID_check)
                        //    {
                        //        ID_check.delete_self = 1
                        //        ID_check.dont_delete_tile = 1
                        //    }
                    }
            }

        //Ceiling Mode Tiles
        if tile_surface_id_asset = mu_slope_10 or tile_surface_id_asset = mu_slope_14
            {
                flat_surface_tile_1_id = tile_add(mu_door_0,0,0,32,282,x,y+12,surface_flats)
                flat_surface_tile_2_id = tile_add(mu_door_0,0,0,256,34,x,y+244,surface_flats)

                //Collision Region 1 (Enter from left)
                collision_region_1_x_1 = x+268
                collision_region_1_y_1 = y+140
                collision_region_1_x_2 = x+300
                collision_region_1_y_2 = y+269

                //Collision Region 2 (Enter from above)
                collision_region_2_x_1 = x+12
                collision_region_2_y_1 = y-13
                collision_region_2_x_2 = x+140
                collision_region_2_y_2 = y+12

                //Collision Region 3 (Switch loop layer left)
                collision_region_4_x_1 = x+140
                collision_region_4_y_1 = y+32
                collision_region_4_x_2 = x+172
                collision_region_4_y_2 = y+96

                //Collision Region 4 (Switch loop layer right)
                collision_region_3_x_1 = x+173
                collision_region_3_y_1 = y+32
                collision_region_3_x_2 = x+204
                collision_region_3_y_2 = y+96

                tile_compass = 1

                //Bottom-Right Slope Tile
                slope_surface_id_1 = tile_layer_find(surface_slopes,x+148,y+148)

                //If the slope tile was on a decoartion layer instead, search there for the slope tile
                if slope_surface_id_1 = -1 slope_surface_id_1 = tile_layer_find(5,x+148,y+148);

                //Display An Error If It Is Not The Correct Slope Tiles
                if slope_surface_id_1 != -1
                    {
                        //Get Tile ID
                        var slope_surface_id_asset = tile_get_background(slope_surface_id_1)

                        if slope_surface_id_asset != mu_slope_13
                        and slope_surface_id_asset != mu_slope_17
                            {
                                scr_set_message("Wrong slope tile found at "+string(x)+"; "+string(y) + " (Loop Exit)")
                                instance_destroy();
                            }
                    }
                else
                    {
                        scr_set_message("No slope tile found at "+string(x)+"; "+string(y) + " (Loop Exit)")
                        instance_destroy();
                    }

                //Top-Left Slope Tile
                slope_surface_id_2 = tile_layer_find(surface_slopes,x+8,y+8)

                //If the slope tile was on a decoartion layer instead, search there for the slope tile
                if slope_surface_id_2 = -1 slope_surface_id_2 = tile_layer_find(5,x+8,y+8);

                if slope_surface_id_2 = -1
                    {
                        scr_set_message("No slope tile found at "+string(x)+"; "+string(y) + " (Loop Exit)")
                        instance_destroy();
                    }
                tile_set_visible(flat_surface_tile_1_id,false)
                tile_set_visible(flat_surface_tile_2_id,false)

                var ID_check = instance_place(x,y,obj_2D_tile_logic);
                if instance_exists(ID_check)
                    {
                        ID_check.delete_self = 1
                        ID_check.dont_delete_tile = 1
                        //Bottom-right loop piece
                        var ID_check = instance_place(x+132,y+132,obj_2D_tile_logic);
                        if instance_exists(ID_check)
                            {
                                ID_check.delete_self = 1
                                ID_check.dont_delete_tile = 1
                            }
                    }
            }
        if tile_surface_id_asset = mu_slope_12 or tile_surface_id_asset = mu_slope_16
            {
                flat_surface_tile_1_id = tile_add(mu_door_0,0,0,32,270,x+104,y+12,surface_flats)
                flat_surface_tile_2_id = tile_add(mu_door_0,0,0,248,34,x-116,y+244,surface_flats)

                //Collision Region 1 (Enter from right)
                collision_region_1_x_1 = x-160
                collision_region_1_y_1 = y+140
                collision_region_1_x_2 = x-128
                collision_region_1_y_2 = y+269

                //Collision Region 2 (Enter from above)
                collision_region_2_x_1 = x
                collision_region_2_y_1 = y-13
                collision_region_2_x_2 = x+128
                collision_region_2_y_2 = y+12

                //Collision Region 3 (Switch loop layer left)
                collision_region_3_x_1 = x-64
                collision_region_3_y_1 = y+32
                collision_region_3_x_2 = x-32
                collision_region_3_y_2 = y+96

                //Collision Region 4 (Switch loop layer right)
                collision_region_4_x_1 = x-33
                collision_region_4_y_1 = y+32
                collision_region_4_x_2 = x-1
                collision_region_4_y_2 = y+96

                tile_compass = 1

                //Bottom-Left Slope Tile
                slope_surface_id_1 = tile_layer_find(surface_slopes,x-8,y+148)

                //If the slope tile was on a decoartion layer instead, search there for the slope tile
                if slope_surface_id_1 = -1 slope_surface_id_1 = tile_layer_find(5,x-8,y+148);

                //Display An Error If It Is Not The Correct Slope Tiles
                if slope_surface_id_1 != -1
                    {
                        //Get Tile ID
                        var slope_surface_id_asset = tile_get_background(slope_surface_id_1)

                        if slope_surface_id_asset != mu_slope_11
                        and slope_surface_id_asset != mu_slope_15
                            {
                                scr_set_message("Wrong slope tile found at "+string(x)+"; "+string(y) + " (Loop Exit)")
                                instance_destroy();
                            }
                    }
                else
                    {
                        scr_set_message("No slope tile found at "+string(x)+"; "+string(y) + " (Loop Exit)")
                        instance_destroy();
                    }

                //Top-Right Slope Tile
                slope_surface_id_2 = tile_layer_find(surface_slopes,x+8,y+8)

                //If the slope tile was on a decoartion layer instead, search there for the slope tile
                if slope_surface_id_2 = -1 slope_surface_id_2 = tile_layer_find(5,x+8,y+8);

                if slope_surface_id_2 = -1
                    {
                        scr_set_message("No slope tile found at "+string(x)+"; "+string(y) + " (Loop Exit)")
                        instance_destroy();
                    }
                tile_set_visible(flat_surface_tile_1_id,false)
                tile_set_visible(flat_surface_tile_2_id,false)
                var ID_check = instance_place(x,y,obj_2D_tile_logic);
                if instance_exists(ID_check)
                    {
                        ID_check.delete_self = 1
                        ID_check.dont_delete_tile = 1
                        //Bottom-left loop piece
                        var ID_check = instance_place(x-128,y+128,obj_2D_tile_logic);
                        if instance_exists(ID_check)
                            {
                                ID_check.delete_self = 1
                                ID_check.dont_delete_tile = 1
                            }
                    }
            }

        //If no such tile has been found, report the error to the console and self-destruct
        if not
            (
                tile_surface_id_asset = mu_slope_10
                or tile_surface_id_asset = mu_slope_11
                or tile_surface_id_asset = mu_slope_12
                or tile_surface_id_asset = mu_slope_13
                or tile_surface_id_asset = mu_slope_14
                or tile_surface_id_asset = mu_slope_15
                or tile_surface_id_asset = mu_slope_16
                or tile_surface_id_asset = mu_slope_17
            )
            {
                scr_set_message("Wrong slope tiles used at "+string(x)+"; "+string(y) + " (Loop Exit)")
                instance_destroy(); 
            }
        var ID_check = instance_place(x,y,obj_loop_exit)
        if ID_check != -1
            {
                if ID_check != instance_id and ID_check.use_exit_controller_timer &gt;= 8
                    {
                        scr_set_message("Cannot place exit controllers over others")
                        instance_destroy(); 
                    }
            }
    }
//If no such tile has been found, report the error to the console and self-destruct
else
    {
        scr_set_message("No slope tile found at "+string(x)+"; "+string(y) + " (Loop Exit)")
        instance_destroy(); 
    }
//Make Ourselves Visible If We Are In Editor Mode
if room = rm_editor visible = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
