<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_test_target</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_destructible</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics and Animation Variables

//X/Y Origins
start_x = x
start_y = y

//Sprites
target_animation_sprite = spr_test_target

//Animations
target_animation_frame = 0
target_animation_max   = 9.8
target_explosion_frame = 0
target_particle_frame  = 0
target_animation_rotation = 0

//Physics
target_speed = 4
target_direction = 0
target_direction_speed = 0.5
target_explosion_x = x
target_explosion_y = y

//Particle 1
target_particle_x_0       = 0
target_particle_y_0       = 0
target_particle_rotate_0  = 0
target_particle_x_scale_0 = 0
target_particle_speed_0   = random_range(-4,4)
//Particle 2
target_particle_x_1       = 0
target_particle_y_1       = 0
target_particle_rotate_1  = 0
target_particle_x_scale_1 = 0
target_particle_speed_1   = random_range(-4,4)
//Particle 3
target_particle_x_2       = 0
target_particle_y_2       = 0
target_particle_rotate_2  = 0
target_particle_x_scale_2 = 0
target_particle_speed_2   = random_range(-4,4)
target_particle_drop_2    = -4
//Particle 4
target_particle_x_3       = 0
target_particle_y_3       = 0
target_particle_rotate_3  = 0
target_particle_x_scale_3 = 0
target_particle_speed_3   = random_range(-4,4)
//Particle 5
target_particle_x_4       = 0
target_particle_y_4       = 0
target_particle_rotate_4  = 0
target_particle_x_scale_4 = 1
target_particle_speed_4   = random_range(-4,4)
target_particle_drop_4    = -4
//Particle 6
target_particle_x_5       = 0
target_particle_y_5       = 0
target_particle_rotate_5  = 0
target_particle_x_scale_5 = 1
target_particle_speed_5   = random_range(-4,4)
//Particle 7
target_particle_x_6       = 0
target_particle_y_6       = 0
target_particle_rotate_6  = 0
target_particle_x_scale_6 = 1
target_particle_speed_6   = random_range(-4,4)
//Particle 8
target_particle_x_7       = 0
target_particle_y_7       = 0
target_particle_rotate_7  = 0
target_particle_x_scale_7 = 1
target_particle_speed_7   = random_range(-4,4)

//State Triggers
target_state = 0

//Are We Allowed To Hold Items?
give_item = 0
item = 0
attacked = 0
destroyed = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Target Logic and Collisions

if obj_game_logic.pause = 0
    {
        //Iterate Animations
        target_animation_frame += 0.24
        //Reset animation after reaching the loop point
        if target_animation_frame &gt; target_animation_max {target_animation_frame = 0}
        
        if attacked = 1 and target_state = 0
            {
                //If the player has modified the position of our tile, delete it and
                //trigger next animation state
                target_state = 1
                audio_stop_sound(snd_enemy_dead)
                audio_play_sound(snd_enemy_dead,50,false)
                target_animation_sprite = spr_test_target_hit
                target_animation_max = 6.8
                if obj_game_logic.xdir = 1  {target_direction = point_direction(obj_game_logic.px,obj_game_logic.py,x+16,y)}
                if obj_game_logic.xdir = -1 {target_direction = point_direction(obj_game_logic.px,obj_game_logic.py,x-16,y)}
                //Set target speed
                target_speed = 2+abs(obj_game_logic.hsp)
                //Freeze the player's logic for five frames
                if obj_game_logic.skin != spr_milla obj_game_logic.pause_logic = 5;

            }
        
        if target_state = 1
            {
                //Iterate Animations
                if target_explosion_frame &lt; 7.4 {target_explosion_frame += 0.32}
                //Fly through the air
                x += lengthdir_x(target_speed,target_direction)
                y += lengthdir_y(target_speed,target_direction)
                //Rotate sprite
                target_animation_rotation += 8
                //Reset rotation beyond the 0-360 range
                if target_direction &gt; 359 {target_direction = 0}
                if target_direction &lt; 0 {target_direction = 360}
                //Slowly fall towards the floor
                if target_direction &gt;= 315 or target_direction &lt;= 90 {target_direction -= target_direction_speed}
                if target_direction &gt; 90 and target_direction &lt; 225  {target_direction += target_direction_speed}
                //Fall faster if we have a downward angle
                if target_direction_speed &lt; 8 {target_direction_speed += 0.05}
                if target_speed &lt; 8           {target_speed += 0.05;}
        
                //Check for Tiles on Layer 0. (Flat Surface Collisions)
                //var target_surface_id_top    = tile_layer_find(surface_flats,x,y-16);      //Top    Collision Sensor
                var target_surface_id_bottom = tile_layer_find(surface_flats,x,y+16);      //Bottom Collision Sensor
                //var target_surface_id_left   = tile_layer_find(surface_flats,x-16,y);      //Left   Collision Sensor
                //var target_surface_id_right  = tile_layer_find(surface_flats,x+16,y);      //Right  Collision Sensor
                //Slope Collision Sensor
                var target_ramp_id           = tile_layer_find(surface_slopes,x,y+16);
                //var target_fof_id            = tile_layer_find(surface_modifiers,x,y+16);
                //Check for Tiles on Layer 3. (Item Surface Collisions)
                //var target_item_id_left      = tile_layer_find(surface_items,x-16,y);      //Left   Collision Sensor
                //var target_item_id_right     = tile_layer_find(surface_items,x+16,y);      //Right  Collision Sensor
                //var target_item_id_top       = tile_layer_find(surface_items,x,y-16);      //Top    Collision Sensor
                //var target_item_id_bottom    = tile_layer_find(surface_items,x,y+16);      //Bottom Collision Sensor
        
                //---------Collisions---------//
                //----------------------------//

                var obj_focused = obj_game_logic;
                if room = rm_editor obj_focused = obj_level_editor;
        
                //If we have collided with any flat surfaces, explode the target
                if (tile_exists(target_surface_id_bottom)
                //If we have collided with the boundaries of the room, explode
                or (x &lt; 0 or x &gt; room_width)
                or (x &gt; obj_focused.camera_boundary_right
                or x &lt; obj_focused.camera_boundary_left)
                or (y &gt; obj_focused.camera_boundary_bottom
                or y &lt; obj_focused.camera_boundary_top)
                or y &gt; room_height)
                //And if we are not colliding with another target object
                and not (collision_rectangle(x-18,y-18,x+18,y+18,obj_target,false,true))
                and not (collision_rectangle(x-18,y-18,x+18,y+18,obj_checkpoint,false,true))
                and not (collision_rectangle(x-18,y-18,x+18,y+18,obj_test_target,false,true))
                    {
                        target_state = 2
                        target_explosion_x = x
                        target_explosion_y = y
                        target_explosion_frame = 0
                        target_particle_x_0       = x
                        target_particle_y_0       = y
                        target_particle_x_1       = x
                        target_particle_y_1       = y
                        target_particle_x_2       = x
                        target_particle_y_2       = y
                        target_particle_x_3       = x
                        target_particle_y_3       = y
                        target_particle_x_4       = x
                        target_particle_y_4       = y
                        target_particle_x_5       = x
                        target_particle_y_5       = y
                        target_particle_x_6       = x
                        target_particle_y_6       = y
                        target_particle_x_7       = x
                        target_particle_y_7       = y

                        audio_play_sound(snd_target_broken,50,false);
                    }
                //If we are colliding with a slope tile, check its surface based on X position and explode
                if tile_exists(target_ramp_id)
                    {    
                        //Collect Background ID of the Tile
                        var target_ramp_id_debug=tile_get_background(target_ramp_id)
        
                        //Get Coordinates Relative to the Tile's Origins
                        var target_ramp_pos_x=abs(tile_get_x(target_ramp_id)-x)   //Get X
                        var target_ramp_pos_y=abs(tile_get_y(target_ramp_id)-y)   //Get Y
        
                        //If we are clipping to the slope's Y height, explode
                        if (obj_game_logic.orig_clip[target_ramp_id_debug,0]!=-1)
                            {
                                //Check If Y is Greater Than Slope's Current Height
                                if target_ramp_pos_y &gt;= obj_game_logic.orig_clip[target_ramp_id_debug,target_ramp_pos_x]
                                    {
                                        target_state = 2;
                                        target_explosion_x = x
                                        target_explosion_y = y
                                        target_explosion_frame = 0
                                        target_particle_x_0       = x
                                        target_particle_y_0       = y
                                        target_particle_x_1       = x
                                        target_particle_y_1       = y
                                        target_particle_x_2       = x
                                        target_particle_y_2       = y
                                        target_particle_x_3       = x
                                        target_particle_y_3       = y
                                        target_particle_x_4       = x
                                        target_particle_y_4       = y
                                        target_particle_x_5       = x
                                        target_particle_y_5       = y
                                        target_particle_x_6       = x
                                        target_particle_y_6       = y
                                        target_particle_x_7       = x
                                        target_particle_y_7       = y
                                        audio_stop_sound(snd_target_broken)
                                        audio_play_sound(snd_target_broken,50,false)
                                    }
                            }
                    }
            }

        if target_state = 2
            {
                //Iterate Animations
                if target_explosion_frame &lt; 7.4 {target_explosion_frame += 0.32}

                //Iterate Particle Animations
                target_particle_frame += 0.24
                //Reset animation after reaching the loop point
                if target_particle_frame &gt; 2.8 {target_particle_frame = 0}

                //Rotate Particles
                target_particle_rotate_0 -= 4
                target_particle_rotate_1 -= 4
                target_particle_rotate_2 -= 4
                target_particle_rotate_3 += 4
                target_particle_rotate_4 += 4
                target_particle_rotate_5 += 4
                target_particle_rotate_6 += 4
                target_particle_rotate_7 += 4

                //Flip Particles
                target_particle_x_scale_0 +=0.25; if target_particle_x_scale_0 &gt; 1  {target_particle_x_scale_0 = -1}
                target_particle_x_scale_1 +=0.10; if target_particle_x_scale_1 &gt; 1  {target_particle_x_scale_1 = -1}
                target_particle_x_scale_2 +=0.10; if target_particle_x_scale_2 &gt; 1  {target_particle_x_scale_2 = -1}
                target_particle_x_scale_3 +=0.10; if target_particle_x_scale_3 &gt; 1  {target_particle_x_scale_3 = -1}
                target_particle_x_scale_4 -=0.10; if target_particle_x_scale_4 &lt; -1 {target_particle_x_scale_4 =  1}
                target_particle_x_scale_5 -=0.10; if target_particle_x_scale_5 &lt; -1 {target_particle_x_scale_5 =  1}
                target_particle_x_scale_6 -=0.10; if target_particle_x_scale_6 &lt; -1 {target_particle_x_scale_6 =  1}
                target_particle_x_scale_7 -=0.10; if target_particle_x_scale_7 &lt; -1 {target_particle_x_scale_7 =  1}

                //Move Downwards 1
                target_particle_x_0 += target_particle_speed_0
                target_particle_y_0 += 4
                //Move Downwards 2
                target_particle_x_1 += target_particle_speed_1
                target_particle_y_1 += 4
                //Move Upwards 1
                target_particle_x_2 += target_particle_speed_2
                target_particle_y_2 += target_particle_drop_2
                //Move Upwards 2
                target_particle_x_3 += target_particle_speed_3
                target_particle_y_3 += target_particle_drop_2
                //Move Upwards 3
                target_particle_x_4 += target_particle_speed_4
                target_particle_y_4 += target_particle_drop_4
                //Move Upwards 4
                target_particle_x_5 += target_particle_speed_5
                target_particle_y_5 += target_particle_drop_4
                //Move Upwards 5
                target_particle_x_6 += target_particle_speed_6
                target_particle_y_6 += target_particle_drop_4
                //Move Upwards 6
                target_particle_x_7 += target_particle_speed_7
                target_particle_y_7 += target_particle_drop_4

                //Slowly drop upwards-moving particles
                target_particle_drop_2 += 0.25
                target_particle_drop_4 += 0.15

                //Destroy target once all particles have fallen below the room's boundaries
                if  target_particle_y_0 &gt; start_y+512
                and target_particle_y_1 &gt; start_y+512
                and target_particle_y_2 &gt; start_y+512
                and target_particle_y_3 &gt; start_y+512
                and target_particle_y_4 &gt; start_y+512
                and target_particle_y_5 &gt; start_y+512
                and target_particle_y_6 &gt; start_y+512
                and target_particle_y_7 &gt; start_y+512
                    {
                        x = start_x
                        y = start_y
                        target_state = 0
                        target_animation_sprite = spr_test_target
                        //Animations
                        target_animation_frame = 0
                        target_animation_max   = 9.8
                        target_explosion_frame = 0
                        target_particle_frame  = 0
                        target_animation_rotation = 0
                        
                        //Physics
                        target_speed = 4
                        target_direction = 0
                        target_direction_speed = 0.5
                        target_explosion_x = x
                        target_explosion_y = y
                        
                        //Particle 1
                        target_particle_x_0       = 0
                        target_particle_y_0       = 0
                        target_particle_rotate_0  = 0
                        target_particle_x_scale_0 = 0
                        target_particle_speed_0   = random_range(-4,4)
                        //Particle 2
                        target_particle_x_1       = 0
                        target_particle_y_1       = 0
                        target_particle_rotate_1  = 0
                        target_particle_x_scale_1 = 0
                        target_particle_speed_1   = random_range(-4,4)
                        //Particle 3
                        target_particle_x_2       = 0
                        target_particle_y_2       = 0
                        target_particle_rotate_2  = 0
                        target_particle_x_scale_2 = 0
                        target_particle_speed_2   = random_range(-4,4)
                        target_particle_drop_2    = -4
                        //Particle 4
                        target_particle_x_3       = 0
                        target_particle_y_3       = 0
                        target_particle_rotate_3  = 0
                        target_particle_x_scale_3 = 0
                        target_particle_speed_3   = random_range(-4,4)
                        //Particle 5
                        target_particle_x_4       = 0
                        target_particle_y_4       = 0
                        target_particle_rotate_4  = 0
                        target_particle_x_scale_4 = 1
                        target_particle_speed_4   = random_range(-4,4)
                        target_particle_drop_4    = -4
                        //Particle 6
                        target_particle_x_5       = 0
                        target_particle_y_5       = 0
                        target_particle_rotate_5  = 0
                        target_particle_x_scale_5 = 1
                        target_particle_speed_5   = random_range(-4,4)
                        //Particle 7
                        target_particle_x_6       = 0
                        target_particle_y_6       = 0
                        target_particle_rotate_6  = 0
                        target_particle_x_scale_6 = 1
                        target_particle_speed_6   = random_range(-4,4)
                        //Particle 8
                        target_particle_x_7       = 0
                        target_particle_y_7       = 0
                        target_particle_rotate_7  = 0
                        target_particle_x_scale_7 = 1
                        target_particle_speed_7   = random_range(-4,4)

                        attacked = 0
                    }

            }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Editor Mode Behavior
if room = rm_editor
    {
        //Hold onto the tile during the saving process
        if obj_level_editor.use_write_delay &gt; 0 {x = start_x; y = start_y}
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Target

//Draw Target
if target_state &lt; 2 {draw_sprite_ext(target_animation_sprite,target_animation_frame,x,y,1,1,target_animation_rotation,c_white,1)}

//Draw Particles
if target_state = 2
    {
        draw_sprite_ext(spr_test_target_particle,target_particle_frame,target_particle_x_0,target_particle_y_0,target_particle_x_scale_0,1,target_particle_rotate_0,c_white,1)
        draw_sprite_ext(spr_test_target_particle,target_particle_frame,target_particle_x_1,target_particle_y_1,target_particle_x_scale_1,1,target_particle_rotate_1,c_white,1)
        draw_sprite_ext(spr_test_target_particle,target_particle_frame,target_particle_x_2,target_particle_y_2,target_particle_x_scale_2,1,target_particle_rotate_2,c_white,1)
        draw_sprite_ext(spr_test_target_particle,target_particle_frame,target_particle_x_3,target_particle_y_3,target_particle_x_scale_3,1,target_particle_rotate_3,c_white,1)
        //Only draw more particles if our performance profile is set to "normal"
        if obj_game_logic.performance_profile = 1
            {
                draw_sprite_ext(spr_test_target_particle,target_particle_frame,target_particle_x_4,target_particle_y_4,target_particle_x_scale_4,1,target_particle_rotate_4,c_white,1)
                draw_sprite_ext(spr_test_target_particle,target_particle_frame,target_particle_x_5,target_particle_y_5,target_particle_x_scale_5,1,target_particle_rotate_5,c_white,1)
                draw_sprite_ext(spr_test_target_particle,target_particle_frame,target_particle_x_6,target_particle_y_6,target_particle_x_scale_6,1,target_particle_rotate_6,c_white,1)
                draw_sprite_ext(spr_test_target_particle,target_particle_frame,target_particle_x_7,target_particle_y_7,target_particle_x_scale_7,1,target_particle_rotate_7,c_white,1)
            }
    }

//Draw Explosion Particle
if target_state &gt; 0 {draw_sprite(spr_explosion_1,target_explosion_frame,target_explosion_x,target_explosion_y)}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
