<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_loop_logic</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_delete_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check for Tiles on Layer 2.
tile_surface_id = tile_layer_find(surface_slopes,x,y)
obj = obj_game_logic
edit = obj_level_editor
alpha = 0.1
alpha_lerp = 1
tile_slope_surface_id_0 = -1
tile_slope_surface_id_1 = -1
tile_slope_surface_id_2 = -1
slope_surface_tile_1_id = -1
slope_surface_tile_2_id = -1
slope_surface_tile_3_id = -1
slope_surface_tile_4_id = -1
enemy_shifting_tile_left = -1
enemy_shifting_tile_right = -1
tile_flat_surface_id = -1
tile_flat_surface_id_1 = -1
tile_flat_surface_id_2 = -1
tile_flat_surface_id_3 = -1
tile_flat_surface_id_4 = -1
house_keeping = 0
tile_flat_surface_id = -1
tile_flat_surface_id_1 = -1
use_logic_controller_timer = 0
tile_extra_flat_surfaces = 0
integrity_timer = 0
//Are We Allowed To Hold Items?
give_item = 0
item = 0

//If we have found a slope tile, setup our startup variables
if tile_exists(tile_surface_id)
    {
        x = tile_get_x(tile_surface_id)
        y = tile_get_y(tile_surface_id)

        house_keeping = 1

        //Get Tile ID
        tile_surface_id_asset = tile_get_background(tile_surface_id)

        //Top-Left
        if tile_surface_id_asset = mu_slope_10
        or tile_surface_id_asset = mu_slope_14
            {
                tile_slope_surface_id_0 = tile_layer_find(surface_slopes,x+148,y);     //Top-Right
                tile_slope_surface_id_1 = tile_layer_find(surface_slopes,x,y+148);     //Bottom-Left
                tile_slope_surface_id_2 = tile_layer_find(surface_slopes,x+148,y+148); //Bottom-Right

                slope_surface_tile_1_id = tile_surface_id           //Top-Left
                slope_surface_tile_2_id = tile_slope_surface_id_1   //Bottom-Left
                slope_surface_tile_3_id = tile_slope_surface_id_0   //Top-Right
                slope_surface_tile_4_id = tile_slope_surface_id_2   //Bottom-Right

                //Top-Right
                if tile_exists(tile_slope_surface_id_0)
                    {
                        var tile_slope_surface_id_asset_0 = tile_get_background(tile_slope_surface_id_0);
                        if tile_slope_surface_id_asset_0 = mu_slope_12
                        or tile_slope_surface_id_asset_0 = mu_slope_16
                            house_keeping = 2;
                        else
                            {
                                scr_set_message("Wrong slope tile used for top-right piece" + " (Loop)")
                                instance_destroy(); 
                            }
                    }
                //Bottom-Left
                if tile_exists(tile_slope_surface_id_1)
                    {
                        var tile_slope_surface_id_asset_1 = tile_get_background(tile_slope_surface_id_1);
                        if tile_slope_surface_id_asset_1 = mu_slope_11
                        or tile_slope_surface_id_asset_1 = mu_slope_15
                            house_keeping = 2;
                        else
                            {
                                scr_set_message("Wrong slope tile used for bottom-left piece" + " (Loop)")
                                instance_destroy(); 
                            }
                    }
                //Bottom-Right
                if tile_exists(tile_slope_surface_id_2)
                    {
                        var tile_slope_surface_id_asset_2 = tile_get_background(tile_slope_surface_id_2);
                        if tile_slope_surface_id_asset_2 = mu_slope_13
                        or tile_slope_surface_id_asset_2 = mu_slope_17
                            house_keeping = 2;
                        else
                            {
                                scr_set_message("Wrong slope tile used for bottom-right piece" + " (Loop)")
                                instance_destroy(); 
                            }
                    }
                if !tile_exists(tile_slope_surface_id_0)
                or !tile_exists(tile_slope_surface_id_1)
                or !tile_exists(tile_slope_surface_id_2)
                    {
                        //If no such tile has been found, report the error to the console and self-destruct
                        scr_set_message("Loop structure is incomplete" + " (Loop)")
                        instance_destroy(); 
                    }
                //If nothing went wrong during the detection process, begin further execution
                else house_keeping = 2;
            }
        //Bottom-Left
        if tile_surface_id_asset = mu_slope_11
        or tile_surface_id_asset = mu_slope_15
            {
                tile_slope_surface_id_0 = tile_layer_find(surface_slopes,x+148,y+8);//Bottom-Right
                tile_slope_surface_id_1 = tile_layer_find(surface_slopes,x+8,y-8);  //Top-Left
                tile_slope_surface_id_2 = tile_layer_find(surface_slopes,x+148,y-8);//Top-Right

                slope_surface_tile_1_id = tile_slope_surface_id_1   //Top-Left
                slope_surface_tile_2_id = tile_surface_id           //Bottom-Left
                slope_surface_tile_3_id = tile_slope_surface_id_2   //Top-Right
                slope_surface_tile_4_id = tile_slope_surface_id_0   //Bottom-Right

                //Bottom-Right
                if tile_exists(tile_slope_surface_id_0)
                    {
                        var tile_slope_surface_id_asset_0 = tile_get_background(tile_slope_surface_id_0);
                        if tile_slope_surface_id_asset_0 = mu_slope_13
                        or tile_slope_surface_id_asset_0 = mu_slope_17
                            house_keeping = 2;
                        else
                            {
                                scr_set_message("Wrong slope tile used for bottom-right piece" + " (Loop)")
                                instance_destroy(); 
                            }
                    }
                //Top-Left
                if tile_exists(tile_slope_surface_id_1)
                    {
                        x = tile_get_x(tile_slope_surface_id_1)
                        y = tile_get_y(tile_slope_surface_id_1)
                        var tile_slope_surface_id_asset_1 = tile_get_background(tile_slope_surface_id_1);
                        if tile_slope_surface_id_asset_1 = mu_slope_10
                        or tile_slope_surface_id_asset_1 = mu_slope_14
                            house_keeping = 2;
                        else
                            {
                                scr_set_message("Wrong slope tile used for top-left piece" + " (Loop)")
                                instance_destroy(); 
                            }
                    }
                //Top-Right
                if tile_exists(tile_slope_surface_id_2)
                    {
                        var tile_slope_surface_id_asset_2 = tile_get_background(tile_slope_surface_id_2);
                        if tile_slope_surface_id_asset_2 = mu_slope_12
                        or tile_slope_surface_id_asset_2 = mu_slope_16
                            house_keeping = 2;
                        else
                            {
                                scr_set_message("Wrong slope tile used for top-right piece" + " (Loop)")
                                instance_destroy(); 
                            }
                    }
                if !tile_exists(tile_slope_surface_id_0)
                or !tile_exists(tile_slope_surface_id_1)
                or !tile_exists(tile_slope_surface_id_2)
                    {
                        //If no such tile has been found, report the error to the console and self-destruct
                        scr_set_message("Loop structure is incomplete" + " (Loop)")
                        instance_destroy(); 
                    }
                //If nothing went wrong during the detection process, begin further execution
                else house_keeping = 2;
            }
        //Top-Right
        if tile_surface_id_asset = mu_slope_12
        or tile_surface_id_asset = mu_slope_16
            {
                tile_slope_surface_id_0 = tile_layer_find(surface_slopes,x-8,y+8);//Top-Left
                tile_slope_surface_id_1 = tile_layer_find(surface_slopes,x+8,y+148);//Bottom-Right
                tile_slope_surface_id_2 = tile_layer_find(surface_slopes,x-8,y+148);//Bottom-Left

                slope_surface_tile_1_id = tile_slope_surface_id_0   //Top-Left
                slope_surface_tile_2_id = tile_slope_surface_id_2   //Bottom-Left
                slope_surface_tile_3_id = tile_surface_id           //Top-Right
                slope_surface_tile_4_id = tile_slope_surface_id_1   //Bottom-Right

                //Top-Left
                if tile_exists(tile_slope_surface_id_0)
                    {
                        x = tile_get_x(tile_slope_surface_id_0)
                        y = tile_get_y(tile_slope_surface_id_0)
                        var tile_slope_surface_id_asset_0 = tile_get_background(tile_slope_surface_id_0);
                        if tile_slope_surface_id_asset_0 = mu_slope_10
                        or tile_slope_surface_id_asset_0 = mu_slope_14
                            house_keeping = 2;
                        else
                            {
                                scr_set_message("Wrong slope tile used for bottom-right piece" + " (Loop)")
                                instance_destroy(); 
                            }
                    }
                //Bottom-Right
                if tile_exists(tile_slope_surface_id_1)
                    {
                        var tile_slope_surface_id_asset_1 = tile_get_background(tile_slope_surface_id_1);
                        if tile_slope_surface_id_asset_1 = mu_slope_13
                        or tile_slope_surface_id_asset_1 = mu_slope_17
                            house_keeping = 2;
                        else
                            {
                                scr_set_message("Wrong slope tile used for top-left piece" + " (Loop)")
                                instance_destroy(); 
                            }
                    }
                //Bottom-Left
                if (tile_slope_surface_id_2)
                    {
                        var tile_slope_surface_id_asset_2 = tile_get_background(tile_slope_surface_id_2);
                        if tile_slope_surface_id_asset_2 = mu_slope_11
                        or tile_slope_surface_id_asset_2 = mu_slope_15
                            house_keeping = 2;
                        else
                            {
                                scr_set_message("Wrong slope tile used for top-right piece" + " (Loop)")
                                instance_destroy(); 
                            }
                    }
                if !tile_exists(tile_slope_surface_id_0)
                or !tile_exists(tile_slope_surface_id_1)
                or !tile_exists(tile_slope_surface_id_2)
                    {
                        //If no such tile has been found, report the error to the console and self-destruct
                        scr_set_message("Loop structure is incomplete" + " (Loop)")
                        instance_destroy(); 
                    }
                //If nothing went wrong during the detection process, begin further execution
                else house_keeping = 2;
            }
        //Bottom-Right
        if tile_surface_id_asset = mu_slope_13
        or tile_surface_id_asset = mu_slope_17
            {
                tile_slope_surface_id_0 = tile_layer_find(surface_slopes,x-8,y-8);//Top-Left
                tile_slope_surface_id_1 = tile_layer_find(surface_slopes,x+8,y-8);//Top-Right
                tile_slope_surface_id_2 = tile_layer_find(surface_slopes,x-8,y+8);//Bottom-Left

                slope_surface_tile_1_id = tile_slope_surface_id_0   //Top-Left
                slope_surface_tile_2_id = tile_slope_surface_id_2   //Bottom-Left
                slope_surface_tile_3_id = tile_slope_surface_id_1   //Top-Right
                slope_surface_tile_4_id = tile_surface_id           //Bottom-Right

                //Top-Left
                if tile_exists(tile_slope_surface_id_0)
                    {
                        x = tile_get_x(tile_slope_surface_id_0)
                        y = tile_get_y(tile_slope_surface_id_0)
                        var tile_slope_surface_id_asset_0 = tile_get_background(tile_slope_surface_id_0);
                        if tile_slope_surface_id_asset_0 = mu_slope_10
                        or tile_slope_surface_id_asset_0 = mu_slope_14
                            house_keeping = 2;
                        else
                            {
                                scr_set_message("Wrong slope tile used for top-left piece" + " (Loop)")
                                instance_destroy(); 
                            }
                    }
                //Top-Right
                if tile_exists(tile_slope_surface_id_1)
                    {
                        var tile_slope_surface_id_asset_1 = tile_get_background(tile_slope_surface_id_1);
                        if tile_slope_surface_id_asset_1 = mu_slope_12
                        or tile_slope_surface_id_asset_1 = mu_slope_16
                            house_keeping = 2;
                        else
                            {
                                scr_set_message("Wrong slope tile used for top-right piece" + " (Loop)")
                                instance_destroy(); 
                            }
                    }
                //Bottom-Left
                if tile_exists(tile_slope_surface_id_2)
                    {
                        var tile_slope_surface_id_asset_2 = tile_get_background(tile_slope_surface_id_2);
                        if tile_slope_surface_id_asset_2 = mu_slope_11
                        or tile_slope_surface_id_asset_2 = mu_slope_15
                            house_keeping = 2;
                        else
                            {
                                scr_set_message("Wrong slope tile used for bottom-left piece" + " (Loop)")
                                instance_destroy(); 
                            }
                    }
                if !tile_exists(tile_slope_surface_id_0)
                or !tile_exists(tile_slope_surface_id_1)
                or !tile_exists(tile_slope_surface_id_2)
                    {
                        //If no such tile has been found, report the error to the console and self-destruct
                        scr_set_message("Loop structure is incomplete" + " (Loop)")
                        instance_destroy(); 
                    }
                //If nothing went wrong during the detection process, begin further execution
                else house_keeping = 2;
            }

        //If no such tile has been found, report the error to the console and self-destruct
        if not (tile_surface_id_asset = mu_slope_10
        or tile_surface_id_asset = mu_slope_11
        or tile_surface_id_asset = mu_slope_12
        or tile_surface_id_asset = mu_slope_13
        or tile_surface_id_asset = mu_slope_14
        or tile_surface_id_asset = mu_slope_15
        or tile_surface_id_asset = mu_slope_16
        or tile_surface_id_asset = mu_slope_17)
            {
                scr_set_message("Wrong slope tiles were used at "+string(x)+"; "+string(y))
                instance_destroy(); 
            }
        var ID_check = instance_place(x,y,obj_loop_logic);
        if instance_exists(ID_check)
            {
                if ID_check != instance_id and ID_check.use_logic_controller_timer &gt;= 8
                    {
                        scr_set_message("Cannot place loop controllers over others")
                        instance_destroy(); 
                    }
            }
        var ID_check = instance_place(x,y,obj_2D_tile_logic);
        if instance_exists(ID_check)
            {
                ID_check.delete_self = 1
                ID_check.dont_delete_tile = 1
                //Top-right loop piece
                var ID_check = instance_place(x+128,y+4,obj_2D_tile_logic);
                if instance_exists(ID_check)
                    {
                        ID_check.delete_self = 1
                        ID_check.dont_delete_tile = 1
                    }
                //Bottom-left loop piece
                var ID_check = instance_place(x+4,y+128,obj_2D_tile_logic);
                if instance_exists(ID_check)
                    {
                        ID_check.delete_self = 1
                        ID_check.dont_delete_tile = 1
                    }
                //Bottom-right loop piece
                var ID_check = instance_place(x+132,y+132,obj_2D_tile_logic);
                if instance_exists(ID_check)
                    {
                        ID_check.delete_self = 1
                        ID_check.dont_delete_tile = 1
                    }
            }
        //Add Flat Surface Tile (To prevent the player from falling off of the loop)
        tile_flat_surface_id = tile_add(mu_door_2,0,0,256,42,x+11,y+238,surface_flats)
        
        tile_flat_surface_id_1 = tile_add(mu_door_2,0,0,256,128,x+12,y+12,0)
        tile_set_visible(tile_flat_surface_id_1,false)
        
        tile_set_visible(tile_flat_surface_id,false)
    }
//If no such tile has been found, create our own loop tiles
else
    {
        if x &lt; 140 or x &gt; room_width-140
            {
                scr_set_message("Cannot place loop controller at canvas edges")
                instance_destroy();
            }
        else
            {
                slope_surface_tile_1_id = tile_add(mu_slope_10,0,0,140,140,edit.user_grid_snap_x-140,edit.user_grid_snap_y-262,surface_slopes)
                slope_surface_tile_2_id = tile_add(mu_slope_11,0,0,140,140,edit.user_grid_snap_x-140,edit.user_grid_snap_y-128,surface_slopes)
                slope_surface_tile_3_id = tile_add(mu_slope_12,0,0,140,140,edit.user_grid_snap_x,edit.user_grid_snap_y-262,surface_slopes)
                slope_surface_tile_4_id = tile_add(mu_slope_13,0,0,140,140,edit.user_grid_snap_x,edit.user_grid_snap_y-128,surface_slopes)
        
                x = tile_get_x(slope_surface_tile_1_id)
                y = tile_get_y(slope_surface_tile_1_id)
        
                tile_surface_id = slope_surface_tile_1_id

                //Add Flat Surface Tile (To prevent the player from falling off of the loop)
                tile_flat_surface_id = tile_add(mu_door_2,0,0,256,42,x+11,y+238,surface_flats)
                
                tile_flat_surface_id_1 = tile_add(mu_door_2,0,0,256,128,x+12,y+12,0)
                tile_set_visible(tile_flat_surface_id_1,false)
                
                tile_set_visible(tile_flat_surface_id,false)
            }
    }

//Collision Region 1 (Enter from left)
collision_region_1_x_1 = x-32
collision_region_1_y_1 = y+140
collision_region_1_x_2 = x+12
collision_region_1_y_2 = y+280

//Collision Region 2 (Enter from right)
collision_region_2_x_1 = x+268
collision_region_2_y_1 = y+140
collision_region_2_x_2 = x+302
collision_region_2_y_2 = y+280

//Collision Region 3 (Top-left tile-switcher)
collision_region_3_x_1 = x+108
collision_region_3_y_1 = y+36
collision_region_3_x_2 = x+140
collision_region_3_y_2 = y+108

//Collision Region 4 (Top-right tile-switcher)
collision_region_4_x_1 = x+140
collision_region_4_y_1 = y+36
collision_region_4_x_2 = x+172
collision_region_4_y_2 = y+108

//Make Ourselves Visible If We Are In Editor Mode
if room = rm_editor
    {
        if (obj_level_editor.use_debug_hud_mode = 1 and visible = false) visible = true;
        if (obj_level_editor.use_debug_hud_mode = 0 and visible = true) visible = false;
    }
else
    {
        if (obj_game_logic.debug_hud != 1 and visible = false) visible = true;
        if (obj_game_logic.debug_hud = 1  and visible = true) visible = false;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy Slope Tiles, If We Have Created Them Prior
if house_keeping = 0
    {
        if tile_exists(tile_slope_surface_id_0) tile_delete(tile_slope_surface_id_0);
        if tile_exists(tile_slope_surface_id_1) tile_delete(tile_slope_surface_id_1);
        if tile_exists(tile_slope_surface_id_2) tile_delete(tile_slope_surface_id_2);
        if tile_exists(slope_surface_tile_1_id) tile_delete(slope_surface_tile_1_id);
        if tile_exists(slope_surface_tile_2_id) tile_delete(slope_surface_tile_2_id);
        if tile_exists(slope_surface_tile_3_id) tile_delete(slope_surface_tile_3_id);
        if tile_exists(slope_surface_tile_4_id) tile_delete(slope_surface_tile_4_id);
    }
//Otherwise, Reset Depth Of Surface Slopes
else
    {
        if tile_exists(slope_surface_tile_1_id) tile_set_depth(slope_surface_tile_1_id,surface_slopes);
        if tile_exists(slope_surface_tile_2_id) tile_set_depth(slope_surface_tile_2_id,surface_slopes);
        if tile_exists(slope_surface_tile_3_id) tile_set_depth(slope_surface_tile_3_id,surface_slopes);
        if tile_exists(slope_surface_tile_4_id) tile_set_depth(slope_surface_tile_4_id,surface_slopes);
    }
if tile_exists(tile_flat_surface_id)      tile_delete(tile_flat_surface_id);
if tile_exists(tile_flat_surface_id_1)    tile_delete(tile_flat_surface_id_1);
if tile_exists(tile_flat_surface_id_2)    tile_delete(tile_flat_surface_id_2);
if tile_exists(tile_flat_surface_id_3)    tile_delete(tile_flat_surface_id_3);
if tile_exists(tile_flat_surface_id_4)    tile_delete(tile_flat_surface_id_4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Destroy ourselves if our tile was deleted
if !tile_exists(tile_surface_id) instance_destroy();

if use_logic_controller_timer &lt; 8 use_logic_controller_timer += 1;
    
//Pause Safety Check
if obj.pause = 0 and tile_exists(tile_surface_id)
    {
        if  obj.px &gt;= collision_region_1_x_1 and obj.px &lt;= collision_region_1_x_2
        and obj.py &gt;= collision_region_1_y_1 and obj.py &lt;= collision_region_1_y_2
            {
                tile_set_depth(slope_surface_tile_2_id,5)
                tile_set_depth(slope_surface_tile_4_id,surface_slopes)
            }
        if  obj.px &gt;= collision_region_2_x_1 and obj.px &lt;= collision_region_2_x_2
        and obj.py &gt;= collision_region_2_y_1 and obj.py &lt;= collision_region_2_y_2
            {
                tile_set_depth(slope_surface_tile_2_id,surface_slopes)
                tile_set_depth(slope_surface_tile_4_id,5)
            }
        if  obj.px &gt;= collision_region_3_x_1 and obj.px &lt;= collision_region_3_x_2
        and obj.py &gt;= collision_region_3_y_1 and obj.py &lt;= collision_region_3_y_2
            {
                tile_set_depth(slope_surface_tile_2_id,surface_slopes)
                tile_set_depth(slope_surface_tile_4_id,5)
            }
        if  obj.px &gt;= collision_region_4_x_1 and obj.px &lt;= collision_region_4_x_2
        and obj.py &gt;= collision_region_4_y_1 and obj.py &lt;= collision_region_4_y_2
            {
                tile_set_depth(slope_surface_tile_2_id,5)
                tile_set_depth(slope_surface_tile_4_id,surface_slopes)
            }
        //Set Depth Level Regardless Of Collisions If We Are Saving A Level
        if instance_exists(edit)
            {
                if edit.use_write_delay &gt; 0
                    {
                        tile_set_depth(slope_surface_tile_1_id,surface_slopes)
                        tile_set_depth(slope_surface_tile_2_id,surface_slopes)
                        tile_set_depth(slope_surface_tile_3_id,surface_slopes)
                        tile_set_depth(slope_surface_tile_4_id,surface_slopes)
                    }
            }
        if tile_exists(tile_flat_surface_id_1)
            {
                if point_in_rectangle(obj_game_logic.px,obj_game_logic.py,x+12,y+140,x+290,y+280)
                     tile_set_depth(tile_flat_surface_id_1,5);
                if point_in_rectangle(obj_game_logic.px,obj_game_logic.py,x-12,y+140,x+12,y+280)
                or point_in_rectangle(obj_game_logic.px,obj_game_logic.py,x+290,y+140,x+302,y+280)
                    tile_set_depth(tile_flat_surface_id_1,0);
            }
        //Boundary Boxes Highlights
        alpha = lerp(alpha,alpha_lerp,0.025)
        if alpha &gt; 0.3 alpha_lerp = 0;
        if alpha &lt; 0.1 alpha_lerp = 1;
        //Visibility Check
        if room = rm_editor
            {
                if (obj_level_editor.use_debug_hud_mode = 1 and visible = false) visible = true;
                if (obj_level_editor.use_debug_hud_mode = 0 and visible = true) visible = false;
                integrity_timer += 1
                if integrity_timer = 20
                    {
                        if !tile_exists(slope_surface_tile_1_id)
                        or !tile_exists(slope_surface_tile_2_id)
                        or !tile_exists(slope_surface_tile_3_id)
                        or !tile_exists(slope_surface_tile_4_id)
                            instance_destroy();
                        integrity_timer = 0
                    }
            }
        else
            {
                if (obj_game_logic.debug_hud != 1 and visible = false) visible = true;
                if (obj_game_logic.debug_hud = 1  and visible = true) visible = false;
            }
    } //End of Pause Safety Check
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if visible = true
    {
        //Draw Tile Boundary Box
        draw_set_alpha(alpha)
        draw_rectangle_colour(collision_region_1_x_1,collision_region_1_y_1,floor(collision_region_1_x_2-1),floor(collision_region_1_y_2-1),c_red,c_red,c_yellow,c_red,false)
        draw_rectangle_colour(collision_region_2_x_1,collision_region_2_y_1,floor(collision_region_2_x_2-1),floor(collision_region_2_y_2-1),c_red,c_red,c_yellow,c_red,false)
        draw_rectangle_colour(collision_region_3_x_1,collision_region_3_y_1,floor(collision_region_3_x_2-1),floor(collision_region_3_y_2-1),c_red,c_red,c_yellow,c_red,false)
        draw_rectangle_colour(collision_region_4_x_1,collision_region_4_y_1,floor(collision_region_4_x_2-1),floor(collision_region_4_y_2-1),c_red,c_red,c_yellow,c_red,false)
        draw_set_color(c_white)
        draw_rectangle(collision_region_1_x_1,collision_region_1_y_1,floor(collision_region_1_x_2-1),floor(collision_region_1_y_2-1),true)
        draw_rectangle(collision_region_2_x_1,collision_region_2_y_1,floor(collision_region_2_x_2-1),floor(collision_region_2_y_2-1),true)
        draw_rectangle(collision_region_3_x_1,collision_region_3_y_1,floor(collision_region_3_x_2-1),floor(collision_region_3_y_2-1),true)
        draw_rectangle(collision_region_4_x_1,collision_region_4_y_1,floor(collision_region_4_x_2-1),floor(collision_region_4_y_2-1),true)
        draw_set_alpha(1)
        draw_sprite(sprite_index,0,x,y+11)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
