<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_logic_processor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>obj_activate_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_sound(ost_fp_theme_orchestral_version_stringtunes,50,true)

o = obj_game_logic

//Adjust Current Song's Volume
if o.music_mute = 0 scr_adjust_music_silent(o.music_volume/100,1000);
else scr_adjust_music_silent(0,1000);
//Editor Font
editor_font=font_add_sprite(spr_editor_font,ord(" "),false,0)
anchor_x = 85
anchor_y = 24
bg_current = 0
bg_layer = 0
cursor_index = spr_drawing_cursor
cursor_color = mu_paint_pink
highlight_alpha = 0.3
highlight_alpha_x = 0
highlight_alpha_y = 0
highlight_alpha_width = 0
highlight_alpha_height = 0
particle_frame = 0
particle_x = 0
particle_y = 0
zoom_enable = 1
keyboard_timer = 0
keyboard_indicator = ""
character_keyboard = 0
character_string = ""
keyboard_string = ""
launcher_point_x = -1
launcher_point_y = -1
controller_panning_timer = 0
controller_accept_press = 0
controller_accept_pressed = 0
controller_cancel_press = 0
controller_cancel_pressed = 0
mouse_capture = 0
saving_algorithm = 0
tile_angle_copy = 0
//Surface Type List Registry
st_list[0] = "Top Left Outer Loop"
st_list[1] = "Top Right Outside Loop"
st_list[2] = "Low Left Outside Loop"
st_list[3] = "Low Right Outside Loop"

st_list[4] = "Top Left Inside Loop"
st_list[5] = "Top Right Inside Loop"
st_list[6] = "Low Left Inside Loop"
st_list[7] = "Low Right Inside Loop"

st_list[8] = "Floating Platform"
st_list[9] = "Hang Bar Surface"
st_list[10] = "Ladder Surface"
st_list[11] = "Moving Platform"

st_list[12] = "Slope Ceiling"

surface_type = st_list[0]
surface_type_iterate = 0
//Slope Tile List Registry

//Shang Mu Temple Tileset
bg_list[0,0] = tile_bridge_mask
bg_list[0,1] = mu_slope_19
bg_list[0,2] = mu_ramp_0
bg_list[0,3] = mu_ramp_1
bg_list[0,4] = mu_ramp_2
bg_list[0,5] = mu_ramp_3
bg_list[0,6] = mu_ramp_4
bg_list[0,7] = mu_ramp_5
bg_list[0,8] = mu_ramp_6
bg_list[0,9] = mu_ramp_7
bg_list[0,10] = mu_ramp_8
bg_list[0,11] = mu_ramp_9
bg_list[0,12] = mu_ramp_22
bg_list[0,13] = mu_ramp_23
bg_list[0,14] = mu_ramp_24
bg_list[0,15] = mu_ramp_25
bg_list[0,16] = mu_ramp_16
bg_list[0,17] = mu_ramp_17
bg_list[0,18] = mu_ramp_18
bg_list[0,19] = mu_ramp_19
bg_list[0,20] = mu_ramp_20
bg_list[0,21] = mu_ramp_21
bg_list[0,23] = mu_slope_6
bg_list[0,24] = mu_slope_7
bg_list[0,25] = mu_slope_8
bg_list[0,26] = mu_slope_9
bg_list[0,27] = mu_slope_10
bg_list[0,28] = mu_slope_11
bg_list[0,29] = mu_slope_12
bg_list[0,30] = mu_slope_13
bg_list[0,31] = mu_slope_2
bg_list[0,32] = mu_slope_3
bg_list[0,33] = mu_slope_4
bg_list[0,34] = mu_slope_5
bg_list[0,35] = mu_slope_14
bg_list[0,36] = mu_slope_15
bg_list[0,37] = mu_slope_16
bg_list[0,38] = mu_slope_17
bg_list_limit_0 = 38
//West District Tileset
bg_list[1,0] = wd_ramp_0
bg_list[1,1] = wd_ramp_1
bg_list[1,2] = wd_ramp_2
bg_list[1,3] = wd_ramp_3
bg_list[1,4] = wd_ramp_4
bg_list[1,5] = wd_ramp_5
bg_list[1,6] = wd_ramp_6
bg_list[1,7] = wd_ramp_7
bg_list[1,8] = wd_ramp_8
bg_list[1,9] = wd_ramp_9
bg_list[1,10] = wd_ramp_10
bg_list[1,11] = wd_ramp_11
bg_list[1,12] = wd_ramp_12
bg_list[1,13] = wd_ramp_13
bg_list[1,14] = wd_ramp_14
bg_list[1,15] = wd_ramp_15
bg_list[1,16] = wd_ramp_16
bg_list[1,17] = wd_ramp_17
bg_list[1,18] = wd_ramp_18
bg_list[1,19] = wd_ramp_19
bg_list[1,20] = wd_ramp_20
bg_list[1,21] = wd_ramp_21
bg_list[1,22] = wd_ramp_22
bg_list[1,23] = wd_ramp_23
bg_list[1,24] = wd_ramp_24
bg_list[1,25] = wd_ramp_25
bg_list[1,26] = wd_ramp_26
bg_list[1,27] = wd_ramp_27
bg_list[1,28] = wd_slope_0
bg_list[1,29] = wd_slope_1
bg_list[1,30] = wd_slope_2
bg_list[1,31] = wd_slope_3
bg_list[1,32] = wd_slope_4
bg_list[1,33] = wd_slope_5
bg_list[1,34] = wd_slope_6
bg_list[1,35] = wd_slope_7
bg_list[1,36] = wd_slope_8
bg_list[1,37] = wd_slope_9
bg_list[1,38] = wd_slope_10
bg_list[1,39] = wd_slope_11
bg_list[1,40] = wd_slope_12
bg_list[1,41] = wd_slope_13
bg_list[1,42] = wd_slope_14
bg_list[1,43] = wd_slope_15
bg_list[1,44] = wd_slope_16
bg_list[1,45] = wd_slope_17
bg_list[1,46] = wd_slope_18
bg_list[1,47] = wd_slope_19
bg_list[1,48] = wd_slope_20
bg_list[1,49] = wd_slope_21
bg_list[1,50] = wd_slope_22
bg_list[1,51] = wd_slope_23
bg_list_limit_1 = 51
//Set Default Selected Slope Tile
bg_index = bg_list[0,0]
bg_iterate = 0
bg_page = 0
//Set Angle Node Data Object List
node_index[0] = 0
node_length = 0
bg_angle_trigger = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animate Background

//Reset Breath Meter
o.breath = o.breath_max

//Animate Background
background_x[2] -= 0.025
background_x[3] -= 0.0255
bg_current += 0.05 if bg_current &gt; 2.8 bg_current = 0;

//Animate Background
switch(floor(bg_current))
    {
        case 0: {background_index[3] = mu_bg_10; break;}
        case 1: {background_index[3] = mu_bg_11; break;}
        case 2: {background_index[3] = mu_bg_12; break;}
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Camera Controls

//4x preview window
view_xview[1] = mouse_x-8
view_yview[1] = mouse_y-8

if  mouse_x &gt;= anchor_x-1 and mouse_x &lt;= anchor_x+256
and mouse_y &gt;= anchor_y-1 and mouse_y &lt;= anchor_y+200
    {
        view_visible[1] = true;
        view_visible[2] = true;
    }
else
    {
        view_visible[1] = false;
        view_visible[2] = false;
    }

if zoom_enable = 1
    {
        //8x zoom window
        view_xport[2] = mouse_x+16
        view_yport[2] = mouse_y-24
        view_xview[2] = mouse_x-1.5
        view_yview[2] = mouse_y-1.5
        
        view_xport[0] = 0
        view_yport[0] = 0
    }
else
    view_visible[2] = false;

var use_cursor_x = mouse_x;
var use_cursor_y = mouse_y;

//Hotkeys
if character_keyboard = 0
    {
        //Height Map Paint Brush
        if keyboard_check_pressed(ord("1"))
            {
                cursor_index = spr_drawing_cursor
                cursor_color = mu_paint_pink
                bg_layer = 0
                scr_set_message("Brush set to height map pixels!")
                //Play menu sound
                audio_play_sound(pause_select,50,false)
                //Trigger Highlighter
                scr_set_mask_highlight(362,41,373,53)
            }
        //Length Map Paint Brush
        if keyboard_check_pressed(ord("2"))
            {
                cursor_index = spr_drawing_cursor
                cursor_color = mu_paint_green
                bg_layer = 1
                scr_set_message("Brush set to length map pixels!")
                //Play menu sound
                audio_play_sound(pause_select,50,false)
                //Trigger Highlighter
                scr_set_mask_highlight(377,41,388,53) 
            }
        //Eraser Brush
        if keyboard_check_pressed(ord("3"))
            {
                cursor_index = spr_erasing_cursor
                scr_set_message("3px eraser enabled!")
                //Play menu sound
                audio_play_sound(pause_select,50,false)
                //Trigger Highlighter
                scr_set_mask_highlight(392,41,403,53) 
            }
        //Create Angle Nodes Per Mask
        if keyboard_check_pressed(ord("4"))
            {
                instance_destroy(obj_mask_node);
                var bg_length = background_get_width(bg_index);
                var bg_it = 0;
                while(bg_it &lt;= bg_length)
                    {
                        instance_create(anchor_x+bg_it,anchor_y+200,obj_mask_node)
                        bg_it += 1
                    }
                scr_set_message("Angle nodes spawned!")
                //Play menu sound
                audio_play_sound(pause_select,50,false)
                //Trigger Highlighter
                scr_set_mask_highlight(407,41,418,53)
            }
    }
//Saving Hotkey
if keyboard_check_pressed(vk_f5)
    saving_algorithm = 1;

//Keyboard Precise Controls

//Left
if keyboard_check_pressed(ord("A"))
    {
        use_cursor_x -= 1
        mouse_capture = 0
        audio_play_sound(snd_text_scrolling,50,false)
    }
//Right
if keyboard_check_pressed(ord("D"))
    {
        use_cursor_x += 1
        mouse_capture = 0
        audio_play_sound(snd_text_scrolling,50,false)
    }
//Up
if keyboard_check_pressed(ord("W"))
    {
        use_cursor_y -= 1
        mouse_capture = 0
        audio_play_sound(snd_text_scrolling,50,false)
    }
//Down
if keyboard_check_pressed(ord("S"))
    {
        use_cursor_y += 1
        mouse_capture = 0
        audio_play_sound(snd_text_scrolling,50,false)
    }

//Keyboard Scrolling Controls

//Left
if keyboard_check_direct(vk_left)
    {
        use_cursor_x -= 1
        mouse_capture = 0
    }
//Right
if keyboard_check_direct(vk_right)
    {
        use_cursor_x += 1
        mouse_capture = 0
    }
//Up
if keyboard_check_direct(vk_up)
    {
        use_cursor_y -= 1
        mouse_capture = 0
    }
//Down
if keyboard_check_direct(vk_down)
    {
        use_cursor_y += 1
        mouse_capture = 0
    }

//Controller Controls
if gamepad_is_connected(obj_game_logic.joy_modern_id)
    {
        //Controller Precise Controls
        if controller_panning_timer &lt; 4
            {
                //Left
                if gamepad_button_check_pressed(obj_game_logic.joy_modern_id,obj_game_logic.joy_left_mod)
                    {
                        use_cursor_x -= 1
                        controller_panning_timer += 1
                        audio_play_sound(snd_text_scrolling,50,false)
                    }
                //Right
                if gamepad_button_check_pressed(obj_game_logic.joy_modern_id,obj_game_logic.joy_right_mod)
                    {
                        use_cursor_x += 1
                        controller_panning_timer += 1
                        audio_play_sound(snd_text_scrolling,50,false)
                    }
                //Up
                if gamepad_button_check_pressed(obj_game_logic.joy_modern_id,obj_game_logic.joy_up_mod)
                    {
                        use_cursor_y -= 1
                        controller_panning_timer += 1
                        audio_play_sound(snd_text_scrolling,50,false)
                    }
                //Down
                if gamepad_button_check_pressed(obj_game_logic.joy_modern_id,obj_game_logic.joy_down_mod)
                    {
                        use_cursor_y += 1
                        controller_panning_timer += 1
                        audio_play_sound(snd_text_scrolling,50,false)
                    }
            }

        //Controller Scrolling Controls
        if controller_panning_timer &gt;= 4
            {
                //Left
                if gamepad_button_check(obj_game_logic.joy_modern_id,obj_game_logic.joy_left_mod)
                    {
                        use_cursor_x -= 1
                    }
                //Right
                if gamepad_button_check(obj_game_logic.joy_modern_id,obj_game_logic.joy_right_mod)
                    {
                        use_cursor_x += 1
                    }
                //Up
                if gamepad_button_check(obj_game_logic.joy_modern_id,obj_game_logic.joy_up_mod)
                    {
                        use_cursor_y -= 1
                    }
                //Down
                if gamepad_button_check(obj_game_logic.joy_modern_id,obj_game_logic.joy_down_mod)
                    {
                        use_cursor_y += 1
                    }
            }

        //Decrement Scrolling Timer If No Buttons Have Been Pushed
        if  !gamepad_button_check(obj_game_logic.joy_modern_id,obj_game_logic.joy_left_mod)
        and !gamepad_button_check(obj_game_logic.joy_modern_id,obj_game_logic.joy_right_mod)
        and !gamepad_button_check(obj_game_logic.joy_modern_id,obj_game_logic.joy_up_mod)
        and !gamepad_button_check(obj_game_logic.joy_modern_id,obj_game_logic.joy_down_mod)
            {
                if controller_panning_timer &gt; 0 controller_panning_timer -= 1;
            }

        //Press "Accept"
        if gamepad_button_check_pressed(obj_game_logic.joy_modern_id,obj_game_logic.joy_b_mod)
            controller_accept_pressed = 1;
        else
            controller_accept_pressed = 0;
        //Press-and-Hold "Accept"
        if gamepad_button_check(obj_game_logic.joy_modern_id,obj_game_logic.joy_b_mod)
            controller_accept_press = 1;
        else
            controller_accept_press = 0;
        //Press-and-Hold "Cancel"
        if gamepad_button_check(obj_game_logic.joy_modern_id,obj_game_logic.joy_c_mod)
            controller_cancel_press = 1;
        else
            controller_cancel_press = 0;
    }

if keyboard_check(vk_anykey) mouse_capture = 0;
else                         mouse_capture = 1;

if mouse_capture = 0
    {
        //Manipulate Real Mouse Position Based On Provided Coordinates
        var use_cursor_mouse_x = abs(use_cursor_x-view_xview[view_port]);
        var use_cursor_mouse_y = abs(use_cursor_y-view_yview[view_port]);
        
        var use_window_width  = window_get_width()  / view_wview[view_port];
        var use_window_height = window_get_height() / view_hview[view_port];
        
        window_mouse_set(use_cursor_mouse_x*use_window_width,use_cursor_mouse_y*use_window_height);
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Graphical Interface
if mouse_check_button_pressed(mb_left) or keyboard_check_pressed(vk_space)
or controller_accept_pressed = 1
    {
        //Lefthand Toolbar
        //-----------------------------------------------//
        if mouse_x &gt;= 3 and mouse_x &lt;= 61
            {
                //New Canvas
                if mouse_y &gt;= 46 and mouse_y &lt;= 60
                    {
                        tile_layer_delete(0)
                        tile_layer_delete(1)
                        instance_destroy(obj_mask_node,true)
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_mask_highlight(2,46,60,60)
                    }
                //Save Canvas
                if mouse_y &gt;= 66 and mouse_y &lt;= 80
                    saving_algorithm = 1
                //Open Canvas
                if mouse_y &gt;= 86 and mouse_y &lt;= 100
                    {
                        //grab filename string
                        var tile_file = get_open_filename("Game Maker Script (*.gml)|*.gml","");

                        //do stuff if filename string exists, aka they didn't hit cancel and picked a file
                        if tile_file != ""
                            {
                                //clear tile layers
                                tile_layer_delete(0)
                                tile_layer_delete(1)
                                //grab id of file (the important bit, need this to do file operations)
                                var tile_file_id = file_text_open_read(tile_file);
                                var tile_file_count = 0;
                                //Do height map data
                                do
                                    {
                                        //current line in file
                                        str = file_text_readln(tile_file_id)
                                        //if it starts with o, aka orig_clip (aka muh substrings)
                                        if (string_char_at(str, 1) == 'o' and string_char_at(str, 19) = "0")
                                            {
                                                //Copy only the last three characters of the string
                                                var string_end = string_copy(str,string_pos("=",str),3);
                                                if tile_file_count &gt; 100
                                                    string_end = string_copy(str,string_pos("=",str),4);
                                                //Strip off non-digit values from the tail end of the string
                                                var tile_y = real(string_digits(string_end));
                                                //Find second array parameter
                                                var string_end = string_copy(str,string_pos(",",str),3);
                                                if tile_file_count &gt; 100
                                                    string_end = string_copy(str,string_pos(",",str),4);
                                                var tile_x = real(string_digits(string_end));
                                                //add a tile
                                                tile_add(mu_paint_pink,0,0,1,1,tile_x+anchor_x,tile_y+anchor_y,0);
                                                tile_file_count += 1
                                            }
                                    }
                                until (file_text_eof(tile_file_id)) //end of file is reached
                                file_text_close(tile_file_id); //make sure to close files when you're done

                                var tile_file_id = file_text_open_read(tile_file);
                                var tile_file_count = 0;
                                //Do precalculated angle data
                                do
                                    {
                                        //current line in file
                                        str = file_text_readln(tile_file_id)
                                        //if it starts with o, aka orig_clip (aka muh substrings)
                                        if (string_char_at(str, 1) == 'o' and string_char_at(str, 19) = "1")
                                            {
                                                //Copy only the last three characters of the string
                                                var string_end = string_copy(str,string_pos("=",str),3);
                                                if tile_file_count &gt; 100
                                                    string_end = string_copy(str,string_pos("=",str),4);
                                                //Strip off non-digit values from the tail end of the string
                                                var tile_angle = real(string_digits(string_end));
                                                //Find second array parameter
                                                var string_end = string_copy(str,string_pos(",",str),3);
                                                if tile_file_count &gt; 100
                                                    string_end = string_copy(str,string_pos(",",str),4);
                                                var tile_x = real(string_digits(string_end));
                                                //add a tile at the current x_index (should be same as the file's "orig_clip[x]") and y position, with offsets
                                                var obj_mask = instance_create(tile_x+anchor_x,anchor_y+200,obj_mask_node);
                                                obj_mask.tile_angle = tile_angle;
                                                tile_file_count += 1
                                            }
                                    }
                                until (file_text_eof(tile_file_id)) //end of file is reached
                                file_text_close(tile_file_id); //make sure to close files when you're done

                                var tile_file_id = file_text_open_read(tile_file);
                                var tile_file_count = 0;
                                //Do length map data
                                do
                                    {
                                        //current line in file
                                        str = file_text_readln(tile_file_id)
                                        //if it starts with o, aka orig_clip (aka muh substrings)
                                        if (string_char_at(str, 1) == 'o' and string_char_at(str, 19) = "2")
                                            {
                                                //Copy only the last three characters of the string
                                                //in the array is only 1 character long!)
                                                var string_end = string_copy(str,string_pos("=",str),3);
                                                if tile_file_count &gt; 100
                                                    string_end = string_copy(str,string_pos("=",str),4);
                                                //Strip off non-digit values from the tail end of the string
                                                var tile_x = real(string_digits(string_end));
                                                //Find second array parameter
                                                var string_end = string_copy(str,string_pos(",",str),3);
                                                if tile_file_count &gt; 100
                                                    string_end = string_copy(str,string_pos(",",str),4);
                                                var tile_y = real(string_digits(string_end));
                                                //add a tile
                                                tile_add(mu_paint_green,0,0,1,1,tile_x+anchor_x,tile_y+anchor_y,1);
                                                tile_file_count += 1
                                            }
                                    }
                                until (file_text_eof(tile_file_id)) //end of file is reached
                                file_text_close(tile_file_id); //make sure to close files when you're done
                                scr_set_message("Collision mask file loaded!")
                            }
                    }
                //File Name
                if mouse_y &gt;= 130 and mouse_y &lt;= 146
                    {
                        character_keyboard = 1
                        keyboard_string = ""
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_mask_highlight(2,130,60,146)
                    }
                else
                    character_keyboard = 0;

                //Scroll background left
                if  mouse_x &gt;= 3 and mouse_x &lt;= 31
                and mouse_y &gt;= 192 and mouse_y &lt;= 225
                    {
                        bg_iterate -= 1
                        if bg_page = 0
                            {
                                if bg_iterate &lt; 0
                                    bg_iterate = bg_list_limit_0;
                            }
                        if bg_page = 1
                            {
                                if bg_iterate &lt; 0
                                    bg_iterate = bg_list_limit_1;
                            }
                        bg_index = bg_list[bg_page,bg_iterate]
                        tile_layer_delete(0)
                        tile_layer_delete(1)
                        instance_destroy(obj_mask_node,true)
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_mask_highlight(3,192,31,225)
                    }
                //Scroll background right
                if  mouse_x &gt;= 33 and mouse_x &lt;= 61
                and mouse_y &gt;= 192 and mouse_y &lt;= 225
                    {
                        bg_iterate += 1
                        if bg_page = 0
                            {
                                if bg_iterate &gt; bg_list_limit_0
                                    bg_iterate = 0;
                            }
                        if bg_page = 1
                            {
                                if bg_iterate &gt; bg_list_limit_1
                                    bg_iterate = 0;
                            }
                        bg_index = bg_list[bg_page,bg_iterate]
                        tile_layer_delete(0)
                        tile_layer_delete(1)
                        instance_destroy(obj_mask_node,true)
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_mask_highlight(33,192,61,225)
                    }
                //Change tileset
                if  mouse_x &gt;= 3 and mouse_x &lt;= 61
                and mouse_y &gt;= 227 and mouse_y &lt;= 235
                    {
                        bg_page += 1
                        if bg_page &gt; 1
                            {
                                bg_iterate = 0
                                bg_page = 0
                            }
                        bg_index = bg_list[bg_page,bg_iterate]
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_mask_highlight(3,227,61,235)
                    }
            }
        //Canvas
        //-----------------------------------------------//
        if  mouse_x &gt;= anchor_x-1 and mouse_x &lt;= anchor_x+256
        and mouse_y &gt;= anchor_y-1 and mouse_y &lt;= anchor_y+200
            {
                //Draw pixels
                if cursor_index = spr_drawing_cursor and cursor_color != mu_paint_red
                    {
                        tile_add(cursor_color,0,0,1,1,mouse_x,mouse_y,bg_layer)
                        audio_play_sound(character_hangbar,50,false)
                        particle_frame = 0.1
                        particle_x = mouse_x
                        particle_y = mouse_y
                    }
                //Draw Launcher Point
                if cursor_index = spr_drawing_cursor and cursor_color = mu_paint_red
                    {
                        launcher_point_x = mouse_x
                        launcher_point_y = mouse_y
                    }
            }
        //Righthand Toolbar
        //-----------------------------------------------//
        if  mouse_x &gt;= 362 and mouse_x &lt;= 418
        and mouse_y &gt;= 41 and mouse_y &lt;= 53
            {
                //Height Map Paint Brush
                if mouse_x &gt;= 362 and mouse_x &lt;= 373
                    {
                        cursor_index = spr_drawing_cursor
                        cursor_color = mu_paint_pink
                        bg_layer = 0
                        scr_set_message("Brush set to height map pixels!")
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_mask_highlight(362,41,373,53)
                    }
                //Length Map Paint Brush
                if mouse_x &gt;= 377 and mouse_x &lt;= 388
                    {
                        cursor_index = spr_drawing_cursor
                        cursor_color = mu_paint_green
                        bg_layer = 1
                        scr_set_message("Brush set to length map pixels!")
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_mask_highlight(377,41,388,53) 
                    }
                //Eraser Brush
                if mouse_x &gt;= 392 and mouse_x &lt;= 403
                    {
                        cursor_index = spr_erasing_cursor
                        scr_set_message("3px eraser enabled!")
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_mask_highlight(392,41,403,53) 
                    }
                //Create Angle Nodes Per Mask
                if mouse_x &gt;= 407 and mouse_x &lt;= 418
                    {
                        instance_destroy(obj_mask_node);
                        var bg_length = background_get_width(bg_index);
                        var bg_it = 0;
                        while(bg_it &lt;= bg_length)
                            {
                                node_index[bg_it] = instance_create(anchor_x+bg_it,anchor_y+200,obj_mask_node)
                                bg_it += 1
                            }
                        node_length = bg_length;
                        bg_angle_trigger = 1;
                        scr_set_message("Angle nodes spawned!")
                        //Play menu sound
                        audio_play_sound(pause_select,50,false)
                        //Trigger Highlighter
                        scr_set_mask_highlight(407,41,418,53)
                    }
            }
        //Surface Type Selector
        if mouse_x &gt;= 362 and mouse_x &lt;= 420
        and mouse_y &gt;= 86 and mouse_y &lt;= 94
            {
                surface_type_iterate += 1
                if surface_type_iterate &gt; 12 surface_type_iterate = 0
                surface_type = st_list[surface_type_iterate]
                scr_set_message("Surface Type set to "+surface_type+"!")
                //Play menu sound
                audio_play_sound(pause_select,50,false)
                //Trigger Highlighter
                scr_set_mask_highlight(392,41,403,53) 
            }
        //Launcher Point Selector
        if mouse_x &gt;= 392 and mouse_x &lt;= 403
        and mouse_y &gt;= 142 and mouse_y &lt;= 154
            {
                cursor_index = spr_drawing_cursor
                cursor_color = mu_paint_red
                bg_layer = 0
                scr_set_message("Brush set to launcher point!")
                //Play menu sound
                audio_play_sound(pause_select,50,false)
                //Trigger Highlighter
                scr_set_mask_highlight(392,41,403,53) 
            }
        //Enable Zoom Lens
        if mouse_x &gt;= 407 and mouse_x &lt;= 418
        and mouse_y &gt;= 142 and mouse_y &lt;= 154
            {
                zoom_enable += 1
                if zoom_enable &gt; 1 zoom_enable = 0;
                if zoom_enable = 0
                    {
                        scr_set_message("Zoom lens disabled!")
                    }
                if zoom_enable = 1
                    {
                        scr_set_message("Zoom lens enabled!")
                    }
                //Play menu sound
                audio_play_sound(pause_select,50,false)
                //Trigger Highlighter
                scr_set_mask_highlight(407,142,418,154)
            }
        //Titlebar
        //-----------------------------------------------//
        if  mouse_x &gt;= 407 and mouse_x &lt;= 421
        and mouse_y &gt;= 2 and mouse_y &lt;= 16
            game_restart();
    }

//Disable Key Input Focus For File Name Items
if  mouse_x &gt;= anchor_x and mouse_x &lt;= anchor_x+256
and mouse_y &gt;= anchor_y and mouse_y &lt;= anchor_y+200
    character_keyboard = 0;

if character_keyboard = 1
    {
        //Keyboard Keys String
        if keyboard_check_pressed(vk_anykey)
            {
                var check_key = string_char_at(keyboard_string,string_length(keyboard_string));
        
                if check_key = "!"
                or check_key = '"'
                or check_key = "#"
                or check_key = "$"
                or check_key = "%"
                or check_key = "^"
                or check_key = "&amp;"
                or check_key = "'"
                or check_key = "("
                or check_key = ")"
                or check_key = "*"
                or check_key = "+"
                or check_key = "-"
                or check_key = "."
                or check_key = "/"
                or check_key = ":"
                or check_key = ";"
                or check_key = "&lt;"
                or check_key = "="
                or check_key = "&gt;"
                or check_key = "?"
                or check_key = "@"
                or check_key = "["
                or check_key = "\"
                or check_key = "]"
                or check_key = "^"
                or check_key = "_"
                or check_key = "`"
                or check_key = "{"
                or check_key = "|"
                or check_key = "}"
                or check_key = "~"
                    {
                        scr_set_message("No special characters allowed!")
                        keyboard_string = string_delete(keyboard_string,string_length(keyboard_string),1);
                    }
            }
        //Enforce Strict Character Limit
        if string_length(keyboard_string) &gt; 8
            {
                keyboard_string = string_delete(keyboard_string,string_length(keyboard_string),1)
            }
        character_string = keyboard_string
        //Increment Flash Timer
        keyboard_timer += 1
        //Reset Flash Timer
        if keyboard_timer &gt; 32 keyboard_timer = 0;
        if keyboard_timer &lt; 16 keyboard_indicator = "|";
        else                   keyboard_indicator = "";
    }
else
    keyboard_indicator = "";

//Mouse Hover Over Nodes
var object_ID = collision_point(mouse_x,mouse_y,obj_mask_node,false,true);

if object_ID != noone
    {
        object_ID.draw_enabled = 1;
        if mouse_wheel_up()
            object_ID.tile_angle += 1;
        if mouse_wheel_down()
            object_ID.tile_angle -= 1;
        if keyboard_check_direct(ord("E"))
            object_ID.tile_angle += 1;
        if keyboard_check_direct(ord("Q"))
            object_ID.tile_angle += -1;

        //Modify angles based on either of 8 angles (A shortcut to reduce angle rotation times)
        if keyboard_check_direct(vk_numpad2)
            object_ID.tile_angle = 270;
        if keyboard_check_direct(vk_numpad1)
            object_ID.tile_angle = 225;
        if keyboard_check_direct(vk_numpad3)
            object_ID.tile_angle = 325;
        if keyboard_check_direct(vk_numpad4)
            object_ID.tile_angle = 180;
        if keyboard_check_direct(vk_numpad5)
            object_ID.tile_angle = tile_angle_copy;
        if keyboard_check_direct(vk_numpad6)
            object_ID.tile_angle = 0;
        if keyboard_check_direct(vk_numpad7)
            object_ID.tile_angle = 115;
        if keyboard_check_direct(vk_numpad8)
            object_ID.tile_angle = 90;
        if keyboard_check_direct(vk_numpad9)
            object_ID.tile_angle = 45;
        if keyboard_check_direct(vk_numpad0)
            tile_angle_copy = object_ID.tile_angle;

        //Reset angles upon exiting minimum/maximum angle ranges
        if object_ID.tile_angle &gt; 360
            object_ID.tile_angle = 0;
        if object_ID.tile_angle &lt; 0
            object_ID.tile_angle = 360
    }

if bg_angle_trigger &gt;= 1
    {
        bg_angle_trigger += 1

        if bg_angle_trigger &gt; 8
            {
                //Decide which direction to modify angle data; 0 = Left; 1 = Right
                var bg_direction = 0;
                switch(surface_type)
                    {
                        case 0: {bg_direction = 1; break;}
                        case 1: {bg_direction = 0; break;}
                        case 2: {bg_direction = 0; break;}
                        case 3: {bg_direction = 1; break;}

                        case 4: {bg_direction = 0; break;}
                        case 5: {bg_direction = 0; break;}
                        case 6: {bg_direction = 1; break;}
                        case 7: {bg_direction = 1; break;}

                        case 8: {bg_direction = 1; break;}
                        case 9: {bg_direction = 1; break;}
                        case 10: {bg_direction = 1; break;}
                        case 11: {bg_direction = 1; break;}
                        case 12: {bg_direction = 0; break;}
                    }
                //Modify angles for all angle nodes
                var bg_it = 0;
                if bg_direction = 1
                    {
                        while(bg_it &lt; node_length-1)
                            {
                                node_index[bg_it].tile_angle = point_direction(node_index[bg_it].x,node_index[bg_it].y,node_index[bg_it+1].x,node_index[bg_it+1].y)
                                bg_it += 1
                            }
                    }
                if bg_direction = 0
                    {
                        bg_it = node_length
                        while(bg_it &gt; 1)
                            {
                                node_index[bg_it].tile_angle = point_direction(node_index[bg_it-1].x,node_index[bg_it-1].y,node_index[bg_it].x,node_index[bg_it].y)
                                bg_it -= 1
                            }
                    }
                bg_angle_trigger = 0;
            }
    }

//Pixel Eraser
if mouse_check_button(mb_left) or keyboard_check(vk_space)
or controller_accept_press = 1
    {
        //Erase pixels
        if cursor_index = spr_erasing_cursor
            {
                var eraser_brush = tile_layer_find(bg_layer,mouse_x,mouse_y);
                if tile_exists(eraser_brush) tile_delete(eraser_brush);

                var eraser_brush = tile_layer_find(bg_layer,mouse_x-1,mouse_y);
                if tile_exists(eraser_brush) tile_delete(eraser_brush);

                var eraser_brush = tile_layer_find(bg_layer,mouse_x-2,mouse_y);
                if tile_exists(eraser_brush) tile_delete(eraser_brush);

                var eraser_brush = tile_layer_find(bg_layer,mouse_x+1,mouse_y);
                if tile_exists(eraser_brush) tile_delete(eraser_brush);

                var eraser_brush = tile_layer_find(bg_layer,mouse_x+2,mouse_y);
                if tile_exists(eraser_brush) tile_delete(eraser_brush);

                var eraser_brush = tile_layer_find(bg_layer,mouse_x-1,mouse_y-1);
                if tile_exists(eraser_brush) tile_delete(eraser_brush);

                var eraser_brush = tile_layer_find(bg_layer,mouse_x-2,mouse_y-1);
                if tile_exists(eraser_brush) tile_delete(eraser_brush);

                var eraser_brush = tile_layer_find(bg_layer,mouse_x+1,mouse_y-1);
                if tile_exists(eraser_brush) tile_delete(eraser_brush);

                var eraser_brush = tile_layer_find(bg_layer,mouse_x+2,mouse_y-1);
                if tile_exists(eraser_brush) tile_delete(eraser_brush);

                var eraser_brush = tile_layer_find(bg_layer,mouse_x-1,mouse_y-2);
                if tile_exists(eraser_brush) tile_delete(eraser_brush);

                var eraser_brush = tile_layer_find(bg_layer,mouse_x-2,mouse_y-2);
                if tile_exists(eraser_brush) tile_delete(eraser_brush);

                var eraser_brush = tile_layer_find(bg_layer,mouse_x+1,mouse_y-2);
                if tile_exists(eraser_brush) tile_delete(eraser_brush);

                var eraser_brush = tile_layer_find(bg_layer,mouse_x+2,mouse_y-2);
                if tile_exists(eraser_brush) tile_delete(eraser_brush);

                var eraser_brush = tile_layer_find(bg_layer,mouse_x-1,mouse_y+1);
                if tile_exists(eraser_brush) tile_delete(eraser_brush);

                var eraser_brush = tile_layer_find(bg_layer,mouse_x-2,mouse_y+1);
                if tile_exists(eraser_brush) tile_delete(eraser_brush);

                var eraser_brush = tile_layer_find(bg_layer,mouse_x+1,mouse_y+1);
                if tile_exists(eraser_brush) tile_delete(eraser_brush);

                var eraser_brush = tile_layer_find(bg_layer,mouse_x+2,mouse_y+1);
                if tile_exists(eraser_brush) tile_delete(eraser_brush);

                var eraser_brush = tile_layer_find(bg_layer,mouse_x-1,mouse_y+2);
                if tile_exists(eraser_brush) tile_delete(eraser_brush);

                var eraser_brush = tile_layer_find(bg_layer,mouse_x-2,mouse_y+2);
                if tile_exists(eraser_brush) tile_delete(eraser_brush);

                var eraser_brush = tile_layer_find(bg_layer,mouse_x+1,mouse_y+2);
                if tile_exists(eraser_brush) tile_delete(eraser_brush);

                var eraser_brush = tile_layer_find(bg_layer,mouse_x+2,mouse_y+2);
                if tile_exists(eraser_brush) tile_delete(eraser_brush);

                if !audio_is_playing(character_skid)
                    audio_play_sound(character_skid,50,false);
            }
    }
//Quick Delete
if mouse_check_button(mb_right) or keyboard_check(vk_lcontrol)
or controller_cancel_press = 1
    {
        var delete_tile   = tile_layer_find(0,mouse_x,mouse_y);
        var delete_tile_l = tile_layer_find(1,mouse_x,mouse_y);
        if tile_exists(delete_tile)
            {
                tile_delete(delete_tile);
                if !audio_is_playing(character_skid) audio_play_sound(character_skid,50,false);
            }
        if tile_exists(delete_tile_l)
            {
                tile_delete(delete_tile_l);
                if !audio_is_playing(character_skid) audio_play_sound(character_skid,50,false);
            }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Saving Algorithm
if saving_algorithm = 1
    {
        //Set Default File Name If It's Not Specified
        if character_string = ""
            character_string = background_get_name(bg_index);
        //Save Canvas Data
        var sav_x = anchor_x;
        var sav_y = anchor_y-2;
        var sav_id = 0;
        var sav_ld = 0;
        var sav_bg = 0;
        var sav_lg = 0;
        //Initialize NSFS
        nsfs_init()
        //Create The Maps Directory If It Doesn't Already Exist
        if nsfs_is_available = true
            {
                if !directory_exists_ns(program_directory + "\Masks")
                    directory_create_ns(program_directory + "\Masks");
            }
        //Remove Older File If It Exists
        if file_exists_ns(program_directory + "Masks\" + character_string + ".gml")
            file_delete_ns(program_directory + "Masks\" + character_string + ".gml");
        //Open Mask
        sav_file = file_text_open_write_ns(program_directory + "Masks\scr_" + character_string + ".gml",-1)
        //Write Comments
        file_text_write_line_ns(sav_file,"//Collision Height Map Data")
        file_text_write_line_ns(sav_file,"//"+background_get_name(bg_index)+"("+surface_type+")")
        file_text_write_line_ns(sav_file,"//Arguments: argument0 = height map data; argument1 = pre-calculated angle data; argument2 = length map data")
        file_text_write_line_ns(sav_file,"//Array Parameters:")
        file_text_write_line_ns(sav_file,"//For Floors and Ceilings: orig_clip[tile,X coordinate] = Y Coordinate")
        file_text_write_line_ns(sav_file,"//For Walls:               orig_clip[tile,Y coordinate] = X Coordinate")
        //Save Height Map Data
        file_text_write_line_ns(sav_file,"//    Height Map Data    //")
        file_text_write_line_ns(sav_file,"//-----------------------//")
        while(sav_x &lt;= 256+anchor_x)
            {
                sav_id = tile_layer_find(0,sav_x,sav_y);
                if tile_exists(sav_id)
                    file_text_write_line_ns(sav_file,"orig_clip[argument0,"+string(sav_x-anchor_x)+"]="+string(sav_y-anchor_y));
                sav_y += 1
                if sav_y &gt; 200+anchor_y
                    {
                        sav_y = anchor_y-2
                        sav_x += 1
                    }
            }
        //Change Node Masks
        if instance_exists(obj_mask_node)
            {
                obj_mask_node.sprite_index = spr_water;
                file_text_write_line_ns(sav_file,"//    Pre-Calculated Angle Data    //")
                file_text_write_line_ns(sav_file,"//---------------------------------//")
                //Save Angle Data
                var obj_x = anchor_x;
                var obj_y = anchor_y;
                var obj_bg = 0;
                var obj_lg = 0;
                while(obj_x &lt;= 256+anchor_x)
                    {
                        obj_ld = collision_point(obj_x,obj_y,obj_mask_node,false,true)
                        if instance_exists(obj_ld)
                            {
                                file_text_write_line_ns(sav_file,"orig_clip[argument1,"+string(obj_x-anchor_x)+"]="+string(obj_ld.tile_angle))
                            }
                        obj_y += 1
                        if obj_y &gt; 200+anchor_y
                            {
                                obj_y = anchor_y
                                obj_x += 1
                            }
                    }
                //Change Node Masks Back To Normal
                obj_mask_node.sprite_index = spr_gem_particle
            }
        file_text_write_line_ns(sav_file,"//    Length Map Data    //")
        file_text_write_line_ns(sav_file,"//-----------------------//")
        //Save Length Map Data
        var sav_x = anchor_x-2;
        var sav_y = anchor_y;
        var sav_id = 0;
        var sav_ld = 0;
        var sav_bg = 0;
        var sav_lg = 0;
        var tile_detected = 0;
        while(sav_y &lt;= 200+anchor_y)
            {
                sav_ld = tile_layer_find(1,sav_x,sav_y);
                if tile_exists(sav_ld)
                    file_text_write_line_ns(sav_file,"orig_clip[argument2,"+string(sav_y-anchor_y)+"]="+string(sav_x-anchor_x))
                sav_x += 1
                if sav_x &gt; 256+anchor_x
                    {
                        sav_x = anchor_x-2
                        sav_y += 1
                    }
            }
        file_text_write_line_ns(sav_file,"//  Surface Type Status  //")
        file_text_write_line_ns(sav_file,"//-----------------------//")
        var surface_type_string = "";
        switch(surface_type_iterate)
            {
                case 0: {surface_type_string = "scr_top_left_outside_loop" break;}
                case 1: {surface_type_string = "scr_top_right_outside_loop" break;}
                case 2: {surface_type_string = "scr_bottom_left_outside_loop" break;}
                case 3: {surface_type_string = "scr_bottom_right_outside_loop" break;}

                case 4: {surface_type_string = "scr_top_left_inside_loop" break;}
                case 5: {surface_type_string = "scr_top_right_inside_loop" break;}
                case 6: {surface_type_string = "scr_bottom_left_inside_loop" break;}
                case 7: {surface_type_string = "scr_bottom_right_inside_loop" break;}

                case 8: {surface_type_string = "scr_floor_over_floor" break;}
                case 9: {surface_type_string = "scr_hang_bar_surface" break;}
                case 10: {surface_type_string = "scr_ladder_surface" break;}
                case 11: {surface_type_string = "scr_moving_platform" break;}

                case 12: {surface_type_string = "scr_slope_ceiling" break;}
            }
        file_text_write_line_ns(sav_file,"orig_clip[argument3,0] = obj_game_logic."+surface_type_string)

        file_text_write_line_ns(sav_file,"//   Launcher Position   //")
        file_text_write_line_ns(sav_file,"//-----------------------//")
        file_text_write_line_ns(sav_file,"orig_clip[argument4,0]="+string(launcher_point_x-anchor_x))
        file_text_write_line_ns(sav_file,"orig_clip[argument4,1]="+string(launcher_point_y-anchor_y))
        file_text_close_ns(sav_file)
        scr_set_message("Collision Mask File Saved!")
        //Play menu sound
        audio_play_sound(pause_select,50,false)
        //Trigger Highlighter
        scr_set_mask_highlight(2,66,60,80)
        saving_algorithm = 0
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(editor_font)
draw_set_color(c_white)
//Draw Canvas Coordinates
if mouse_x &gt;= anchor_x-1 and mouse_x &lt;= anchor_x+256
and mouse_y &gt;= anchor_y-1 and mouse_y &lt;= anchor_y+200
    {
        draw_text(375,58,string(mouse_x-anchor_x))
        draw_text(375,73,string(mouse_y-anchor_y))
    }
draw_set_font(o.text_font_academy)
draw_text(4,170,background_get_name(bg_index))
draw_background(bg_index,anchor_x,anchor_y)
draw_rectangle(anchor_x,anchor_y,anchor_x+background_get_width(bg_index),anchor_y+background_get_height(bg_index),true)
//Draw Keyboard String
draw_text(4,131,string_copy(character_string+keyboard_indicator,1,8))
draw_text_ext(362,97,surface_type,14,71)
//Draw Launcher Point
draw_circle_colour(launcher_point_x,launcher_point_y,2,c_red,c_aqua,false)

if view_current = 0
    {
        //Draw Highlights Under Selected Items
        if highlight_alpha != 0
            {
                //Decrement Highlighter Alpha Transparency
                highlight_alpha -= 0.0075
                if highlight_alpha &lt; 0 highlight_alpha = 0
                //Draw Tile Boundary Box
                draw_set_alpha(highlight_alpha)
                draw_rectangle_colour(highlight_alpha_x,highlight_alpha_y,floor(highlight_alpha_width-1),floor(highlight_alpha_height-1),c_red,c_red,c_yellow,c_yellow,false)
                draw_set_color(c_white)
                draw_rectangle(highlight_alpha_x,highlight_alpha_y,floor(highlight_alpha_width-1),floor(highlight_alpha_height-1),true)
                draw_set_alpha(1)
            }
        
        //Draw Click Particle Effect
        if particle_frame &gt; 0 
            {
                draw_sprite_ext(spr_cube_pop_small,particle_frame,particle_x,particle_y,1,1,0,c_white,obj_game_logic.mouse_cursor_transparency)
                particle_frame += 1
                if particle_frame &gt; 9.8 particle_frame = 0;
            }
        
        //Draw Cursor
        draw_sprite_ext(cursor_index,0,mouse_x,mouse_y,1,1,0,c_white,obj_game_logic.mouse_cursor_transparency)
    }
else
    //Draw Cursor
    draw_sprite_ext(cursor_index,1,mouse_x,mouse_y,1,1,0,c_white,obj_game_logic.mouse_cursor_transparency)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
