<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_guardian_claws</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy_floater</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
anchor_x = x
anchor_y = y
scr_enemy_hp(128)
hp_offset = -16
flash_palette = spr_guardian_palette
dropped_goodies = obj_gold_gem

anchor_angle_offset = 0
anchor_angle_target = 10
anchor_distance = 100
achor_target = 105

claw_state = 0
claw_timer = 0
claw_point = 0
claw_floor = y

laser_flash = 0
laser_angle = 0
laser_distance = 0

laser_start_x = 0
laser_start_y = 0

laser_mid_x = 0
laser_mid_y = 0
laser_mid_length = 0

laser_end_x = 0
laser_end_y = 0

spawn_timer = 0

warning_frame = 0
warning_x = 28
warning_y = (internal_res_height/2) - 16

move_alpha = 1

if instance_exists(obj_guardian)
    {
        claw_floor = obj_guardian.startup_anchor
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_guardian)
    obj_guardian.slam_override = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()

if death = 0 and o.pause = 0
    {
        if instance_exists(obj_guardian)
            {
                anchor_x = obj_guardian.x+168
                anchor_y = obj_guardian.y+143
            }

        if state = 0
            {
                anchor_angle_offset = lerp(anchor_angle_offset,anchor_angle_target,0.05)
                if anchor_angle_offset &gt;= 9.8
                    anchor_angle_target = -10;
                if anchor_angle_offset &lt;= -9.8
                    anchor_angle_target = 10;
        
                anchor_distance = lerp(anchor_distance,achor_target,0.05)
                if achor_target &gt;= 104.4
                    achor_target = 90;
                if achor_target &lt;= -90.8
                    achor_target = 105;
        
                var anchor_angle = 0;
                if xdir = -1 anchor_angle = 180;

                frame = 0
                claw_timer = 0
                
                x = anchor_x+lengthdir_x(anchor_distance,anchor_angle+anchor_angle_offset);
                y = anchor_y+lengthdir_y(anchor_distance,anchor_angle+anchor_angle_offset);

                claw_point = y
            }
        //Claw Strike State
        if state = 1
            {
                var claw_hspeed = 2;
                var claw_vspeed = 6;
                var claw_hitbox = 56;
                if o.user_enemy_level &gt;= 2
                    {
                        claw_hspeed = 4
                        claw_vspeed = 10
                        claw_hitbox = 72
                    }
                frame = 0
                claw_timer = 0

                if claw_state = 0
                    {
                        x += claw_hspeed*(xdir)
                        subangle += 2*(-xdir)
                        y -= claw_hspeed;
                        if y &lt; claw_point-56
                            {
                                claw_state = 1
                                audio_play_sound(snd_enemy_sword,50,false)
                                audio_play_sound(snd_enemy_flame,50,false)
                                audio_play_sound(snd_enemy_projectile,50,false)
                            }
                    }

                if claw_state = 1
                    {
                        x += claw_vspeed*-xdir
                        y += claw_vspeed
                        if y &gt; claw_point + 96
                            {
                                claw_state = 0
                                subangle = 0
                                state = 0
                            }

                        //Search For Positions To Deal Damage, If the Player Is Not Hurt
                        if point_distance(o.px,o.py,x,y) &lt; claw_hitbox
                        and o.hurt[0] = 0 and o.hurt[1] = 0
                        and o.shield_invuln = 32
                        and not (o.shield_active = 1 and o.shield=spr_shield_metal)
                            {
                                scr_set_screen_shake(24,3)
                                scr_enemy_deal_damage(1,2,4)
                                audio_play_sound(snd_enemy_projectile,50,false)
                            }
                    }
            }
        //Ground Pound State
        if state = 2
            {
                var claw_hspeed = 5.5;
                var claw_vspeed = 8.5;
                var claw_hitbox = 56;
                if o.user_enemy_level &gt;= 2
                    {
                        claw_hspeed = 7.5
                        claw_vspeed = 10.5
                        claw_hitbox = 72
                    }
                if claw_state = 0
                    {
                        y -= claw_hspeed
                        subangle += -3*(-xdir)
                        if y &lt; claw_point-64
                            {
                                claw_state = 1
                                audio_play_sound(snd_enemy_sword,50,false)
                                audio_play_sound(snd_enemy_flame,50,false)
                                audio_play_sound(snd_enemy_projectile,50,false)
                            }
                    }
                if claw_state = 1
                    {
                        y += claw_vspeed

                        if y &gt; claw_floor + 16
                            {
                                claw_state = 0
                                subangle = 0
                                state = 0
                                subangle = 0
                                scr_set_screen_shake(24,3)
                                audio_play_sound(snd_enemy_destroyed,50,false)
                                audio_play_sound(snd_enemy_explosion,50,false)
                                instance_create(x,y,obj_guardian_explosion)
                            }

                        //Search For Positions To Deal Damage, If the Player Is Not Hurt
                        if point_distance(o.px,o.py,x,y) &lt; claw_hitbox
                        and o.hurt[0] = 0 and o.hurt[1] = 0
                        and o.shield_invuln = 32
                        and not (o.shield_active = 1 and o.shield=spr_shield_metal)
                            {
                                scr_set_screen_shake(24,3)
                                scr_enemy_deal_damage(1,2,4)
                                audio_play_sound(snd_enemy_projectile,50,false)
                            }
                    }
            }
        //Laser Fire State
        if state = 3
            {
                anchor_angle_offset = lerp(anchor_angle_offset,anchor_angle_target,0.05)
                if anchor_angle_offset &gt;= 9.8
                    anchor_angle_target = -10;
                if anchor_angle_offset &lt;= -9.8
                    anchor_angle_target = 10;
        
                anchor_distance = lerp(anchor_distance,achor_target,0.05)
                if achor_target &gt;= 104.4
                    achor_target = 90;
                if achor_target &lt;= -90.8
                    achor_target = 105;
        
                var anchor_angle = 0;
                if xdir = -1 anchor_angle = 180;

                x = anchor_x+lengthdir_x(anchor_distance,anchor_angle+anchor_angle_offset);
                y = anchor_y+lengthdir_y(anchor_distance,anchor_angle+anchor_angle_offset);

                claw_point = y
                if instance_exists(obj_guardian)
                    obj_guardian.slam_override = 1;

                if claw_state = 0
                    {
                        frame += 0.5
                        if frame &gt; 4.8
                            frame = 0;
                        claw_timer += 1
                        if claw_timer = 1
                            {
                                if !audio_is_playing(snd_charge)
                                    audio_play_sound(snd_charge,50,false);
                            }
                        if claw_timer &gt; 120
                            {
                                frame = 0
                                claw_state  = 1
                                claw_timer  = 0
                                laser_mid_length = 0
                                laser_angle = (point_direction(x,y,o.universal_player_x,o.universal_player_y))+90
                                var instance_laser_id = instance_create(x,y,obj_guardian_laser);
                                instance_laser_id.claw_id = self
                            }
                    }
                if claw_state = 1
                    {
                        claw_timer += 1
                        spawn_timer += 1
                        laser_mid_length += 0.25

                        if spawn_timer &gt; 30
                            {
                                var instance_laser_id = instance_create(x,y,obj_guardian_laser);
                                instance_laser_id.claw_id = self
                                spawn_timer = 0
                            }

                        if o.user_enemy_level &gt;= 2
                            laser_mid_length += 0.1;
                        if claw_timer = 1
                            {
                                scr_set_screen_shake(24,3)
                                if !audio_is_playing(snd_beam)
                                    audio_play_sound(snd_beam,50,false);
                            }
                        if (o.user_enemy_level &lt; 2 and claw_timer &gt; 120)
                        or (o.user_enemy_level &gt;= 2 and claw_timer &gt; 180)
                            {
                                state = 0
                                frame = 0
                                claw_state = 0
                                claw_timer = 0
                                laser_angle = 0
                                if instance_exists(obj_guardian_laser)
                                    instance_destroy(obj_guardian_laser);
                                if instance_exists(obj_guardian)
                                    obj_guardian.slam_override = 0;
                            }
                    }
            }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if claw_state = 1
    {
        if o.universal_player_x &lt; x
            warning_x = internal_res_width - 48;
        if o.universal_player_x &gt; x
            warning_x = internal_res_width = 28;
        
        warning_frame += 0.5
        if (warning_frame &gt; 2.8) warning_frame = 0;
        draw_sprite(spr_hazard_warning,warning_frame,warning_x,warning_y)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()

if state &gt; 0 and state &lt; 3 and claw_state = 0
    {
        d3d_set_fog(true, c_aqua, 0, 64)
        draw_sprite_ext(sprite_index,frame,x+bob_x,y+bob,xdir*(scale+spring_jiggle+enemy_growth),scale+enemy_growth-(spring_jiggle/3),angle+subangle,c_white,0.8)
        d3d_set_fog(false, c_aqua, 0, 0)
    }

if state = 3 and claw_state = 1
    {
        laser_start_x = x
        laser_start_y = y

        //Laser Mid-Point Anchor
        var anchor_x = laser_start_x;
        var anchor_y = laser_start_y;

        laser_mid_x = anchor_x+lengthdir_x(12,laser_angle-90);
        laser_mid_y = anchor_y+lengthdir_y(12,laser_angle-90);

        //Laser End-Point Anchor
        laser_end_x = laser_mid_x+lengthdir_x(laser_mid_length*32,laser_angle-90);
        laser_end_y = laser_mid_y+lengthdir_y(laser_mid_length*32,laser_angle-90);

        laser_flash += 1
        if laser_flash &gt; 2
            laser_flash = 0;

        if laser_flash = 1
             d3d_set_fog(true,c_white,0,64);

        //Start Point
        draw_sprite_ext(spr_guardian_laser,0,laser_start_x,laser_start_y,1,1,laser_angle,c_white,1)
        //Mid-Point
        draw_sprite_ext(spr_guardian_laser_mid,0,laser_mid_x,laser_mid_y,1,laser_mid_length,laser_angle,c_white,1)
        //End-Point
        draw_sprite_ext(spr_guardian_laser,1,laser_end_x,laser_end_y,1,1,laser_angle,c_white,1)
        
        d3d_set_fog(false,c_white,0,0)
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
