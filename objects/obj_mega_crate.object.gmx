<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_mega_crate</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_mega_item_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Cube Object
start_x = x
start_y = y
frame = 5.8
angle = 0
angle_a = 0
freeze = 0
xdir = 1
ground = 0
offset_x = 0
offset_y = 42
cube_visible = 1
cube_angle = 0
cube_speed = 0
cube_accel = 0.15
cube_gravity = 0
cube_timer = 0
cube_collided = 0
cube_slope = 0
cube_growth = 1
cube_jiggle = 0
cube_health = 5.8
cube_jiggle_scale = 0
cube_jiggle_timer = 0
cube_attack_timer = 0
cube_wall_touch_timer = 0
cube_existential_starter_timer = 0
cube_sound_timer = 0
cube_float_timer = 0
cube_float_bobbing = 0
cube_float_direction = 0
cube_float_offset = 0
cube_skid = 2
cube_can_shatter = 1
cube_can_slide_faster = 0
cube_skidding_sound_timer = 0
cube_attacking_sound_asset = snd_crate_broken
cube_skidding_sound_asset = snd_heavy_drop
cube_bouncing_sound_asset = snd_crate_broken
tile_valid_collision_state = 0
tile_valid_collision = 1
tile_ramp_asset = mu_slope_0
//Are We Allowed To Hold Items?
give_item = 0
item = 0
attacked = 0
attacked_damage = 4
attacked_allow = 0
unkillable = 0
are_we_push = 0
has_health = 1
play_sound = 1
bounce_sound_timer = 30
spring_speed = 0
spring_timer = 0
spring_frame = 0
spring_offset_x = 0
spring_offset_y = 0
spring_angle = 0
spring_y_offset = 0

weather_rain_particles_frame = 0
weather_slip = 0
weather_slip_target = 0
slip_timer = 0

//Attack Variables
attack = 0
damage = 4
heart  = 20
alpha  = 0
attack_range = 48               //Horizontal Hitbox Range
attack_width = 359              //Angular Hitbox Range
travel_length = 0               //Horizontal offset for Hitbox
travel_height = 0               //Vertical offset for Hitbox
attack_shape  = 0               //Shape of the hitbox (Elliptical)
attack_offset = 0               //Attack offset

//Initialize Cube Particles
particle_frame = -1
particle_frame_1 = -128
particle_frame_2 = -128
particle_frame_3 = -128
particle_frame_4 = -128
particle_frame_5 = -128
particle_x_1 = x
particle_y_1 = y-16
particle_x_2 = random_range(-18,18)
particle_y_2 = random_range(-24,12)
particle_x_3 = random_range(-18,18)
particle_y_3 = random_range(-24,12)
particle_x_4 = random_range(-18,18)
particle_y_4 = random_range(-24,12)
particle_x_5 = random_range(-18,18)
particle_y_5 = random_range(-24,12)

broken_particles_0 = spr_crate_broken_0
broken_particles_1 = spr_crate_broken_1
broken_particles_2 = spr_crate_broken_2
broken_particles_3 = spr_crate_broken_3
broken_particles_4 = spr_crate_broken_4
recreate_self = obj_mega_crate

if sprite_index != spr_mega_car
and sprite_index != spr_mega_dumpster
and sprite_index != spr_mega_melon
and object_index != obj_spring_32
    {
        tile_ID = tile_add(tile_fof_1,0,0,64,24,x-32,y-72,surface_slopes);
        tile_ID_offset = 72
        tile_set_visible(tile_ID,false)
    }
else
    tile_ID = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if tile_exists(tile_ID) tile_delete(tile_ID);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics &amp; Movement
var movement_allowed = 1;
if room = rm_editor
    {
        var parent = obj_level_editor;
        
        if parent.use_enemy_mode_iterations = 2 and obj_game_logic.user_cursor_mode = 1
            freeze = 1;
        else freeze = 0;

        play_sound = 1
        if obj_game_logic.user_cursor_mode = 1
            play_sound = 0;

        if parent.use_write_delay &gt; 0
        or (point_in_rectangle(parent.use_cursor_x,parent.use_cursor_y,start_x-32,start_y-64,start_x+32,start_y)
        and obj_game_logic.user_cursor_mode = 1 and parent.use_tile_menu = 0 and parent.side_bar_allow = 0)
        or (freeze = 1)
            {
                x = start_x
                y = start_y
                cube_gravity = 0
                cube_speed = 0
                movement_allowed = 0
            }
    }
if obj_game_logic.pause = 0
{
if bounce_sound_timer &gt; 0
    bounce_sound_timer -= 1;
    
//If we have collided with any surfaces, explode the cube
if cube_collided = 0
    {
        //Throw cube forward
        x += cube_speed

        if slip_timer &gt; 0
            {
                if slip_timer &gt; 0 slip_timer -= 1;
                weather_slip = lerp(weather_slip,weather_slip_target,0.08);
                x += weather_slip;
            }

        //Play skidding sound effect
        if cube_speed != 0 and (ground = 1 or cube_slope = 1)
            {
                cube_sound_timer += 1
                if cube_sound_timer &gt; 10
                    {
                        cube_sound_timer = 0
                        if play_sound = 1
                            {
                                audio_stop_sound(snd_heavy_skidding)
                                audio_play_sound(snd_heavy_skidding,50,false)
                            }
                    }
            }
        if abs(cube_speed) &gt; 6
            {
                if cube_speed &gt; 6 cube_speed = 6;
                if cube_speed &lt; -6 cube_speed = -6;
            }

        if cube_slope = 0 and ground = 0
            {
                var water_ID = collision_point(x,y-32,obj_smart_pools,false,true);
                //Modify cube's gravity
                y += cube_gravity
                //Provide cube's gravitational acceleration
                angle = 0
                if y-32 &gt; obj_game_logic.water_height or instance_exists(water_ID)
                    {
                        var cube_surface_id_top = tile_layer_find(surface_flats,x,y-sprite_height);
                        cube_float_timer += 0.25
                        if cube_float_timer = 0.25
                            {
                                if y-32 &gt; obj_game_logic.water_height
                                    cube_float_offset = obj_game_logic.water_height;
                                if instance_exists(water_ID)
                                    cube_float_offset = water_ID.y;
                                if play_sound = 1
                                    {
                                        audio_stop_sound(snd_heavy_splash)
                                        audio_play_sound(snd_heavy_splash,50,false)
                                    }
                            }
                        if cube_gravity &gt; 4 cube_gravity = 4;
                        if cube_gravity &lt; -1 cube_gravity = -1;
                        cube_gravity -= 0.24
                        if cube_float_direction = 0
                            cube_float_bobbing = lerp(cube_float_bobbing,2,0.24);
                        if cube_float_direction = 1
                            cube_float_bobbing = lerp(cube_float_bobbing,-2,0.24);

                        if cube_float_bobbing &gt; 1.8
                            cube_float_direction = 1;
                        if cube_float_bobbing &lt; -1.8
                            cube_float_direction = 0;
                        if tile_exists(cube_surface_id_top)
                            {
                                cube_gravity = 4
                                if play_sound = 1 and bounce_sound_timer = 0
                                    {
                                        bounce_sound_timer = 30
                                        if !audio_is_playing(cube_bouncing_sound_asset)
                                            audio_play_sound(cube_bouncing_sound_asset,50,false);
                                    }
                            }
                    }
                if y-32 &lt;= obj_game_logic.water_height and !instance_exists(water_ID)
                    {
                        cube_gravity += 0.24
                        cube_float_timer = 0
                        if cube_gravity &gt; 10 cube_gravity = 10;
                    }
                if cube_gravity &lt; 0.5
                and (y-32 &gt; obj_game_logic.water_height-8 and y-32 &lt; obj_game_logic.water_height+8)
                    {
                        cube_gravity = 0
                        cube_float_timer = 10
                        y = floor(y)
                    }
                if instance_exists(water_ID)
                    {
                        if y-32 &gt; water_ID.y-8 and y-32 &lt; water_ID.y+8
                            {
                                cube_gravity = 0
                                cube_float_timer = 10
                                y = floor(y)
                            }
                    }
            }

        //Check for Tiles on Layer 0. (Flat Surface Collisions)
        var cube_surface_id_bottom = tile_layer_find(surface_flats,x,y);
        var cube_surface_id_wall   = tile_layer_find(surface_flats,x+(32*sign(cube_speed)),y-16);
        //Slope Collision Sensor
        var cube_ramp_id           = tile_layer_find(surface_slopes,x,y);
        
        //Invalidate detection of hangbars and ladders
        var cube_item_bg_bottom = tile_flat_24;

        var cube_rail_check = 0;
        if tile_exists(cube_ramp_id)
            {
                cube_item_bg_bottom = tile_get_background(cube_ramp_id)
                if cube_item_bg_bottom = spr_ladder_0
                or cube_item_bg_bottom = spr_ladder_1
                or cube_item_bg_bottom = spr_ladder_2
                or cube_item_bg_bottom = spr_ladder_3
                or cube_item_bg_bottom = spr_ladder_4
                or cube_item_bg_bottom = spr_ladder_5
                or cube_item_bg_bottom = spr_hangbar_0
                or cube_item_bg_bottom = spr_hangbar_1
                or cube_item_bg_bottom = spr_hangbar_2
                or cube_item_bg_bottom = spr_hangbar_3
                    cube_ramp_id = -1;
                cube_rail_check = scr_get_rail_check(cube_item_bg_bottom);

                if cube_rail_check = 1
                    {
                        if cube_speed &gt; 1 and cube_speed &lt; 6 cube_speed += 0.25;
                        if cube_speed &gt; -6 and cube_speed &lt; -1 cube_speed -= 0.25;

                        var cube_collision_ID = collision_line(x+(32*sign(cube_speed)),y-56,x+(32*sign(cube_speed)),y-8,obj_enemy_parent,false,true);
                        if instance_exists(cube_collision_ID)
                            {
                                if cube_collision_ID.attacked = 0 and cube_collision_ID.alpha = 0
                                    {
                                        cube_collision_ID.attacked = 1
                                        cube_collision_ID.attacked_damage = 4
                                    }
                            }
                    }
            }
        
        //---------Collisions---------//
        //----------------------------//

        if tile_exists(cube_surface_id_bottom)
            {
                y = tile_get_y(cube_surface_id_bottom)
                if ground = 0
                    {
                        var item_collision_ID = collision_line(x-30,y-8,x+30,y+8,obj_destructible,false,true);
                        if instance_exists(item_collision_ID)
                            {
                                item_collision_ID.attacked = 1;
                            }                        
                        if play_sound = 1 and bounce_sound_timer = 0
                            {
                                audio_stop_sound(cube_skidding_sound_asset)
                                audio_play_sound(cube_skidding_sound_asset,50,false)
                            }
                    }
                ground = 1
                angle = 0
            }
        else
            ground = 0;
        var cube_collision_ID = collision_line(x+(32*sign(cube_speed)),y-56,x+(32*sign(cube_speed)),y-8,obj_mega_item_parent,false,true);
        var item_collision_ID = collision_line(x+(32*sign(cube_speed)),y-56,x+(32*sign(cube_speed)),y-8,obj_destructible,false,true);
        if instance_exists(item_collision_ID)
            {
                item_collision_ID.attacked = 1;
            }
        if tile_exists(cube_surface_id_wall) or instance_exists(cube_collision_ID)
            {
                var yes = 0;
                if cube_speed &gt; 0 and cube_wall_touch_timer = 0
                    {
                        cube_speed = -abs(cube_speed)
                        yes = 1
                    }
                if cube_speed &lt; 0 and cube_wall_touch_timer = 0
                    {
                        cube_speed = abs(cube_speed)
                        yes = 1
                    }
                if yes = 1
                    {
                        cube_health -= 0.15
                        cube_wall_touch_timer = 16
                        if play_sound = 1 and bounce_sound_timer = 0
                            {
                                bounce_sound_timer = 30
                                if object_index != obj_spring_32
                                    scr_set_screen_shake(6,3);

                                if sprite_index != spr_mega_bomb
                                    {
                                        audio_stop_sound(cube_bouncing_sound_asset)
                                        audio_play_sound(cube_bouncing_sound_asset,50,false)
                                    }
                                else
                                    {
                                        audio_stop_sound(cube_skidding_sound_asset)
                                        audio_play_sound(cube_skidding_sound_asset,50,false)
                                    }
                            }
                    }
            }
        if cube_wall_touch_timer &gt; 0
            {
                var cube_surface_id_left    = tile_layer_find(surface_flats,x-(32),y-16);
                var cube_surface_id_right   = tile_layer_find(surface_flats,x+(32),y-16);

                if tile_exists(cube_surface_id_right) and !tile_exists(cube_surface_id_left)
                    {
                        cube_speed = -abs(cube_speed)
                        x = tile_get_x(cube_surface_id_right)-32;
                    }
                if tile_exists(cube_surface_id_left) and !tile_exists(cube_surface_id_right)
                    {
                        cube_speed = abs(cube_speed)
                        x = tile_get_x(cube_surface_id_left)+(tile_get_width(cube_surface_id_left))+32;
                    }
                cube_wall_touch_timer -= 1;
            }
        //If we have collided with the boundaries of the room, explode the cube
        if x &gt; obj_game_logic.camera_boundary_right
        or x &lt; obj_game_logic.camera_boundary_left
        or y &gt; obj_game_logic.camera_boundary_bottom
            {
                cube_collided = 2;
                if sprite_index = obj_mega_block
                    {
                        if room = rm_editor
                            {
                                instance_create(start_x,start_y,obj_mega_block)
                            }
                        instance_destroy();
                    }
                if sprite_index = spr_spring_32
                    {
                        if room = rm_editor
                            {
                                instance_create(start_x,start_y,obj_spring_32)
                            }
                        instance_destroy();
                    }
            }
        //If we are colliding with a slope tile, clip to its surface based on X position and explode
        if tile_exists(cube_ramp_id) and movement_allowed = 1
            {    
                //Collect background ID of the tile, and possibly reroute its appropriate ID to a different
                //tile's collision data, if we need to
                var tile_ramp_asset = obj_game_logic.enemy_slopes[tile_get_background(cube_ramp_id)];

                //Get Player Coordinates Relative to the Tile's Origins
                var cube_ramp_pos_x=abs(tile_get_x(cube_ramp_id)-x)   //Get X
                var cube_ramp_pos_y=abs(tile_get_y(cube_ramp_id)-y)   //Get Y

                //If tile was not flagged as "ignore", read its collision data
                if background_exists(tile_ramp_asset)
                    {
                        //Check If Cube Y is Greater Than Slope's Current Height
                        if (cube_ramp_pos_y &gt;= obj_game_logic.orig_clip[tile_ramp_asset,cube_ramp_pos_x])
                            {
                                if cube_slope = 0 and play_sound = 1
                                    {
                                        audio_stop_sound(cube_skidding_sound_asset)
                                        audio_play_sound(cube_skidding_sound_asset,50,false)
                                    }
                                cube_slope = 1;
                            }
                        if obj_game_logic.orig_clip[tile_ramp_asset,cube_ramp_pos_x] = -1
                            cube_slope = 0;
                    }

                if cube_slope = 1
                    {
                        y = floor(tile_get_y(cube_ramp_id))+obj_game_logic.orig_clip[tile_ramp_asset,cube_ramp_pos_x]
                        //Set Angle Position Along the Slope
                        angle = obj_game_logic.orig_clip[tile_ramp_asset+obj_game_logic.scr_local_angles,cube_ramp_pos_x]
                        cube_gravity = 0
                    }
            }
        else
            {
                cube_slope = 0
                tile_valid_collision_state = 0
                tile_valid_collision = 1
            }

        //Slope Factor
        if angle != 0
            {
                //Determine the direction of the player's movement based on their speed and angle
                var speed_length_x = lengthdir_x(cube_speed,angle)
                var speed_length_y = lengthdir_y(cube_speed,angle)
                var speed_rate = 0;
                var speed_multiplier = 0;
                var slope_direction = 1;

                //Determine the direction the player is pushed forward or pulled backwards
                if speed_length_x &gt; 0 and speed_length_y &lt; 0 //Running Up Slope   (Right)
                or speed_length_x &lt; 0 and speed_length_y &gt; 0 //Running Down Slope (Left)
                    slope_direction = -1;
                if speed_length_x &gt; 0 and speed_length_y &gt; 0 //Running Down Slope (Right)
                or speed_length_x &lt; 0 and speed_length_y &lt; 0 //Running Up Slope   (Left)
                    slope_direction = 1;

                if (speed_length_x &gt; 0 and speed_length_y &lt; 0) speed_rate = 0.0333; //Walking Up Slope   (Right)
                if (speed_length_x &gt; 0 and speed_length_y &gt; 0) speed_rate = 0.2166; //Walking Down Slope (Right)
                if (speed_length_x &lt; 0 and speed_length_y &lt; 0) speed_rate = 0.0333; //Walking Up Slope   (Left)
                if (speed_length_x &lt; 0 and speed_length_y &gt; 0) speed_rate = 0.2166; //Walking Down Slope (Left)

                if obj_game_logic.use_weather_conditions &gt; 0
                    speed_rate = 0.05;

                //Sliding down to the right
                if (angle &gt;= 315 or angle &lt;= 45)
                    {
                        cube_skidding_sound_timer += 1
                        if cube_skidding_sound_timer &gt;= 10
                            {
                                cube_skidding_sound_timer = 0
                                if angle &lt;= 45 cube_speed -= cube_skid;
                                if angle &gt;= 315 cube_speed += cube_skid;
                                if play_sound = 1
                                    {
                                        audio_stop_sound(snd_heavy_skidding)
                                        audio_play_sound(snd_heavy_skidding,50,false)
                                    }
                            }
                    }

                //Apply slope factor
                cube_speed+=lengthdir_x(slope_direction,angle)*speed_rate*0.80
            }

        //Check For Player's Presence
        var angle_scanner = 155;
        if obj_game_logic.xdir = -1 angle_scanner = 25;
        var angle_radius = 32;
        if point_distance(x,y,obj_game_logic.px,obj_game_logic.py) &lt; 28
            angle_radius = 0;
        var player_x = x+lengthdir_x(32,angle+angle_scanner);
        var player_y = y+lengthdir_y(32,angle+angle_scanner);
        if object_index = obj_spring_32
            {
                var player_x = x+lengthdir_x(16,angle+angle_scanner);
                var player_y = y+lengthdir_y(16,angle+angle_scanner);
            }
        if point_in_circle(obj_game_logic.universal_player_x,obj_game_logic.universal_player_y,player_x,player_y,angle_radius)
            are_we_push = 1;
        else
            are_we_push = 0;

        //Deceleration
        if (cube_slope = 1 or ground = 1) and spring_timer = 0 and are_we_push = 0
            {
                var cube_deceleration_rate = 0.25;
                if obj_game_logic.use_weather_conditions &gt; 0
                    cube_deceleration_rate = 0.05;

                if cube_speed &gt; 1 cube_speed -= cube_deceleration_rate;
                if cube_speed &lt; -1 cube_speed += cube_deceleration_rate;
                cube_gravity = 0
                if cube_speed &gt;= -1 and cube_speed &lt;= 1
                    cube_speed = 0;
            }

        //Bounce Factor
        if (angle &gt; 48 and angle &lt;= 180)
            {
                cube_speed = -3;
                if has_health = 1 cube_health -= 0.15;
                cube_jiggle_timer = 10
                if play_sound = 1 and bounce_sound_timer = 0
                    {
                        bounce_sound_timer = 30
                        if object_index != obj_spring_32
                            scr_set_screen_shake(6,3);
                        audio_stop_sound(cube_bouncing_sound_asset)
                        audio_play_sound(cube_bouncing_sound_asset,50,false)
                    }
            }
        if (angle &gt; 180 and angle &lt; 312)
            {
                cube_speed = 3;
                if has_health = 1 cube_health -= 0.15
                cube_jiggle_timer = 10
                if play_sound = 1 and bounce_sound_timer = 0
                    {
                        bounce_sound_timer = 30
                        if object_index != obj_spring_32
                            scr_set_screen_shake(6,3);
                        audio_stop_sound(cube_bouncing_sound_asset)
                        audio_play_sound(cube_bouncing_sound_asset,50,false);
                    }
            }
        //Decelerate completely if we are too slow
        if abs(cube_speed) &lt; 0.5 and spring_timer = 0 cube_speed = 0;

        if attacked &gt; 0 and attacked_allow = 0
            {
                //Create Gem Particles If Our Performance Profile Is Set To "Normal"
                if obj_game_logic.performance_profile = 1 and cube_can_shatter = 1 and instance_number(obj_destructible_particle) &lt; 16
                    {
                        scr_attack_shield_ext(x,y-76,obj_destructible_particle,0,broken_particles_0,-4  ,1,1,-4)
                        scr_attack_shield_ext(x,y-76,obj_destructible_particle,0,broken_particles_1,-2,1,1,-5.25)
                        scr_attack_shield_ext(x,y-76,obj_destructible_particle,0,broken_particles_2,-1  ,1,1,-5.625)
                        scr_attack_shield_ext(x,y-76,obj_destructible_particle,0,broken_particles_3,0   ,1,1,-7.5)
                        scr_attack_shield_ext(x,y-76,obj_destructible_particle,0,broken_particles_4,2,1,1,-6)
                    }
                if cube_timer = 0 and sprite_index = spr_mega_bomb cube_timer = 1;
                if attacked = 1
                    {
                        var attacked_multiplier = attacked_damage/2;
                        if cube_can_slide_faster = 1
                            attacked_multiplier = attacked_damage*2;
                        if obj_game_logic.px &gt;= x cube_speed = -abs(attacked_multiplier);
                        if obj_game_logic.px  &lt; x cube_speed = attacked_multiplier;
                        if sprite_index != spr_mega_bomb
                            {
                                if play_sound = 1
                                    {
                                        audio_stop_sound(cube_attacking_sound_asset)
                                        audio_play_sound(cube_attacking_sound_asset,50,false)
                                    }
                            }
                        if sprite_index = spr_minecart and obj_game_logic.performance_profile = 1
                            {
                                var ballpit_gem_id = instance_create(x+random_range(-32,32),y-tile_ID_offset,obj_minecart_gems);
                                ballpit_gem_id.gravity_speed = -3
                            }
                    }
                cube_health -= 0.25
                attacked_allow = 15
                attacked = 0
            }
        if attacked_allow &gt; 0
            attacked_allow -= 1;

        var enemy_ID = collision_line(x-28,y+4,x+28,y+4,obj_enemy_parent,false,true);

        if instance_exists(enemy_ID) and cube_gravity &gt; 6
            {
                enemy_ID.attacked = 1
                enemy_ID.attacked_damage = 40
            }

        //===============Spring Collisions===============//
        //-----------------------------------------------//

        if instance_exists(obj_spring_parent)
            {
                var spring_id = collision_point(x+(sign(spring_speed) * 36),y+spring_y_offset,obj_spring_parent,false,true);
                if instance_exists(spring_id)
                    {
                        var yes = 0;
                        switch(spring_id.sprite_index)
                            {
                                case spr_spring_0:  {cube_gravity = -9;  spring_speed = 0;    spring_angle = 90;  yes = 1; break;}
                                case spr_spring_1:  {cube_gravity = -9;  spring_speed = 9;    spring_angle = 45;  yes = 1; break;}
                                case spr_spring_2:  {cube_gravity = -9;  spring_speed = -9;   spring_angle = 135; yes = 1; break;}
                                case spr_spring_3:  {cube_gravity =  9;  spring_speed = 9;    spring_angle = 315; yes = 1; break;}
                                case spr_spring_4:  {cube_gravity = 9;   spring_speed = -9;   spring_angle = 225; yes = 1; break;}
                                case spr_spring_5:  {cube_gravity = -18; spring_speed = 0;    spring_angle = 90;  yes = 1; break;}
                                case spr_spring_6:  {cube_gravity = -18; spring_speed = -18;  spring_angle = 135; yes = 1; break;}
                                case spr_spring_7:  {cube_gravity = -18; spring_speed = 18;   spring_angle = 45;  yes = 1; break;}
                                case spr_spring_8:  {cube_gravity =  18; spring_speed = 18;   spring_angle = 315; yes = 1; break;}
                                case spr_spring_9:  {cube_gravity = 18;  spring_speed = -18;  spring_angle = 225; yes = 1; break;}
                                case spr_spring_12: {cube_gravity = 9;   spring_speed = 0;    spring_angle = 270; yes = 1; break;}
                                case spr_spring_13: {cube_gravity = 18;  spring_speed = 0;    spring_angle = 270; yes = 1; break;}
                                case spr_spring_16: {cube_gravity = -abs(cube_gravity)-1; spring_speed = 0; spring_angle = 90;  yes = 1; break;}
                                case spr_spring_19: {cube_gravity = abs(cube_gravity)+4;  spring_speed = 0; spring_angle = 270; yes = 1; break;} 
                                default: {break;}
                            }
                        if yes = 1
                            {
                                spring_offset_x = spring_id.x+16
                                spring_offset_y = spring_id.y+16
                                angle = 0
                                ground = 0
                                cube_slope = 0
                                if spring_frame = 0 
                                    {
                                        spring_frame = 0.5
                                        if play_sound = 1
                                            audio_stop_sound(character_spring)
                                            audio_play_sound(character_spring,50,false);
                                    }
                                spring_timer = 8
                            }
                    }
            }
        if instance_exists(obj_player_cube_alt)
            {
                var cube_id   = collision_point(x+(sign(spring_speed) * 36),y+spring_y_offset,obj_player_cube_alt,false,true);
                if instance_exists(cube_id)
                    {
                        cube_gravity = -abs(cube_gravity)-1;
                        spring_angle = 90;
                        if cube_id.cube_jiggle_timer &lt; 1
                            {
                                cube_id.cube_health -= 0.15
                                cube_id.cube_jiggle_timer = 10
                            }
                    }
            }
        
        if spring_speed != 0 and spring_timer = 0
            {
                var spring_sensor = tile_layer_find(surface_flats,x+(sign(spring_speed) * 8),y);
        
                if tile_exists(spring_sensor) and cube_gravity &gt; 0
                    {
                        attacked = 2
                        spring_speed = 0
                        cube_gravity = 0
                    }
            }
        if spring_timer &gt; 0
            {
                spring_timer -= 1
                cube_speed += spring_speed
            }

        if tile_exists(tile_ID)
            tile_set_position(tile_ID,x-32,y-tile_ID_offset);

        //===============Cube Rotation Lag===============//
        
        //If we are jumping, rotate player sprite back to zero
        if (ground = 0 and cube_slope = 0 and angle_a!=0)
            {
                //Prevent angle from falling to negative values.
                if angle_a&lt;0 or angle_a&gt;360 angle_a=angle;
                //Rotation logic.
                if angle_a&lt;180 and angle_a!=angle     angle_a-=4;
                if angle_a&gt;180 and angle_a!=angle     angle_a+=4;
            }
        else
            angle_a = angle;

        //Explode if we've gotten too big
        if cube_health &lt; 1.5 cube_collided = 2;
    }
//Explode if we have registered a collision with either flat surfaces, slopes, or items
if cube_collided = 2
    {
        cube_gravity = 0
        cube_visible = 0
        cube_collided = 3
        //Setup Thrown Cube Particles
        //Setup Particle Effects
        particle_frame_1  = 0     //Animation Frame for Particle 1
        particle_frame_2  = 1     //Animation Frame for Particle 2
        particle_frame_3  = 2     //Animation Frame for Particle 3
        particle_frame_4  = 1     //Animation Frame for Particle 4
        particle_frame_5  = 0     //Animation Frame for Particle 5
        particle_x_1=x; particle_y_1=y-16;
        var temp_item = spr_gem;
        var temp_object = obj_gem;
        var temp_iterate = 16
        if sprite_index = spr_mega_melon
            {
                temp_item = spr_petal_flower
                temp_object = obj_petal
                temp_iterate = 8
            }
        if room != rm_editor
            {
                if sprite_index != spr_mega_milk and sprite_index!= spr_mega_bomb
                and sprite_index != spr_mega_dumpster
                and sprite_index != spr_minecart
                    {
                        var gems = 0;
                        while(gems &lt; temp_iterate)
                            {
                                scr_attack_tile(x,y-32-(random_range(-8,8)),temp_object,0,temp_item,random_range(-2.5,2.5))
                                gems += 1
                                if gems &gt; temp_iterate break;
                            }
                    }
            }
        if sprite_index = spr_mega_crate and play_sound = 1
            {
                audio_stop_sound(snd_crate_broken)
                audio_play_sound(snd_crate_broken,50,false)
            }
        if sprite_index = spr_mega_bomb
            {
                particle_x_1=x; particle_y_1=y-16;
                cube_collided = 4
                particle_x_2=x+random_range(-48,48); particle_y_2=y+random_range(-48,48);
                particle_x_3=x+random_range(-24,24); particle_y_3=y+random_range(-24,24);
                particle_x_4=x+random_range(-48,48); particle_y_4=y+random_range(-48,48);
                particle_x_5=x+random_range(-24,24); particle_y_5=y+random_range(-24,24);
                if play_sound = 1
                    {
                        audio_stop_sound(snd_explosion)
                        audio_play_sound(snd_explosion,50,false)
                    }
                if object_index != obj_spring_32
                    scr_set_screen_shake(6,3);
            }
        else
            {
                if object_index != obj_spring_32
                    scr_set_screen_shake(6,3);
            }
        //Create Gem Particles If Our Performance Profile Is Set To "Normal"
        if obj_game_logic.performance_profile = 1 and instance_number(obj_destructible_particle) &lt; 16
            {
                scr_attack_shield_ext(x,y-76,obj_destructible_particle,0,broken_particles_0,-4  ,1,1,-4)
                scr_attack_shield_ext(x,y-76,obj_destructible_particle,0,broken_particles_1,-2,1,1,-5.25)
                scr_attack_shield_ext(x,y-76,obj_destructible_particle,0,broken_particles_2,-1  ,1,1,-5.625)
                scr_attack_shield_ext(x,y-76,obj_destructible_particle,0,broken_particles_3,0   ,1,1,-7.5)
                scr_attack_shield_ext(x,y-76,obj_destructible_particle,0,broken_particles_4,2,1,1,-6)
            }
        if sprite_index = spr_mega_milk
            {
                var flood_ball_ID = instance_create(x-32,y-32,obj_flood_ball);
                flood_ball_ID.flood_particle_sprites = spr_mega_milk_spill;
                var flood_ball_ID = instance_create(x+32,y-32,obj_flood_ball);
                flood_ball_ID.flood_particle_sprites = spr_mega_milk_spill;
                var flood_ball_ID = instance_create(x-16,y-64,obj_flood_ball);
                flood_ball_ID.flood_particle_sprites = spr_mega_milk_spill;
                var flood_ball_ID = instance_create(x+16,y-64,obj_flood_ball);
                flood_ball_ID.flood_particle_sprites = spr_mega_milk_spill;
                //Create Gem Particles If Our Performance Profile Is Set To "Normal"
                if obj_game_logic.performance_profile = 1 and instance_number(obj_destructible_particle) &lt; 16
                    {
                        scr_attack_shield_ext(x,y-32,obj_destructible_particle,0,broken_particles_0,4  ,1,1,-4)
                        scr_attack_shield_ext(x,y-32,obj_destructible_particle,0,broken_particles_1,2,1,1,-5.25)
                        scr_attack_shield_ext(x,y-32,obj_destructible_particle,0,broken_particles_2,1  ,1,1,-5.625)
                        scr_attack_shield_ext(x,y-32,obj_destructible_particle,0,broken_particles_3,0   ,1,1,-7.5)
                        scr_attack_shield_ext(x,y-32,obj_destructible_particle,0,broken_particles_4,-2,1,1,-6)
                    }
            }
        if tile_exists(tile_ID)
            tile_delete(tile_ID);
    }
if cube_collided = 3
    {
        cube_attack_timer += 1
        if cube_attack_timer = 5
            {
                cube_attack_timer = 0
                if object_index != obj_spring_32
                    scr_set_screen_shake(6,3);
                if room = rm_editor
                    {
                        instance_create(start_x,start_y,recreate_self)
                    }
                instance_destroy();
            }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Sprites &amp; Particles
if room = rm_editor
    {
        draw_sprite_ext(sprite_index,0,start_x,start_y,1,1,0,c_white,0.5);
    }
if spring_frame &gt; 0
    {
        draw_sprite_ext(spr_spring_explosion,spring_frame,spring_offset_x,spring_offset_y,1,1,spring_angle,c_white,1)
        spring_frame += 0.5
        if spring_frame &gt; 10.8 spring_frame = 0;
    }
if cube_visible = 1
    {
        draw_sprite_ext(sprite_index,cube_health,x,y+cube_float_bobbing,1,1,angle_a,c_white,1);
        if cube_float_timer &gt; 0.25  and cube_float_timer &lt; 8.8
            draw_sprite_ext(spr_water_splash_2x,cube_float_timer,x,cube_float_offset,1,1,0,c_white,1);
        if (cube_slope = 1 or ground = 1)
        and obj_game_logic.use_weather_conditions &gt; 0 and y &lt; obj_game_logic.water_height
            {
                weather_rain_particles_frame += obj_game_logic.use_weather_conditions*0.20
                if weather_rain_particles_frame &gt; 3.8
                    weather_rain_particles_frame = 0;
                draw_sprite(spr_rain_particles,weather_rain_particles_frame,x,y-sprite_height)
            }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
