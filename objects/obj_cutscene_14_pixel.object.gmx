<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_drone_head</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_enemy_floater</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()
start_x = x
start_y = y
width_x = sprite_width/2
height_y = sprite_height/2
previous_x = x
death_type = 1
    slowdown_timer = 0
    white_transition_alpha = 0
    can_die_upon_impact = 0
flash_palette = spr_drone_palette
    frame = 0
    frame_timer = 0
hsp = 0
player_offset = y
phase = 0
    state = 0
    timer = 0
    phase_timer = 0
    phase_flash = 0
    death_timer = 0
    lock_position = 0
    slowdown_timer = 0
splash_frame = 0
    splash_x = x
    splash_y = y
warning_frame = 0
    warning_x = -10000
    warning_y = y
    warning_x_1 = -10000
bubble_release_timer = 0
xdir  = -1
angle = 0
boss_enemy = 1
heart = 192
    heartmax = 192
    hp_mod = 0.26041667
    hp_target = heart
heart_bar_target = ((heart/2)-(heartmax/4))+2
heart_bar_target_2 = heart/2
stamina = 120
can_draw_healthbar = 0
white_transition_alpha = 0

//Head Floating/Bobbing
head_state = 0
head_pos = 0

//Tentacle Movements
tentacle_wave_state = 0
tentacle_wave_timer = 0
tentacle_wave_target = 160
tentacle_wave_target_right = 360

//Tentacle Links
var count = 0;
while(count &lt;= 8)
    {
        tentacle_x_start[count] = 0
            tentacle_y_start[count] = 0
            tentacle_x_end[count] = 0
            tentacle_y_end[count] = 0
            tentacle_angle[count] = 0
            tentacle_point[count] = 0
            tentacle_state[count] = 0
        count += 1
    }
tentacle_angle[0] = 225
tentacle_angle[1] = 225
tentacle_angle[2] = 225
tentacle_angle[3] = 225

tentacle_angle[4] = 315
tentacle_angle[5] = 315
tentacle_angle[6] = 315
tentacle_angle[7] = 315
//Hand Laser Cannons
laser_x_start[0] = 0
    laser_y_start[0] = 0
    laser_angle[0] = 225
    laser_point[0] = 0
    laser_state[0] = 0
laser_x_start[1] = 0
    laser_y_start[1] = 0
    laser_angle[1] = 315
    laser_point[1] = 0
    laser_state[1] = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if o.pause = 0
    {
        event_inherited()

        //Floating/Bobbing Mechanics
        if head_state = 0
            {
                head_pos = lerp(head_pos,16,0.035)
                if head_pos &gt; 8
                    head_state = 1;
            }
        if head_state = 1
            {
                head_pos = lerp(head_pos,-16,0.035)
                if head_pos &lt; -8
                    head_state = 0;
            }
        bob = head_pos

        //Tentacle Motion
        if tentacle_wave_state = 0
            {
                if tentacle_angle[0] &lt; 168
                    tentacle_wave_target = 280;
                if tentacle_angle[0] &gt; 272
                    tentacle_wave_target = 160;

                if tentacle_angle[4] &gt; 356
                    tentacle_wave_target_right = 270;
                if tentacle_angle[4] &lt; 280
                    tentacle_wave_target_right = 360;

                tentacle_angle[0] = lerp(tentacle_angle[0],tentacle_wave_target,0.025)
                tentacle_angle[4] = lerp(tentacle_angle[4],tentacle_wave_target_right,0.025)

                tentacle_wave_timer += 1
                if tentacle_wave_timer &gt; 8
                    {
                        tentacle_angle[1] = lerp(tentacle_angle[1],tentacle_angle[0],0.025)
                        tentacle_angle[5] = lerp(tentacle_angle[5],tentacle_angle[4],0.025)
                    }
                if tentacle_wave_timer &gt; 12
                    {
                        tentacle_angle[2] = lerp(tentacle_angle[2],tentacle_angle[1],0.025)
                        tentacle_angle[6] = lerp(tentacle_angle[6],tentacle_angle[5],0.025)
                    }
                if tentacle_wave_timer &gt; 16
                    {
                        tentacle_angle[3] = lerp(tentacle_angle[3],tentacle_angle[2],0.025)
                        tentacle_angle[7] = lerp(tentacle_angle[7],tentacle_angle[6],0.025)
                    }
                if tentacle_wave_timer &gt; 20
                    {
                        laser_angle[0] = lerp(laser_angle[0],tentacle_angle[3],0.025)
                        laser_angle[1] = lerp(laser_angle[1],tentacle_angle[7],0.025)
                    }
            }

        //Update Tentacle Positions (Foreground / Left)

        //Tentacle Foreground Left
        tentacle_x_start[0] = x-6
        tentacle_y_start[0] = y
        tentacle_x_end[0] = tentacle_x_start[0]+lengthdir_x(11,tentacle_angle[0])
        tentacle_y_end[0] = tentacle_y_start[0]+lengthdir_y(11,tentacle_angle[0])
        tentacle_point[0] = point_direction(tentacle_x_start[0],tentacle_y_start[0],tentacle_x_start[1],tentacle_y_start[1])
        var count = 1;
        while(count &lt;= 3)
            {
                tentacle_x_start[count] = tentacle_x_end[count-1]
                tentacle_y_start[count] = tentacle_y_end[count-1]
                tentacle_x_end[count] = tentacle_x_start[count]+lengthdir_x(11,tentacle_angle[count])
                tentacle_y_end[count] = tentacle_y_start[count]+lengthdir_y(11,tentacle_angle[count])

                tentacle_point[count] = point_direction(tentacle_x_start[count],tentacle_y_start[count],
                tentacle_x_start[count+1],tentacle_y_start[count+1])

                count += 1
            }
        //Cannon
        tentacle_point[3] = tentacle_angle[3]
        laser_x_start[0] = tentacle_x_end[3]
        laser_y_start[0] = tentacle_y_end[3]
        //Tentacle Background Right
        tentacle_x_start[4] = x+12
        tentacle_y_start[4] = y
        tentacle_x_end[4] = tentacle_x_start[4]+lengthdir_x(11,tentacle_angle[4])
        tentacle_y_end[4] = tentacle_y_start[4]+lengthdir_y(11,tentacle_angle[4])
        tentacle_point[4] = point_direction(tentacle_x_start[4],tentacle_y_start[4],tentacle_x_start[5],tentacle_y_start[5])
        var count = 5;
        while(count &lt;= 7)
            {
                tentacle_x_start[count] = tentacle_x_end[count-1]
                tentacle_y_start[count] = tentacle_y_end[count-1]
                tentacle_x_end[count] = tentacle_x_start[count]+lengthdir_x(11,tentacle_angle[count])
                tentacle_y_end[count] = tentacle_y_start[count]+lengthdir_y(11,tentacle_angle[count])

                tentacle_point[count] = point_direction(tentacle_x_start[count],tentacle_y_start[count],
                tentacle_x_start[count+1],tentacle_y_start[count+1])
                count += 1
            }
        tentacle_point[7] = tentacle_angle[7]
        laser_x_start[1] = tentacle_x_end[7]
        laser_y_start[1] = tentacle_y_end[7]
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Sprites

//Tentacles (Background / Right)
var count = 4;
while(count &lt;= 7)
    {
        draw_sprite_ext(spr_drone_links,0,tentacle_x_start[count],tentacle_y_start[count]+bob,1,1,tentacle_point[count],c_white,1)
        count += 1
    }
//Cannon
draw_sprite_ext(spr_drone_claws,0,laser_x_start[1],laser_y_start[1]+bob,1,1,laser_angle[1],c_white,1)

//Head
draw_sprite_ext(spr_drone_head,frame,x+bob_x+8,y+bob,xdir*(scale+spring_jiggle+enemy_growth),scale+enemy_growth-(spring_jiggle/3),angle+subangle,c_white,ghost_alpha)
//Tentacles (Foreground / Left)
var count = 0;
while(count &lt;= 3)
    {
        draw_sprite_ext(spr_drone_links,0,tentacle_x_start[count],tentacle_y_start[count]+bob,1,1,tentacle_point[count],c_white,1)
        count += 1
    }
//Cannon
draw_sprite_ext(spr_drone_claws,0,laser_x_start[0],laser_y_start[0]+bob,1,-1,laser_angle[0],c_white,1)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
