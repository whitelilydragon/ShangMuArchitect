<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_boost_ring_right</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-7</depth>
  <persistent>0</persistent>
  <parentName>obj_delete_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Boost Ring Parameters
o = obj_game_logic
give_item = 0
item = 0
attacked = 0
tile_mask = -1
timer = 0
angle = 0
ring_frame = 0
fof_overlay_enable = 0
spring_speed = 10.7
spring_timer = o.spring_timer_blue
spring_rotated = 0
spring_effect = 0
    frame = 0
    spring_angle = 0
    spring_scale = 1
    spring_center_x = (sprite_get_width(sprite_index)/2)
    spring_center_y = (sprite_get_height(sprite_index)/2)
player_apply_speed = 0
player_apply_gravity_speed = 0
boost_tile = tile_boost_ring_right
switch(object_index)
    {
        case obj_boost_ring_right: {boost_tile = tile_boost_ring_right; break;}
        case obj_boost_ring_left:  {boost_tile = tile_boost_ring_left; break;}
        case obj_boost_ring_up:    {boost_tile = tile_boost_ring_up; break;}
        case obj_boost_ring_down:  {boost_tile = tile_boost_ring_down; break;}
        case obj_super_boost_ring_right: {boost_tile = tile_boost_ring_right; break;}
        case obj_super_boost_ring_left:  {boost_tile = tile_boost_ring_left; break;}
        case obj_super_boost_ring_up:    {boost_tile = tile_boost_ring_up; break;}
        case obj_super_boost_ring_down:  {boost_tile = tile_boost_ring_down; break;}
    }
boost_ring_id = tile_add(boost_tile,0,0,background_get_width(boost_tile),background_get_height(boost_tile),x,y,-5)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if tile_exists(boost_ring_id)
    tile_delete(boost_ring_id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var o = obj_game_logic;

if o.pause = 0
    {
        timer += 1
        if timer &gt; 8 timer = 8;
        //if frame &gt; 0.01
        //    {
        //        frame += 0.20
        //        if frame &gt; 2.8
        //            frame = 0;
        //    }
        //Check For Collisions With Spring's Surface
        if point_in_rectangle(o.universal_player_x,o.universal_player_y,x+16,y+16,x+sprite_get_width(sprite_index)-16,y+sprite_get_height(sprite_index)-16)
        and o.user_cursor_mode = 0
        and timer = 8
            {
                timer = 0
                ring_frame = 1
                spring_effect = 1
                o.anim_current = o.anim_spring
                switch(object_index)
                    {
                        case obj_boost_ring_right: {spring_rotated = 0;   break;}
                        case obj_boost_ring_left:  {spring_rotated = 180; break;}
                        case obj_boost_ring_up:    {spring_rotated = 90;  break;}
                        case obj_boost_ring_down:  {spring_rotated = 270; break;}
                        case obj_super_boost_ring_right: {spring_rotated = 0;   break;}
                        case obj_super_boost_ring_left:  {spring_rotated = 180; break;}
                        case obj_super_boost_ring_up:    {spring_rotated = 90;  break;}
                        case obj_super_boost_ring_down:  {spring_rotated = 270; break;}
                    }
                scr_set_spring_launch(12,spring_timer,spring_rotated)
                if spring_rotated = 0
                    {
                        o.px = x+28
                        o.py = y+64
                        o.hsp = spring_speed;
                        o.gravity_speed = 0
                        player_apply_speed = 8
                    }
                if spring_rotated = 180
                    {
                        o.px = x+28
                        o.py = y+64
                        o.gravity_speed = 0
                        o.hsp = -spring_speed;
                        player_apply_speed = -8
                    }
                if spring_rotated = 270
                or spring_rotated = 90
                    {
                        o.px = x+48
                        player_apply_gravity_speed = 2
                    }
                audio_play_sound(snd_petal_shatter,50,false)
                audio_play_sound(shield_break,50,false)
                if object_index = obj_super_boost_ring_right
                or object_index = obj_super_boost_ring_left
                or object_index = obj_super_boost_ring_up
                or object_index = obj_super_boost_ring_down
                    {
                        if spring_rotated = 0
                            player_apply_speed = 16;
                        if spring_rotated = 180
                            player_apply_speed = -16;
                        scr_set_screen_shake(24,3)
                        audio_play_sound(snd_explosion,50,false)
                    }
            }
        if player_apply_speed != 0
            {
                if player_apply_speed &gt; 0
                    {
                        o.hsp = spring_speed;
                        o.gravity_speed = 0
                        player_apply_speed -= 1;
                    }
                if player_apply_speed &lt; 0
                    {
                        o.hsp = -spring_speed;
                        o.gravity_speed = 0
                        player_apply_speed += 1;
                    }
                o.anim_current = o.anim_spring
            }
        if player_apply_gravity_speed &gt; 0
            {
                o.hsp = 0;
                player_apply_gravity_speed -= 1;
            }
        if spring_effect = 1
            {
                frame += 1
                if frame = 8
                    ring_frame = 0;
                if frame &gt; 12.8
                    {
                        frame = 0
                        spring_effect = 0
                    }
            }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Sprite
draw_sprite(sprite_index,ring_frame,x,y)
if spring_effect = 1
    draw_sprite_ext(spr_carol_bike_particles,frame,x+spring_center_x,y+spring_center_y,spring_scale,spring_scale,spring_angle,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
