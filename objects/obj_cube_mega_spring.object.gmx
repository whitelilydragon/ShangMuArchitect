<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cube_mega_spring</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>0</persistent>
  <parentName>obj_delete_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Flat Surface Tiles
o = obj_game_logic

//Are We Allowed To Hold Items?
give_item = 0
item = 0
attacked = 0
tile_mask = -1

//Spring Parameters
frame = 0
spring_particle_frame = 0
spring_triggered = 0
spring_speed = 18
spring_timer = o.spring_timer_blue
spring_rotated = 90
spring_left = -9
spring_top = -16
spring_right = 42
spring_bottom = 8
spring_offset_x = 16
spring_offset_y = 0
spring_sound_id = 0
spring_strength = 0
player_axis_x = 0
player_apply_speed = 0

tile_id_left  = tile_add(mu_door_0,0,0,64,32,x-40,y-30,surface_flats);
tile_id_right = tile_add(mu_door_0,0,0,64,32,x-24,y-30,surface_flats);
tile_id_slope = tile_add(tile_fof_1,0,0,80,24,x-40,y-40,surface_slopes);

tile_set_visible(tile_id_left,false)
tile_set_visible(tile_id_right,false)
tile_set_visible(tile_id_slope,false)

tile_left_x = 0
tile_left_y = 0

tile_right_x = 0
tile_right_y = 0

tile_slope_x = 0
tile_slope_y = 0

cube_squish = 0
cube_squish_timer = 32
cube_offset_x = 0
cube_offset_y = 0
cube_width = 80
cube_height = 32

cube_target_offset = 8
cube_target_width = 80
cube_target_height = 32
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if tile_exists(tile_id_left)  tile_delete(tile_id_left);
if tile_exists(tile_id_right) tile_delete(tile_id_right);
if tile_exists(tile_id_slope) tile_delete(tile_id_slope);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Squash/Stretch Logic
if o.pause = 0
    {
        if point_in_rectangle(o.px,o.py,x-40,y-32,x+40,y)
            {
                cube_squish = 1
                cube_squish_timer = 0
            }
        else
            {
                cube_squish = 0
                cube_squish_timer += 1
            }
        if cube_squish_timer &gt; 32
            cube_squish_timer = 32;
        
        if cube_squish = 1 and o.user_cursor_mode = 0
            {
                cube_width  = lerp(cube_width ,96,0.05)
                cube_height = lerp(cube_height,8,0.05)
                cube_offset_x = lerp(cube_offset_x,-8,0.05)
                cube_offset_y = lerp(cube_offset_y,24,0.05)

                spring_strength = lerp(spring_strength,18,0.05)

                tile_left_x = lerp(tile_left_x,-8,0.05)
                tile_left_y = lerp(tile_left_y,24,0.05)
                tile_set_position(tile_id_left,(x-40)+floor(tile_left_x),(y-30)+floor(tile_left_y))
                tile_right_x = lerp(tile_right_x,8,0.05)
                tile_right_y = lerp(tile_right_y,24,0.05)
                tile_set_position(tile_id_right,(x-40)+floor(tile_right_x),(y-30)+floor(tile_right_y))
                
                tile_slope_x = lerp(tile_slope_x,-8,0.05)
                tile_slope_y = lerp(tile_slope_y,24,0.05)
                tile_set_position(tile_id_slope,(x-40)+floor(tile_slope_x),(y-40)+floor(tile_slope_y))
            }
        else
            {
                cube_width  = lerp(cube_width ,80,0.10)
                cube_height = lerp(cube_height,32,0.10)
                cube_offset_x = lerp(cube_offset_x,0,0.10)
                cube_offset_y = lerp(cube_offset_y,0,0.10)
                tile_left_x = lerp(tile_left_x,0,0.10)
                tile_left_y = lerp(tile_left_y,0,0.10)

                spring_strength = lerp(spring_strength,0,0.05)
                
                tile_set_position(tile_id_left,(x-40)+floor(tile_left_x),(y-30)+floor(tile_left_y))
                tile_right_x = lerp(tile_right_x,0,0.10)
                tile_right_y = lerp(tile_right_y,0,0.10)
                tile_set_position(tile_id_right,(x-24)+floor(tile_right_x),(y-30)+floor(tile_right_y))
        
                tile_slope_x = lerp(tile_slope_x,0,0.10)
                tile_slope_y = lerp(tile_slope_y,0,0.10)
                tile_set_position(tile_id_slope,(x-40)+floor(tile_slope_x),(y-40)+floor(tile_slope_y))
            }
        //Check For Collisions With Spring's Surface
        if (cube_squish_timer &gt; 0 and cube_squish_timer &lt; 4) and o.user_cursor_mode = 0
            {
                scr_set_spring_launch(spring_strength,spring_timer,spring_rotated)
                if cube_squish_timer = 1
                    {
                        o.hurt_invuln = 31
                        audio_stop_sound(snd_bouncy_cube)
                        audio_play_sound(snd_bouncy_cube,50,false)
                    }
            }
        if object_index = obj_cube_rogue_spring
            {
                if (cube_squish_timer &gt; 0 and cube_squish_timer &lt; 32)
                    {
                        var_x = 0;
                        var_y = 0;
                        yes = 0;
                        switch(cube_squish_timer)
                            {
                                case 14: {var_x = -8;  var_y = -16; yes = 1; break;}
                                case 20: {var_x = 12;  var_y =   8; yes = 1; break;}
                                case 26: {var_x = -48; var_y =  -8; yes = 1; break;}
                                case 32: {var_x = 32;  var_y = -16; yes = 1; break;}
                            }
                        if yes = 1
                            {
                                var bomb_ID = instance_create(x+var_x,y+var_y,obj_cube_rogue_bomb);
                                bomb_ID.detonate_for_milla = 1;
                                bomb_ID.dont_leave_decorations = 1;
                            }
                    }
            }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Sprite
draw_sprite_stretched(sprite_index,0,(x-40)+cube_offset_x,(y-32)+cube_offset_y,cube_width,cube_height)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
