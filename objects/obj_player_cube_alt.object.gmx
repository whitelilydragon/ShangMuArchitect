<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_cube_alt</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-7</depth>
  <persistent>0</persistent>
  <parentName>obj_delete_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Cube Object
frame = 6
angle = 0
xdir = 1
ground = 0
freeze = 0
start_x = x
start_y = y
offset_x = 0
offset_y = 42
cube_visible = 1
cube_sound = 1
cube_angle = 0
cube_speed = 0
cube_gravity = 0
cube_collided = 0
cube_slope = 0
cube_growth = 1
cube_jiggle = 0
cube_health = 1
cube_jiggle_scale = 0
cube_jiggle_timer = 0
cube_attack_timer = 0
cube_wall_touch_timer = 0
cube_mega_bouncy_timer = 0
cube_existential_starter_timer = 0
cube_player_hurt_timer = 0

//Are We Allowed To Hold Items?
give_item = 0
item = 0
attacked = 0
attacked_damage = 4
attacked_allow = 0

//Springs
spring_frame = 0
spring_offset_x = 0
spring_offset_y = 0
spring_angle = 0
spring_y_offset = 0

//Attack Variables
attack = 0
damage = 4
attack_range = 48               //Horizontal Hitbox Range
attack_width = 359              //Angular Hitbox Range
travel_length = 0               //Horizontal offset for Hitbox
travel_height = 0               //Vertical offset for Hitbox
attack_shape  = 0               //Shape of the hitbox (Elliptical)
attack_offset = 0               //Attack offset

//Initialize Cube Particles
particle_frame = -1
particle_frame_1 = -128
particle_frame_2 = -128
particle_frame_3 = -128
particle_frame_4 = -128
particle_frame_5 = -128
particle_x_1 = x
particle_y_1 = y-16
particle_x_2 = random_range(-18,18)
particle_y_2 = random_range(-24,12)
particle_x_3 = random_range(-18,18)
particle_y_3 = random_range(-24,12)
particle_x_4 = random_range(-18,18)
particle_y_4 = random_range(-24,12)
particle_x_5 = random_range(-18,18)
particle_y_5 = random_range(-24,12)

//Play sound
if sprite_index != spr_cube_mega_bouncy
and sprite_index != spr_cube_mega_item
and sprite_index != spr_rogue_cube
    audio_play_sound(milla_throw,50,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Physics &amp; Movement

if obj_game_logic.pause = 0

{

if cube_existential_starter_timer &lt; 600
    cube_existential_starter_timer += 1;


if cube_existential_starter_timer = 1
    {
        if obj_game_logic.hsp = 0
            {
                var cube_direction = sign(cube_speed);
                cube_speed = 0.5*cube_direction;
            }
    }

if room = rm_editor
    {
        if sprite_index != spr_cube_alt
            {
                var parent = obj_level_editor;
                if parent.use_enemy_mode_iterations = 2 freeze = 1; else freeze = 0;
                if obj_game_logic.user_cursor_mode = 0 freeze = 0;
                if parent.use_write_delay &gt; 0
                or (point_in_rectangle(parent.use_cursor_x,parent.use_cursor_y,start_x-(sprite_width/2),start_y-sprite_height,start_x+(sprite_width/2),start_y)
                and parent.user_cursor_mode = 0 and parent.use_tile_menu = 0)
                or (freeze = 1)
                    {
                        x = start_x
                        y = start_y
                        cube_gravity = 0
                    }
            }
        cube_sound = 1
        if x &lt; view_xview[view_port]-196
        or x &gt; view_xview[view_port]+view_wview[view_port]+196
            cube_sound = 0;
        if y &lt; view_yview[view_port]-196
        or y &gt; view_yview[view_port]+view_hview[view_port]+196
            cube_sound = 0;
        if obj_level_editor.use_zoom_position != 1
            cube_sound = 0
    }

//If we have collided with any surfaces, explode the cube
if cube_collided = 0 and freeze = 0
    {
        //Throw cube forward
        x += cube_speed

        if cube_mega_bouncy_timer &gt; 0
            cube_mega_bouncy_timer -= 1;

        //Check for Tiles on Layer 0. (Flat Surface Collisions)
        var cube_surface_id_bottom = tile_layer_find(surface_flats,x,y)
        var cube_surface_id_wall   = tile_layer_find(surface_flats,x+(16*sign(cube_speed)),y-16)
        //Slope Collision Sensor
        var cube_ramp_id           = tile_layer_find(surface_slopes,x,y)
        
        //Invalidate detection of hangbars and ladders
        var cube_item_bg_bottom = tile_flat_24;
        
        if tile_exists(cube_ramp_id) cube_item_bg_bottom = tile_get_background(cube_ramp_id);
        
        if cube_item_bg_bottom = spr_ladder_0
        or cube_item_bg_bottom = spr_ladder_1
        or cube_item_bg_bottom = spr_ladder_2
        or cube_item_bg_bottom = spr_ladder_3
        or cube_item_bg_bottom = spr_ladder_4
        or cube_item_bg_bottom = spr_ladder_5
        or cube_item_bg_bottom = spr_hangbar_0
        or cube_item_bg_bottom = spr_hangbar_1
        or cube_item_bg_bottom = spr_hangbar_2
        or cube_item_bg_bottom = spr_hangbar_3
        or cube_item_bg_bottom = spr_hangbar_4
        or cube_item_bg_bottom = spr_hangbar_ignore
            cube_ramp_id = -1;
        
        //---------Collisions---------//
        //----------------------------//

        if tile_exists(cube_surface_id_bottom)
            {
                y = tile_get_y(cube_surface_id_bottom)
                ground = 1
                angle = 0
            }
        else
            ground = 0;
        if tile_exists(cube_surface_id_wall)
            {
                if cube_speed &gt; 0 and cube_wall_touch_timer = 0
                    {
                        cube_speed = -abs(cube_speed)
                        if sprite_index != spr_rogue_cube cube_health -= 0.15;
                        cube_wall_touch_timer = 16
                    }
                if cube_speed &lt; 0 and cube_wall_touch_timer = 0
                    {
                        cube_speed = abs(cube_speed)
                        if sprite_index != spr_rogue_cube cube_health -= 0.15;
                        cube_wall_touch_timer = 16
                    }
            }
        if cube_wall_touch_timer &gt; 0 cube_wall_touch_timer -= 1;
        //If we have collided with the boundaries of the room, explode the cube
        if sprite_index = spr_cube_alt
            {
                if x &gt; obj_game_logic.camera_boundary_right
                or x &lt; obj_game_logic.camera_boundary_left
                or y &gt; obj_game_logic.camera_boundary_bottom
                or point_distance(x,y,obj_game_logic.px,obj_game_logic.py) &gt; 768
                    instance_destroy();
            }
        if sprite_index = spr_cube_mega_bouncy
            {
                //Shrink based on health
                cube_growth = lerp(cube_growth,cube_health,0.15)
                if cube_health &gt; 1
                    cube_health = 1;
                if cube_health &lt; 0
                    {
                        cube_collided = 4
                        particle_frame = 0
                        if cube_sound = 1
                            audio_play_sound(target_hit,50,false);
                    }
                //Stack on top of other bouncy cubes
                var landing_ID = collision_rectangle(x-12,y-16,x+12,y,obj_mega_bouncy,false,true);
                if instance_exists(landing_ID)
                    {
                        ground = 1
                        y = landing_ID.y-sprite_height
                    }
                var cube_id = collision_point(x,y+8,obj_player_cube_alt,false,true);
                //Bounce on top of mega cubes
                if instance_exists(cube_id)
                    {
                        if cube_id.object_index != obj_mega_bouncy
                        and cube_id.object_index != obj_mega_rogue_cube
                            {
                                cube_gravity = -abs(cube_gravity)-1;
                                if cube_id.cube_jiggle_timer &lt; 1
                                    {
                                        cube_id.cube_health -= 0.15
                                        cube_id.cube_jiggle_timer = 10
                                    }
                            }
                    }
                //Bounce the player backwards
                if point_in_rectangle(obj_game_logic.px,obj_game_logic.py,x-28,y-48,x+28,y+8)
                and obj_game_logic.user_cursor_mode = 0
                and cube_existential_starter_timer &gt; 8
                and cube_mega_bouncy_timer &lt;= 0
                    {
                        if obj_game_logic.wall_collision_right = 1
                        or obj_game_logic.wall_collision_left = 1
                            cube_jiggle_timer = 10;
                        else
                            {
                                if obj_game_logic.hsp &gt; 0
                                    {
                                        obj_game_logic.fling_timer = 4;
                                        obj_game_logic.fling_hsp = -6;
                                        cube_health -= 0.15;
                                        cube_mega_bouncy_timer = 30
                                        scr_set_spade_dash_disable();
                                    }
                                if obj_game_logic.hsp &lt; 0
                                    {
                                        obj_game_logic.fling_timer = 4;
                                        obj_game_logic.fling_hsp = 6;
                                        cube_health -= 0.15;
                                        cube_mega_bouncy_timer = 30
                                        scr_set_spade_dash_disable();
                                    }
                                cube_jiggle_timer = 10
                            }
                    }
            }
        //If we are colliding with a slope tile, clip to its surface based on X position and explode
        if tile_exists(cube_ramp_id)
            {    
                //Collect Background ID of the Tile
                var cube_ramp_id_debug = obj_game_logic.enemy_slopes[tile_get_background(cube_ramp_id)];
        
                //Get Player Coordinates Relative to the Tile's Origins
                var cube_ramp_pos_x=abs(tile_get_x(cube_ramp_id)-x)   //Get X
                var cube_ramp_pos_y=abs(tile_get_y(cube_ramp_id)-y)   //Get Y
        
                //If tile was not flagged as "ignore", read its collision data
                if cube_ramp_id_debug != -1
                    {
                        //Check If Cube Y is Greater Than Slope's Current Height
                        if (cube_ramp_pos_y &gt;= obj_game_logic.orig_clip[cube_ramp_id_debug,cube_ramp_pos_x])
                            {
                                cube_slope = 1
                            }
                        else
                            cube_slope = 0;
                        if obj_game_logic.orig_clip[cube_ramp_id_debug,cube_ramp_pos_x] = -1
                            cube_slope = 0;

                        if cube_slope = 1
                            {
                                y = floor(tile_get_y(cube_ramp_id))+obj_game_logic.orig_clip[cube_ramp_id_debug,cube_ramp_pos_x]
                                //Set Angle Position Along the Slope
                                angle = obj_game_logic.orig_clip[cube_ramp_id_debug+obj_game_logic.scr_local_angles,cube_ramp_pos_x]
                                cube_gravity = 0
                            }

                    }
                else
                    cube_slope = 0;
            }
        else
            cube_slope = 0;

        if cube_slope = 0 and ground = 0
            {
                //Modify cube's gravity
                y += cube_gravity
                //Provide cube's gravitational acceleration
                cube_gravity += 0.24
                angle = 0
                if cube_gravity &gt; 12 cube_gravity = 12;
            }
        //Deceleration
        if cube_slope = 1 or ground = 1
            {
                if cube_speed &gt; 1 cube_speed -= 0.25;
                if cube_speed &lt; -1 cube_speed += 0.25;
                cube_gravity = 0
                if cube_speed &gt;= -1 and cube_speed &lt;= 1
                    cube_speed = 0;
            }

        //Slope Factor
        if angle != 0
            {
                //Determine the direction of the player's movement based on their speed and angle
                var speed_length_x = lengthdir_x(cube_speed,angle)
                var speed_length_y = lengthdir_y(cube_speed,angle)
                var speed_rate = 0;
                var speed_multiplier = 0;
                var slope_direction = 1;

                //Determine the direction the player is pushed forward or pulled backwards
                if speed_length_x &gt; 0 and speed_length_y &lt; 0 //Running Up Slope   (Right)
                or speed_length_x &lt; 0 and speed_length_y &gt; 0 //Running Down Slope (Left)
                    slope_direction = -1;
                if speed_length_x &gt; 0 and speed_length_y &gt; 0 //Running Down Slope (Right)
                or speed_length_x &lt; 0 and speed_length_y &lt; 0 //Running Up Slope   (Left)
                    slope_direction = 1;

                if (speed_length_x &gt; 0 and speed_length_y &lt; 0) speed_rate = 0.0333; //Walking Up Slope   (Right)
                if (speed_length_x &gt; 0 and speed_length_y &gt; 0) speed_rate = 0.2166; //Walking Down Slope (Right)
                if (speed_length_x &lt; 0 and speed_length_y &lt; 0) speed_rate = 0.0333; //Walking Up Slope   (Left)
                if (speed_length_x &lt; 0 and speed_length_y &gt; 0) speed_rate = 0.2166; //Walking Down Slope (Left)

                //Apply slope factor
                cube_speed+=lengthdir_x(slope_direction,angle)*speed_rate*0.80
            }

        //Bounce Factor
        if (angle &gt; 48 and angle &lt;= 180)
            {
                cube_speed = -abs(cube_speed);
                if sprite_index = spr_cube_alt
                or sprite_index = spr_cube_mega_bouncy
                    cube_health -= 0.15;
                cube_jiggle_timer = 10
            }
        if (angle &gt; 180 and angle &lt; 312)
            {
                cube_speed = abs(cube_speed);
                if sprite_index = spr_cube_alt
                or sprite_index = spr_cube_mega_bouncy
                    cube_health -= 0.15;
                cube_jiggle_timer = 10
            }
        //Bounce the player backwards
        if point_distance(x,y,obj_game_logic.universal_player_x,obj_game_logic.universal_player_y) &lt; 24*cube_growth
        and cube_existential_starter_timer &gt; 8
        and cube_jiggle_timer = 0
        and obj_game_logic.user_cursor_mode = 0
        or (sprite_index = spr_cube_mega_bouncy
        //Bounce the player backwards
        and point_in_rectangle(obj_game_logic.px,obj_game_logic.py,x-28,y-48,x+28,y-20)
        and obj_game_logic.user_cursor_mode = 0
        and cube_existential_starter_timer &gt; 8
        and cube_mega_bouncy_timer &lt;= 0)
            {
                if (obj_game_logic.ground = 1 or obj_game_logic.gravity_slope = 1)
                and (obj_game_logic.xcompass = 0)
                    {
                        //if sprite_index!= spr_cube_mega_bouncy
                        //    cube_speed = abs(obj_game_logic.hsp)*sign(obj_game_logic.hsp);
                        //obj_game_logic.hsp = 6*-obj_game_logic.xdir
                        if obj_game_logic.hsp &gt; 0 or (obj_game_logic.xdir = 1 and obj_game_logic.hsp = 0)
                            {
                                obj_game_logic.fling_timer = 4;
                                obj_game_logic.fling_hsp = -6;
                                cube_mega_bouncy_timer = 30
                                scr_set_spade_dash_disable();
                            }
                        if obj_game_logic.hsp &lt; 0 or (obj_game_logic.xdir = -1 and obj_game_logic.hsp = 0)
                            {
                                obj_game_logic.fling_timer = 4;
                                obj_game_logic.fling_hsp = 6;
                                cube_mega_bouncy_timer = 30
                                scr_set_spade_dash_disable();
                            }
                        if sprite_index = spr_cube_alt
                        or sprite_index = spr_cube_mega_bouncy
                            cube_health -= 0.15;
                        cube_jiggle_timer = 10
                    }
                if (obj_game_logic.ground = 0
                and obj_game_logic.spring_rotate != 90
                and obj_game_logic.user_cursor_mode = 0
                and obj_game_logic.gravity_speed &gt; 0)
                or (obj_game_logic.xcompass != 0)
                    {
                        scr_set_spring_launch(abs(obj_game_logic.gravity_speed)+1,obj_game_logic.spring_timer_blue,90);
                        if sprite_index = spr_cube_alt
                        or sprite_index = spr_cube_mega_bouncy
                            cube_health -= 0.15;
                        cube_jiggle_timer = 10
                    }
            }
        //Decelerate completely if we are too slow
        if abs(cube_speed) &lt; 0.5 cube_speed = 0;

        if sprite_index = spr_cube_alt
        or sprite_index = spr_rogue_cube
            {
                //Bloat up or shrink based on health
                cube_growth = lerp(cube_growth,cube_health,0.15)

                if sprite_index = spr_cube_alt
                    {
                        //Shrink with time
                        cube_health -= 0.00015
                        //Shrink faster after ten seconds
                        if cube_existential_starter_timer &gt;= 598
                            cube_health -= 0.015;
        
                        //Pop if we've gotten too small
                        if cube_health &lt; 0.1
                            {
                                if cube_sound = 1
                                    audio_play_sound(target_hit,50,false);
                                instance_destroy()
                            }
                    }
                var cube_id = collision_point(x,y+8,obj_player_cube_alt,false,true);
                //Bounce on top of mega cubes
                if instance_exists(cube_id)
                    {
                        cube_gravity = -abs(cube_gravity)-1;
                        if cube_id.cube_jiggle_timer &lt; 1
                            {
                                if cube_id.object_index != obj_mega_rogue_cube
                                    cube_id.cube_health -= 0.15;
                                cube_id.cube_jiggle_timer = 10
                            }
                    }
                //Explode on all contact with enemies
                var enemy_id = collision_rectangle(x-12,y-32,x+12,y,obj_enemy_parent,false,true)
                if instance_exists(enemy_id)
                    cube_collided = 2;
            }
        if sprite_index = spr_cube_mega_item
            {
                cube_health = 3
                cube_growth = 3
                var cube_id = collision_point(x,y+8,obj_player_cube_alt,false,true);
                //Bounce on top of mega cubes
                if instance_exists(cube_id)
                    {
                        cube_gravity = -abs(cube_gravity)-1;
                        if cube_id.cube_jiggle_timer &lt; 1
                            {
                                cube_id.cube_health -= 0.15
                                cube_id.cube_jiggle_timer = 10
                            }
                    }
            }
        //Spring Collisions
        var spring_id = collision_point(x+(sign(cube_speed) * 24),y+spring_y_offset,obj_spring_0,false,true);
        
        if instance_exists(spring_id)
            {
                switch(spring_id.sprite_index)
                    {
                        case spr_spring_0:  {cube_gravity = -9;                       spring_angle = 90;  break;}
                        case spr_spring_1:  {cube_gravity = -9;  cube_speed = 9;    spring_angle = 45;  break;}
                        case spr_spring_2:  {cube_gravity = -9;  cube_speed = -9;   spring_angle = 135; break;}
                        case spr_spring_3:  {cube_gravity =  9;  cube_speed = 9;    spring_angle = 315; break;}
                        case spr_spring_4:  {cube_gravity = 9;   cube_speed = -9;   spring_angle = 225; break;}
                        case spr_spring_5:  {cube_gravity = -18;                      spring_angle = 90;  break;}
                        case spr_spring_6:  {cube_gravity = -18; cube_speed = -18;  spring_angle = 135; break;}
                        case spr_spring_7:  {cube_gravity = -18; cube_speed = 18;   spring_angle = 45;  break;}
                        case spr_spring_8:  {cube_gravity =  18; cube_speed = 18;   spring_angle = 315; break;}
                        case spr_spring_9:  {cube_gravity = 18;  cube_speed = -18;  spring_angle = 225; break;}
                        case spr_spring_10: {cube_speed = 9;                         spring_angle = 0;   break;}
                        case spr_spring_11: {cube_speed = -9;                        spring_angle = 180; break;}
                        case spr_spring_12: {cube_gravity = 9;                        spring_angle = 270; break;}
                        case spr_spring_13: {cube_gravity = 18;                       spring_angle = 270; break;}
                        case spr_spring_14: {cube_speed = 18;                        spring_angle = 0;   break;}
                        case spr_spring_15: {cube_speed = -18;                       spring_angle = 180; break;}
                        case spr_spring_16: {cube_gravity = -abs(cube_gravity)-1;    spring_angle = 90;  break;}
                        case spr_spring_19: {cube_gravity = abs(cube_gravity)+4;     spring_angle = 270; break;}
                        //Green Springs
                        case spr_spring_24: {cube_gravity = -4.5;                  spring_angle = 90;  break;}
                        case spr_spring_25: {cube_speed = 4.5;                     spring_angle = 0;   break;}
                        case spr_spring_26: {cube_speed = -4.5;                    spring_angle = 180; break;}
                        case spr_spring_27: {cube_gravity = 4.5;                   spring_angle = 270; break;}
                        //Spike Springs
                        case spr_spring_28: {cube_gravity = -9;                    spring_angle = 90;  break;}
                        case spr_spring_29: {cube_speed = 9;                       spring_angle = 0;   break;}
                        case spr_spring_30: {cube_speed = -9;                      spring_angle = 180; break;}
                        case spr_spring_31: {cube_gravity = 9;                     spring_angle = 270; break;}
                        default: {break;}
                    }
                spring_offset_x = spring_id.x+16
                spring_offset_y = spring_id.y+16
                //Take Damage From Spike Springs
                if (spring_id.sprite_index = spr_spring_28
                or  spring_id.sprite_index = spr_spring_29
                or  spring_id.sprite_index = spr_spring_30
                or  spring_id.sprite_index = spr_spring_31)
                and (cube_jiggle_timer = 0)
                    {
                        cube_jiggle_timer = 10
                        if cube_sound = 1
                            audio_play_sound(snd_enemy_hit,50,false);
                    }
                if spring_frame = 0 
                    {
                        y -= 2
                        spring_frame = 0.5
                        if cube_sound = 1
                            audio_play_sound(character_spring,50,false);
                    }
            }

        //Jiggle if we've gotten bounced off of
        if cube_jiggle_timer &gt; 0
            {
                cube_jiggle_timer -= 0.5
                if cube_jiggle_timer = 9.5
                    {
                        if cube_sound = 1
                            audio_play_sound(snd_bouncy_cube,50,false);
                    }
                switch(cube_jiggle_timer)
                    {
                        case 9: {cube_jiggle_scale = 0.5;  break;}
                        case 6: {cube_jiggle_scale = 0.15; break;}
                        case 4: {cube_jiggle_scale = 0.65; break;}
                        case 3: {cube_jiggle_scale = 0.25; break;}
                        case 2: {cube_jiggle_scale = 0.45; break;}
                        case 1: {cube_jiggle_scale =    0; break;}
                    }
            }
        cube_jiggle = lerp(cube_jiggle,cube_jiggle_scale,0.5)

        //Explode if we've gotten too big
        if cube_health &gt; 3 cube_collided = 2;

    }
//Explode if we have registered a collision with either flat surfaces, slopes, or items
if cube_collided = 2
    {
        cube_gravity = 0
        cube_visible = 0
        if sprite_index = spr_cube_mega_bouncy
            {
                cube_collided = 4
                particle_frame = 0
                if cube_sound = 1
                    audio_play_sound(target_hit,50,false);
            }
        //Setup Thrown Cube Particles
        if sprite_index = spr_cube_alt
        or sprite_index = spr_rogue_cube
            {
                cube_collided = 3;
                //Setup Particle Effects
                particle_frame_1  = 0     //Animation Frame for Particle 1
                particle_frame_2  = 1     //Animation Frame for Particle 2
                particle_frame_3  = 2     //Animation Frame for Particle 3
                particle_frame_4  = 1     //Animation Frame for Particle 4
                particle_frame_5  = 0     //Animation Frame for Particle 5
                particle_x_1=x; particle_y_1=y-16;
                particle_x_2=x+random_range(-24,24); particle_y_2=y+random_range(-24,24);
                particle_x_3=x+random_range(-12,12); particle_y_3=y+random_range(-12,12);
                particle_x_4=x+random_range(-24,24); particle_y_4=y+random_range(-24,24);
                particle_x_5=x+random_range(-12,12); particle_y_5=y+random_range(-12,12);
                if cube_sound = 1
                    audio_play_sound(snd_explosion,50,false);
                scr_set_screen_shake(32,2)
            }
    }
if cube_collided = 3
    {
        cube_attack_timer += 1
        cube_player_hurt_timer += 1
        if cube_attack_timer = 5
            {
                var attack_ID = collision_rectangle(x-(24*cube_growth),y-(48*cube_growth),x+(24*cube_growth),y+24,obj_enemy_parent,false,true);
                if attack_ID != noone and obj_game_logic.pause_logic = 0
                    {
                        if attack_ID.alpha = 0
                            {
                                attack_ID.attacked = 1;
                                attack_ID.attacked_damage = 3*cube_health;
                            }
                    }
                var mud_ID_check = collision_rectangle(x-24*cube_growth,y-48*cube_growth,x+24*cube_growth,y+24,obj_water_cube,false,true);
                if instance_exists(mud_ID_check)
                    {
                        if instance_number(obj_flood_ball) &lt; 4
                            {
                                instance_create(random_range(mud_ID_check.x,mud_ID_check.x+32),mud_ID_check.y+64,obj_flood_ball)
                                instance_create(random_range(mud_ID_check.x+96,mud_ID_check.x+64),y+128,obj_flood_ball)
                            }
                        if obj_game_logic.performance_profile = 1 and instance_number(obj_destructible_particle) &lt; 16
                            {
                                scr_attack_shield_ext(mud_ID_check.x+64,mud_ID_check.y+64,obj_destructible_particle,0,spr_flood_balls,-4  ,1,1,-4)
                                scr_attack_shield_ext(mud_ID_check.x+64,mud_ID_check.y+64,obj_destructible_particle,0,spr_flood_balls,-2,1,1,-5.25)
                                scr_attack_shield_ext(mud_ID_check.x+64,mud_ID_check.y+64,obj_destructible_particle,0,spr_flood_balls,-1  ,1,1,-5.625)
                                scr_attack_shield_ext(mud_ID_check.x+64,mud_ID_check.y+64,obj_destructible_particle,0,spr_flood_balls,0   ,1,1,-7.5)
                                scr_attack_shield_ext(mud_ID_check.x+64,mud_ID_check.y+64,obj_destructible_particle,0,spr_flood_balls,2,1,1,-6)
                            }
                    }
                var mud_ID_check = collision_rectangle(x-24*cube_growth,y-48*cube_growth,x+24*cube_growth,y+24,obj_mud_water,false,true);
                if instance_exists(mud_ID_check)
                    {
                        if mud_ID_check.editor_mode_timer &lt;= 0
                            {
                                if instance_number(obj_mud_ball) &lt; 4
                                    {
                                        instance_create(random_range(mud_ID_check.x,mud_ID_check.x+32),mud_ID_check.y+64,obj_mud_ball)
                                        instance_create(random_range(mud_ID_check.x+96,mud_ID_check.x+64),y+128,obj_mud_ball)
                                    }
                                if obj_game_logic.performance_profile = 1 and instance_number(obj_destructible_particle) &lt; 16
                                    {
                                        scr_attack_shield_ext(mud_ID_check.x+64,mud_ID_check.y+64,obj_destructible_particle,0,spr_mud_balls,-4  ,1,1,-4)
                                        scr_attack_shield_ext(mud_ID_check.x+64,mud_ID_check.y+64,obj_destructible_particle,0,spr_mud_balls,-2,1,1,-5.25)
                                        scr_attack_shield_ext(mud_ID_check.x+64,mud_ID_check.y+64,obj_destructible_particle,0,spr_mud_balls,-1  ,1,1,-5.625)
                                        scr_attack_shield_ext(mud_ID_check.x+64,mud_ID_check.y+64,obj_destructible_particle,0,spr_mud_balls,0   ,1,1,-7.5)
                                        scr_attack_shield_ext(mud_ID_check.x+64,mud_ID_check.y+64,obj_destructible_particle,0,spr_mud_balls,2,1,1,-6)
                                    }
                                if room != rm_editor
                                    instance_destroy(mud_ID_check);
                                else
                                    mud_ID_check.editor_mode_timer = 60;
                            }
                    }
                var mud_ID_check = collision_rectangle(x-24*cube_growth,y-48*cube_growth,x+24*cube_growth,y+24,obj_mud_block,false,true);
                if instance_exists(mud_ID_check)
                    {
                        if mud_ID_check.editor_mode_timer &lt;= 0
                            {
                                if instance_number(obj_mud_ball) &lt; 4
                                    {
                                        instance_create(random_range(mud_ID_check.x,mud_ID_check.x+16),mud_ID_check.y+32,obj_mud_ball)
                                        instance_create(random_range(mud_ID_check.x+16,mud_ID_check.x+32),y+32,obj_mud_ball)
                                    }
                                if obj_game_logic.performance_profile = 1 and instance_number(obj_destructible_particle) &lt; 16
                                    {
                                        scr_attack_shield_ext(mud_ID_check.x+32,mud_ID_check.y+32,obj_destructible_particle,0,spr_mud_balls,-4  ,1,1,-4)
                                        scr_attack_shield_ext(mud_ID_check.x+32,mud_ID_check.y+32,obj_destructible_particle,0,spr_mud_balls,-2,1,1,-5.25)
                                        scr_attack_shield_ext(mud_ID_check.x+32,mud_ID_check.y+32,obj_destructible_particle,0,spr_mud_balls,-1  ,1,1,-5.625)
                                        scr_attack_shield_ext(mud_ID_check.x+32,mud_ID_check.y+32,obj_destructible_particle,0,spr_mud_balls,0   ,1,1,-7.5)
                                        scr_attack_shield_ext(mud_ID_check.x+32,mud_ID_check.y+32,obj_destructible_particle,0,spr_mud_balls,2,1,1,-6)
                                    }
                                if room != rm_editor
                                    instance_destroy(mud_ID_check);
                                else
                                    mud_ID_check.editor_mode_timer = 60;
                            }
                    }
                var mud_ID_check = collision_rectangle(x-24*cube_growth,y-48*cube_growth,x+24*cube_growth,y+24,obj_mud_cube,false,true);
                if instance_exists(mud_ID_check)
                    {
                        if mud_ID_check.editor_mode_timer &lt;= 0
                            {
                                if instance_number(obj_mud_ball) &lt; 4
                                    {
                                        instance_create(random_range(mud_ID_check.x,mud_ID_check.x+32),mud_ID_check.y+64,obj_mud_ball)
                                        instance_create(random_range(mud_ID_check.x+96,mud_ID_check.x+64),y+128,obj_mud_ball)
                                    }
                                if obj_game_logic.performance_profile = 1 and instance_number(obj_destructible_particle) &lt; 16
                                    {
                                        scr_attack_shield_ext(mud_ID_check.x+64,mud_ID_check.y+64,obj_destructible_particle,0,spr_mud_balls,-4  ,1,1,-4)
                                        scr_attack_shield_ext(mud_ID_check.x+64,mud_ID_check.y+64,obj_destructible_particle,0,spr_mud_balls,-2,1,1,-5.25)
                                        scr_attack_shield_ext(mud_ID_check.x+64,mud_ID_check.y+64,obj_destructible_particle,0,spr_mud_balls,-1  ,1,1,-5.625)
                                        scr_attack_shield_ext(mud_ID_check.x+64,mud_ID_check.y+64,obj_destructible_particle,0,spr_mud_balls,0   ,1,1,-7.5)
                                        scr_attack_shield_ext(mud_ID_check.x+64,mud_ID_check.y+64,obj_destructible_particle,0,spr_mud_balls,2,1,1,-6)
                                    }
                                if room != rm_editor
                                    instance_destroy(mud_ID_check);
                                else
                                    mud_ID_check.editor_mode_timer = 60;
                            }
                    }
                cube_attack_timer = 0
                scr_set_screen_shake(32,2)
            }

        var attack_ID = collision_rectangle(x-24*cube_growth,y-24*cube_growth,x+24*cube_growth,y+24,obj_destructible,false,true);
        if attack_ID != noone and obj_game_logic.pause_logic = 0
            attack_ID.attacked = 1;
        if point_distance(x,y,obj_game_logic.universal_player_x,obj_game_logic.universal_player_y) &lt; 72
        and obj_game_logic.hurt[0] = 0 and cube_player_hurt_timer &lt; 5
            {
                obj_game_logic.hurt[0] = 1
                obj_game_logic.hurt[3] = 2
            }
        var attack_ID = collision_rectangle(x-24*cube_growth,y-48*cube_growth,x+24*cube_growth,y+24,obj_player_cube_alt,false,true);
        if attack_ID != noone
            {
                if attack_ID.cube_jiggle_timer = 0
                    {
                        attack_ID.cube_jiggle_timer = 10
                        attack_ID.cube_health += 0.25
                    }
            }
    }

//----------Thrown Cube----------//
//-----------Particles-----------//

if particle_frame &gt; -1
    {
        particle_frame += 1;
        //Reset Particle Animation Frames
        if particle_frame&gt;18.8
            {
                if room = rm_editor
                    {
                        if sprite_index = spr_cube_mega_item
                            instance_create(start_x,start_y,obj_mega_cube);
                        if sprite_index = spr_cube_mega_bouncy
                            instance_create(start_x,start_y,obj_mega_bouncy); 
                    }
                instance_destroy()
            }
    }

//   Particle System   //
//=====================//
//Iterate Particle Animation Frames
if particle_frame_1!=-128 particle_frame_1+=0.12;
if particle_frame_2!=-128 particle_frame_2+=0.12;
if particle_frame_3!=-128 particle_frame_3+=0.12;
if particle_frame_4!=-128 particle_frame_4+=0.12;
if particle_frame_5!=-128 particle_frame_5+=0.12;
//Reset Particle Animation Frames
if particle_frame_1 &gt; 6.8 instance_destroy();

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Sprites &amp; Particles
if spring_frame &gt; 0
    {
        draw_sprite_ext(spr_spring_explosion,spring_frame,spring_offset_x,spring_offset_y,1,1,spring_angle,c_white,1)
        spring_frame += 0.5
        if spring_frame &gt; 10.8 spring_frame = 0;
    }
if cube_visible = 1
    {
        if sprite_index = spr_cube_alt
            {
                if cube_growth &lt;= 1
                    draw_sprite_ext(sprite_index,frame,x,y,cube_growth+cube_jiggle,cube_growth-(cube_jiggle/3),angle,c_white,1);
                else
                    draw_sprite_ext(spr_cube_alt_3x,frame,x,y,(cube_growth/3)+cube_jiggle,(cube_growth/3)-(cube_jiggle/3),angle,c_white,1);
            }
        else
            {
                if room = rm_editor
                    draw_sprite_ext(sprite_index,0,start_x,start_y,1,1,0,c_white,0.5);
            }
        if sprite_index = spr_cube_mega_item
            {
                draw_sprite_ext(sprite_index,frame,x,y,1+cube_jiggle,1-(cube_jiggle/3),angle,c_white,1);
            }
        if sprite_index = spr_cube_mega_bouncy
            {
                draw_sprite_ext(sprite_index,frame,x,y,cube_growth+cube_jiggle,1-(cube_jiggle/3),angle,c_white,1);
            }
        if sprite_index = spr_rogue_cube
            {
                if cube_growth &lt;= 1
                    draw_sprite_ext(spr_rogue_cube,frame,x,y,cube_growth+cube_jiggle,cube_growth-(cube_jiggle/3),angle,c_white,1);
                else
                    draw_sprite_ext(spr_rogue_cube_3x,frame,x,y,(cube_growth/3)+cube_jiggle,(cube_growth/3)-(cube_jiggle/3),angle,c_white,1);
            }
    }

//Draw Explosion Particles
if particle_frame &gt; -1 draw_sprite(spr_cube_pop_large,particle_frame,x,y);
//Draw Phantom Cube Particles
if particle_frame_1&gt;=0 and particle_frame_1&lt;=6.8
    {
        draw_sprite(spr_explosion_0,particle_frame_1,particle_x_1,particle_y_1);
        draw_sprite(spr_explosion_0,particle_frame_1-0.12,particle_x_1+48,particle_y_1-48);
        draw_sprite(spr_explosion_0,particle_frame_1-0.12,particle_x_1+64,particle_y_1-96);
    }
if particle_frame_2&gt;=0 and particle_frame_2&lt;=6.8
    {
        draw_sprite(spr_explosion_0,particle_frame_2,particle_x_2,particle_y_2);
        draw_sprite(spr_explosion_0,particle_frame_2-0.12,particle_x_2-32,particle_y_2-24);
        draw_sprite(spr_explosion_0,particle_frame_2-0.12,particle_x_2+32,particle_y_2-64);
    }
if particle_frame_3&gt;=0 and particle_frame_3&lt;=6.8
    {
        draw_sprite(spr_explosion_0,particle_frame_3,particle_x_3,particle_y_3);
        draw_sprite(spr_explosion_0,particle_frame_3-0.12,particle_x_3-24,particle_y_3-64);
        draw_sprite(spr_explosion_0,particle_frame_3-0.12,particle_x_3+64,particle_y_3-64);
    }
if particle_frame_4&gt;=0 and particle_frame_4&lt;=6.8
    {
        draw_sprite(spr_explosion_0,particle_frame_4,particle_x_4,particle_y_4);
        draw_sprite(spr_explosion_0,particle_frame_4-0.12,particle_x_4-16,particle_y_4-48);
        draw_sprite(spr_explosion_0,particle_frame_4-0.12,particle_x_4+32,particle_y_4-48);
    }
if particle_frame_5&gt;=0 and particle_frame_5&lt;=6.8
    {
        draw_sprite(spr_explosion_0,particle_frame_5,particle_x_5,particle_y_5);
        draw_sprite(spr_explosion_0,particle_frame_5-0.12,particle_x_5-32,particle_y_5-64);
        draw_sprite(spr_explosion_0,particle_frame_5-0.12,particle_x_5+32,particle_y_5-64);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
